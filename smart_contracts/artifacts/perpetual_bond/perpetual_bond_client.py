# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "asset_transfer(address,address,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pay_coupon(address,byte[])(uint64,uint64,byte[])": {
            "structs": {
                "output": {
                    "name": "PaymentResult",
                    "elements": [
                        [
                            "amount",
                            "uint64"
                        ],
                        [
                            "timestamp",
                            "uint64"
                        ],
                        [
                            "context",
                            "byte[]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_interest_rate(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "CurrentUnitsValue",
                    "elements": [
                        [
                            "units_value",
                            "uint64"
                        ],
                        [
                            "accrued_interest",
                            "uint64"
                        ],
                        [
                            "day_count_factor",
                            "(uint64,uint64)"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_payment_amount(address)(uint64,uint64)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "PaymentAmounts",
                    "elements": [
                        [
                            "interest",
                            "uint64"
                        ],
                        [
                            "principal",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "CouponsInfo",
                    "elements": [
                        [
                            "total_coupons",
                            "uint64"
                        ],
                        [
                            "due_coupons",
                            "uint64"
                        ],
                        [
                            "next_coupon_due_date",
                            "uint64"
                        ],
                        [
                            "day_count_factor",
                            "(uint64,uint64)"
                        ],
                        [
                            "all_due_coupons_paid",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_time_periods()(uint64,uint64)[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void": {
            "structs": {
                "metadata": {
                    "name": "AssetMetadata",
                    "elements": [
                        [
                            "contract_type",
                            "uint8"
                        ],
                        [
                            "calendar",
                            "uint8"
                        ],
                        [
                            "business_day_convention",
                            "uint8"
                        ],
                        [
                            "end_of_month_convention",
                            "uint8"
                        ],
                        [
                            "prepayment_effect",
                            "uint8"
                        ],
                        [
                            "penalty_type",
                            "uint8"
                        ],
                        [
                            "prospectus_hash",
                            "byte[32]"
                        ],
                        [
                            "prospectus_url",
                            "string"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "asset_config(uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_secondary_time_events(uint64[])(uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "SecondaryMarketSchedule",
                    "elements": [
                        [
                            "secondary_market_opening_date",
                            "uint64"
                        ],
                        [
                            "secondary_market_closure_date",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assign_role(address,uint8,byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "revoke_role(address,uint8)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "open_account(address,address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "close_account(address)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "primary_distribution(address,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_asset_suspension(bool)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_account_suspension(address,bool)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_default_status(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "AssetInfo",
                    "elements": [
                        [
                            "denomination_asset_id",
                            "uint64"
                        ],
                        [
                            "settlement_asset_id",
                            "uint64"
                        ],
                        [
                            "outstanding_principal",
                            "uint64"
                        ],
                        [
                            "unit_value",
                            "uint64"
                        ],
                        [
                            "day_count_convention",
                            "uint8"
                        ],
                        [
                            "interest_rate",
                            "uint16"
                        ],
                        [
                            "total_supply",
                            "uint64"
                        ],
                        [
                            "circulating_supply",
                            "uint64"
                        ],
                        [
                            "primary_distribution_opening_date",
                            "uint64"
                        ],
                        [
                            "primary_distribution_closure_date",
                            "uint64"
                        ],
                        [
                            "issuance_date",
                            "uint64"
                        ],
                        [
                            "maturity_date",
                            "uint64"
                        ],
                        [
                            "suspended",
                            "bool"
                        ],
                        [
                            "performance",
                            "uint8"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_account_info(address)(address,uint64,uint64,uint64,bool)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "AccountInfo",
                    "elements": [
                        [
                            "payment_address",
                            "address"
                        ],
                        [
                            "units",
                            "uint64"
                        ],
                        [
                            "unit_value",
                            "uint64"
                        ],
                        [
                            "paid_coupons",
                            "uint64"
                        ],
                        [
                            "suspended",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_time_events()uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_secondary_market_schedule()uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "AssetMetadata",
                    "elements": [
                        [
                            "contract_type",
                            "uint8"
                        ],
                        [
                            "calendar",
                            "uint8"
                        ],
                        [
                            "business_day_convention",
                            "uint8"
                        ],
                        [
                            "end_of_month_convention",
                            "uint8"
                        ],
                        [
                            "prepayment_effect",
                            "uint8"
                        ],
                        [
                            "penalty_type",
                            "uint8"
                        ],
                        [
                            "prospectus_hash",
                            "byte[32]"
                        ],
                        [
                            "prospectus_url",
                            "string"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMucGVycGV0dWFsX2JvbmQuY29udHJhY3QuUGVycGV0dWFsQm9uZC5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgOCAxMDAgNDQ4IDEwMDAwIDg2NDAwIDIwMAogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4NTIzMzMwMjMgInN0YXR1cyIgImNpcmN1bGF0aW5nX3VuaXRzIiAiaXNzdWFuY2VfZGF0ZSIgInNldHRsZW1lbnRfYXNzZXRfaWQiICJpbnRlcmVzdF9yYXRlIiAweDAwMDAwMDAwMDAwMDAwMDAgInRvdGFsX2NvdXBvbnMiICJwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUiICJtYXR1cml0eV9kYXRlIiAweDAwICJ1bml0X3ZhbHVlIiAiZGF5X2NvdW50X2NvbnZlbnRpb24iICJ0b3RhbF91bml0cyIgInNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlIiAic2Vjb25kYXJ5X21hcmtldF9jbG9zdXJlX2RhdGUiICJjb3Vwb25fcGVyaW9kIiAweDUyMzIzMDIzICJkZW5vbWluYXRpb25fYXNzZXRfaWQiICJwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9jbG9zdXJlX2RhdGUiICJzdXNwZW5kZWQiICJkZWZhdWx0ZWQiICJwYWlkX2NvdXBvbl91bml0cyIgMHg3NDY5NmQ2NTUwNjU3MjY5NmY2NDczICJtZXRhZGF0YSIgMHg1MjM4MzAyMyAweDc0Njk2ZDY1NDU3NjY1NmU3NDczIDB4NTIzNzMwMjMgMHg1MjM2MzAyMyAweDUyMzUzMDIzIDB4NTIzNDMwMjMgMHgwMDAwIDB4NjM2Zjc1NzA2ZjZlNTI2MTc0NjU3MyAweDA2ODEwMQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NDEtNDIKICAgIC8vICMgUm9sZSBCYXNlZCBBY2Nlc3MgQ29udHJvbAogICAgLy8gc2VsZi5hcnJhbmdlciA9IEdsb2JhbFN0YXRlKEFjY291bnQoKSwga2V5PWNzdC5QUkVGSVhfSURfQVJSQU5HRVIpCiAgICBieXRlYyAxOCAvLyAweDUyMzIzMDIzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1OS02MAogICAgLy8gIyBBc3NldCBDb25maWd1cmF0aW9uCiAgICAvLyBzZWxmLmRlbm9taW5hdGlvbl9hc3NldF9pZCA9IFVJbnQ2NCgpCiAgICBieXRlYyAxOSAvLyAiZGVub21pbmF0aW9uX2Fzc2V0X2lkIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2MQogICAgLy8gc2VsZi5zZXR0bGVtZW50X2Fzc2V0X2lkID0gVUludDY0KCkKICAgIGJ5dGVjIDUgLy8gInNldHRsZW1lbnRfYXNzZXRfaWQiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYyCiAgICAvLyBzZWxmLnVuaXRfdmFsdWUgPSBVSW50NjQoKQogICAgYnl0ZWMgMTIgLy8gInVuaXRfdmFsdWUiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYzCiAgICAvLyBzZWxmLmRheV9jb3VudF9jb252ZW50aW9uID0gVUludDY0KCkKICAgIGJ5dGVjIDEzIC8vICJkYXlfY291bnRfY29udmVudGlvbiIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjUtNjYKICAgIC8vICMgTWV0YWRhdGEKICAgIC8vIHNlbGYubWV0YWRhdGEgPSBCeXRlcygpCiAgICBieXRlYyAyNSAvLyAibWV0YWRhdGEiCiAgICBwdXNoYnl0ZXMgMHgKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2OC02OQogICAgLy8gIyBTdXBwbHkKICAgIC8vIHNlbGYudG90YWxfdW5pdHMgPSBVSW50NjQoKQogICAgYnl0ZWMgMTQgLy8gInRvdGFsX3VuaXRzIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3MAogICAgLy8gc2VsZi5jaXJjdWxhdGluZ191bml0cyA9IFVJbnQ2NCgpCiAgICBieXRlY18zIC8vICJjaXJjdWxhdGluZ191bml0cyIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzItNzMKICAgIC8vICMgSW50ZXJlc3QKICAgIC8vIHNlbGYuaW50ZXJlc3RfcmF0ZSA9IFVJbnQ2NCgpCiAgICBieXRlYyA2IC8vICJpbnRlcmVzdF9yYXRlIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3NwogICAgLy8gc2VsZi50b3RhbF9jb3Vwb25zID0gVUludDY0KCkKICAgIGJ5dGVjIDggLy8gInRvdGFsX2NvdXBvbnMiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjgyCiAgICAvLyBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX29wZW5pbmdfZGF0ZSA9IFVJbnQ2NCgpCiAgICBieXRlYyA5IC8vICJwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjgzCiAgICAvLyBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX2Nsb3N1cmVfZGF0ZSA9IFVJbnQ2NCgpCiAgICBieXRlYyAyMCAvLyAicHJpbWFyeV9kaXN0cmlidXRpb25fY2xvc3VyZV9kYXRlIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4NAogICAgLy8gc2VsZi5pc3N1YW5jZV9kYXRlID0gVUludDY0KCkKICAgIGJ5dGVjIDQgLy8gImlzc3VhbmNlX2RhdGUiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojg1CiAgICAvLyBzZWxmLnNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlID0gVUludDY0KCkKICAgIGJ5dGVjIDE1IC8vICJzZWNvbmRhcnlfbWFya2V0X29wZW5pbmdfZGF0ZSIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6ODYKICAgIC8vIHNlbGYuc2Vjb25kYXJ5X21hcmtldF9jbG9zdXJlX2RhdGUgPSBVSW50NjQoKQogICAgYnl0ZWMgMTYgLy8gInNlY29uZGFyeV9tYXJrZXRfY2xvc3VyZV9kYXRlIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4NwogICAgLy8gc2VsZi5tYXR1cml0eV9kYXRlID0gVUludDY0KCkKICAgIGJ5dGVjIDEwIC8vICJtYXR1cml0eV9kYXRlIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4OS05MAogICAgLy8gIyBTdGF0dXMKICAgIC8vIHNlbGYuc3RhdHVzID0gVUludDY0KGNmZy5TVEFUVVNfRU1QVFkpCiAgICBieXRlY18yIC8vICJzdGF0dXMiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjkxCiAgICAvLyBzZWxmLnN1c3BlbmRlZCA9IFVJbnQ2NCgpCiAgICBieXRlYyAyMSAvLyAic3VzcGVuZGVkIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo5MgogICAgLy8gc2VsZi5kZWZhdWx0ZWQgPSBVSW50NjQoKQogICAgYnl0ZWMgMjIgLy8gImRlZmF1bHRlZCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjM1LTM2CiAgICAvLyAjIFN0YXRlIHNjaGVtYSB2YWxpZGF0aW9uCiAgICAvLyBhc3NlcnQgVHhuLmdsb2JhbF9udW1fYnl0ZV9zbGljZSA9PSBjZmcuR0xPQkFMX0JZVEVTLCBlcnIuV1JPTkdfR0xPQkFMX0JZVEVTCiAgICB0eG4gR2xvYmFsTnVtQnl0ZVNsaWNlCiAgICBwdXNoaW50IDIgLy8gMgogICAgPT0KICAgIGFzc2VydCAvLyBXcm9uZyBHbG9iYWwgQnl0ZXMgYWxsb2NhdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjM3CiAgICAvLyBhc3NlcnQgVHhuLmdsb2JhbF9udW1fdWludCA9PSBjZmcuR0xPQkFMX1VJTlRTLCBlcnIuV1JPTkdfR0xPQkFMX1VJTlRTCiAgICB0eG4gR2xvYmFsTnVtVWludAogICAgcHVzaGludCAxOSAvLyAxOQogICAgPT0KICAgIGFzc2VydCAvLyBXcm9uZyBHbG9iYWwgVUludHMgYWxsb2NhdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjM4CiAgICAvLyBhc3NlcnQgVHhuLmxvY2FsX251bV9ieXRlX3NsaWNlID09IGNmZy5MT0NBTF9CWVRFUywgZXJyLldST05HX0xPQ0FMX0JZVEVTCiAgICB0eG4gTG9jYWxOdW1CeXRlU2xpY2UKICAgICEKICAgIGFzc2VydCAvLyBXcm9uZyBMb2NhbCBCeXRlcyBhbGxvY2F0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzkKICAgIC8vIGFzc2VydCBUeG4ubG9jYWxfbnVtX3VpbnQgPT0gY2ZnLkxPQ0FMX1VJTlRTLCBlcnIuV1JPTkdfTE9DQUxfVUlOVFMKICAgIHR4biBMb2NhbE51bVVpbnQKICAgICEKICAgIGFzc2VydCAvLyBXcm9uZyBMb2NhbCBVSW50cyBhbGxvY2F0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6NDEtNDIKICAgIC8vICMgQ291cG9ucwogICAgLy8gc2VsZi5jb3Vwb25fcGVyaW9kID0gVUludDY0KCkKICAgIGJ5dGVjIDE3IC8vICJjb3Vwb25fcGVyaW9kIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6NDMKICAgIC8vIHNlbGYucGFpZF9jb3Vwb25fdW5pdHMgPSBVSW50NjQoKQogICAgYnl0ZWMgMjMgLy8gInBhaWRfY291cG9uX3VuaXRzIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxOS0yNwogICAgLy8gY2xhc3MgUGVycGV0dWFsQm9uZCgKICAgIC8vICAgICBCYXNlREFzYSwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9Y2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9Y2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMjgKICAgIHB1c2hieXRlc3MgMHg0ZmQ2YTNjYyAweDhjZjE0YjUxIDB4ODBlNTFlOWYgMHg0NDM2M2Q0OSAweDY3ZGI0ZjIwIDB4ZjZhOTZjOGQgMHgyMjliNzA2ZiAweDNmMGVmYzZjIDB4ZDNhNGQ2YWIgMHgxZDZmYzI1NSAweGZlZjc0NTY3IDB4YjhmYzEzOTAgMHgzZDQzZDFmMCAweGViZDk2YjJmIDB4NmM4NWUzZWUgMHhmNjNhY2U4ZCAweGJiY2NhMThhIDB4MWE3YmFiYjQgMHgxNDYwYTk2NiAweGVkMDI3NTlmIDB4ZmFkMjE3M2UgMHgwOGVmZWEzNSAweGU0YTVhYjU0IC8vIG1ldGhvZCAiYXNzZXRfdHJhbnNmZXIoYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCl1aW50NjQiLCBtZXRob2QgInBheV9jb3Vwb24oYWRkcmVzcyxieXRlW10pKHVpbnQ2NCx1aW50NjQsYnl0ZVtdKSIsIG1ldGhvZCAidXBkYXRlX2ludGVyZXN0X3JhdGUodWludDY0KXVpbnQ2NCIsIG1ldGhvZCAiZ2V0X2FjY291bnRfdW5pdHNfY3VycmVudF92YWx1ZShhZGRyZXNzLHVpbnQ2NCkodWludDY0LHVpbnQ2NCwodWludDY0LHVpbnQ2NCkpIiwgbWV0aG9kICJnZXRfcGF5bWVudF9hbW91bnQoYWRkcmVzcykodWludDY0LHVpbnQ2NCkiLCBtZXRob2QgImdldF9jb3Vwb25zX3N0YXR1cygpKHVpbnQ2NCx1aW50NjQsdWludDY0LCh1aW50NjQsdWludDY0KSxib29sKSIsIG1ldGhvZCAiZ2V0X3RpbWVfcGVyaW9kcygpKHVpbnQ2NCx1aW50NjQpW10iLCBtZXRob2QgImFzc2V0X2NyZWF0ZShhZGRyZXNzLCh1aW50OCx1aW50OCx1aW50OCx1aW50OCx1aW50OCx1aW50OCxieXRlWzMyXSxzdHJpbmcpKXZvaWQiLCBtZXRob2QgImFzc2V0X2NvbmZpZyh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDgsdWludDE2LHVpbnQxNltdLHVpbnQ2NFtdLCh1aW50NjQsdWludDY0KVtdKXZvaWQiLCBtZXRob2QgInNldF9zZWNvbmRhcnlfdGltZV9ldmVudHModWludDY0W10pKHVpbnQ2NCx1aW50NjQpIiwgbWV0aG9kICJhc3NpZ25fcm9sZShhZGRyZXNzLHVpbnQ4LGJ5dGVbXSl1aW50NjQiLCBtZXRob2QgInJldm9rZV9yb2xlKGFkZHJlc3MsdWludDgpdWludDY0IiwgbWV0aG9kICJvcGVuX2FjY291bnQoYWRkcmVzcyxhZGRyZXNzKXVpbnQ2NCIsIG1ldGhvZCAiY2xvc2VfYWNjb3VudChhZGRyZXNzKSh1aW50NjQsdWludDY0KSIsIG1ldGhvZCAicHJpbWFyeV9kaXN0cmlidXRpb24oYWRkcmVzcyx1aW50NjQpdWludDY0IiwgbWV0aG9kICJzZXRfYXNzZXRfc3VzcGVuc2lvbihib29sKXVpbnQ2NCIsIG1ldGhvZCAic2V0X2FjY291bnRfc3VzcGVuc2lvbihhZGRyZXNzLGJvb2wpdWludDY0IiwgbWV0aG9kICJzZXRfZGVmYXVsdF9zdGF0dXMoYm9vbCl2b2lkIiwgbWV0aG9kICJnZXRfYXNzZXRfaW5mbygpKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50OCx1aW50MTYsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYm9vbCx1aW50OCkiLCBtZXRob2QgImdldF9hY2NvdW50X2luZm8oYWRkcmVzcykoYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCxib29sKSIsIG1ldGhvZCAiZ2V0X3RpbWVfZXZlbnRzKCl1aW50NjRbXSIsIG1ldGhvZCAiZ2V0X3NlY29uZGFyeV9tYXJrZXRfc2NoZWR1bGUoKXVpbnQ2NFtdIiwgbWV0aG9kICJnZXRfYXNzZXRfbWV0YWRhdGEoKSh1aW50OCx1aW50OCx1aW50OCx1aW50OCx1aW50OCx1aW50OCxieXRlWzMyXSxzdHJpbmcpIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9hc3NldF90cmFuc2Zlcl9yb3V0ZUA1IG1haW5fcGF5X2NvdXBvbl9yb3V0ZUA2IG1haW5fdXBkYXRlX2ludGVyZXN0X3JhdGVfcm91dGVANyBtYWluX2dldF9hY2NvdW50X3VuaXRzX2N1cnJlbnRfdmFsdWVfcm91dGVAOCBtYWluX2dldF9wYXltZW50X2Ftb3VudF9yb3V0ZUA5IG1haW5fZ2V0X2NvdXBvbnNfc3RhdHVzX3JvdXRlQDEwIG1haW5fZ2V0X3RpbWVfcGVyaW9kc19yb3V0ZUAxMSBtYWluX2Fzc2V0X2NyZWF0ZV9yb3V0ZUAxMiBtYWluX2Fzc2V0X2NvbmZpZ19yb3V0ZUAxMyBtYWluX3NldF9zZWNvbmRhcnlfdGltZV9ldmVudHNfcm91dGVAMTQgbWFpbl9hc3NpZ25fcm9sZV9yb3V0ZUAxNSBtYWluX3Jldm9rZV9yb2xlX3JvdXRlQDE2IG1haW5fb3Blbl9hY2NvdW50X3JvdXRlQDE3IG1haW5fY2xvc2VfYWNjb3VudF9yb3V0ZUAxOCBtYWluX3ByaW1hcnlfZGlzdHJpYnV0aW9uX3JvdXRlQDE5IG1haW5fc2V0X2Fzc2V0X3N1c3BlbnNpb25fcm91dGVAMjAgbWFpbl9zZXRfYWNjb3VudF9zdXNwZW5zaW9uX3JvdXRlQDIxIG1haW5fc2V0X2RlZmF1bHRfc3RhdHVzX3JvdXRlQDIyIG1haW5fZ2V0X2Fzc2V0X2luZm9fcm91dGVAMjMgbWFpbl9nZXRfYWNjb3VudF9pbmZvX3JvdXRlQDI0IG1haW5fZ2V0X3RpbWVfZXZlbnRzX3JvdXRlQDI1IG1haW5fZ2V0X3NlY29uZGFyeV9tYXJrZXRfc2NoZWR1bGVfcm91dGVAMjYgbWFpbl9nZXRfYXNzZXRfbWV0YWRhdGFfcm91dGVAMjcKCm1haW5fYWZ0ZXJfaWZfZWxzZUAzMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxOS0yNwogICAgLy8gY2xhc3MgUGVycGV0dWFsQm9uZCgKICAgIC8vICAgICBCYXNlREFzYSwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9Y2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9Y2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2dldF9hc3NldF9tZXRhZGF0YV9yb3V0ZUAyNzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojk3MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X2Fzc2V0X21ldGFkYXRhCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldF9zZWNvbmRhcnlfbWFya2V0X3NjaGVkdWxlX3JvdXRlQDI2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTU3CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfc2Vjb25kYXJ5X21hcmtldF9zY2hlZHVsZQogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRfdGltZV9ldmVudHNfcm91dGVAMjU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo5NDQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldF90aW1lX2V2ZW50cwogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRfYWNjb3VudF9pbmZvX3JvdXRlQDI0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTI3CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE5LTI3CiAgICAvLyBjbGFzcyBQZXJwZXR1YWxCb25kKAogICAgLy8gICAgIEJhc2VEQXNhLAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPWNmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPWNmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjkyNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIGdldF9hY2NvdW50X2luZm8KICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X2Fzc2V0X2luZm9fcm91dGVAMjM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4ODkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldF9hc3NldF9pbmZvCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3NldF9kZWZhdWx0X3N0YXR1c19yb3V0ZUAyMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojg3NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxOS0yNwogICAgLy8gY2xhc3MgUGVycGV0dWFsQm9uZCgKICAgIC8vICAgICBCYXNlREFzYSwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9Y2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9Y2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4NzUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBzZXRfZGVmYXVsdF9zdGF0dXMKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fc2V0X2FjY291bnRfc3VzcGVuc2lvbl9yb3V0ZUAyMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojg1MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxOS0yNwogICAgLy8gY2xhc3MgUGVycGV0dWFsQm9uZCgKICAgIC8vICAgICBCYXNlREFzYSwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9Y2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9Y2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4NTIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBzZXRfYWNjb3VudF9zdXNwZW5zaW9uCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3NldF9hc3NldF9zdXNwZW5zaW9uX3JvdXRlQDIwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6ODM0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE5LTI3CiAgICAvLyBjbGFzcyBQZXJwZXR1YWxCb25kKAogICAgLy8gICAgIEJhc2VEQXNhLAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPWNmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPWNmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjgzNAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHNldF9hc3NldF9zdXNwZW5zaW9uCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3ByaW1hcnlfZGlzdHJpYnV0aW9uX3JvdXRlQDE5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzkyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE5LTI3CiAgICAvLyBjbGFzcyBQZXJwZXR1YWxCb25kKAogICAgLy8gICAgIEJhc2VEQXNhLAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPWNmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPWNmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojc5MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHByaW1hcnlfZGlzdHJpYnV0aW9uCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2Nsb3NlX2FjY291bnRfcm91dGVAMTg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3NjIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTktMjcKICAgIC8vIGNsYXNzIFBlcnBldHVhbEJvbmQoCiAgICAvLyAgICAgQmFzZURBc2EsCiAgICAvLyAgICAgc3RhdGVfdG90YWxzPVN0YXRlVG90YWxzKAogICAgLy8gICAgICAgICBnbG9iYWxfYnl0ZXM9Y2ZnLkdMT0JBTF9CWVRFUywKICAgIC8vICAgICAgICAgZ2xvYmFsX3VpbnRzPWNmZy5HTE9CQUxfVUlOVFMsCiAgICAvLyAgICAgICAgIGxvY2FsX2J5dGVzPWNmZy5MT0NBTF9CWVRFUywKICAgIC8vICAgICAgICAgbG9jYWxfdWludHM9Y2ZnLkxPQ0FMX1VJTlRTLAogICAgLy8gICAgICksCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzYyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgY2xvc2VfYWNjb3VudAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9vcGVuX2FjY291bnRfcm91dGVAMTc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3MjcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTktMjcKICAgIC8vIGNsYXNzIFBlcnBldHVhbEJvbmQoCiAgICAvLyAgICAgQmFzZURBc2EsCiAgICAvLyAgICAgc3RhdGVfdG90YWxzPVN0YXRlVG90YWxzKAogICAgLy8gICAgICAgICBnbG9iYWxfYnl0ZXM9Y2ZnLkdMT0JBTF9CWVRFUywKICAgIC8vICAgICAgICAgZ2xvYmFsX3VpbnRzPWNmZy5HTE9CQUxfVUlOVFMsCiAgICAvLyAgICAgICAgIGxvY2FsX2J5dGVzPWNmZy5MT0NBTF9CWVRFUywKICAgIC8vICAgICAgICAgbG9jYWxfdWludHM9Y2ZnLkxPQ0FMX1VJTlRTLAogICAgLy8gICAgICksCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzI3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgb3Blbl9hY2NvdW50CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3Jldm9rZV9yb2xlX3JvdXRlQDE2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6Njc5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE5LTI3CiAgICAvLyBjbGFzcyBQZXJwZXR1YWxCb25kKAogICAgLy8gICAgIEJhc2VEQXNhLAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPWNmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPWNmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY3OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHJldm9rZV9yb2xlCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2Fzc2lnbl9yb2xlX3JvdXRlQDE1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjE2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE5LTI3CiAgICAvLyBjbGFzcyBQZXJwZXR1YWxCb25kKAogICAgLy8gICAgIEJhc2VEQXNhLAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPWNmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPWNmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYxNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFzc2lnbl9yb2xlCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3NldF9zZWNvbmRhcnlfdGltZV9ldmVudHNfcm91dGVAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1NjAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTktMjcKICAgIC8vIGNsYXNzIFBlcnBldHVhbEJvbmQoCiAgICAvLyAgICAgQmFzZURBc2EsCiAgICAvLyAgICAgc3RhdGVfdG90YWxzPVN0YXRlVG90YWxzKAogICAgLy8gICAgICAgICBnbG9iYWxfYnl0ZXM9Y2ZnLkdMT0JBTF9CWVRFUywKICAgIC8vICAgICAgICAgZ2xvYmFsX3VpbnRzPWNmZy5HTE9CQUxfVUlOVFMsCiAgICAvLyAgICAgICAgIGxvY2FsX2J5dGVzPWNmZy5MT0NBTF9CWVRFUywKICAgIC8vICAgICAgICAgbG9jYWxfdWludHM9Y2ZnLkxPQ0FMX1VJTlRTLAogICAgLy8gICAgICksCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NTYwCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2V0X3NlY29uZGFyeV90aW1lX2V2ZW50cwogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hc3NldF9jb25maWdfcm91dGVAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo0NzgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTktMjcKICAgIC8vIGNsYXNzIFBlcnBldHVhbEJvbmQoCiAgICAvLyAgICAgQmFzZURBc2EsCiAgICAvLyAgICAgc3RhdGVfdG90YWxzPVN0YXRlVG90YWxzKAogICAgLy8gICAgICAgICBnbG9iYWxfYnl0ZXM9Y2ZnLkdMT0JBTF9CWVRFUywKICAgIC8vICAgICAgICAgZ2xvYmFsX3VpbnRzPWNmZy5HTE9CQUxfVUlOVFMsCiAgICAvLyAgICAgICAgIGxvY2FsX2J5dGVzPWNmZy5MT0NBTF9CWVRFUywKICAgIC8vICAgICAgICAgbG9jYWxfdWludHM9Y2ZnLkxPQ0FMX1VJTlRTLAogICAgLy8gICAgICksCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NDc4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgYXNzZXRfY29uZmlnCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2Fzc2V0X2NyZWF0ZV9yb3V0ZUAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjQ1NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE5LTI3CiAgICAvLyBjbGFzcyBQZXJwZXR1YWxCb25kKAogICAgLy8gICAgIEJhc2VEQXNhLAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPWNmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPWNmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjQ1NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICBjYWxsc3ViIGFzc2V0X2NyZWF0ZQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRfdGltZV9wZXJpb2RzX3JvdXRlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjM5MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X3RpbWVfcGVyaW9kcwogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRfY291cG9uc19zdGF0dXNfcm91dGVAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzY0CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfY291cG9uc19zdGF0dXMKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X3BheW1lbnRfYW1vdW50X3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzM5CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE5LTI3CiAgICAvLyBjbGFzcyBQZXJwZXR1YWxCb25kKAogICAgLy8gICAgIEJhc2VEQXNhLAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPWNmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPWNmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozMzkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgY2FsbHN1YiBnZXRfcGF5bWVudF9hbW91bnQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X2FjY291bnRfdW5pdHNfY3VycmVudF92YWx1ZV9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjI4MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxOS0yNwogICAgLy8gY2xhc3MgUGVycGV0dWFsQm9uZCgKICAgIC8vICAgICBCYXNlREFzYSwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9Y2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9Y2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjgyCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgZ2V0X2FjY291bnRfdW5pdHNfY3VycmVudF92YWx1ZQogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl91cGRhdGVfaW50ZXJlc3RfcmF0ZV9yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjI1NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxOS0yNwogICAgLy8gY2xhc3MgUGVycGV0dWFsQm9uZCgKICAgIC8vICAgICBCYXNlREFzYSwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9Y2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9Y2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjU1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgdXBkYXRlX2ludGVyZXN0X3JhdGUKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fcGF5X2NvdXBvbl9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE5NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxOS0yNwogICAgLy8gY2xhc3MgUGVycGV0dWFsQm9uZCgKICAgIC8vICAgICBCYXNlREFzYSwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9Y2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9Y2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTk0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcGF5X2NvdXBvbgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hc3NldF90cmFuc2Zlcl9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE0NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxOS0yNwogICAgLy8gY2xhc3MgUGVycGV0dWFsQm9uZCgKICAgIC8vICAgICBCYXNlREFzYSwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9Y2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9Y2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTQ1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgYXNzZXRfdHJhbnNmZXIKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDI4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE5LTI3CiAgICAvLyBjbGFzcyBQZXJwZXR1YWxCb25kKAogICAgLy8gICAgIEJhc2VEQXNhLAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPWNmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPWNmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIHB1c2hpbnQgNCAvLyA0CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBtYXRjaCBtYWluX2Fzc2V0X3VwZGF0ZUAyOQogICAgYiBtYWluX2FmdGVyX2lmX2Vsc2VAMzAKCm1haW5fYXNzZXRfdXBkYXRlQDI5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NDY4CiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJVcGRhdGVBcHBsaWNhdGlvbiJdKQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo0NjgtNDY5CiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJVcGRhdGVBcHBsaWNhdGlvbiJdKQogICAgLy8gZGVmIGFzc2V0X3VwZGF0ZShzZWxmKSAtPiBOb25lOgogICAgY2FsbHN1YiBhc3NldF91cGRhdGUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMucGVycGV0dWFsX2JvbmQuY29udHJhY3QuUGVycGV0dWFsQm9uZC5hc3NldF90cmFuc2ZlcihzZW5kZXJfaG9sZGluZ19hZGRyZXNzOiBieXRlcywgcmVjZWl2ZXJfaG9sZGluZ19hZGRyZXNzOiBieXRlcywgdW5pdHM6IGJ5dGVzKSAtPiBieXRlczoKYXNzZXRfdHJhbnNmZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTQ1LTE1MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYXNzZXRfdHJhbnNmZXIoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBzZW5kZXJfaG9sZGluZ19hZGRyZXNzOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgICAgcmVjZWl2ZXJfaG9sZGluZ19hZGRyZXNzOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgICAgdW5pdHM6IGFyYzQuVUludDY0LAogICAgLy8gKSAtPiBhcmM0LlVJbnQ2NDoKICAgIHByb3RvIDMgMQogICAgaW50Y18wIC8vIDAKICAgIGR1cG4gMgogICAgcHVzaGJ5dGVzICIiCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxNzYKICAgIC8vIHVuaXRzLm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTAxCiAgICAvLyByZXR1cm4gc2VsZi5zdGF0dXMgPT0gY2ZnLlNUQVRVU19BQ1RJVkUKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJzdGF0dXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3RhdHVzIGV4aXN0cwogICAgaW50Y18zIC8vIDEwMAogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI5My0yOTYKICAgIC8vIHNlbGYuc3RhdHVzX2lzX2FjdGl2ZSgpCiAgICAvLyBhbmQgc2VsZi5zZWNvbmRhcnlfbWFya2V0X29wZW5pbmdfZGF0ZQogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIC8vIDwgc2VsZi5zZWNvbmRhcnlfbWFya2V0X2Nsb3N1cmVfZGF0ZQogICAgYnogYXNzZXRfdHJhbnNmZXJfYm9vbF9mYWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyOTQKICAgIC8vIGFuZCBzZWxmLnNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTUgLy8gInNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6Mjk1CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI5NC0yOTUKICAgIC8vIGFuZCBzZWxmLnNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlCiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgPD0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI5NC0yOTYKICAgIC8vIGFuZCBzZWxmLnNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlCiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPCBzZWxmLnNlY29uZGFyeV9tYXJrZXRfY2xvc3VyZV9kYXRlCiAgICBieiBhc3NldF90cmFuc2Zlcl9ib29sX2ZhbHNlQDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI5NgogICAgLy8gPCBzZWxmLnNlY29uZGFyeV9tYXJrZXRfY2xvc3VyZV9kYXRlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTYgLy8gInNlY29uZGFyeV9tYXJrZXRfY2xvc3VyZV9kYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNlY29uZGFyeV9tYXJrZXRfY2xvc3VyZV9kYXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6Mjk1LTI5NgogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIC8vIDwgc2VsZi5zZWNvbmRhcnlfbWFya2V0X2Nsb3N1cmVfZGF0ZQogICAgZnJhbWVfZGlnIDQKICAgID4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI5NC0yOTYKICAgIC8vIGFuZCBzZWxmLnNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlCiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPCBzZWxmLnNlY29uZGFyeV9tYXJrZXRfY2xvc3VyZV9kYXRlCiAgICBieiBhc3NldF90cmFuc2Zlcl9ib29sX2ZhbHNlQDUKICAgIGludGNfMSAvLyAxCgphc3NldF90cmFuc2Zlcl9ib29sX21lcmdlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyOTItMjk3CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHNlbGYuc3RhdHVzX2lzX2FjdGl2ZSgpCiAgICAvLyAgICAgYW5kIHNlbGYuc2Vjb25kYXJ5X21hcmtldF9vcGVuaW5nX2RhdGUKICAgIC8vICAgICA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gICAgIDwgc2VsZi5zZWNvbmRhcnlfbWFya2V0X2Nsb3N1cmVfZGF0ZQogICAgLy8gKSwgZXJyLlNFQ09OREFSWV9NQVJLRVRfQ0xPU0VECiAgICBhc3NlcnQgLy8gU2Vjb25kYXJ5IG1hcmtldCBpcyBjbG9zZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjM3MS0zNzMKICAgIC8vICMgVGhlIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiBncmFudHMgdHJhbnNmZXIgcmlnaHQgdG8gRC1BU0Egb3duZXJzLiBPdGhlciBpbXBsZW1lbnRhdGlvbnMgbWF5IHJlbGF5IG9uIG90aGVyCiAgICAvLyAjIHJvbGVzLCBleHRlcm5hbCBBcHBzIHRocm91Z2ggQzJDIGNhbGxzIChlLmcuLCBhbiBvcmRlciBib29rKSwgb3Igb2ZmLWNoYWluIHRyYW5zZmVyIGFnZW50cy4KICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbmRlcl9ob2xkaW5nX2FkZHJlc3MubmF0aXZlLCBlcnIuVU5BVVRIT1JJWkVECiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9kaWcgLTMKICAgID09CiAgICBhc3NlcnQgLy8gTm90IGF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjM3NAogICAgLy8gc2VsZi5hc3NlcnRfaXNfbm90X2RlZmF1bHRlZCgpCiAgICBjYWxsc3ViIGFzc2VydF9pc19ub3RfZGVmYXVsdGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozNzUKICAgIC8vIHNlbGYuYXNzZXJ0X2lzX25vdF9zdXNwZW5kZWQoKQogICAgY2FsbHN1YiBhc3NlcnRfaXNfbm90X3N1c3BlbmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTcxCiAgICAvLyBhc3NlcnQgaG9sZGluZ19hZGRyZXNzIGluIHNlbGYuYWNjb3VudCwgZXJyLklOVkFMSURfSE9MRElOR19BRERSRVNTCiAgICBieXRlY18xIC8vIDB4NTIzMzMwMjMKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFjY291bnQgaG9sZGluZyBhZGRyZXNzCiAgICBieXRlY18xIC8vIDB4NTIzMzMwMjMKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMgogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFjY291bnQgaG9sZGluZyBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozNzgKICAgIC8vIGFzc2VydCBub3Qgc2VsZi5hY2NvdW50W3NlbmRlcl9ob2xkaW5nX2FkZHJlc3NdLnN1c3BlbmRlZC5uYXRpdmUsIGVyci5TVVNQRU5ERUQKICAgIGRpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgaW50YyA0IC8vIDQ0OAogICAgZ2V0Yml0CiAgICBieXRlYyAxMSAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGludGNfMCAvLyAwCiAgICBnZXRiaXQKICAgICEKICAgIGFzc2VydCAvLyBTdXNwZW5kZWQgb3BlcmF0aW9ucwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6Mzc5LTM4MQogICAgLy8gYXNzZXJ0IG5vdCBzZWxmLmFjY291bnRbCiAgICAvLyAgICAgcmVjZWl2ZXJfaG9sZGluZ19hZGRyZXNzCiAgICAvLyBdLnN1c3BlbmRlZC5uYXRpdmUsIGVyci5TVVNQRU5ERUQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWNjb3VudCBlbnRyeSBleGlzdHMKICAgIGludGMgNCAvLyA0NDgKICAgIGdldGJpdAogICAgYnl0ZWMgMTEgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Yml0CiAgICAhCiAgICBhc3NlcnQgLy8gU3VzcGVuZGVkIG9wZXJhdGlvbnMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjM4MwogICAgLy8gdW5pdHMgPD0gc2VsZi5hY2NvdW50W3NlbmRlcl9ob2xkaW5nX2FkZHJlc3NdLnVuaXRzLm5hdGl2ZQogICAgZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDMyIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBmcmFtZV9kaWcgNQogICAgPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjM4Mi0zODQKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgdW5pdHMgPD0gc2VsZi5hY2NvdW50W3NlbmRlcl9ob2xkaW5nX2FkZHJlc3NdLnVuaXRzLm5hdGl2ZQogICAgLy8gKSwgZXJyLk9WRVJfVFJBTlNGRVIKICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgc2VuZGVyIHVuaXRzIHRvIHRyYW5zZmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozOTIKICAgIC8vIHNlbmRlcl91bml0X3ZhbHVlID0gc2VsZi5hY2NvdW50W3NlbmRlcl9ob2xkaW5nX2FkZHJlc3NdLnVuaXRfdmFsdWUKICAgIHN3YXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDQwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjM5MwogICAgLy8gaWYgc2VsZi5hY2NvdW50W3JlY2VpdmVyX2hvbGRpbmdfYWRkcmVzc10udW5pdHMubmF0aXZlID4gMDoKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDMyIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBieiBhc3NldF90cmFuc2Zlcl9lbHNlX2JvZHlAMTYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjMwNAogICAgLy8gc2VsZi5hY2NvdW50W3NlbmRlcl0udW5pdF92YWx1ZSA9PSBzZWxmLmFjY291bnRbcmVjZWl2ZXJdLnVuaXRfdmFsdWUKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCA0MCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIDIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDQwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBiPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjMwNC0zMDUKICAgIC8vIHNlbGYuYWNjb3VudFtzZW5kZXJdLnVuaXRfdmFsdWUgPT0gc2VsZi5hY2NvdW50W3JlY2VpdmVyXS51bml0X3ZhbHVlCiAgICAvLyBhbmQgc2VsZi5hY2NvdW50W3NlbmRlcl0ucGFpZF9jb3Vwb25zID09IHNlbGYuYWNjb3VudFtyZWNlaXZlcl0ucGFpZF9jb3Vwb25zCiAgICBieiBhc3NldF90cmFuc2Zlcl9ib29sX2ZhbHNlQDE0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozMDUKICAgIC8vIGFuZCBzZWxmLmFjY291bnRbc2VuZGVyXS5wYWlkX2NvdXBvbnMgPT0gc2VsZi5hY2NvdW50W3JlY2VpdmVyXS5wYWlkX2NvdXBvbnMKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCA0OCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIDIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDQ4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBiPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjMwNC0zMDUKICAgIC8vIHNlbGYuYWNjb3VudFtzZW5kZXJdLnVuaXRfdmFsdWUgPT0gc2VsZi5hY2NvdW50W3JlY2VpdmVyXS51bml0X3ZhbHVlCiAgICAvLyBhbmQgc2VsZi5hY2NvdW50W3NlbmRlcl0ucGFpZF9jb3Vwb25zID09IHNlbGYuYWNjb3VudFtyZWNlaXZlcl0ucGFpZF9jb3Vwb25zCiAgICBieiBhc3NldF90cmFuc2Zlcl9ib29sX2ZhbHNlQDE0CiAgICBpbnRjXzEgLy8gMQoKYXNzZXRfdHJhbnNmZXJfYm9vbF9tZXJnZUAxNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjMwMy0zMDYKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc2VsZi5hY2NvdW50W3NlbmRlcl0udW5pdF92YWx1ZSA9PSBzZWxmLmFjY291bnRbcmVjZWl2ZXJdLnVuaXRfdmFsdWUKICAgIC8vICAgICBhbmQgc2VsZi5hY2NvdW50W3NlbmRlcl0ucGFpZF9jb3Vwb25zID09IHNlbGYuYWNjb3VudFtyZWNlaXZlcl0ucGFpZF9jb3Vwb25zCiAgICAvLyApLCBlcnIuTk9OX0ZVTkdJQkxFX1VOSVRTCiAgICBhc3NlcnQgLy8gU2VuZGVyIGFuZCByZWNlaXZlciB1bml0cyBhcmUgbm90IGZ1bmdpYmxlCgphc3NldF90cmFuc2Zlcl9hZnRlcl9pZl9lbHNlQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE3OS0xODAKICAgIC8vICMgVHJhbnNmZXIgaXMgZm9yYmlkZGVuIGluIGNhc2Ugb2YgcGVuZGluZyBjb3Vwb24gcGF5bWVudHMKICAgIC8vIGR1ZV9jb3Vwb25zID0gc2VsZi5jb3VudF9kdWVfY291cG9ucygpCiAgICBjYWxsc3ViIGNvdW50X2R1ZV9jb3Vwb25zCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTgxCiAgICAvLyBzZWxmLmFzc2VydF9ub19wZW5kaW5nX2NvdXBvbl9wYXltZW50KHNlbmRlcl9ob2xkaW5nX2FkZHJlc3MsIGR1ZV9jb3Vwb25zKQogICAgZnJhbWVfZGlnIC0zCiAgICBkaWcgMQogICAgY2FsbHN1YiBhc3NlcnRfbm9fcGVuZGluZ19jb3Vwb25fcGF5bWVudAogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjE4My0xODQKICAgIC8vICMgVHJhbnNmZXJyZWQgdW5pdHMgdmFsdWUgKG11c3QgYmUgY29tcHV0ZWQgYmVmb3JlIHRoZSB0cmFuc2ZlcikKICAgIC8vIHNlbmRlcl91bml0X3ZhbHVlID0gc2VsZi5hY2NvdW50W3NlbmRlcl9ob2xkaW5nX2FkZHJlc3NdLnVuaXRfdmFsdWUKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDQwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxODUtMTg3CiAgICAvLyBhY2NydWVkX2ludGVyZXN0ID0gc2VsZi5hY2NydWVkX2ludGVyZXN0X2Ftb3VudCgKICAgIC8vICAgICBzZW5kZXJfaG9sZGluZ19hZGRyZXNzLCB1bml0cy5uYXRpdmUsIGR1ZV9jb3Vwb25zCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyA1CiAgICBkdXAKICAgIGNvdmVyIDQKICAgIHVuY292ZXIgMgogICAgY2FsbHN1YiBhY2NydWVkX2ludGVyZXN0X2Ftb3VudAogICAgZnJhbWVfYnVyeSAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo0MjkKICAgIC8vIHNlbGYuYWNjb3VudFtzZW5kZXJfaG9sZGluZ19hZGRyZXNzXS51bml0cy5uYXRpdmUgLSB1bml0cwogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCAzMiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgZGlnIDIKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjQyOC00MzAKICAgIC8vIHNlbGYuYWNjb3VudFtzZW5kZXJfaG9sZGluZ19hZGRyZXNzXS51bml0cyA9IGFyYzQuVUludDY0KAogICAgLy8gICAgIHNlbGYuYWNjb3VudFtzZW5kZXJfaG9sZGluZ19hZGRyZXNzXS51bml0cy5uYXRpdmUgLSB1bml0cwogICAgLy8gKQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NDI4CiAgICAvLyBzZWxmLmFjY291bnRbc2VuZGVyX2hvbGRpbmdfYWRkcmVzc10udW5pdHMgPSBhcmM0LlVJbnQ2NCgKICAgIGRpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NDI4LTQzMAogICAgLy8gc2VsZi5hY2NvdW50W3NlbmRlcl9ob2xkaW5nX2FkZHJlc3NdLnVuaXRzID0gYXJjNC5VSW50NjQoCiAgICAvLyAgICAgc2VsZi5hY2NvdW50W3NlbmRlcl9ob2xkaW5nX2FkZHJlc3NdLnVuaXRzLm5hdGl2ZSAtIHVuaXRzCiAgICAvLyApCiAgICBzd2FwCiAgICByZXBsYWNlMiAzMgogICAgZGlnIDEKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjQzMgogICAgLy8gc2VsZi5hY2NvdW50W3JlY2VpdmVyX2hvbGRpbmdfYWRkcmVzc10udW5pdHMubmF0aXZlICsgdW5pdHMKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDMyIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICB1bmNvdmVyIDMKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjQzMS00MzMKICAgIC8vIHNlbGYuYWNjb3VudFtyZWNlaXZlcl9ob2xkaW5nX2FkZHJlc3NdLnVuaXRzID0gYXJjNC5VSW50NjQoCiAgICAvLyAgICAgc2VsZi5hY2NvdW50W3JlY2VpdmVyX2hvbGRpbmdfYWRkcmVzc10udW5pdHMubmF0aXZlICsgdW5pdHMKICAgIC8vICkKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjQzMQogICAgLy8gc2VsZi5hY2NvdW50W3JlY2VpdmVyX2hvbGRpbmdfYWRkcmVzc10udW5pdHMgPSBhcmM0LlVJbnQ2NCgKICAgIGRpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NDMxLTQzMwogICAgLy8gc2VsZi5hY2NvdW50W3JlY2VpdmVyX2hvbGRpbmdfYWRkcmVzc10udW5pdHMgPSBhcmM0LlVJbnQ2NCgKICAgIC8vICAgICBzZWxmLmFjY291bnRbcmVjZWl2ZXJfaG9sZGluZ19hZGRyZXNzXS51bml0cy5uYXRpdmUgKyB1bml0cwogICAgLy8gKQogICAgc3dhcAogICAgcmVwbGFjZTIgMzIKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjM1NQogICAgLy8gaWYgc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10udW5pdHMubmF0aXZlID09IDA6CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCAzMiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgYm56IGFzc2V0X3RyYW5zZmVyX2FmdGVyX2lmX2Vsc2VAMjEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjM1NgogICAgLy8gc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10udW5pdF92YWx1ZSA9IGFyYzQuVUludDY0KCkKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBieXRlYyA3IC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgcmVwbGFjZTIgNDAKICAgIGRpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozNTcKICAgIC8vIHNlbGYuYWNjb3VudFtob2xkaW5nX2FkZHJlc3NdLnBhaWRfY291cG9ucyA9IGFyYzQuVUludDY0KCkKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWNjb3VudCBlbnRyeSBleGlzdHMKICAgIGJ5dGVjIDcgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICByZXBsYWNlMiA0OAogICAgYm94X3B1dAoKYXNzZXRfdHJhbnNmZXJfYWZ0ZXJfaWZfZWxzZUAyMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxOTIKICAgIC8vIHJldHVybiBhcmM0LlVJbnQ2NCh1bml0cy5uYXRpdmUgKiBzZW5kZXJfdW5pdF92YWx1ZS5uYXRpdmUgKyBhY2NydWVkX2ludGVyZXN0KQogICAgZnJhbWVfZGlnIDAKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyA1CiAgICAqCiAgICBmcmFtZV9kaWcgMwogICAgKwogICAgaXRvYgogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCmFzc2V0X3RyYW5zZmVyX2Jvb2xfZmFsc2VAMTQ6CiAgICBpbnRjXzAgLy8gMAogICAgYiBhc3NldF90cmFuc2Zlcl9ib29sX21lcmdlQDE1Cgphc3NldF90cmFuc2Zlcl9lbHNlX2JvZHlAMTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozOTgKICAgIC8vIHNlbGYuYWNjb3VudFtyZWNlaXZlcl9ob2xkaW5nX2FkZHJlc3NdLnVuaXRfdmFsdWUgPSBzZW5kZXJfdW5pdF92YWx1ZQogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWNjb3VudCBlbnRyeSBleGlzdHMKICAgIGZyYW1lX2RpZyAwCiAgICByZXBsYWNlMiA0MAogICAgZGlnIDEKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjM5OS00MDEKICAgIC8vIHNlbGYuYWNjb3VudFtyZWNlaXZlcl9ob2xkaW5nX2FkZHJlc3NdLnBhaWRfY291cG9ucyA9IHNlbGYuYWNjb3VudFsKICAgIC8vICAgICBzZW5kZXJfaG9sZGluZ19hZGRyZXNzCiAgICAvLyBdLnBhaWRfY291cG9ucwogICAgZnJhbWVfZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozOTkKICAgIC8vIHNlbGYuYWNjb3VudFtyZWNlaXZlcl9ob2xkaW5nX2FkZHJlc3NdLnBhaWRfY291cG9ucyA9IHNlbGYuYWNjb3VudFsKICAgIGRpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6Mzk5LTQwMQogICAgLy8gc2VsZi5hY2NvdW50W3JlY2VpdmVyX2hvbGRpbmdfYWRkcmVzc10ucGFpZF9jb3Vwb25zID0gc2VsZi5hY2NvdW50WwogICAgLy8gICAgIHNlbmRlcl9ob2xkaW5nX2FkZHJlc3MKICAgIC8vIF0ucGFpZF9jb3Vwb25zCiAgICBzd2FwCiAgICBleHRyYWN0IDQ4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICByZXBsYWNlMiA0OAogICAgYm94X3B1dAogICAgYiBhc3NldF90cmFuc2Zlcl9hZnRlcl9pZl9lbHNlQDE3Cgphc3NldF90cmFuc2Zlcl9ib29sX2ZhbHNlQDU6CiAgICBpbnRjXzAgLy8gMAogICAgYiBhc3NldF90cmFuc2Zlcl9ib29sX21lcmdlQDYKCgovLyBzbWFydF9jb250cmFjdHMuYmFzZV9kX2FzYS5jb250cmFjdC5CYXNlREFzYS5hc3NlcnRfaXNfbm90X2RlZmF1bHRlZCgpIC0+IHZvaWQ6CmFzc2VydF9pc19ub3RfZGVmYXVsdGVkOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTA3LTEwOAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBhc3NlcnRfaXNfbm90X2RlZmF1bHRlZChzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxMDkKICAgIC8vIGFzc2VydCBub3Qgc2VsZi5kZWZhdWx0ZWQsIGVyci5ERUZBVUxURUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAyMiAvLyAiZGVmYXVsdGVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRlZmF1bHRlZCBleGlzdHMKICAgICEKICAgIGFzc2VydCAvLyBEZWZhdWx0ZWQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5iYXNlX2RfYXNhLmNvbnRyYWN0LkJhc2VEQXNhLmFzc2VydF9pc19ub3Rfc3VzcGVuZGVkKCkgLT4gdm9pZDoKYXNzZXJ0X2lzX25vdF9zdXNwZW5kZWQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxMTEtMTEyCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGFzc2VydF9pc19ub3Rfc3VzcGVuZGVkKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjExMwogICAgLy8gYXNzZXJ0IG5vdCBzZWxmLnN1c3BlbmRlZCwgZXJyLlNVU1BFTkRFRAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDIxIC8vICJzdXNwZW5kZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3VzcGVuZGVkIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIFN1c3BlbmRlZCBvcGVyYXRpb25zCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucGVycGV0dWFsX2JvbmQuY29udHJhY3QuUGVycGV0dWFsQm9uZC5jb3VudF9kdWVfY291cG9ucygpIC0+IHVpbnQ2NDoKY291bnRfZHVlX2NvdXBvbnM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6NjYtNjcKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgY291bnRfZHVlX2NvdXBvbnMoc2VsZikgLT4gVUludDY0OgogICAgcHJvdG8gMCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6NjgKICAgIC8vIGR1ZV9jb3Vwb25zID0gVUludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjY5CiAgICAvLyBjdXJyZW50X3RzID0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjcwCiAgICAvLyBpZiBjdXJyZW50X3RzID4gc2VsZi5pc3N1YW5jZV9kYXRlOgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gImlzc3VhbmNlX2RhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuaXNzdWFuY2VfZGF0ZSBleGlzdHMKICAgID4KICAgIGJ6IGNvdW50X2R1ZV9jb3Vwb25zX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjcxCiAgICAvLyBkdWVfY291cG9ucyA9IChjdXJyZW50X3RzIC0gc2VsZi5pc3N1YW5jZV9kYXRlKSAvLyBzZWxmLmNvdXBvbl9wZXJpb2QKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJpc3N1YW5jZV9kYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmlzc3VhbmNlX2RhdGUgZXhpc3RzCiAgICBmcmFtZV9kaWcgMQogICAgc3dhcAogICAgLQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDE3IC8vICJjb3Vwb25fcGVyaW9kIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvdXBvbl9wZXJpb2QgZXhpc3RzCiAgICAvCiAgICBmcmFtZV9idXJ5IDAKCmNvdW50X2R1ZV9jb3Vwb25zX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo3Mi03MwogICAgLy8gICAgICMgZGl2LWJ5LXplcm86IGNvdXBvbl9wZXJpb2QgIT0gMCBkdWUgdG8gYXNzZXJ0X3RpbWVfcGVyaW9kcyBjaGVja3MKICAgIC8vIHJldHVybiBkdWVfY291cG9ucwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBlcnBldHVhbF9ib25kLmNvbnRyYWN0LlBlcnBldHVhbEJvbmQuYXNzZXJ0X25vX3BlbmRpbmdfY291cG9uX3BheW1lbnQoaG9sZGluZ19hZGRyZXNzOiBieXRlcywgZHVlX2NvdXBvbnM6IHVpbnQ2NCkgLT4gdm9pZDoKYXNzZXJ0X25vX3BlbmRpbmdfY291cG9uX3BheW1lbnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6OTQtOTcKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgYXNzZXJ0X25vX3BlbmRpbmdfY291cG9uX3BheW1lbnQoCiAgICAvLyAgICAgc2VsZiwgaG9sZGluZ19hZGRyZXNzOiBhcmM0LkFkZHJlc3MsIGR1ZV9jb3Vwb25zOiBVSW50NjQKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5Ojk5CiAgICAvLyBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS5wYWlkX2NvdXBvbnMgPT0gZHVlX2NvdXBvbnMKICAgIGJ5dGVjXzEgLy8gMHg1MjMzMzAyMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDQ4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGI9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5Ojk4LTEwMAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS5wYWlkX2NvdXBvbnMgPT0gZHVlX2NvdXBvbnMKICAgIC8vICksIGVyci5QRU5ESU5HX0NPVVBPTl9QQVlNRU5UCiAgICBhc3NlcnQgLy8gUGVuZGluZyBkdWUgY291cG9uIHBheW1lbnQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wZXJwZXR1YWxfYm9uZC5jb250cmFjdC5QZXJwZXR1YWxCb25kLmFjY3J1ZWRfaW50ZXJlc3RfYW1vdW50KGhvbGRpbmdfYWRkcmVzczogYnl0ZXMsIHVuaXRzOiB1aW50NjQsIGR1ZV9jb3Vwb25zOiB1aW50NjQpIC0+IHVpbnQ2NDoKYWNjcnVlZF9pbnRlcmVzdF9hbW91bnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTI3LTEzMAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBhY2NydWVkX2ludGVyZXN0X2Ftb3VudCgKICAgIC8vICAgICBzZWxmLCBob2xkaW5nX2FkZHJlc3M6IGFyYzQuQWRkcmVzcywgdW5pdHM6IFVJbnQ2NCwgZHVlX2NvdXBvbnM6IFVJbnQ2NAogICAgLy8gKSAtPiBVSW50NjQ6CiAgICBwcm90byAzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMzEtMTMyCiAgICAvLyAjIFRoZSBmb2xsb3dpbmcgYXNzZXJ0IHNhZmVndWFyZHMgdGhlIHN1YnJvdXRpbmUgZnJvbSBmb3JiaWRkZW4gaW52b2NhdGlvbnMKICAgIC8vIHNlbGYuYXNzZXJ0X25vX3BlbmRpbmdfY291cG9uX3BheW1lbnQoaG9sZGluZ19hZGRyZXNzLCBkdWVfY291cG9ucykKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIGFzc2VydF9ub19wZW5kaW5nX2NvdXBvbl9wYXltZW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTMzCiAgICAvLyBkYXlfY291bnRfZmFjdG9yID0gc2VsZi5kYXlfY291bnRfZmFjdG9yKGR1ZV9jb3Vwb25zKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIGRheV9jb3VudF9mYWN0b3IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMzQKICAgIC8vIGNvdXBvbl9hY2NydWVkX3BlcmlvZCA9IGRheV9jb3VudF9mYWN0b3IubnVtZXJhdG9yLm5hdGl2ZQogICAgZHVwCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMzUKICAgIC8vIGNvdXBvbl9wZXJpb2QgPSBkYXlfY291bnRfZmFjdG9yLmRlbm9taW5hdG9yLm5hdGl2ZQogICAgc3dhcAogICAgZXh0cmFjdCA4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTM3CiAgICAvLyBzZWxmLmFjY291bnRfdW5pdHNfdmFsdWUoaG9sZGluZ19hZGRyZXNzLCB1bml0cykKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBjYWxsc3ViIGFjY291bnRfdW5pdHNfdmFsdWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMzgKICAgIC8vICogc2VsZi5pbnRlcmVzdF9yYXRlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiaW50ZXJlc3RfcmF0ZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5pbnRlcmVzdF9yYXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjEzNy0xMzgKICAgIC8vIHNlbGYuYWNjb3VudF91bml0c192YWx1ZShob2xkaW5nX2FkZHJlc3MsIHVuaXRzKQogICAgLy8gKiBzZWxmLmludGVyZXN0X3JhdGUKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMzctMTM5CiAgICAvLyBzZWxmLmFjY291bnRfdW5pdHNfdmFsdWUoaG9sZGluZ19hZGRyZXNzLCB1bml0cykKICAgIC8vICogc2VsZi5pbnRlcmVzdF9yYXRlCiAgICAvLyAqIGNvdXBvbl9hY2NydWVkX3BlcmlvZAogICAgdW5jb3ZlciAyCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTQxCiAgICAvLyBjc3QuQlBTICogY291cG9uX3BlcmlvZAogICAgaW50YyA1IC8vIDEwMDAwCiAgICB1bmNvdmVyIDIKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMzctMTQyCiAgICAvLyBzZWxmLmFjY291bnRfdW5pdHNfdmFsdWUoaG9sZGluZ19hZGRyZXNzLCB1bml0cykKICAgIC8vICogc2VsZi5pbnRlcmVzdF9yYXRlCiAgICAvLyAqIGNvdXBvbl9hY2NydWVkX3BlcmlvZAogICAgLy8gLy8gKAogICAgLy8gICAgIGNzdC5CUFMgKiBjb3Vwb25fcGVyaW9kCiAgICAvLyApICAjIGRpdi1ieS16ZXJvOiBjb3Vwb25fcGVyaW9kICE9IDAgZHVlIHRvIGFzc2VydF90aW1lX3BlcmlvZHMgY2hlY2tzCiAgICAvCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTM2LTE0MwogICAgLy8gcmV0dXJuICgKICAgIC8vICAgICBzZWxmLmFjY291bnRfdW5pdHNfdmFsdWUoaG9sZGluZ19hZGRyZXNzLCB1bml0cykKICAgIC8vICAgICAqIHNlbGYuaW50ZXJlc3RfcmF0ZQogICAgLy8gICAgICogY291cG9uX2FjY3J1ZWRfcGVyaW9kCiAgICAvLyAgICAgLy8gKAogICAgLy8gICAgICAgICBjc3QuQlBTICogY291cG9uX3BlcmlvZAogICAgLy8gICAgICkgICMgZGl2LWJ5LXplcm86IGNvdXBvbl9wZXJpb2QgIT0gMCBkdWUgdG8gYXNzZXJ0X3RpbWVfcGVyaW9kcyBjaGVja3MKICAgIC8vICkKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wZXJwZXR1YWxfYm9uZC5jb250cmFjdC5QZXJwZXR1YWxCb25kLmRheV9jb3VudF9mYWN0b3IoZHVlX2NvdXBvbnM6IHVpbnQ2NCkgLT4gYnl0ZXM6CmRheV9jb3VudF9mYWN0b3I6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTA2LTEwNwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBkYXlfY291bnRfZmFjdG9yKHNlbGYsIGR1ZV9jb3Vwb25zOiBVSW50NjQpIC0+IHR5cC5EYXlDb3VudEZhY3RvcjoKICAgIHByb3RvIDEgMQogICAgcHVzaGJ5dGVzICIiCiAgICBkdXBuIDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMDgtMTA5CiAgICAvLyAjIFRoZSByZWZlcmVuY2UgaW1wbGVtZW50YXRpb24gc3VwcG9ydHMgb25seSB0aGUgQWN0dWFsL0FjdHVhbCBhbmQgQ29udGludW91cyBkYXktY291bnQgY29udmVudGlvbnMKICAgIC8vIGlmIG5vdCBkdWVfY291cG9uczoKICAgIGZyYW1lX2RpZyAtMQogICAgYm56IGRheV9jb3VudF9mYWN0b3JfZWxzZV9ib2R5QDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMTAKICAgIC8vIGFjY3J1aW5nX3N0YXJ0X3RpbWUgPSBzZWxmLmlzc3VhbmNlX2RhdGUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJpc3N1YW5jZV9kYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmlzc3VhbmNlX2RhdGUgZXhpc3RzCgpkYXlfY291bnRfZmFjdG9yX2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMTMKICAgIC8vIGNvdXBvbl9hY2NydWVkX3BlcmlvZCA9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wIC0gYWNjcnVpbmdfc3RhcnRfdGltZQogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgc3dhcAogICAgLQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMTQKICAgIC8vIGNvdXBvbl9wZXJpb2QgPSBzZWxmLmNvdXBvbl9wZXJpb2QKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxNyAvLyAiY291cG9uX3BlcmlvZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBzd2FwCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgMwogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY291cG9uX3BlcmlvZCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMTUKICAgIC8vIGlmIHNlbGYuZGF5X2NvdW50X2NvbnZlbnRpb24gPT0gVUludDY0KGNzdC5EQ0NfQV9BKToKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMyAvLyAiZGF5X2NvdW50X2NvbnZlbnRpb24iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGF5X2NvdW50X2NvbnZlbnRpb24gZXhpc3RzCiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDQKICAgIHN3YXAKICAgIGZyYW1lX2J1cnkgMQogICAgYm56IGRheV9jb3VudF9mYWN0b3JfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozNTEKICAgIC8vIHJldHVybiB0aW1lX3BlcmlvZCAvLyBVSW50NjQoY3N0LkRBWV8yX1NFQykKICAgIGZyYW1lX2RpZyAwCiAgICBpbnRjIDYgLy8gODY0MDAKICAgIC8KICAgIGZyYW1lX2RpZyAzCiAgICBpbnRjIDYgLy8gODY0MDAKICAgIC8KICAgIGZyYW1lX2J1cnkgNAogICAgZnJhbWVfYnVyeSAxCgpkYXlfY291bnRfZmFjdG9yX2FmdGVyX2lmX2Vsc2VANToKICAgIGZyYW1lX2RpZyA0CiAgICBmcmFtZV9kaWcgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjExOQogICAgLy8gbnVtZXJhdG9yPWFyYzQuVUludDY0KGNvdXBvbl9hY2NydWVkX3BlcmlvZCksCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTIwCiAgICAvLyBkZW5vbWluYXRvcj1hcmM0LlVJbnQ2NChjb3Vwb25fcGVyaW9kKSwKICAgIHN3YXAKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMTgtMTIxCiAgICAvLyByZXR1cm4gdHlwLkRheUNvdW50RmFjdG9yKAogICAgLy8gICAgIG51bWVyYXRvcj1hcmM0LlVJbnQ2NChjb3Vwb25fYWNjcnVlZF9wZXJpb2QpLAogICAgLy8gICAgIGRlbm9taW5hdG9yPWFyYzQuVUludDY0KGNvdXBvbl9wZXJpb2QpLAogICAgLy8gKQogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKZGF5X2NvdW50X2ZhY3Rvcl9lbHNlX2JvZHlAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo4MQogICAgLy8gY291cG9uX2R1ZV9kYXRlID0gVUludDY0KCkKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo4MgogICAgLy8gaWYgZHVlX2NvdXBvbnMgPj0gVUludDY0KDEpOgogICAgZnJhbWVfZGlnIC0xCiAgICBieiBkYXlfY291bnRfZmFjdG9yX2FmdGVyX2lmX2Vsc2VAOAogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjgzCiAgICAvLyBjb3Vwb25fZHVlX2RhdGUgPSBzZWxmLmNvdXBvbl9kdWVfZGF0ZShkdWVfY291cG9ucykKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBjb3Vwb25fZHVlX2RhdGUKICAgIGZyYW1lX2J1cnkgMgoKZGF5X2NvdW50X2ZhY3Rvcl9hZnRlcl9pZl9lbHNlQDg6CiAgICBmcmFtZV9kaWcgMgogICAgYiBkYXlfY291bnRfZmFjdG9yX2FmdGVyX2lmX2Vsc2VAMwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wZXJwZXR1YWxfYm9uZC5jb250cmFjdC5QZXJwZXR1YWxCb25kLmNvdXBvbl9kdWVfZGF0ZShjb3Vwb246IHVpbnQ2NCkgLT4gdWludDY0Ogpjb3Vwb25fZHVlX2RhdGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6NzUtNzYKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgY291cG9uX2R1ZV9kYXRlKHNlbGYsIGNvdXBvbjogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo3NwogICAgLy8gcmV0dXJuIHNlbGYuaXNzdWFuY2VfZGF0ZSArIGNvdXBvbiAqIHNlbGYuY291cG9uX3BlcmlvZAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gImlzc3VhbmNlX2RhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuaXNzdWFuY2VfZGF0ZSBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxNyAvLyAiY291cG9uX3BlcmlvZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jb3Vwb25fcGVyaW9kIGV4aXN0cwogICAgZnJhbWVfZGlnIC0xCiAgICAqCiAgICArCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuYmFzZV9kX2FzYS5jb250cmFjdC5CYXNlREFzYS5hY2NvdW50X3VuaXRzX3ZhbHVlKGhvbGRpbmdfYWRkcmVzczogYnl0ZXMsIHVuaXRzOiB1aW50NjQpIC0+IHVpbnQ2NDoKYWNjb3VudF91bml0c192YWx1ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjMzNy0zNDAKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgYWNjb3VudF91bml0c192YWx1ZSgKICAgIC8vICAgICBzZWxmLCBob2xkaW5nX2FkZHJlc3M6IGFyYzQuQWRkcmVzcywgdW5pdHM6IFVJbnQ2NAogICAgLy8gKSAtPiBVSW50NjQ6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjM0MQogICAgLy8gcmV0dXJuIHVuaXRzICogc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10udW5pdF92YWx1ZS5uYXRpdmUKICAgIGJ5dGVjXzEgLy8gMHg1MjMzMzAyMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDQwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTEKICAgICoKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wZXJwZXR1YWxfYm9uZC5jb250cmFjdC5QZXJwZXR1YWxCb25kLnBheV9jb3Vwb24oaG9sZGluZ19hZGRyZXNzOiBieXRlcywgcGF5bWVudF9pbmZvOiBieXRlcykgLT4gYnl0ZXM6CnBheV9jb3Vwb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTk0LTE5NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgcGF5X2NvdXBvbigKICAgIC8vICAgICBzZWxmLCBob2xkaW5nX2FkZHJlc3M6IGFyYzQuQWRkcmVzcywgcGF5bWVudF9pbmZvOiBhcmM0LkR5bmFtaWNCeXRlcwogICAgLy8gKSAtPiB0eXAuUGF5bWVudFJlc3VsdDoKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTAxCiAgICAvLyByZXR1cm4gc2VsZi5zdGF0dXMgPT0gY2ZnLlNUQVRVU19BQ1RJVkUKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJzdGF0dXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3RhdHVzIGV4aXN0cwogICAgaW50Y18zIC8vIDEwMAogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToyMTctMjE4CiAgICAvLyAjIFRoZSByZWZlcmVuY2UgaW1wbGVtZW50YXRpb24gZG9lcyBub3QgcmVzdHJpY3QgY2FsbGVyIGF1dGhvcml6YXRpb24KICAgIC8vIGFzc2VydCBzZWxmLnN0YXR1c19pc19hY3RpdmUoKSwgZXJyLlVOQVVUSE9SSVpFRAogICAgYXNzZXJ0IC8vIE5vdCBhdXRob3JpemVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjE5CiAgICAvLyBzZWxmLmFzc2VydF9pc19ub3RfZGVmYXVsdGVkKCkKICAgIGNhbGxzdWIgYXNzZXJ0X2lzX25vdF9kZWZhdWx0ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToyMjAKICAgIC8vIHNlbGYuYXNzZXJ0X2lzX25vdF9zdXNwZW5kZWQoKQogICAgY2FsbHN1YiBhc3NlcnRfaXNfbm90X3N1c3BlbmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTcxCiAgICAvLyBhc3NlcnQgaG9sZGluZ19hZGRyZXNzIGluIHNlbGYuYWNjb3VudCwgZXJyLklOVkFMSURfSE9MRElOR19BRERSRVNTCiAgICBieXRlY18xIC8vIDB4NTIzMzMwMjMKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBkdXBuIDIKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEludmFsaWQgYWNjb3VudCBob2xkaW5nIGFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToyMjIKICAgIC8vIHVuaXRzID0gc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10udW5pdHMubmF0aXZlCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDMyIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToyMjMKICAgIC8vIGFzc2VydCB1bml0cyA+IDAsIGVyci5OT19VTklUUwogICAgYXNzZXJ0IC8vIE5vIEQtQVNBIHVuaXRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjI0CiAgICAvLyBkdWVfY291cG9ucyA9IHNlbGYuY291bnRfZHVlX2NvdXBvbnMoKQogICAgY2FsbHN1YiBjb3VudF9kdWVfY291cG9ucwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjIyNQogICAgLy8gYWNjb3VudF9wYWlkX2NvdXBvbnMgPSBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS5wYWlkX2NvdXBvbnMubmF0aXZlCiAgICBkaWcgMQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWNjb3VudCBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgNDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToyMjYKICAgIC8vIGFzc2VydCBkdWVfY291cG9ucyA+IGFjY291bnRfcGFpZF9jb3Vwb25zLCBlcnIuTk9fRFVFX0NPVVBPTgogICAgc3dhcAogICAgZGlnIDEKICAgID4KICAgIGFzc2VydCAvLyBObyBkdWUgY291cG9uIHRvIHBheQogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjIyNy0yMzAKICAgIC8vICMgVGhlIGZvbGxvd2luZyBjb25kaXRpb25zIHZlcmlmeSBpZiBvdGhlciBhY2NvdW50cyBhcmUgc3RpbGwgd2FpdGluZyBmb3IgdGhlIHBheW1lbnQgb2YgcHJldmlvdXMgY291cG9ucwogICAgLy8gYXNzZXJ0IHNlbGYuYWxsX2R1ZV9jb3Vwb25zX3BhaWQoCiAgICAvLyAgICAgYWNjb3VudF9wYWlkX2NvdXBvbnMKICAgIC8vICksIGVyci5QRU5ESU5HX0NPVVBPTl9QQVlNRU5UCiAgICBjYWxsc3ViIGFsbF9kdWVfY291cG9uc19wYWlkCiAgICBhc3NlcnQgLy8gUGVuZGluZyBkdWUgY291cG9uIHBheW1lbnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjMxMQogICAgLy8gc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10ucGF5bWVudF9hZGRyZXNzLm5hdGl2ZS5pc19vcHRlZF9pbigKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDAgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozMTIKICAgIC8vIEFzc2V0KHNlbGYuc2V0dGxlbWVudF9hc3NldF9pZCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJzZXR0bGVtZW50X2Fzc2V0X2lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNldHRsZW1lbnRfYXNzZXRfaWQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozMTEtMzEzCiAgICAvLyBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS5wYXltZW50X2FkZHJlc3MubmF0aXZlLmlzX29wdGVkX2luKAogICAgLy8gICAgIEFzc2V0KHNlbGYuc2V0dGxlbWVudF9hc3NldF9pZCkKICAgIC8vICkKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozMTEtMzE0CiAgICAvLyBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS5wYXltZW50X2FkZHJlc3MubmF0aXZlLmlzX29wdGVkX2luKAogICAgLy8gICAgIEFzc2V0KHNlbGYuc2V0dGxlbWVudF9hc3NldF9pZCkKICAgIC8vICkKICAgIC8vIGFuZCBub3Qgc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10uc3VzcGVuZGVkLm5hdGl2ZQogICAgYnogcGF5X2NvdXBvbl9ib29sX2ZhbHNlQDE0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozMTQKICAgIC8vIGFuZCBub3Qgc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10uc3VzcGVuZGVkLm5hdGl2ZQogICAgZnJhbWVfZGlnIDAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBpbnRjIDQgLy8gNDQ4CiAgICBnZXRiaXQKICAgIGJ5dGVjIDExIC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgYm56IHBheV9jb3Vwb25fYm9vbF9mYWxzZUAxNAogICAgaW50Y18xIC8vIDEKCnBheV9jb3Vwb25fYm9vbF9tZXJnZUAxNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToyMzMKICAgIC8vIGlmIHNlbGYuaXNfcGF5bWVudF9leGVjdXRhYmxlKGhvbGRpbmdfYWRkcmVzcyk6CiAgICBieiBwYXlfY291cG9uX2Vsc2VfYm9keUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjM1CiAgICAvLyBzZWxmLmFjY291bnRfdG90YWxfdW5pdHNfdmFsdWUoaG9sZGluZ19hZGRyZXNzKQogICAgZnJhbWVfZGlnIC0yCiAgICBjYWxsc3ViIGFjY291bnRfdG90YWxfdW5pdHNfdmFsdWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMDQKICAgIC8vIHJldHVybiBwcmluY2lwYWxfYW1vdW50ICogc2VsZi5pbnRlcmVzdF9yYXRlIC8vIGNzdC5CUFMKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA2IC8vICJpbnRlcmVzdF9yYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmludGVyZXN0X3JhdGUgZXhpc3RzCiAgICAqCiAgICBpbnRjIDUgLy8gMTAwMDAKICAgIC8KICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MzIwCiAgICAvLyBBc3NldChzZWxmLnNldHRsZW1lbnRfYXNzZXRfaWQpLmJhbGFuY2UoR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcykKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAic2V0dGxlbWVudF9hc3NldF9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zZXR0bGVtZW50X2Fzc2V0X2lkIGV4aXN0cwogICAgYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBvcHRlZCBpbnRvIGFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozMjAtMzIxCiAgICAvLyBBc3NldChzZWxmLnNldHRsZW1lbnRfYXNzZXRfaWQpLmJhbGFuY2UoR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcykKICAgIC8vID49IHBheW1lbnRfYW1vdW50CiAgICBkaWcgMQogICAgPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjMxOS0zMjIKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgQXNzZXQoc2VsZi5zZXR0bGVtZW50X2Fzc2V0X2lkKS5iYWxhbmNlKEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MpCiAgICAvLyAgICAgPj0gcGF5bWVudF9hbW91bnQKICAgIC8vICksIGVyci5OT1RfRU5PVUdIX0ZVTkRTCiAgICBhc3NlcnQgLy8gTm90IGVub3VnaCBmdW5kcyBmb3IgdGhlIHBheW1lbnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToyMzktMjQwCiAgICAvLyAjIFRoZSByZWZlcmVuY2UgaW1wbGVtZW50YXRpb24gaGFzIHRoZSBzYW1lIGFzc2V0IGZvciBkZW5vbWluYXRpb24gYW5kIHNldHRsZW1lbnQsIG5vIGNvbnZlcnNpb24gbmVlZGVkCiAgICAvLyBzZWxmLnBheShzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS5wYXltZW50X2FkZHJlc3MsIHBheW1lbnRfYW1vdW50KQogICAgZnJhbWVfZGlnIDAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDAgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozMjYtMzMxCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1zZWxmLnNldHRsZW1lbnRfYXNzZXRfaWQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9cmVjZWl2ZXIubmF0aXZlLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1hbW91bnQsCiAgICAvLyAgICAgZmVlPUdsb2JhbC5taW5fdHhuX2ZlZSwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjMzMAogICAgLy8gZmVlPUdsb2JhbC5taW5fdHhuX2ZlZSwKICAgIGdsb2JhbCBNaW5UeG5GZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjMyNwogICAgLy8geGZlcl9hc3NldD1zZWxmLnNldHRsZW1lbnRfYXNzZXRfaWQsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAic2V0dGxlbWVudF9hc3NldF9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zZXR0bGVtZW50X2Fzc2V0X2lkIGV4aXN0cwogICAgdW5jb3ZlciAzCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICB1bmNvdmVyIDIKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjMyNgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgcHVzaGludCA0IC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MzI2LTMzMQogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9c2VsZi5zZXR0bGVtZW50X2Fzc2V0X2lkLAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPXJlY2VpdmVyLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9YW1vdW50LAogICAgLy8gICAgIGZlZT1HbG9iYWwubWluX3R4bl9mZWUsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAoKcGF5X2NvdXBvbl9hZnRlcl9pZl9lbHNlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjQ2CiAgICAvLyBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS5wYWlkX2NvdXBvbnMubmF0aXZlICsgMQogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWNjb3VudCBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgNDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGludGNfMSAvLyAxCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjQ1LTI0NwogICAgLy8gc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10ucGFpZF9jb3Vwb25zID0gYXJjNC5VSW50NjQoCiAgICAvLyAgICAgc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10ucGFpZF9jb3Vwb25zLm5hdGl2ZSArIDEKICAgIC8vICkKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToyNDUKICAgIC8vIHNlbGYuYWNjb3VudFtob2xkaW5nX2FkZHJlc3NdLnBhaWRfY291cG9ucyA9IGFyYzQuVUludDY0KAogICAgZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjQ1LTI0NwogICAgLy8gc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10ucGFpZF9jb3Vwb25zID0gYXJjNC5VSW50NjQoCiAgICAvLyAgICAgc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10ucGFpZF9jb3Vwb25zLm5hdGl2ZSArIDEKICAgIC8vICkKICAgIHN3YXAKICAgIHJlcGxhY2UyIDQ4CiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjQ4CiAgICAvLyBzZWxmLnBhaWRfY291cG9uX3VuaXRzICs9IHVuaXRzCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMjMgLy8gInBhaWRfY291cG9uX3VuaXRzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBhaWRfY291cG9uX3VuaXRzIGV4aXN0cwogICAgZnJhbWVfZGlnIDEKICAgICsKICAgIGJ5dGVjIDIzIC8vICJwYWlkX2NvdXBvbl91bml0cyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjUwCiAgICAvLyBhbW91bnQ9YXJjNC5VSW50NjQocGF5bWVudF9hbW91bnQpLAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjI1MQogICAgLy8gdGltZXN0YW1wPWFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wKSwKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToyNDktMjUzCiAgICAvLyByZXR1cm4gdHlwLlBheW1lbnRSZXN1bHQoCiAgICAvLyAgICAgYW1vdW50PWFyYzQuVUludDY0KHBheW1lbnRfYW1vdW50KSwKICAgIC8vICAgICB0aW1lc3RhbXA9YXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXApLAogICAgLy8gICAgIGNvbnRleHQ9cGF5bWVudF9pbmZvLmNvcHkoKSwgICMgVE9ETzogQWRkIGluZm8gb24gZmFpbGVkIHBheW1lbnQKICAgIC8vICkKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MDAxMgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCnBheV9jb3Vwb25fZWxzZV9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjQyLTI0MwogICAgLy8gIyBBY2NvdW50cyBzdXNwZW5kZWQgb3Igbm90IG9wdGVkIGluIGF0IHRoZSB0aW1lIG9mIHBheW1lbnRzIG11c3Qgbm90IHN0YWxsIHRoZSBELUFTQQogICAgLy8gcGF5bWVudF9hbW91bnQgPSBVSW50NjQoKQogICAgaW50Y18wIC8vIDAKICAgIGIgcGF5X2NvdXBvbl9hZnRlcl9pZl9lbHNlQDMKCnBheV9jb3Vwb25fYm9vbF9mYWxzZUAxNDoKICAgIGludGNfMCAvLyAwCiAgICBiIHBheV9jb3Vwb25fYm9vbF9tZXJnZUAxNQoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wZXJwZXR1YWxfYm9uZC5jb250cmFjdC5QZXJwZXR1YWxCb25kLmFsbF9kdWVfY291cG9uc19wYWlkKGR1ZV9jb3Vwb25zOiB1aW50NjQpIC0+IHVpbnQ2NDoKYWxsX2R1ZV9jb3Vwb25zX3BhaWQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6OTAtOTEKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgYWxsX2R1ZV9jb3Vwb25zX3BhaWQoc2VsZiwgZHVlX2NvdXBvbnM6IFVJbnQ2NCkgLT4gYm9vbDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjkyCiAgICAvLyByZXR1cm4gc2VsZi5wYWlkX2NvdXBvbl91bml0cyA+PSBzZWxmLmNpcmN1bGF0aW5nX3VuaXRzICogZHVlX2NvdXBvbnMKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAyMyAvLyAicGFpZF9jb3Vwb25fdW5pdHMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGFpZF9jb3Vwb25fdW5pdHMgZXhpc3RzCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiY2lyY3VsYXRpbmdfdW5pdHMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY2lyY3VsYXRpbmdfdW5pdHMgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTEKICAgICoKICAgID49CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuYmFzZV9kX2FzYS5jb250cmFjdC5CYXNlREFzYS5hY2NvdW50X3RvdGFsX3VuaXRzX3ZhbHVlKGhvbGRpbmdfYWRkcmVzczogYnl0ZXMpIC0+IHVpbnQ2NDoKYWNjb3VudF90b3RhbF91bml0c192YWx1ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjM0My0zNDQKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgYWNjb3VudF90b3RhbF91bml0c192YWx1ZShzZWxmLCBob2xkaW5nX2FkZHJlc3M6IGFyYzQuQWRkcmVzcykgLT4gVUludDY0OgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozNDYKICAgIC8vIGhvbGRpbmdfYWRkcmVzcywgc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10udW5pdHMubmF0aXZlCiAgICBieXRlY18xIC8vIDB4NTIzMzMwMjMKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCAzMiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MzQ1LTM0NwogICAgLy8gcmV0dXJuIHNlbGYuYWNjb3VudF91bml0c192YWx1ZSgKICAgIC8vICAgICBob2xkaW5nX2FkZHJlc3MsIHNlbGYuYWNjb3VudFtob2xkaW5nX2FkZHJlc3NdLnVuaXRzLm5hdGl2ZQogICAgLy8gKQogICAgZnJhbWVfZGlnIC0xCiAgICBzd2FwCiAgICBjYWxsc3ViIGFjY291bnRfdW5pdHNfdmFsdWUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wZXJwZXR1YWxfYm9uZC5jb250cmFjdC5QZXJwZXR1YWxCb25kLnVwZGF0ZV9pbnRlcmVzdF9yYXRlKGludGVyZXN0X3JhdGU6IGJ5dGVzKSAtPiBieXRlczoKdXBkYXRlX2ludGVyZXN0X3JhdGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjU1LTI1NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgdXBkYXRlX2ludGVyZXN0X3JhdGUoc2VsZiwgaW50ZXJlc3RfcmF0ZTogYXJjNC5VSW50NjQpIC0+IGFyYzQuVUludDY0OgogICAgcHJvdG8gMSAxCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTYzCiAgICAvLyBjYWxsZXIgaW4gc2VsZi5pbnRlcmVzdF9vcmFjbGUKICAgIGJ5dGVjIDI2IC8vIDB4NTIzODMwMjMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE2MQogICAgLy8gY2FsbGVyID0gYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNjMKICAgIC8vIGNhbGxlciBpbiBzZWxmLmludGVyZXN0X29yYWNsZQogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTYzLTE2NgogICAgLy8gY2FsbGVyIGluIHNlbGYuaW50ZXJlc3Rfb3JhY2xlCiAgICAvLyBhbmQgc2VsZi5pbnRlcmVzdF9vcmFjbGVbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPD0gc2VsZi5pbnRlcmVzdF9vcmFjbGVbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X2VuZAogICAgYnogdXBkYXRlX2ludGVyZXN0X3JhdGVfYm9vbF9mYWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNjQKICAgIC8vIGFuZCBzZWxmLmludGVyZXN0X29yYWNsZVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5pbnRlcmVzdF9vcmFjbGUgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE2NQogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE2NC0xNjUKICAgIC8vIGFuZCBzZWxmLmludGVyZXN0X29yYWNsZVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIC8vIDw9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICBpdG9iCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgYjw9CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNjQtMTY2CiAgICAvLyBhbmQgc2VsZi5pbnRlcmVzdF9vcmFjbGVbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPD0gc2VsZi5pbnRlcmVzdF9vcmFjbGVbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X2VuZAogICAgYnogdXBkYXRlX2ludGVyZXN0X3JhdGVfYm9vbF9mYWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNjYKICAgIC8vIDw9IHNlbGYuaW50ZXJlc3Rfb3JhY2xlW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9lbmQKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5pbnRlcmVzdF9vcmFjbGUgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE2NS0xNjYKICAgIC8vIDw9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICAvLyA8PSBzZWxmLmludGVyZXN0X29yYWNsZVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfZW5kCiAgICBmcmFtZV9kaWcgMAogICAgYj49CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNjQtMTY2CiAgICAvLyBhbmQgc2VsZi5pbnRlcmVzdF9vcmFjbGVbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPD0gc2VsZi5pbnRlcmVzdF9vcmFjbGVbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X2VuZAogICAgYnogdXBkYXRlX2ludGVyZXN0X3JhdGVfYm9vbF9mYWxzZUA1CiAgICBpbnRjXzEgLy8gMQoKdXBkYXRlX2ludGVyZXN0X3JhdGVfYm9vbF9tZXJnZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTYyLTE2NwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBjYWxsZXIgaW4gc2VsZi5pbnRlcmVzdF9vcmFjbGUKICAgIC8vICAgICBhbmQgc2VsZi5pbnRlcmVzdF9vcmFjbGVbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyAgICAgPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIC8vICAgICA8PSBzZWxmLmludGVyZXN0X29yYWNsZVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfZW5kCiAgICAvLyApLCBlcnIuVU5BVVRIT1JJWkVECiAgICBhc3NlcnQgLy8gTm90IGF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToyNzMKICAgIC8vIHNlbGYuYXNzZXJ0X2lzX25vdF9kZWZhdWx0ZWQoKQogICAgY2FsbHN1YiBhc3NlcnRfaXNfbm90X2RlZmF1bHRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjI3NAogICAgLy8gc2VsZi5hc3NlcnRfaXNfbm90X3N1c3BlbmRlZCgpCiAgICBjYWxsc3ViIGFzc2VydF9pc19ub3Rfc3VzcGVuZGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6Mjc1CiAgICAvLyBkdWVfY291cG9ucyA9IHNlbGYuY291bnRfZHVlX2NvdXBvbnMoKQogICAgY2FsbHN1YiBjb3VudF9kdWVfY291cG9ucwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjI3NgogICAgLy8gYXNzZXJ0IHNlbGYuYWxsX2R1ZV9jb3Vwb25zX3BhaWQoZHVlX2NvdXBvbnMpLCBlcnIuUEVORElOR19DT1VQT05fUEFZTUVOVAogICAgY2FsbHN1YiBhbGxfZHVlX2NvdXBvbnNfcGFpZAogICAgYXNzZXJ0IC8vIFBlbmRpbmcgZHVlIGNvdXBvbiBwYXltZW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6Mjc4LTI3OQogICAgLy8gIyBVcGRhdGUgaW50ZXJlc3QgcmF0ZQogICAgLy8gc2VsZi5pbnRlcmVzdF9yYXRlID0gaW50ZXJlc3RfcmF0ZS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgYnl0ZWMgNiAvLyAiaW50ZXJlc3RfcmF0ZSIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MjgwCiAgICAvLyByZXR1cm4gYXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXApCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKdXBkYXRlX2ludGVyZXN0X3JhdGVfYm9vbF9mYWxzZUA1OgogICAgaW50Y18wIC8vIDAKICAgIGIgdXBkYXRlX2ludGVyZXN0X3JhdGVfYm9vbF9tZXJnZUA2CgoKLy8gc21hcnRfY29udHJhY3RzLnBlcnBldHVhbF9ib25kLmNvbnRyYWN0LlBlcnBldHVhbEJvbmQuZ2V0X2FjY291bnRfdW5pdHNfY3VycmVudF92YWx1ZShob2xkaW5nX2FkZHJlc3M6IGJ5dGVzLCB1bml0czogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRfYWNjb3VudF91bml0c19jdXJyZW50X3ZhbHVlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjI4Mi0yODUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIGdldF9hY2NvdW50X3VuaXRzX2N1cnJlbnRfdmFsdWUoCiAgICAvLyAgICAgc2VsZiwgaG9sZGluZ19hZGRyZXNzOiBhcmM0LkFkZHJlc3MsIHVuaXRzOiBhcmM0LlVJbnQ2NAogICAgLy8gKSAtPiB0eXAuQ3VycmVudFVuaXRzVmFsdWU6CiAgICBwcm90byAyIDEKICAgIGludGNfMCAvLyAwCiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cG4gNQogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjMwMwogICAgLy8gc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA5IC8vICJwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjMwMy0zMDQKICAgIC8vIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRlCiAgICAvLyBhbmQgR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPj0gc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUKICAgIGJ6IGdldF9hY2NvdW50X3VuaXRzX2N1cnJlbnRfdmFsdWVfYm9vbF9mYWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzA0CiAgICAvLyBhbmQgR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPj0gc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA5IC8vICJwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRlIGV4aXN0cwogICAgPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozMDMtMzA0CiAgICAvLyBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX29wZW5pbmdfZGF0ZQogICAgLy8gYW5kIEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wID49IHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRlCiAgICBieiBnZXRfYWNjb3VudF91bml0c19jdXJyZW50X3ZhbHVlX2Jvb2xfZmFsc2VAMwogICAgaW50Y18xIC8vIDEKCmdldF9hY2NvdW50X3VuaXRzX2N1cnJlbnRfdmFsdWVfYm9vbF9tZXJnZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjMwMi0zMDUKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUKICAgIC8vICAgICBhbmQgR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPj0gc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUKICAgIC8vICksIGVyci5OT19QUklNQVJZX0RJU1RSSUJVVElPTgogICAgYXNzZXJ0IC8vIFByaW1hcnkgZGlzdHJpYnV0aW9uIG5vdCB5ZXQgZXhlY3V0ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE3MQogICAgLy8gYXNzZXJ0IGhvbGRpbmdfYWRkcmVzcyBpbiBzZWxmLmFjY291bnQsIGVyci5JTlZBTElEX0hPTERJTkdfQUREUkVTUwogICAgYnl0ZWNfMSAvLyAweDUyMzMzMDIzCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEludmFsaWQgYWNjb3VudCBob2xkaW5nIGFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozMDgKICAgIC8vIDAgPCB1bml0cyA8PSBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS51bml0cy5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYnl0ZWMgNyAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGI+CiAgICBieiBnZXRfYWNjb3VudF91bml0c19jdXJyZW50X3ZhbHVlX2Jvb2xfZmFsc2VANwogICAgZnJhbWVfZGlnIDAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDMyIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTEKICAgIGI+PQogICAgYnogZ2V0X2FjY291bnRfdW5pdHNfY3VycmVudF92YWx1ZV9ib29sX2ZhbHNlQDcKICAgIGludGNfMSAvLyAxCgpnZXRfYWNjb3VudF91bml0c19jdXJyZW50X3ZhbHVlX2Jvb2xfbWVyZ2VAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozMDctMzA5CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIDAgPCB1bml0cyA8PSBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS51bml0cy5uYXRpdmUKICAgIC8vICksIGVyci5JTlZBTElEX1VOSVRTCiAgICBhc3NlcnQgLy8gSW52YWxpZCBhbW91bnQgb2YgdW5pdHMgZm9yIHRoZSBhY2NvdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzEzCiAgICAvLyBob2xkaW5nX2FkZHJlc3MsIHVuaXRzLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjMxMS0zMTQKICAgIC8vICMgVmFsdWUgZHVyaW5nIHByaW1hcnkgZGlzdHJpYnV0aW9uCiAgICAvLyBhY2NvdW50X3VuaXRzX25vbWluYWxfdmFsdWUgPSBzZWxmLmFjY291bnRfdW5pdHNfdmFsdWUoCiAgICAvLyAgICAgaG9sZGluZ19hZGRyZXNzLCB1bml0cy5uYXRpdmUKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMgogICAgc3dhcAogICAgY2FsbHN1YiBhY2NvdW50X3VuaXRzX3ZhbHVlCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozMTUtMzE2CiAgICAvLyAjIEFjY3J1aW5nIGludGVyZXN0IGR1cmluZyBwcmltYXJ5IGRpc3RyaWJ1dGlvbgogICAgLy8gYWNjcnVlZF9pbnRlcmVzdCA9IFVJbnQ2NCgpCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzE3CiAgICAvLyBudW1lcmF0b3IgPSBVSW50NjQoKQogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgNQogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjMxOAogICAgLy8gZGVub21pbmF0b3IgPSBVSW50NjQoKQogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjMyMC0zMjEKICAgIC8vICMgQWNjcnVpbmcgaW50ZXJlc3QKICAgIC8vIGR1ZV9jb3Vwb25zID0gc2VsZi5jb3VudF9kdWVfY291cG9ucygpCiAgICBjYWxsc3ViIGNvdW50X2R1ZV9jb3Vwb25zCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjMyMgogICAgLy8gc2VsZi5hc3NlcnRfbm9fcGVuZGluZ19jb3Vwb25fcGF5bWVudChob2xkaW5nX2FkZHJlc3MsIGR1ZV9jb3Vwb25zKQogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICBjYWxsc3ViIGFzc2VydF9ub19wZW5kaW5nX2NvdXBvbl9wYXltZW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzIzCiAgICAvLyBpZiBzZWxmLmlzX2FjY3J1aW5nX2ludGVyZXN0KCk6CiAgICBjYWxsc3ViIGlzX2FjY3J1aW5nX2ludGVyZXN0CiAgICBieiBnZXRfYWNjb3VudF91bml0c19jdXJyZW50X3ZhbHVlX2FmdGVyX2lmX2Vsc2VAMTAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozMjQKICAgIC8vIGRheV9jb3VudF9mYWN0b3IgPSBzZWxmLmRheV9jb3VudF9mYWN0b3IoZHVlX2NvdXBvbnMpCiAgICBmcmFtZV9kaWcgNAogICAgZHVwCiAgICBjYWxsc3ViIGRheV9jb3VudF9mYWN0b3IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozMjUtMzI3CiAgICAvLyBhY2NydWVkX2ludGVyZXN0ID0gc2VsZi5hY2NydWVkX2ludGVyZXN0X2Ftb3VudCgKICAgIC8vICAgICBob2xkaW5nX2FkZHJlc3MsIHVuaXRzLm5hdGl2ZSwgZHVlX2NvdXBvbnMKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIDYKICAgIHVuY292ZXIgMwogICAgY2FsbHN1YiBhY2NydWVkX2ludGVyZXN0X2Ftb3VudAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzI4CiAgICAvLyBudW1lcmF0b3IgPSBkYXlfY291bnRfZmFjdG9yLm51bWVyYXRvci5uYXRpdmUKICAgIGR1cAogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBmcmFtZV9idXJ5IDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozMjkKICAgIC8vIGRlbm9taW5hdG9yID0gZGF5X2NvdW50X2ZhY3Rvci5kZW5vbWluYXRvci5uYXRpdmUKICAgIGV4dHJhY3QgOCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgZnJhbWVfYnVyeSAzCgpnZXRfYWNjb3VudF91bml0c19jdXJyZW50X3ZhbHVlX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzMxCiAgICAvLyB1bml0c192YWx1ZT1hcmM0LlVJbnQ2NChhY2NvdW50X3VuaXRzX25vbWluYWxfdmFsdWUpLAogICAgZnJhbWVfZGlnIDEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozMzIKICAgIC8vIGFjY3J1ZWRfaW50ZXJlc3Q9YXJjNC5VSW50NjQoYWNjcnVlZF9pbnRlcmVzdCksCiAgICBmcmFtZV9kaWcgMgogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjMzNAogICAgLy8gbnVtZXJhdG9yPWFyYzQuVUludDY0KG51bWVyYXRvciksCiAgICBmcmFtZV9kaWcgNQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjMzNQogICAgLy8gZGVub21pbmF0b3I9YXJjNC5VSW50NjQoZGVub21pbmF0b3IpLAogICAgZnJhbWVfZGlnIDMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozMzMtMzM2CiAgICAvLyBkYXlfY291bnRfZmFjdG9yPXR5cC5EYXlDb3VudEZhY3RvcigKICAgIC8vICAgICBudW1lcmF0b3I9YXJjNC5VSW50NjQobnVtZXJhdG9yKSwKICAgIC8vICAgICBkZW5vbWluYXRvcj1hcmM0LlVJbnQ2NChkZW5vbWluYXRvciksCiAgICAvLyApLAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzMwLTMzNwogICAgLy8gcmV0dXJuIHR5cC5DdXJyZW50VW5pdHNWYWx1ZSgKICAgIC8vICAgICB1bml0c192YWx1ZT1hcmM0LlVJbnQ2NChhY2NvdW50X3VuaXRzX25vbWluYWxfdmFsdWUpLAogICAgLy8gICAgIGFjY3J1ZWRfaW50ZXJlc3Q9YXJjNC5VSW50NjQoYWNjcnVlZF9pbnRlcmVzdCksCiAgICAvLyAgICAgZGF5X2NvdW50X2ZhY3Rvcj10eXAuRGF5Q291bnRGYWN0b3IoCiAgICAvLyAgICAgICAgIG51bWVyYXRvcj1hcmM0LlVJbnQ2NChudW1lcmF0b3IpLAogICAgLy8gICAgICAgICBkZW5vbWluYXRvcj1hcmM0LlVJbnQ2NChkZW5vbWluYXRvciksCiAgICAvLyAgICAgKSwKICAgIC8vICkKICAgIGNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKZ2V0X2FjY291bnRfdW5pdHNfY3VycmVudF92YWx1ZV9ib29sX2ZhbHNlQDc6CiAgICBpbnRjXzAgLy8gMAogICAgYiBnZXRfYWNjb3VudF91bml0c19jdXJyZW50X3ZhbHVlX2Jvb2xfbWVyZ2VAOAoKZ2V0X2FjY291bnRfdW5pdHNfY3VycmVudF92YWx1ZV9ib29sX2ZhbHNlQDM6CiAgICBpbnRjXzAgLy8gMAogICAgYiBnZXRfYWNjb3VudF91bml0c19jdXJyZW50X3ZhbHVlX2Jvb2xfbWVyZ2VANAoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wZXJwZXR1YWxfYm9uZC5jb250cmFjdC5QZXJwZXR1YWxCb25kLmlzX2FjY3J1aW5nX2ludGVyZXN0KCkgLT4gdWludDY0Ogppc19hY2NydWluZ19pbnRlcmVzdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMjMtMTI0CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGlzX2FjY3J1aW5nX2ludGVyZXN0KHNlbGYpIC0+IGJvb2w6CiAgICBwcm90byAwIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weToxMjUKICAgIC8vIHJldHVybiBzZWxmLmlzc3VhbmNlX2RhdGUgIT0gMCBhbmQgR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPiBzZWxmLmlzc3VhbmNlX2RhdGUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJpc3N1YW5jZV9kYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmlzc3VhbmNlX2RhdGUgZXhpc3RzCiAgICBieiBpc19hY2NydWluZ19pbnRlcmVzdF9ib29sX2ZhbHNlQDMKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJpc3N1YW5jZV9kYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmlzc3VhbmNlX2RhdGUgZXhpc3RzCiAgICA+CiAgICBieiBpc19hY2NydWluZ19pbnRlcmVzdF9ib29sX2ZhbHNlQDMKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCmlzX2FjY3J1aW5nX2ludGVyZXN0X2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MTI1CiAgICAvLyByZXR1cm4gc2VsZi5pc3N1YW5jZV9kYXRlICE9IDAgYW5kIEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wID4gc2VsZi5pc3N1YW5jZV9kYXRlCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucGVycGV0dWFsX2JvbmQuY29udHJhY3QuUGVycGV0dWFsQm9uZC5nZXRfcGF5bWVudF9hbW91bnQoaG9sZGluZ19hZGRyZXNzOiBieXRlcykgLT4gYnl0ZXM6CmdldF9wYXltZW50X2Ftb3VudDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozMzktMzQwCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiBnZXRfcGF5bWVudF9hbW91bnQoc2VsZiwgaG9sZGluZ19hZGRyZXNzOiBhcmM0LkFkZHJlc3MpIC0+IHR5cC5QYXltZW50QW1vdW50czoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTcxCiAgICAvLyBhc3NlcnQgaG9sZGluZ19hZGRyZXNzIGluIHNlbGYuYWNjb3VudCwgZXJyLklOVkFMSURfSE9MRElOR19BRERSRVNTCiAgICBieXRlY18xIC8vIDB4NTIzMzMwMjMKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFjY291bnQgaG9sZGluZyBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzU1CiAgICAvLyBzZWxmLmFjY291bnRfdG90YWxfdW5pdHNfdmFsdWUoaG9sZGluZ19hZGRyZXNzKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIGFjY291bnRfdG90YWxfdW5pdHNfdmFsdWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozNTYKICAgIC8vICogc2VsZi5pbnRlcmVzdF9yYXRlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiaW50ZXJlc3RfcmF0ZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5pbnRlcmVzdF9yYXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjM1NS0zNTYKICAgIC8vIHNlbGYuYWNjb3VudF90b3RhbF91bml0c192YWx1ZShob2xkaW5nX2FkZHJlc3MpCiAgICAvLyAqIHNlbGYuaW50ZXJlc3RfcmF0ZQogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjM1NwogICAgLy8gLy8gY3N0LkJQUwogICAgaW50YyA1IC8vIDEwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzU1LTM1NwogICAgLy8gc2VsZi5hY2NvdW50X3RvdGFsX3VuaXRzX3ZhbHVlKGhvbGRpbmdfYWRkcmVzcykKICAgIC8vICogc2VsZi5pbnRlcmVzdF9yYXRlCiAgICAvLyAvLyBjc3QuQlBTCiAgICAvCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzYwCiAgICAvLyBpbnRlcmVzdD1hcmM0LlVJbnQ2NChpbnRlcmVzdF9hbW91bnQpLAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjM2MQogICAgLy8gcHJpbmNpcGFsPWFyYzQuVUludDY0KCksCiAgICBieXRlYyA3IC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjM1OS0zNjIKICAgIC8vIHJldHVybiB0eXAuUGF5bWVudEFtb3VudHMoCiAgICAvLyAgICAgaW50ZXJlc3Q9YXJjNC5VSW50NjQoaW50ZXJlc3RfYW1vdW50KSwKICAgIC8vICAgICBwcmluY2lwYWw9YXJjNC5VSW50NjQoKSwKICAgIC8vICkKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnBlcnBldHVhbF9ib25kLmNvbnRyYWN0LlBlcnBldHVhbEJvbmQuZ2V0X2NvdXBvbnNfc3RhdHVzKCkgLT4gYnl0ZXM6CmdldF9jb3Vwb25zX3N0YXR1czoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozNjQtMzY1CiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiBnZXRfY291cG9uc19zdGF0dXMoc2VsZikgLT4gdHlwLkNvdXBvbnNJbmZvOgogICAgcHJvdG8gMCAxCiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cG4gNAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTAxCiAgICAvLyByZXR1cm4gc2VsZi5zdGF0dXMgPT0gY2ZnLlNUQVRVU19BQ1RJVkUKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJzdGF0dXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3RhdHVzIGV4aXN0cwogICAgaW50Y18zIC8vIDEwMAogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozNzMKICAgIC8vIGR1ZV9jb3Vwb25zID0gc2VsZi5jb3VudF9kdWVfY291cG9ucygpIGlmIHNlbGYuc3RhdHVzX2lzX2FjdGl2ZSgpIGVsc2UgVUludDY0KCkKICAgIGJ6IGdldF9jb3Vwb25zX3N0YXR1c190ZXJuYXJ5X2ZhbHNlQDIKICAgIGNhbGxzdWIgY291bnRfZHVlX2NvdXBvbnMKICAgIGZyYW1lX2J1cnkgMgoKZ2V0X2NvdXBvbnNfc3RhdHVzX3Rlcm5hcnlfbWVyZ2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo4OAogICAgLy8gcmV0dXJuIHNlbGYuY291cG9uX2R1ZV9kYXRlKGR1ZV9jb3Vwb25zICsgMSkKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBjYWxsc3ViIGNvdXBvbl9kdWVfZGF0ZQogICAgZnJhbWVfYnVyeSAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6Mzc1CiAgICAvLyBhbGxfZHVlX2NvdXBvbnNfcGFpZCA9IHNlbGYuYWxsX2R1ZV9jb3Vwb25zX3BhaWQoZHVlX2NvdXBvbnMpCiAgICBjYWxsc3ViIGFsbF9kdWVfY291cG9uc19wYWlkCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozNzYKICAgIC8vIG51bWVyYXRvciA9IFVJbnQ2NCgpCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6Mzc3CiAgICAvLyBkZW5vbWluYXRvciA9IFVJbnQ2NCgpCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6Mzc4CiAgICAvLyBpZiBzZWxmLmlzX2FjY3J1aW5nX2ludGVyZXN0KCk6CiAgICBjYWxsc3ViIGlzX2FjY3J1aW5nX2ludGVyZXN0CiAgICBieiBnZXRfY291cG9uc19zdGF0dXNfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6Mzc5CiAgICAvLyBkYXlfY291bnRfZmFjdG9yID0gc2VsZi5kYXlfY291bnRfZmFjdG9yKGR1ZV9jb3Vwb25zKQogICAgZnJhbWVfZGlnIDIKICAgIGNhbGxzdWIgZGF5X2NvdW50X2ZhY3RvcgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjM4MAogICAgLy8gbnVtZXJhdG9yID0gZGF5X2NvdW50X2ZhY3Rvci5udW1lcmF0b3IubmF0aXZlCiAgICBkdXAKICAgIGV4dHJhY3QgMCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzgxCiAgICAvLyBkZW5vbWluYXRvciA9IGRheV9jb3VudF9mYWN0b3IuZGVub21pbmF0b3IubmF0aXZlCiAgICBleHRyYWN0IDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGZyYW1lX2J1cnkgMQoKZ2V0X2NvdXBvbnNfc3RhdHVzX2FmdGVyX2lmX2Vsc2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozODMKICAgIC8vIHRvdGFsX2NvdXBvbnM9YXJjNC5VSW50NjQoc2VsZi50b3RhbF9jb3Vwb25zKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA4IC8vICJ0b3RhbF9jb3Vwb25zIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX2NvdXBvbnMgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6Mzg0CiAgICAvLyBkdWVfY291cG9ucz1hcmM0LlVJbnQ2NChkdWVfY291cG9ucyksCiAgICBmcmFtZV9kaWcgMgogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjM4NQogICAgLy8gbmV4dF9jb3Vwb25fZHVlX2RhdGU9YXJjNC5VSW50NjQobmV4dF9jb3Vwb25fZHVlX2RhdGUpLAogICAgZnJhbWVfZGlnIDMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozODcKICAgIC8vIG51bWVyYXRvcj1hcmM0LlVJbnQ2NChudW1lcmF0b3IpLAogICAgZnJhbWVfZGlnIDQKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTozODgKICAgIC8vIGRlbm9taW5hdG9yPWFyYzQuVUludDY0KGRlbm9taW5hdG9yKSwKICAgIGZyYW1lX2RpZyAxCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6Mzg2LTM4OQogICAgLy8gZGF5X2NvdW50X2ZhY3Rvcj10eXAuRGF5Q291bnRGYWN0b3IoCiAgICAvLyAgICAgbnVtZXJhdG9yPWFyYzQuVUludDY0KG51bWVyYXRvciksCiAgICAvLyAgICAgZGVub21pbmF0b3I9YXJjNC5VSW50NjQoZGVub21pbmF0b3IpLAogICAgLy8gKSwKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjM5MAogICAgLy8gYWxsX2R1ZV9jb3Vwb25zX3BhaWQ9YXJjNC5Cb29sKGFsbF9kdWVfY291cG9uc19wYWlkKSwKICAgIGJ5dGVjIDExIC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9kaWcgMAogICAgc2V0Yml0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzgyLTM5MQogICAgLy8gcmV0dXJuIHR5cC5Db3Vwb25zSW5mbygKICAgIC8vICAgICB0b3RhbF9jb3Vwb25zPWFyYzQuVUludDY0KHNlbGYudG90YWxfY291cG9ucyksCiAgICAvLyAgICAgZHVlX2NvdXBvbnM9YXJjNC5VSW50NjQoZHVlX2NvdXBvbnMpLAogICAgLy8gICAgIG5leHRfY291cG9uX2R1ZV9kYXRlPWFyYzQuVUludDY0KG5leHRfY291cG9uX2R1ZV9kYXRlKSwKICAgIC8vICAgICBkYXlfY291bnRfZmFjdG9yPXR5cC5EYXlDb3VudEZhY3RvcigKICAgIC8vICAgICAgICAgbnVtZXJhdG9yPWFyYzQuVUludDY0KG51bWVyYXRvciksCiAgICAvLyAgICAgICAgIGRlbm9taW5hdG9yPWFyYzQuVUludDY0KGRlbm9taW5hdG9yKSwKICAgIC8vICAgICApLAogICAgLy8gICAgIGFsbF9kdWVfY291cG9uc19wYWlkPWFyYzQuQm9vbChhbGxfZHVlX2NvdXBvbnNfcGFpZCksCiAgICAvLyApCiAgICB1bmNvdmVyIDQKICAgIHVuY292ZXIgNAogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCmdldF9jb3Vwb25zX3N0YXR1c190ZXJuYXJ5X2ZhbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzczCiAgICAvLyBkdWVfY291cG9ucyA9IHNlbGYuY291bnRfZHVlX2NvdXBvbnMoKSBpZiBzZWxmLnN0YXR1c19pc19hY3RpdmUoKSBlbHNlIFVJbnQ2NCgpCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAyCiAgICBiIGdldF9jb3Vwb25zX3N0YXR1c190ZXJuYXJ5X21lcmdlQDMKCgovLyBzbWFydF9jb250cmFjdHMucGVycGV0dWFsX2JvbmQuY29udHJhY3QuUGVycGV0dWFsQm9uZC5nZXRfdGltZV9wZXJpb2RzKCkgLT4gYnl0ZXM6CmdldF90aW1lX3BlcmlvZHM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6MzkzLTM5NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZ2V0X3RpbWVfcGVyaW9kcyhzZWxmKSAtPiB0eXAuVGltZVBlcmlvZHM6CiAgICBwcm90byAwIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo0MDEKICAgIC8vIHRpbWVfcGVyaW9kcyA9IHR5cC5UaW1lUGVyaW9kcygpCiAgICBieXRlYyAzMiAvLyAweDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEwMQogICAgLy8gcmV0dXJuIHNlbGYuc3RhdHVzID09IGNmZy5TVEFUVVNfQUNUSVZFCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAic3RhdHVzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXR1cyBleGlzdHMKICAgIGludGNfMyAvLyAxMDAKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6NDAyCiAgICAvLyBpZiBzZWxmLnN0YXR1c19pc19hY3RpdmUoKToKICAgIGJ6IGdldF90aW1lX3BlcmlvZHNfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6NDAzCiAgICAvLyB0aW1lX3BlcmlvZHMgPSBzZWxmLnRpbWVfcGVyaW9kcy52YWx1ZS5jb3B5KCkKICAgIGJ5dGVjIDI0IC8vIDB4NzQ2OTZkNjU1MDY1NzI2OTZmNjQ3MwogICAgYm94X2dldAogICAgc3dhcAogICAgZnJhbWVfYnVyeSAwCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50aW1lX3BlcmlvZHMgZXhpc3RzCgpnZXRfdGltZV9wZXJpb2RzX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo0MDQKICAgIC8vIHJldHVybiB0aW1lX3BlcmlvZHMKICAgIGZyYW1lX2RpZyAwCiAgICBzd2FwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuYmFzZV9kX2FzYS5jb250cmFjdC5CYXNlREFzYS5hc3NldF9jcmVhdGUoYXJyYW5nZXI6IGJ5dGVzLCBtZXRhZGF0YTogYnl0ZXMpIC0+IHZvaWQ6CmFzc2V0X2NyZWF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjQ1Ni00NTcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChjcmVhdGU9InJlcXVpcmUiKQogICAgLy8gZGVmIGFzc2V0X2NyZWF0ZShzZWxmLCBhcnJhbmdlcjogYXJjNC5BZGRyZXNzLCBtZXRhZGF0YTogdHlwLkFzc2V0TWV0YWRhdGEpIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjQ2NQogICAgLy8gc2VsZi5hcnJhbmdlci52YWx1ZSA9IGFycmFuZ2VyLm5hdGl2ZQogICAgYnl0ZWMgMTggLy8gMHg1MjMyMzAyMwogICAgZnJhbWVfZGlnIC0yCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NDY2CiAgICAvLyBzZWxmLm1ldGFkYXRhID0gbWV0YWRhdGEuYnl0ZXMKICAgIGJ5dGVjIDI1IC8vICJtZXRhZGF0YSIKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5iYXNlX2RfYXNhLmNvbnRyYWN0LkJhc2VEQXNhLmFzc2V0X2NvbmZpZyhkZW5vbWluYXRpb25fYXNzZXRfaWQ6IGJ5dGVzLCBzZXR0bGVtZW50X2Fzc2V0X2lkOiBieXRlcywgcHJpbmNpcGFsOiBieXRlcywgbWluaW11bV9kZW5vbWluYXRpb246IGJ5dGVzLCBkYXlfY291bnRfY29udmVudGlvbjogYnl0ZXMsIGludGVyZXN0X3JhdGU6IGJ5dGVzLCBjb3Vwb25fcmF0ZXM6IGJ5dGVzLCB0aW1lX2V2ZW50czogYnl0ZXMsIHRpbWVfcGVyaW9kczogYnl0ZXMpIC0+IHZvaWQ6CmFzc2V0X2NvbmZpZzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjQ3OC00OTAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFzc2V0X2NvbmZpZygKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIGRlbm9taW5hdGlvbl9hc3NldF9pZDogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgc2V0dGxlbWVudF9hc3NldF9pZDogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgcHJpbmNpcGFsOiBhcmM0LlVJbnQ2NCwKICAgIC8vICAgICBtaW5pbXVtX2Rlbm9taW5hdGlvbjogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgZGF5X2NvdW50X2NvbnZlbnRpb246IGFyYzQuVUludDgsCiAgICAvLyAgICAgaW50ZXJlc3RfcmF0ZTogYXJjNC5VSW50MTYsCiAgICAvLyAgICAgY291cG9uX3JhdGVzOiB0eXAuQ291cG9uUmF0ZXMsCiAgICAvLyAgICAgdGltZV9ldmVudHM6IHR5cC5UaW1lRXZlbnRzLAogICAgLy8gICAgIHRpbWVfcGVyaW9kczogdHlwLlRpbWVQZXJpb2RzLAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gOSAwCiAgICBpbnRjXzAgLy8gMAogICAgcHVzaGJ5dGVzICIiCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjUxOQogICAgLy8gc2VsZi5hc3NlcnRfY2FsbGVyX2lzX2FycmFuZ2VyKCkKICAgIGNhbGxzdWIgYXNzZXJ0X2NhbGxlcl9pc19hcnJhbmdlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NTIwCiAgICAvLyBhc3NlcnQgc2VsZi5zdGF0dXMgPT0gY2ZnLlNUQVRVU19FTVBUWSwgZXJyLkFMUkVBRFlfQ09ORklHVVJFRAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gInN0YXR1cyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zdGF0dXMgZXhpc3RzCiAgICAhCiAgICBhc3NlcnQgLy8gRC1BU0EgYWxyZWFkeSBjb25maWd1cmVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1MjItNTIzCiAgICAvLyAjIFNldCBEZW5vbWluYXRpb24gQXNzZXQKICAgIC8vIHNlbGYuYXNzZXJ0X2Rlbm9taW5hdGlvbl9hc3NldChkZW5vbWluYXRpb25fYXNzZXRfaWQubmF0aXZlKQogICAgZnJhbWVfZGlnIC05CiAgICBidG9pCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE3NwogICAgLy8gZGVub21pbmF0aW9uX2Fzc2V0X2lkICE9IFVJbnQ2NCgwKSBhbmQgQXNzZXQoZGVub21pbmF0aW9uX2Fzc2V0X2lkKS5jcmVhdG9yCiAgICBieiBhc3NldF9jb25maWdfYm9vbF9mYWxzZUA0CiAgICBmcmFtZV9kaWcgMwogICAgYXNzZXRfcGFyYW1zX2dldCBBc3NldENyZWF0b3IKICAgIGFzc2VydCAvLyBhc3NldCBleGlzdHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGJ6IGFzc2V0X2NvbmZpZ19ib29sX2ZhbHNlQDQKICAgIGludGNfMSAvLyAxCgphc3NldF9jb25maWdfYm9vbF9tZXJnZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTc1LTE3OAogICAgLy8gIyBUaGUgcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uIGhhcyBvbi1jaGFpbiBkZW5vbWluYXRpb24gd2l0aCBBU0EKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgZGVub21pbmF0aW9uX2Fzc2V0X2lkICE9IFVJbnQ2NCgwKSBhbmQgQXNzZXQoZGVub21pbmF0aW9uX2Fzc2V0X2lkKS5jcmVhdG9yCiAgICAvLyApLCBlcnIuSU5WQUxJRF9ERU5PTUlOQVRJT04KICAgIGFzc2VydCAvLyBEZW5vbWluYXRpb24gYXNzZXQgaXMgbm90IHByb3Blcmx5IHNldAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTgyCiAgICAvLyBzZWxmLmRlbm9taW5hdGlvbl9hc3NldF9pZCA9IGRlbm9taW5hdGlvbl9hc3NldF9pZAogICAgYnl0ZWMgMTkgLy8gImRlbm9taW5hdGlvbl9hc3NldF9pZCIKICAgIGZyYW1lX2RpZyAzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NTI2LTUyNwogICAgLy8gIyBTZXQgRGVub21pbmF0aW9uIEFzc2V0CiAgICAvLyBzZWxmLmFzc2VydF9zZXR0bGVtZW50X2Fzc2V0KHNldHRsZW1lbnRfYXNzZXRfaWQubmF0aXZlKQogICAgZnJhbWVfZGlnIC04CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxODgKICAgIC8vIHNldHRsZW1lbnRfYXNzZXRfaWQgPT0gc2VsZi5kZW5vbWluYXRpb25fYXNzZXRfaWQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxOSAvLyAiZGVub21pbmF0aW9uX2Fzc2V0X2lkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRlbm9taW5hdGlvbl9hc3NldF9pZCBleGlzdHMKICAgIGRpZyAxCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTg2LTE4OQogICAgLy8gIyBUaGUgcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uIHNldHRsZW1lbnQgYXNzZXQgaXMgdGhlIGRlbm9taW5hdGlvbiBhc3NldAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBzZXR0bGVtZW50X2Fzc2V0X2lkID09IHNlbGYuZGVub21pbmF0aW9uX2Fzc2V0X2lkCiAgICAvLyApLCBlcnIuSU5WQUxJRF9TRVRUTEVNRU5UX0FTU0VUCiAgICBhc3NlcnQgLy8gRGlmZmVyZW50IHNldHRsZW1lbnQgYXNzZXQgbm90IHN1cHBvcnRlZCwgbXVzdCBiZSBlcXVhbCB0byBkZW5vbWluYXRpb24gYXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE5MwogICAgLy8gc2VsZi5zZXR0bGVtZW50X2Fzc2V0X2lkID0gc2V0dGxlbWVudF9hc3NldF9pZAogICAgYnl0ZWMgNSAvLyAic2V0dGxlbWVudF9hc3NldF9pZCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxOTQtMjAwCiAgICAvLyAjIFRoZSByZWZlcmVuY2UgaW1wbGVtZW50YXRpb24gaGFzIG9uLWNoYWluIHNldHRsZW1lbnQgd2l0aCBBU0EKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYuc2V0dGxlbWVudF9hc3NldF9pZCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD0wLAogICAgLy8gICAgIGZlZT1HbG9iYWwubWluX3R4bl9mZWUsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxOTkKICAgIC8vIGZlZT1HbG9iYWwubWluX3R4bl9mZWUsCiAgICBnbG9iYWwgTWluVHhuRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxOTYKICAgIC8vIHhmZXJfYXNzZXQ9c2VsZi5zZXR0bGVtZW50X2Fzc2V0X2lkLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDUgLy8gInNldHRsZW1lbnRfYXNzZXRfaWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc2V0dGxlbWVudF9hc3NldF9pZCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE5NwogICAgLy8gYXNzZXRfcmVjZWl2ZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxOTgKICAgIC8vIGFzc2V0X2Ftb3VudD0wLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE5NC0xOTUKICAgIC8vICMgVGhlIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiBoYXMgb24tY2hhaW4gc2V0dGxlbWVudCB3aXRoIEFTQQogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgcHVzaGludCA0IC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTk0LTIwMAogICAgLy8gIyBUaGUgcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uIGhhcyBvbi1jaGFpbiBzZXR0bGVtZW50IHdpdGggQVNBCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1zZWxmLnNldHRsZW1lbnRfYXNzZXRfaWQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBhc3NldF9hbW91bnQ9MCwKICAgIC8vICAgICBmZWU9R2xvYmFsLm1pbl90eG5fZmVlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjUzMgogICAgLy8gcHJpbmNpcGFsLm5hdGl2ZSAlIG1pbmltdW1fZGVub21pbmF0aW9uLm5hdGl2ZSA9PSAwCiAgICBmcmFtZV9kaWcgLTcKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtNgogICAgYnRvaQogICAgZHVwMgogICAgJQogICAgIQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NTMwLTUzMwogICAgLy8gIyBTZXQgUHJpbmNpcGFsIGFuZCBNaW5pbXVtIERlbm9taW5hdGlvbgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBwcmluY2lwYWwubmF0aXZlICUgbWluaW11bV9kZW5vbWluYXRpb24ubmF0aXZlID09IDAKICAgIC8vICksIGVyci5JTlZBTElEX01JTklNVU1fREVOT01JTkFUSU9OCiAgICBhc3NlcnQgLy8gTWluaW11bSBkZW5vbWluYXRpb24gaXMgbm90IGEgZGl2aXNvciBvZiBwcmluY2lwYWwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjUzNAogICAgLy8gc2VsZi51bml0X3ZhbHVlID0gbWluaW11bV9kZW5vbWluYXRpb24ubmF0aXZlCiAgICBieXRlYyAxMiAvLyAidW5pdF92YWx1ZSIKICAgIGRpZyAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NTM1CiAgICAvLyBzZWxmLnRvdGFsX3VuaXRzID0gcHJpbmNpcGFsLm5hdGl2ZSAvLyBtaW5pbXVtX2Rlbm9taW5hdGlvbi5uYXRpdmUKICAgIC8KICAgIGJ5dGVjIDE0IC8vICJ0b3RhbF91bml0cyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1MzctNTM4CiAgICAvLyAjIFNldCBEYXktQ291bnQgQ29udmVudGlvbgogICAgLy8gc2VsZi5hc3NlcnRfZGF5X2NvdW50X2NvbnZlbnRpb24oZGF5X2NvdW50X2NvbnZlbnRpb24ubmF0aXZlKQogICAgZnJhbWVfZGlnIC01CiAgICBidG9pCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MjA0LTIwOAogICAgLy8gIyBUaGUgcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uIHN1cHBvcnRzIG9ubHkgdGhlIEFjdHVhbC9BY3R1YWwgYW5kIENvbnRpbnVvdXMgZGF5LWNvdW50IGNvbnZlbnRpb25zCiAgICAvLyBhc3NlcnQgZGF5X2NvdW50X2NvbnZlbnRpb24gaW4gKAogICAgLy8gICAgIFVJbnQ2NChjc3QuRENDX0FfQSksCiAgICAvLyAgICAgVUludDY0KGNzdC5EQ0NfQ09OVCksCiAgICAvLyApLCBlcnIuSU5WQUxJRF9EQVlfQ09VTlRfQ09OVkVOVElPTgogICAgYnogYXNzZXRfY29uZmlnX2Jvb2xfdHJ1ZUAxNgogICAgZnJhbWVfZGlnIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjIwNwogICAgLy8gVUludDY0KGNzdC5EQ0NfQ09OVCksCiAgICBwdXNoaW50IDI1NSAvLyAyNTUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjIwNC0yMDgKICAgIC8vICMgVGhlIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiBzdXBwb3J0cyBvbmx5IHRoZSBBY3R1YWwvQWN0dWFsIGFuZCBDb250aW51b3VzIGRheS1jb3VudCBjb252ZW50aW9ucwogICAgLy8gYXNzZXJ0IGRheV9jb3VudF9jb252ZW50aW9uIGluICgKICAgIC8vICAgICBVSW50NjQoY3N0LkRDQ19BX0EpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuRENDX0NPTlQpLAogICAgLy8gKSwgZXJyLklOVkFMSURfREFZX0NPVU5UX0NPTlZFTlRJT04KICAgID09CiAgICBieiBhc3NldF9jb25maWdfYm9vbF9mYWxzZUAxNwoKYXNzZXRfY29uZmlnX2Jvb2xfdHJ1ZUAxNjoKICAgIGludGNfMSAvLyAxCgphc3NldF9jb25maWdfYm9vbF9tZXJnZUAxODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjIwNC0yMDgKICAgIC8vICMgVGhlIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiBzdXBwb3J0cyBvbmx5IHRoZSBBY3R1YWwvQWN0dWFsIGFuZCBDb250aW51b3VzIGRheS1jb3VudCBjb252ZW50aW9ucwogICAgLy8gYXNzZXJ0IGRheV9jb3VudF9jb252ZW50aW9uIGluICgKICAgIC8vICAgICBVSW50NjQoY3N0LkRDQ19BX0EpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuRENDX0NPTlQpLAogICAgLy8gKSwgZXJyLklOVkFMSURfREFZX0NPVU5UX0NPTlZFTlRJT04KICAgIGFzc2VydCAvLyBJbnZhbGlkIGRheS1jb3VudCBjb252ZW50aW9uIElECiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyMTIKICAgIC8vIHNlbGYuZGF5X2NvdW50X2NvbnZlbnRpb24gPSBkYXlfY291bnRfY29udmVudGlvbgogICAgYnl0ZWMgMTMgLy8gImRheV9jb3VudF9jb252ZW50aW9uIgogICAgZnJhbWVfZGlnIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1NDEtNTQyCiAgICAvLyAjIFNldCBJbnRlcmVzdCBSYXRlCiAgICAvLyBzZWxmLmFzc2VydF9pbnRlcmVzdF9yYXRlKGludGVyZXN0X3JhdGUubmF0aXZlKQogICAgZnJhbWVfZGlnIC00CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyMTYKICAgIC8vIGFzc2VydCBpbnRlcmVzdF9yYXRlID4gVUludDY0KDApLCBlcnIuSU5WQUxJRF9JTlRFUkVTVF9SQVRFCiAgICBkdXAKICAgIGFzc2VydCAvLyBJbnRlcmVzdCByYXRlIGlzIG5vdCBwcm9wZXJseSBkZWZpbmVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyMjAKICAgIC8vIHNlbGYuaW50ZXJlc3RfcmF0ZSA9IGludGVyZXN0X3JhdGUKICAgIGJ5dGVjIDYgLy8gImludGVyZXN0X3JhdGUiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MjI0CiAgICAvLyBhc3NlcnQgbm90IGNvdXBvbl9yYXRlcy5sZW5ndGgsIGVyci5JTlZBTElEX0NPVVBPTl9SQVRFUwogICAgZnJhbWVfZGlnIC0zCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGR1cAogICAgIQogICAgYXNzZXJ0IC8vIENvdXBvbiByYXRlcyBhcmUgbm90IHByb3Blcmx5IGRlZmluZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjIyOAogICAgLy8gc2VsZi50b3RhbF9jb3Vwb25zID0gY291cG9uX3JhdGVzLmxlbmd0aAogICAgYnl0ZWMgOCAvLyAidG90YWxfY291cG9ucyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyMjkKICAgIC8vIGlmIHNlbGYudG90YWxfY291cG9uczoKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA4IC8vICJ0b3RhbF9jb3Vwb25zIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX2NvdXBvbnMgZXhpc3RzCiAgICBieiBhc3NldF9jb25maWdfYWZ0ZXJfaWZfZWxzZUAzMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MjMwCiAgICAvLyBzZWxmLmNvdXBvbl9yYXRlcy52YWx1ZSA9IGNvdXBvbl9yYXRlcy5jb3B5KCkKICAgIGJ5dGVjIDMzIC8vIDB4NjM2Zjc1NzA2ZjZlNTI2MTc0NjU3MwogICAgYm94X2RlbAogICAgcG9wCiAgICBieXRlYyAzMyAvLyAweDYzNmY3NTcwNmY2ZTUyNjE3NDY1NzMKICAgIGZyYW1lX2RpZyAtMwogICAgYm94X3B1dAoKYXNzZXRfY29uZmlnX2FmdGVyX2lmX2Vsc2VAMzA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6NDkKICAgIC8vIHRpbWVfZXZlbnRzLmxlbmd0aCA9PSBzZWxmLnRvdGFsX2NvdXBvbnMgKyBjZmcuVElNRV9TQ0hFRFVMRV9MSU1JVFMKICAgIGZyYW1lX2RpZyAtMgogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgOCAvLyAidG90YWxfY291cG9ucyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbF9jb3Vwb25zIGV4aXN0cwogICAgcHVzaGludCAzIC8vIDMKICAgICsKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6NDctNTAKICAgIC8vICMgVGhlIHBlcnBldHVhbCBib25kIGhhcyB1bmRlZmluZWQgY291cG9ucyAodG90YWxfY291cG9ucyA9IDApIGFuZCBubyBtYXR1cml0eSBkYXRlCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHRpbWVfZXZlbnRzLmxlbmd0aCA9PSBzZWxmLnRvdGFsX2NvdXBvbnMgKyBjZmcuVElNRV9TQ0hFRFVMRV9MSU1JVFMKICAgIC8vICksIGVyci5JTlZBTElEX1RJTUVfRVZFTlRTX0xFTkdUSAogICAgYXNzZXJ0IC8vIFRpbWUgZXZlbnRzIGxlbmd0aCBpcyBpbnZhbGlkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1NTEKICAgIC8vIHNlbGYuYXNzZXJ0X3RpbWVfZXZlbnRzX3NvcnRlZCh0aW1lX2V2ZW50cykKICAgIGZyYW1lX2RpZyAtMgogICAgY2FsbHN1YiBhc3NlcnRfdGltZV9ldmVudHNfc29ydGVkCiAgICBmcmFtZV9idXJ5IC0yCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyNjAKICAgIC8vIHNlbGYudGltZV9ldmVudHMudmFsdWUgPSB0aW1lX2V2ZW50cy5jb3B5KCkKICAgIGJ5dGVjIDI3IC8vIDB4NzQ2OTZkNjU0NTc2NjU2ZTc0NzMKICAgIGJveF9kZWwKICAgIHBvcAogICAgYnl0ZWMgMjcgLy8gMHg3NDY5NmQ2NTQ1NzY2NTZlNzQ3MwogICAgZnJhbWVfZGlnIC0yCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyNjEtMjYzCiAgICAvLyBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX29wZW5pbmdfZGF0ZSA9IHRpbWVfZXZlbnRzWwogICAgLy8gICAgIGNmZy5QUklNQVJZX0RJU1RSSUJVVElPTl9PUEVOSU5HX0RBVEVfSURYCiAgICAvLyBdLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0yCiAgICBleHRyYWN0IDIgMAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIGR1cAogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyNjEKICAgIC8vIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRlID0gdGltZV9ldmVudHNbCiAgICBieXRlYyA5IC8vICJwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyNjEtMjYzCiAgICAvLyBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX29wZW5pbmdfZGF0ZSA9IHRpbWVfZXZlbnRzWwogICAgLy8gICAgIGNmZy5QUklNQVJZX0RJU1RSSUJVVElPTl9PUEVOSU5HX0RBVEVfSURYCiAgICAvLyBdLm5hdGl2ZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI2NC0yNjYKICAgIC8vIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fY2xvc3VyZV9kYXRlID0gdGltZV9ldmVudHNbCiAgICAvLyAgICAgY2ZnLlBSSU1BUllfRElTVFJJQlVUSU9OX0NMT1NVUkVfREFURV9JRFgKICAgIC8vIF0ubmF0aXZlCiAgICBkdXAKICAgIGV4dHJhY3QgOCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MjY0CiAgICAvLyBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX2Nsb3N1cmVfZGF0ZSA9IHRpbWVfZXZlbnRzWwogICAgYnl0ZWMgMjAgLy8gInByaW1hcnlfZGlzdHJpYnV0aW9uX2Nsb3N1cmVfZGF0ZSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI2NC0yNjYKICAgIC8vIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fY2xvc3VyZV9kYXRlID0gdGltZV9ldmVudHNbCiAgICAvLyAgICAgY2ZnLlBSSU1BUllfRElTVFJJQlVUSU9OX0NMT1NVUkVfREFURV9JRFgKICAgIC8vIF0ubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MjY3CiAgICAvLyBzZWxmLmlzc3VhbmNlX2RhdGUgPSB0aW1lX2V2ZW50c1tjZmcuSVNTVUFOQ0VfREFURV9JRFhdLm5hdGl2ZQogICAgZXh0cmFjdCAxNiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgYnl0ZWMgNCAvLyAiaXNzdWFuY2VfZGF0ZSIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyNjktMjcwCiAgICAvLyAjIFNvbWUgRC1BU0EgbWF5IG5vdCBoYXZlIGEgbWF0dXJpdHkgZGF0ZSAoZS5nLiwgcGVycGV0dWFscykKICAgIC8vIGlmIHRpbWVfZXZlbnRzLmxlbmd0aCA9PSBzZWxmLnRvdGFsX2NvdXBvbnMgKyBjZmcuVElNRV9TQ0hFRFVMRV9MSU1JVFM6CiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZHVwCiAgICBmcmFtZV9idXJ5IDIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA4IC8vICJ0b3RhbF9jb3Vwb25zIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX2NvdXBvbnMgZXhpc3RzCiAgICBwdXNoaW50IDQgLy8gNAogICAgKwogICAgPT0KICAgIGJ6IGFzc2V0X2NvbmZpZ19hZnRlcl9pZl9lbHNlQDM2CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyNzEKICAgIC8vIHNlbGYubWF0dXJpdHlfZGF0ZSA9IHRpbWVfZXZlbnRzW2NmZy5NQVRVUklUWV9EQVRFX0lEWF0ubmF0aXZlCiAgICBmcmFtZV9kaWcgMgogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGludGNfMiAvLyA4CiAgICAqCiAgICBmcmFtZV9kaWcgMAogICAgc3dhcAogICAgaW50Y18yIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgYnl0ZWMgMTAgLy8gIm1hdHVyaXR5X2RhdGUiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAoKYXNzZXRfY29uZmlnX2FmdGVyX2lmX2Vsc2VAMzY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGVycGV0dWFsX2JvbmQvY29udHJhY3QucHk6NTQtNTUKICAgIC8vICMgVGhlIHBlcnBldHVhbCBib25kIGRlZmluZXMgYSBzaW5nbGUgdGltZSBwZXJpb2QgZm9yIHRoZSBjb3Vwb24gZHVyYXRpb24gd2l0aCB1bmxpbWl0ZWQgcmVwZXRpdGlvbnMKICAgIC8vIGFzc2VydCB0aW1lX3BlcmlvZHMubGVuZ3RoID09IFVJbnQ2NCgxKSwgZXJyLklOVkFMSURfVElNRV9QRVJJT0RTCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBhc3NlcnQgLy8gVGltZSBwZXJpb2RzIGFyZSBub3QgcHJvcGVybHkgZGVmaW5lZAogICAgLy8gc21hcnRfY29udHJhY3RzL3BlcnBldHVhbF9ib25kL2NvbnRyYWN0LnB5OjU2CiAgICAvLyBjb3Vwb25fcGVyaW9kX2R1cmF0aW9uID0gdGltZV9wZXJpb2RzWzBdWzBdLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDIgMAogICAgZXh0cmFjdCAwIDE2IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo1NwogICAgLy8gcmVwZXRpdGlvbnMgPSB0aW1lX3BlcmlvZHNbMF1bMV0ubmF0aXZlCiAgICBzd2FwCiAgICBleHRyYWN0IDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo1OAogICAgLy8gYXNzZXJ0IGNvdXBvbl9wZXJpb2RfZHVyYXRpb24gPiBVSW50NjQoMCksIGVyci5JTlZBTElEX1RJTUVfUEVSSU9EX0RVUkFUSU9OCiAgICBzd2FwCiAgICBhc3NlcnQgLy8gVGltZSBwZXJpb2QgZHVyYXRpb25zIG11c3QgYmUgc3RyaWN0bHkgZ3JlYXRlciB0aGFuIHplcm8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo1OQogICAgLy8gYXNzZXJ0IHJlcGV0aXRpb25zID09IFVJbnQ2NCgwKSwgZXJyLklOVkFMSURfVElNRV9QRVJJT0RfUkVQRVRJVElPTlMKICAgICEKICAgIGFzc2VydCAvLyBUaW1lIHBlcmlvZCByZXBldGl0aW9ucyBhcmUgbm90IHByb3Blcmx5IGRlZmluZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo2MwogICAgLy8gc2VsZi50aW1lX3BlcmlvZHMudmFsdWUgPSB0aW1lX3BlcmlvZHMuY29weSgpCiAgICBieXRlYyAyNCAvLyAweDc0Njk2ZDY1NTA2NTcyNjk2ZjY0NzMKICAgIGJveF9kZWwKICAgIHBvcAogICAgYnl0ZWMgMjQgLy8gMHg3NDY5NmQ2NTUwNjU3MjY5NmY2NDczCiAgICBmcmFtZV9kaWcgLTEKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wZXJwZXR1YWxfYm9uZC9jb250cmFjdC5weTo2NAogICAgLy8gc2VsZi5jb3Vwb25fcGVyaW9kID0gc2VsZi50aW1lX3BlcmlvZHMudmFsdWVbMF1bMF0ubmF0aXZlCiAgICBieXRlYyAyNCAvLyAweDc0Njk2ZDY1NTA2NTcyNjk2ZjY0NzMKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRpbWVfcGVyaW9kcyBleGlzdHMKICAgIGV4dHJhY3QgMiAwCiAgICBleHRyYWN0IDAgMTYgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGJ5dGVjIDE3IC8vICJjb3Vwb25fcGVyaW9kIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjU1OAogICAgLy8gc2VsZi5zdGF0dXMgPSBVSW50NjQoY2ZnLlNUQVRVU19BQ1RJVkUpCiAgICBieXRlY18yIC8vICJzdGF0dXMiCiAgICBpbnRjXzMgLy8gMTAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgphc3NldF9jb25maWdfYm9vbF9mYWxzZUAxNzoKICAgIGludGNfMCAvLyAwCiAgICBiIGFzc2V0X2NvbmZpZ19ib29sX21lcmdlQDE4Cgphc3NldF9jb25maWdfYm9vbF9mYWxzZUA0OgogICAgaW50Y18wIC8vIDAKICAgIGIgYXNzZXRfY29uZmlnX2Jvb2xfbWVyZ2VANQoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5iYXNlX2RfYXNhLmNvbnRyYWN0LkJhc2VEQXNhLmFzc2VydF9jYWxsZXJfaXNfYXJyYW5nZXIoKSAtPiB2b2lkOgphc3NlcnRfY2FsbGVyX2lzX2FycmFuZ2VyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTE1LTExNgogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBhc3NlcnRfY2FsbGVyX2lzX2FycmFuZ2VyKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjExNwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5hcnJhbmdlci52YWx1ZSwgZXJyLlVOQVVUSE9SSVpFRAogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDE4IC8vIDB4NTIzMjMwMjMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hcnJhbmdlciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gTm90IGF1dGhvcml6ZWQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5iYXNlX2RfYXNhLmNvbnRyYWN0LkJhc2VEQXNhLmFzc2VydF90aW1lX2V2ZW50c19zb3J0ZWQodGltZV9ldmVudHM6IGJ5dGVzKSAtPiBieXRlczoKYXNzZXJ0X3RpbWVfZXZlbnRzX3NvcnRlZDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjIzOC0yMzkKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgYXNzZXJ0X3RpbWVfZXZlbnRzX3NvcnRlZChzZWxmLCB0aW1lX2V2ZW50czogdHlwLlRpbWVFdmVudHMpIC0+IE5vbmU6CiAgICBwcm90byAxIDEKICAgIHB1c2hieXRlcyAiIgogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyNDEKICAgIC8vIHRpbWVfZXZlbnRzW2NmZy5QUklNQVJZX0RJU1RSSUJVVElPTl9PUEVOSU5HX0RBVEVfSURYXS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAyIDAKICAgIGR1cAogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyNDIKICAgIC8vID4gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI0MS0yNDIKICAgIC8vIHRpbWVfZXZlbnRzW2NmZy5QUklNQVJZX0RJU1RSSUJVVElPTl9PUEVOSU5HX0RBVEVfSURYXS5uYXRpdmUKICAgIC8vID4gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgID4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI0MC0yNDMKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgdGltZV9ldmVudHNbY2ZnLlBSSU1BUllfRElTVFJJQlVUSU9OX09QRU5JTkdfREFURV9JRFhdLm5hdGl2ZQogICAgLy8gICAgID4gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIC8vICksIGVyci5JTlZBTElEX1RJTUUKICAgIGFzc2VydCAvLyBUaW1lIGV2ZW50cyBtdXN0IGJlIHNldCBpbiB0aGUgZnV0dXJlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyNDQKICAgIC8vIGZvciBfdCBpbiB1cmFuZ2UodGltZV9ldmVudHMubGVuZ3RoIC0gMSk6CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGludGNfMCAvLyAwCgphc3NlcnRfdGltZV9ldmVudHNfc29ydGVkX2Zvcl9oZWFkZXJAMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI0NAogICAgLy8gZm9yIF90IGluIHVyYW5nZSh0aW1lX2V2ZW50cy5sZW5ndGggLSAxKToKICAgIGZyYW1lX2RpZyA0CiAgICBmcmFtZV9kaWcgMwogICAgPAogICAgYnogYXNzZXJ0X3RpbWVfZXZlbnRzX3NvcnRlZF9hZnRlcl9mb3JANgoKYXNzZXJ0X3RpbWVfZXZlbnRzX3NvcnRlZF93aGlsZV90b3BAODoKICAgIHB1c2hpbnQgNzUgLy8gNzUKICAgIGdsb2JhbCBPcGNvZGVCdWRnZXQKICAgID4KICAgIGJ6IGFzc2VydF90aW1lX2V2ZW50c19zb3J0ZWRfYWZ0ZXJfd2hpbGVAMTQKICAgIGl0eG5fYmVnaW4KICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBieXRlYyAzNCAvLyAweDA2ODEwMQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KICAgIGJ5dGVjIDM0IC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICBnbG9iYWwgTWluVHhuRmVlCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGIgYXNzZXJ0X3RpbWVfZXZlbnRzX3NvcnRlZF93aGlsZV90b3BAOAoKYXNzZXJ0X3RpbWVfZXZlbnRzX3NvcnRlZF9hZnRlcl93aGlsZUAxNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI0OQogICAgLy8gdGltZV9pID0gdGltZV9ldmVudHNbX3RdLm5hdGl2ZQogICAgZnJhbWVfZGlnIDQKICAgIGR1cAogICAgaW50Y18yIC8vIDgKICAgICoKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIHN3YXAKICAgIGludGNfMiAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGR1cAogICAgY292ZXIgMwogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyNTAKICAgIC8vIHRpbWVfZiA9IHRpbWVfZXZlbnRzW190ICsgMV0ubmF0aXZlCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDQKICAgIGludGNfMiAvLyA4CiAgICAqCiAgICBpbnRjXzIgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MjUxCiAgICAvLyBhc3NlcnQgdGltZV9mID4gdGltZV9pLCBlcnIuSU5WQUxJRF9TT1JUSU5HCiAgICA8CiAgICBhc3NlcnQgLy8gVGltZSBldmVudHMgbXVzdCBiZSBzb3J0ZWQgaW4gc3RyaWN0bHkgYXNjZW5kaW5nIG9yZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyNTIKICAgIC8vIGlmIHNlbGYuZGF5X2NvdW50X2NvbnZlbnRpb24gIT0gVUludDY0KGNzdC5EQ0NfQ09OVCk6CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTMgLy8gImRheV9jb3VudF9jb252ZW50aW9uIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRheV9jb3VudF9jb252ZW50aW9uIGV4aXN0cwogICAgcHVzaGludCAyNTUgLy8gMjU1CiAgICAhPQogICAgYnogYXNzZXJ0X3RpbWVfZXZlbnRzX3NvcnRlZF9mb3JfaGVhZGVyQDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI1My0yNTQKICAgIC8vICMgVGhlIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiByZXF1aXJlcyB0aW1lIHBlcmlvZHMgZXhwcmVzc2VkIGluIGRheXMgZm9yIHJlZ3VsYXIgZGF5LWNvdW50IGNvbnZlbnRpb25zCiAgICAvLyBhc3NlcnQgKHRpbWVfZiAtIHRpbWVfaSkgJSBVSW50NjQoCiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfZGlnIDEKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI1My0yNTYKICAgIC8vICMgVGhlIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiByZXF1aXJlcyB0aW1lIHBlcmlvZHMgZXhwcmVzc2VkIGluIGRheXMgZm9yIHJlZ3VsYXIgZGF5LWNvdW50IGNvbnZlbnRpb25zCiAgICAvLyBhc3NlcnQgKHRpbWVfZiAtIHRpbWVfaSkgJSBVSW50NjQoCiAgICAvLyAgICAgY3N0LkRBWV8yX1NFQwogICAgLy8gKSA9PSAwLCBlcnIuSU5WQUxJRF9USU1FX1BFUklPRAogICAgaW50YyA2IC8vIDg2NDAwCiAgICAlCiAgICAhCiAgICBhc3NlcnQgLy8gVGltZSBwZXJpb2RzIGluIEFjdHVhbC9BY3R1YWwgZGF5IGNvdW50IGNvbnZlbnRpb24gbXVzdCBiZSBtdWx0aXBsZXMgb2YgYSBkYXkgKGluIHNlY29uZHMpCiAgICBiIGFzc2VydF90aW1lX2V2ZW50c19zb3J0ZWRfZm9yX2hlYWRlckAxCgphc3NlcnRfdGltZV9ldmVudHNfc29ydGVkX2FmdGVyX2ZvckA2OgogICAgZnJhbWVfZGlnIC0xCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5iYXNlX2RfYXNhLmNvbnRyYWN0LkJhc2VEQXNhLnNldF9zZWNvbmRhcnlfdGltZV9ldmVudHMoc2Vjb25kYXJ5X21hcmtldF90aW1lX2V2ZW50czogYnl0ZXMpIC0+IGJ5dGVzOgpzZXRfc2Vjb25kYXJ5X3RpbWVfZXZlbnRzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NTYwLTU2MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0X3NlY29uZGFyeV90aW1lX2V2ZW50cygKICAgIC8vICAgICBzZWxmLCBzZWNvbmRhcnlfbWFya2V0X3RpbWVfZXZlbnRzOiB0eXAuVGltZUV2ZW50cwogICAgLy8gKSAtPiB0eXAuU2Vjb25kYXJ5TWFya2V0U2NoZWR1bGU6CiAgICBwcm90byAxIDEKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1ODEKICAgIC8vIHNlbGYuYXNzZXJ0X2NhbGxlcl9pc19hcnJhbmdlcigpCiAgICBjYWxsc3ViIGFzc2VydF9jYWxsZXJfaXNfYXJyYW5nZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEwNQogICAgLy8gcmV0dXJuIHNlbGYuc3RhdHVzID09IGNmZy5TVEFUVVNfRU5ERUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJzdGF0dXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3RhdHVzIGV4aXN0cwogICAgaW50YyA3IC8vIDIwMAogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjU4MgogICAgLy8gYXNzZXJ0IG5vdCBzZWxmLnN0YXR1c19pc19lbmRlZCgpLCBlcnIuVU5BVVRIT1JJWkVECiAgICAhCiAgICBhc3NlcnQgLy8gTm90IGF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjU4MwogICAgLy8gc2VsZi5hc3NlcnRfaXNfbm90X2RlZmF1bHRlZCgpCiAgICBjYWxsc3ViIGFzc2VydF9pc19ub3RfZGVmYXVsdGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1ODUKICAgIC8vIGFzc2VydCBzZWNvbmRhcnlfbWFya2V0X3RpbWVfZXZlbnRzLmxlbmd0aCA+PSAxLCBlcnIuSU5WQUxJRF9USU1FX0VWRU5UU19MRU5HVEgKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBkdXAKICAgIGFzc2VydCAvLyBUaW1lIGV2ZW50cyBsZW5ndGggaXMgaW52YWxpZAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NTg2CiAgICAvLyBpZiBzZWNvbmRhcnlfbWFya2V0X3RpbWVfZXZlbnRzLmxlbmd0aCA+IDE6CiAgICBpbnRjXzEgLy8gMQogICAgPgogICAgZnJhbWVfZGlnIC0xCiAgICBzd2FwCiAgICBieiBzZXRfc2Vjb25kYXJ5X3RpbWVfZXZlbnRzX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NTg3CiAgICAvLyBzZWxmLmFzc2VydF90aW1lX2V2ZW50c19zb3J0ZWQoc2Vjb25kYXJ5X21hcmtldF90aW1lX2V2ZW50cykKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBhc3NlcnRfdGltZV9ldmVudHNfc29ydGVkCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgLTEKICAgIGZyYW1lX2J1cnkgMQoKc2V0X3NlY29uZGFyeV90aW1lX2V2ZW50c19hZnRlcl9pZl9lbHNlQDI6CiAgICBmcmFtZV9kaWcgMQogICAgZnJhbWVfYnVyeSAtMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NTg5CiAgICAvLyBzZWxmLmlzc3VhbmNlX2RhdGUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJpc3N1YW5jZV9kYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmlzc3VhbmNlX2RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1OTAtNTkyCiAgICAvLyA8PSBzZWNvbmRhcnlfbWFya2V0X3RpbWVfZXZlbnRzWwogICAgLy8gICAgIGNmZy5TRUNPTkRBUllfTUFSS0VUX09QRU5JTkdfREFURV9JRFgKICAgIC8vIF0ubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGV4dHJhY3QgMiAwCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1ODktNTkyCiAgICAvLyBzZWxmLmlzc3VhbmNlX2RhdGUKICAgIC8vIDw9IHNlY29uZGFyeV9tYXJrZXRfdGltZV9ldmVudHNbCiAgICAvLyAgICAgY2ZnLlNFQ09OREFSWV9NQVJLRVRfT1BFTklOR19EQVRFX0lEWAogICAgLy8gXS5uYXRpdmUKICAgIHN3YXAKICAgIGRpZyAxCiAgICA8PQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NTg4LTU5MwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBzZWxmLmlzc3VhbmNlX2RhdGUKICAgIC8vICAgICA8PSBzZWNvbmRhcnlfbWFya2V0X3RpbWVfZXZlbnRzWwogICAgLy8gICAgICAgICBjZmcuU0VDT05EQVJZX01BUktFVF9PUEVOSU5HX0RBVEVfSURYCiAgICAvLyAgICAgXS5uYXRpdmUKICAgIC8vICksIGVyci5JTlZBTElEX1NFQ09OREFSWV9PUEVOSU5HX0RBVEUKICAgIGFzc2VydCAvLyBJbnZhbGlkIHNlY29uZGFyeSBtYXJrZXQgb3BlbmluZyBkYXRlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1OTQKICAgIC8vIHNlbGYuc2Vjb25kYXJ5X21hcmtldF9vcGVuaW5nX2RhdGUgPSBzZWNvbmRhcnlfbWFya2V0X3RpbWVfZXZlbnRzWwogICAgYnl0ZWMgMTUgLy8gInNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlIgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NTk0LTU5NgogICAgLy8gc2VsZi5zZWNvbmRhcnlfbWFya2V0X29wZW5pbmdfZGF0ZSA9IHNlY29uZGFyeV9tYXJrZXRfdGltZV9ldmVudHNbCiAgICAvLyAgICAgY2ZnLlNFQ09OREFSWV9NQVJLRVRfT1BFTklOR19EQVRFX0lEWAogICAgLy8gXS5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1OTcKICAgIC8vIGlmIHNlbGYubWF0dXJpdHlfZGF0ZToKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMCAvLyAibWF0dXJpdHlfZGF0ZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tYXR1cml0eV9kYXRlIGV4aXN0cwogICAgYnogc2V0X3NlY29uZGFyeV90aW1lX2V2ZW50c19hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjU5OQogICAgLy8gc2VsZi5tYXR1cml0eV9kYXRlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTAgLy8gIm1hdHVyaXR5X2RhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubWF0dXJpdHlfZGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYwMQogICAgLy8gY2ZnLlNFQ09OREFSWV9NQVJLRVRfQ0xPU1VSRV9EQVRFX0lEWAogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYwMC02MDIKICAgIC8vID49IHNlY29uZGFyeV9tYXJrZXRfdGltZV9ldmVudHNbCiAgICAvLyAgICAgY2ZnLlNFQ09OREFSWV9NQVJLRVRfQ0xPU1VSRV9EQVRFX0lEWAogICAgLy8gXS5uYXRpdmUKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgZnJhbWVfZGlnIDAKICAgIHN3YXAKICAgIGludGNfMiAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjU5OS02MDIKICAgIC8vIHNlbGYubWF0dXJpdHlfZGF0ZQogICAgLy8gPj0gc2Vjb25kYXJ5X21hcmtldF90aW1lX2V2ZW50c1sKICAgIC8vICAgICBjZmcuU0VDT05EQVJZX01BUktFVF9DTE9TVVJFX0RBVEVfSURYCiAgICAvLyBdLm5hdGl2ZQogICAgc3dhcAogICAgZGlnIDEKICAgID49CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo1OTgtNjAzCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHNlbGYubWF0dXJpdHlfZGF0ZQogICAgLy8gICAgID49IHNlY29uZGFyeV9tYXJrZXRfdGltZV9ldmVudHNbCiAgICAvLyAgICAgICAgIGNmZy5TRUNPTkRBUllfTUFSS0VUX0NMT1NVUkVfREFURV9JRFgKICAgIC8vICAgICBdLm5hdGl2ZQogICAgLy8gKSwgZXJyLklOVkFMSURfU0VDT05EQVJZX0NMT1NVUkVfREFURQogICAgYXNzZXJ0IC8vIEludmFsaWQgc2Vjb25kYXJ5IG1hcmtldCBjbG9zdXJlIGRhdGUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYwNAogICAgLy8gc2VsZi5zZWNvbmRhcnlfbWFya2V0X2Nsb3N1cmVfZGF0ZSA9IHNlY29uZGFyeV9tYXJrZXRfdGltZV9ldmVudHNbCiAgICBieXRlYyAxNiAvLyAic2Vjb25kYXJ5X21hcmtldF9jbG9zdXJlX2RhdGUiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2MDQtNjA2CiAgICAvLyBzZWxmLnNlY29uZGFyeV9tYXJrZXRfY2xvc3VyZV9kYXRlID0gc2Vjb25kYXJ5X21hcmtldF90aW1lX2V2ZW50c1sKICAgIC8vICAgICBjZmcuU0VDT05EQVJZX01BUktFVF9DTE9TVVJFX0RBVEVfSURYCiAgICAvLyBdLm5hdGl2ZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKCnNldF9zZWNvbmRhcnlfdGltZV9ldmVudHNfYWZ0ZXJfaWZfZWxzZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjA5CiAgICAvLyBzZWxmLnNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTUgLy8gInNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjA4LTYxMAogICAgLy8gc2Vjb25kYXJ5X21hcmtldF9vcGVuaW5nX2RhdGU9YXJjNC5VSW50NjQoCiAgICAvLyAgICAgc2VsZi5zZWNvbmRhcnlfbWFya2V0X29wZW5pbmdfZGF0ZQogICAgLy8gKSwKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYxMgogICAgLy8gc2VsZi5zZWNvbmRhcnlfbWFya2V0X2Nsb3N1cmVfZGF0ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDE2IC8vICJzZWNvbmRhcnlfbWFya2V0X2Nsb3N1cmVfZGF0ZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zZWNvbmRhcnlfbWFya2V0X2Nsb3N1cmVfZGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYxMS02MTMKICAgIC8vIHNlY29uZGFyeV9tYXJrZXRfY2xvc3VyZV9kYXRlPWFyYzQuVUludDY0KAogICAgLy8gICAgIHNlbGYuc2Vjb25kYXJ5X21hcmtldF9jbG9zdXJlX2RhdGUKICAgIC8vICksCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2MDctNjE0CiAgICAvLyByZXR1cm4gdHlwLlNlY29uZGFyeU1hcmtldFNjaGVkdWxlKAogICAgLy8gICAgIHNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlPWFyYzQuVUludDY0KAogICAgLy8gICAgICAgICBzZWxmLnNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlCiAgICAvLyAgICAgKSwKICAgIC8vICAgICBzZWNvbmRhcnlfbWFya2V0X2Nsb3N1cmVfZGF0ZT1hcmM0LlVJbnQ2NCgKICAgIC8vICAgICAgICAgc2VsZi5zZWNvbmRhcnlfbWFya2V0X2Nsb3N1cmVfZGF0ZQogICAgLy8gICAgICksCiAgICAvLyApCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmJhc2VfZF9hc2EuY29udHJhY3QuQmFzZURBc2EuYXNzaWduX3JvbGUocm9sZV9hZGRyZXNzOiBieXRlcywgcm9sZTogYnl0ZXMsIGNvbmZpZzogYnl0ZXMpIC0+IGJ5dGVzOgphc3NpZ25fcm9sZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYxNi02MTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFzc2lnbl9yb2xlKAogICAgLy8gICAgIHNlbGYsIHJvbGVfYWRkcmVzczogYXJjNC5BZGRyZXNzLCByb2xlOiBhcmM0LlVJbnQ4LCBjb25maWc6IGFyYzQuRHluYW1pY0J5dGVzCiAgICAvLyApIC0+IGFyYzQuVUludDY0OgogICAgcHJvdG8gMyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2MzcKICAgIC8vIHNlbGYuYXNzZXJ0X2NhbGxlcl9pc19hcnJhbmdlcigpCiAgICBjYWxsc3ViIGFzc2VydF9jYWxsZXJfaXNfYXJyYW5nZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYzOAogICAgLy8gc2VsZi5hc3NlcnRfaXNfbm90X2RlZmF1bHRlZCgpCiAgICBjYWxsc3ViIGFzc2VydF9pc19ub3RfZGVmYXVsdGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2MzkKICAgIC8vIGFzc2VydCByb2xlLm5hdGl2ZSBpbiAoCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjQwCiAgICAvLyBVSW50NjQoY3N0LlJPTEVfQVJSQU5HRVIpLAogICAgcHVzaGludCAyMCAvLyAyMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjM5LTY0NgogICAgLy8gYXNzZXJ0IHJvbGUubmF0aXZlIGluICgKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfQVJSQU5HRVIpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9BQ0NPVU5UX01BTkFHRVIpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9QUklNQVJZX0RFQUxFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX1RSVVNURUUpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9BVVRIT1JJVFkpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9JTlRFUkVTVF9PUkFDTEUpLAogICAgLy8gKSwgZXJyLklOVkFMSURfUk9MRQogICAgPT0KICAgIGJueiBhc3NpZ25fcm9sZV9ib29sX3RydWVANgogICAgZnJhbWVfZGlnIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY0MQogICAgLy8gVUludDY0KGNzdC5ST0xFX0FDQ09VTlRfTUFOQUdFUiksCiAgICBwdXNoaW50IDQwIC8vIDQwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2MzktNjQ2CiAgICAvLyBhc3NlcnQgcm9sZS5uYXRpdmUgaW4gKAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9BUlJBTkdFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FDQ09VTlRfTUFOQUdFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX1BSSU1BUllfREVBTEVSKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfVFJVU1RFRSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FVVEhPUklUWSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0lOVEVSRVNUX09SQUNMRSksCiAgICAvLyApLCBlcnIuSU5WQUxJRF9ST0xFCiAgICA9PQogICAgYm56IGFzc2lnbl9yb2xlX2Jvb2xfdHJ1ZUA2CiAgICBmcmFtZV9kaWcgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjQyCiAgICAvLyBVSW50NjQoY3N0LlJPTEVfUFJJTUFSWV9ERUFMRVIpLAogICAgcHVzaGludCA1MCAvLyA1MAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjM5LTY0NgogICAgLy8gYXNzZXJ0IHJvbGUubmF0aXZlIGluICgKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfQVJSQU5HRVIpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9BQ0NPVU5UX01BTkFHRVIpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9QUklNQVJZX0RFQUxFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX1RSVVNURUUpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9BVVRIT1JJVFkpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9JTlRFUkVTVF9PUkFDTEUpLAogICAgLy8gKSwgZXJyLklOVkFMSURfUk9MRQogICAgPT0KICAgIGJueiBhc3NpZ25fcm9sZV9ib29sX3RydWVANgogICAgZnJhbWVfZGlnIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY0MwogICAgLy8gVUludDY0KGNzdC5ST0xFX1RSVVNURUUpLAogICAgcHVzaGludCA2MCAvLyA2MAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjM5LTY0NgogICAgLy8gYXNzZXJ0IHJvbGUubmF0aXZlIGluICgKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfQVJSQU5HRVIpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9BQ0NPVU5UX01BTkFHRVIpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9QUklNQVJZX0RFQUxFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX1RSVVNURUUpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9BVVRIT1JJVFkpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9JTlRFUkVTVF9PUkFDTEUpLAogICAgLy8gKSwgZXJyLklOVkFMSURfUk9MRQogICAgPT0KICAgIGJueiBhc3NpZ25fcm9sZV9ib29sX3RydWVANgogICAgZnJhbWVfZGlnIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY0NAogICAgLy8gVUludDY0KGNzdC5ST0xFX0FVVEhPUklUWSksCiAgICBwdXNoaW50IDcwIC8vIDcwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2MzktNjQ2CiAgICAvLyBhc3NlcnQgcm9sZS5uYXRpdmUgaW4gKAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9BUlJBTkdFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FDQ09VTlRfTUFOQUdFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX1BSSU1BUllfREVBTEVSKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfVFJVU1RFRSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FVVEhPUklUWSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0lOVEVSRVNUX09SQUNMRSksCiAgICAvLyApLCBlcnIuSU5WQUxJRF9ST0xFCiAgICA9PQogICAgYm56IGFzc2lnbl9yb2xlX2Jvb2xfdHJ1ZUA2CiAgICBmcmFtZV9kaWcgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjQ1CiAgICAvLyBVSW50NjQoY3N0LlJPTEVfSU5URVJFU1RfT1JBQ0xFKSwKICAgIHB1c2hpbnQgODAgLy8gODAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYzOS02NDYKICAgIC8vIGFzc2VydCByb2xlLm5hdGl2ZSBpbiAoCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FSUkFOR0VSKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfQUNDT1VOVF9NQU5BR0VSKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfUFJJTUFSWV9ERUFMRVIpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9UUlVTVEVFKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfQVVUSE9SSVRZKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfSU5URVJFU1RfT1JBQ0xFKSwKICAgIC8vICksIGVyci5JTlZBTElEX1JPTEUKICAgID09CiAgICBieiBhc3NpZ25fcm9sZV9ib29sX2ZhbHNlQDcKCmFzc2lnbl9yb2xlX2Jvb2xfdHJ1ZUA2OgogICAgaW50Y18xIC8vIDEKCmFzc2lnbl9yb2xlX2Jvb2xfbWVyZ2VAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjYzOS02NDYKICAgIC8vIGFzc2VydCByb2xlLm5hdGl2ZSBpbiAoCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FSUkFOR0VSKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfQUNDT1VOVF9NQU5BR0VSKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfUFJJTUFSWV9ERUFMRVIpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9UUlVTVEVFKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfQVVUSE9SSVRZKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfSU5URVJFU1RfT1JBQ0xFKSwKICAgIC8vICksIGVyci5JTlZBTElEX1JPTEUKICAgIGFzc2VydCAvLyBJbnZhbGlkIHJvbGUgaWRlbnRpZmllcgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjQ4CiAgICAvLyBjYXNlIFVJbnQ2NChjc3QuUk9MRV9BUlJBTkdFUik6CiAgICBwdXNoaW50cyAyMCA0MCA1MCA2MCA3MCA4MCAvLyAyMCwgNDAsIDUwLCA2MCwgNzAsIDgwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2NDctNjc2CiAgICAvLyBtYXRjaCByb2xlLm5hdGl2ZToKICAgIC8vICAgICBjYXNlIFVJbnQ2NChjc3QuUk9MRV9BUlJBTkdFUik6CiAgICAvLyAgICAgICAgIHNlbGYuYXJyYW5nZXIudmFsdWUgPSByb2xlX2FkZHJlc3MubmF0aXZlCiAgICAvLyAgICAgY2FzZSBVSW50NjQoY3N0LlJPTEVfQUNDT1VOVF9NQU5BR0VSKToKICAgIC8vICAgICAgICAgYXNzZXJ0ICgKICAgIC8vICAgICAgICAgICAgIHJvbGVfYWRkcmVzcyBub3QgaW4gc2VsZi5hY2NvdW50X21hbmFnZXIKICAgIC8vICAgICAgICAgKSwgZXJyLklOVkFMSURfUk9MRV9BRERSRVNTCiAgICAvLyAgICAgICAgIHNlbGYuYWNjb3VudF9tYW5hZ2VyW3JvbGVfYWRkcmVzc10gPSB0eXAuUm9sZUNvbmZpZy5mcm9tX2J5dGVzKAogICAgLy8gICAgICAgICAgICAgY29uZmlnLm5hdGl2ZQogICAgLy8gICAgICAgICApCiAgICAvLyAgICAgY2FzZSBVSW50NjQoY3N0LlJPTEVfUFJJTUFSWV9ERUFMRVIpOgogICAgLy8gICAgICAgICBhc3NlcnQgcm9sZV9hZGRyZXNzIG5vdCBpbiBzZWxmLnByaW1hcnlfZGVhbGVyLCBlcnIuSU5WQUxJRF9ST0xFX0FERFJFU1MKICAgIC8vICAgICAgICAgc2VsZi5wcmltYXJ5X2RlYWxlcltyb2xlX2FkZHJlc3NdID0gdHlwLlJvbGVDb25maWcuZnJvbV9ieXRlcygKICAgIC8vICAgICAgICAgICAgIGNvbmZpZy5uYXRpdmUKICAgIC8vICAgICAgICAgKQogICAgLy8gICAgIGNhc2UgVUludDY0KGNzdC5ST0xFX1RSVVNURUUpOgogICAgLy8gICAgICAgICBhc3NlcnQgcm9sZV9hZGRyZXNzIG5vdCBpbiBzZWxmLnRydXN0ZWUsIGVyci5JTlZBTElEX1JPTEVfQUREUkVTUwogICAgLy8gICAgICAgICBzZWxmLnRydXN0ZWVbcm9sZV9hZGRyZXNzXSA9IHR5cC5Sb2xlQ29uZmlnLmZyb21fYnl0ZXMoY29uZmlnLm5hdGl2ZSkKICAgIC8vICAgICBjYXNlIFVJbnQ2NChjc3QuUk9MRV9BVVRIT1JJVFkpOgogICAgLy8gICAgICAgICBhc3NlcnQgcm9sZV9hZGRyZXNzIG5vdCBpbiBzZWxmLmF1dGhvcml0eSwgZXJyLklOVkFMSURfUk9MRV9BRERSRVNTCiAgICAvLyAgICAgICAgIHNlbGYuYXV0aG9yaXR5W3JvbGVfYWRkcmVzc10gPSB0eXAuUm9sZUNvbmZpZy5mcm9tX2J5dGVzKGNvbmZpZy5uYXRpdmUpCiAgICAvLyAgICAgY2FzZSBVSW50NjQoY3N0LlJPTEVfSU5URVJFU1RfT1JBQ0xFKToKICAgIC8vICAgICAgICAgYXNzZXJ0ICgKICAgIC8vICAgICAgICAgICAgIHJvbGVfYWRkcmVzcyBub3QgaW4gc2VsZi5pbnRlcmVzdF9vcmFjbGUKICAgIC8vICAgICAgICAgKSwgZXJyLklOVkFMSURfUk9MRV9BRERSRVNTCiAgICAvLyAgICAgICAgIHNlbGYuaW50ZXJlc3Rfb3JhY2xlW3JvbGVfYWRkcmVzc10gPSB0eXAuUm9sZUNvbmZpZy5mcm9tX2J5dGVzKAogICAgLy8gICAgICAgICAgICAgY29uZmlnLm5hdGl2ZQogICAgLy8gICAgICAgICApCiAgICAvLyAgICAgY2FzZSBfOgogICAgLy8gICAgICAgICBvcC5lcnIoKQogICAgZnJhbWVfZGlnIDAKICAgIG1hdGNoIGFzc2lnbl9yb2xlX3N3aXRjaF9jYXNlXzBAOSBhc3NpZ25fcm9sZV9zd2l0Y2hfY2FzZV8xQDEwIGFzc2lnbl9yb2xlX3N3aXRjaF9jYXNlXzJAMTEgYXNzaWduX3JvbGVfc3dpdGNoX2Nhc2VfM0AxMiBhc3NpZ25fcm9sZV9zd2l0Y2hfY2FzZV80QDEzIGFzc2lnbl9yb2xlX3N3aXRjaF9jYXNlXzVAMTQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY3NgogICAgLy8gb3AuZXJyKCkKICAgIGVycgoKYXNzaWduX3JvbGVfc3dpdGNoX2Nhc2VfNUAxNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY3MAogICAgLy8gcm9sZV9hZGRyZXNzIG5vdCBpbiBzZWxmLmludGVyZXN0X29yYWNsZQogICAgYnl0ZWMgMjYgLy8gMHg1MjM4MzAyMwogICAgZnJhbWVfZGlnIC0zCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAhCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2NjktNjcxCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHJvbGVfYWRkcmVzcyBub3QgaW4gc2VsZi5pbnRlcmVzdF9vcmFjbGUKICAgIC8vICksIGVyci5JTlZBTElEX1JPTEVfQUREUkVTUwogICAgYXNzZXJ0IC8vIEludmFsaWQgYWNjb3VudCByb2xlIGFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY3MwogICAgLy8gY29uZmlnLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjcyLTY3NAogICAgLy8gc2VsZi5pbnRlcmVzdF9vcmFjbGVbcm9sZV9hZGRyZXNzXSA9IHR5cC5Sb2xlQ29uZmlnLmZyb21fYnl0ZXMoCiAgICAvLyAgICAgY29uZmlnLm5hdGl2ZQogICAgLy8gKQogICAgYm94X3B1dAoKYXNzaWduX3JvbGVfc3dpdGNoX2Nhc2VfbmV4dEAxNjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY3NwogICAgLy8gcmV0dXJuIGFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wKQogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaXRvYgogICAgc3dhcAogICAgcmV0c3ViCgphc3NpZ25fcm9sZV9zd2l0Y2hfY2FzZV80QDEzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjY2CiAgICAvLyBhc3NlcnQgcm9sZV9hZGRyZXNzIG5vdCBpbiBzZWxmLmF1dGhvcml0eSwgZXJyLklOVkFMSURfUk9MRV9BRERSRVNTCiAgICBieXRlYyAyOCAvLyAweDUyMzczMDIzCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFjY291bnQgcm9sZSBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2NjcKICAgIC8vIHNlbGYuYXV0aG9yaXR5W3JvbGVfYWRkcmVzc10gPSB0eXAuUm9sZUNvbmZpZy5mcm9tX2J5dGVzKGNvbmZpZy5uYXRpdmUpCiAgICBmcmFtZV9kaWcgLTEKICAgIGV4dHJhY3QgMiAwCiAgICBib3hfcHV0CiAgICBiIGFzc2lnbl9yb2xlX3N3aXRjaF9jYXNlX25leHRAMTYKCmFzc2lnbl9yb2xlX3N3aXRjaF9jYXNlXzNAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2NjMKICAgIC8vIGFzc2VydCByb2xlX2FkZHJlc3Mgbm90IGluIHNlbGYudHJ1c3RlZSwgZXJyLklOVkFMSURfUk9MRV9BRERSRVNTCiAgICBieXRlYyAyOSAvLyAweDUyMzYzMDIzCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFjY291bnQgcm9sZSBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2NjQKICAgIC8vIHNlbGYudHJ1c3RlZVtyb2xlX2FkZHJlc3NdID0gdHlwLlJvbGVDb25maWcuZnJvbV9ieXRlcyhjb25maWcubmF0aXZlKQogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDIgMAogICAgYm94X3B1dAogICAgYiBhc3NpZ25fcm9sZV9zd2l0Y2hfY2FzZV9uZXh0QDE2Cgphc3NpZ25fcm9sZV9zd2l0Y2hfY2FzZV8yQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjU4CiAgICAvLyBhc3NlcnQgcm9sZV9hZGRyZXNzIG5vdCBpbiBzZWxmLnByaW1hcnlfZGVhbGVyLCBlcnIuSU5WQUxJRF9ST0xFX0FERFJFU1MKICAgIGJ5dGVjIDMwIC8vIDB4NTIzNTMwMjMKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgIQogICAgYXNzZXJ0IC8vIEludmFsaWQgYWNjb3VudCByb2xlIGFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY2MAogICAgLy8gY29uZmlnLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjU5LTY2MQogICAgLy8gc2VsZi5wcmltYXJ5X2RlYWxlcltyb2xlX2FkZHJlc3NdID0gdHlwLlJvbGVDb25maWcuZnJvbV9ieXRlcygKICAgIC8vICAgICBjb25maWcubmF0aXZlCiAgICAvLyApCiAgICBib3hfcHV0CiAgICBiIGFzc2lnbl9yb2xlX3N3aXRjaF9jYXNlX25leHRAMTYKCmFzc2lnbl9yb2xlX3N3aXRjaF9jYXNlXzFAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2NTIKICAgIC8vIHJvbGVfYWRkcmVzcyBub3QgaW4gc2VsZi5hY2NvdW50X21hbmFnZXIKICAgIGJ5dGVjIDMxIC8vIDB4NTIzNDMwMjMKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgIQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjUxLTY1MwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICByb2xlX2FkZHJlc3Mgbm90IGluIHNlbGYuYWNjb3VudF9tYW5hZ2VyCiAgICAvLyApLCBlcnIuSU5WQUxJRF9ST0xFX0FERFJFU1MKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFjY291bnQgcm9sZSBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2NTUKICAgIC8vIGNvbmZpZy5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY1NC02NTYKICAgIC8vIHNlbGYuYWNjb3VudF9tYW5hZ2VyW3JvbGVfYWRkcmVzc10gPSB0eXAuUm9sZUNvbmZpZy5mcm9tX2J5dGVzKAogICAgLy8gICAgIGNvbmZpZy5uYXRpdmUKICAgIC8vICkKICAgIGJveF9wdXQKICAgIGIgYXNzaWduX3JvbGVfc3dpdGNoX2Nhc2VfbmV4dEAxNgoKYXNzaWduX3JvbGVfc3dpdGNoX2Nhc2VfMEA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NjQ5CiAgICAvLyBzZWxmLmFycmFuZ2VyLnZhbHVlID0gcm9sZV9hZGRyZXNzLm5hdGl2ZQogICAgYnl0ZWMgMTggLy8gMHg1MjMyMzAyMwogICAgZnJhbWVfZGlnIC0zCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgYiBhc3NpZ25fcm9sZV9zd2l0Y2hfY2FzZV9uZXh0QDE2Cgphc3NpZ25fcm9sZV9ib29sX2ZhbHNlQDc6CiAgICBpbnRjXzAgLy8gMAogICAgYiBhc3NpZ25fcm9sZV9ib29sX21lcmdlQDgKCgovLyBzbWFydF9jb250cmFjdHMuYmFzZV9kX2FzYS5jb250cmFjdC5CYXNlREFzYS5yZXZva2Vfcm9sZShyb2xlX2FkZHJlc3M6IGJ5dGVzLCByb2xlOiBieXRlcykgLT4gYnl0ZXM6CnJldm9rZV9yb2xlOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6Njc5LTY4MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgcmV2b2tlX3JvbGUoc2VsZiwgcm9sZV9hZGRyZXNzOiBhcmM0LkFkZHJlc3MsIHJvbGU6IGFyYzQuVUludDgpIC0+IGFyYzQuVUludDY0OgogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2OTcKICAgIC8vIHNlbGYuYXNzZXJ0X2NhbGxlcl9pc19hcnJhbmdlcigpCiAgICBjYWxsc3ViIGFzc2VydF9jYWxsZXJfaXNfYXJyYW5nZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY5OAogICAgLy8gc2VsZi5hc3NlcnRfaXNfbm90X2RlZmF1bHRlZCgpCiAgICBjYWxsc3ViIGFzc2VydF9pc19ub3RfZGVmYXVsdGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2OTkKICAgIC8vIGFzc2VydCByb2xlLm5hdGl2ZSBpbiAoCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzAwCiAgICAvLyBVSW50NjQoY3N0LlJPTEVfQUNDT1VOVF9NQU5BR0VSKSwKICAgIHB1c2hpbnQgNDAgLy8gNDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY5OS03MDUKICAgIC8vIGFzc2VydCByb2xlLm5hdGl2ZSBpbiAoCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FDQ09VTlRfTUFOQUdFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX1BSSU1BUllfREVBTEVSKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfVFJVU1RFRSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FVVEhPUklUWSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0lOVEVSRVNUX09SQUNMRSksCiAgICAvLyApLCBlcnIuSU5WQUxJRF9ST0xFCiAgICA9PQogICAgYm56IHJldm9rZV9yb2xlX2Jvb2xfdHJ1ZUA1CiAgICBmcmFtZV9kaWcgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzAxCiAgICAvLyBVSW50NjQoY3N0LlJPTEVfUFJJTUFSWV9ERUFMRVIpLAogICAgcHVzaGludCA1MCAvLyA1MAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6Njk5LTcwNQogICAgLy8gYXNzZXJ0IHJvbGUubmF0aXZlIGluICgKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfQUNDT1VOVF9NQU5BR0VSKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfUFJJTUFSWV9ERUFMRVIpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9UUlVTVEVFKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfQVVUSE9SSVRZKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfSU5URVJFU1RfT1JBQ0xFKSwKICAgIC8vICksIGVyci5JTlZBTElEX1JPTEUKICAgID09CiAgICBibnogcmV2b2tlX3JvbGVfYm9vbF90cnVlQDUKICAgIGZyYW1lX2RpZyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3MDIKICAgIC8vIFVJbnQ2NChjc3QuUk9MRV9UUlVTVEVFKSwKICAgIHB1c2hpbnQgNjAgLy8gNjAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY5OS03MDUKICAgIC8vIGFzc2VydCByb2xlLm5hdGl2ZSBpbiAoCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FDQ09VTlRfTUFOQUdFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX1BSSU1BUllfREVBTEVSKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfVFJVU1RFRSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FVVEhPUklUWSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0lOVEVSRVNUX09SQUNMRSksCiAgICAvLyApLCBlcnIuSU5WQUxJRF9ST0xFCiAgICA9PQogICAgYm56IHJldm9rZV9yb2xlX2Jvb2xfdHJ1ZUA1CiAgICBmcmFtZV9kaWcgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzAzCiAgICAvLyBVSW50NjQoY3N0LlJPTEVfQVVUSE9SSVRZKSwKICAgIHB1c2hpbnQgNzAgLy8gNzAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY5OS03MDUKICAgIC8vIGFzc2VydCByb2xlLm5hdGl2ZSBpbiAoCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FDQ09VTlRfTUFOQUdFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX1BSSU1BUllfREVBTEVSKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfVFJVU1RFRSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FVVEhPUklUWSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0lOVEVSRVNUX09SQUNMRSksCiAgICAvLyApLCBlcnIuSU5WQUxJRF9ST0xFCiAgICA9PQogICAgYm56IHJldm9rZV9yb2xlX2Jvb2xfdHJ1ZUA1CiAgICBmcmFtZV9kaWcgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzA0CiAgICAvLyBVSW50NjQoY3N0LlJPTEVfSU5URVJFU1RfT1JBQ0xFKSwKICAgIHB1c2hpbnQgODAgLy8gODAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjY5OS03MDUKICAgIC8vIGFzc2VydCByb2xlLm5hdGl2ZSBpbiAoCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FDQ09VTlRfTUFOQUdFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX1BSSU1BUllfREVBTEVSKSwKICAgIC8vICAgICBVSW50NjQoY3N0LlJPTEVfVFJVU1RFRSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0FVVEhPUklUWSksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX0lOVEVSRVNUX09SQUNMRSksCiAgICAvLyApLCBlcnIuSU5WQUxJRF9ST0xFCiAgICA9PQogICAgYnogcmV2b2tlX3JvbGVfYm9vbF9mYWxzZUA2CgpyZXZva2Vfcm9sZV9ib29sX3RydWVANToKICAgIGludGNfMSAvLyAxCgpyZXZva2Vfcm9sZV9ib29sX21lcmdlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo2OTktNzA1CiAgICAvLyBhc3NlcnQgcm9sZS5uYXRpdmUgaW4gKAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9BQ0NPVU5UX01BTkFHRVIpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9QUklNQVJZX0RFQUxFUiksCiAgICAvLyAgICAgVUludDY0KGNzdC5ST0xFX1RSVVNURUUpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9BVVRIT1JJVFkpLAogICAgLy8gICAgIFVJbnQ2NChjc3QuUk9MRV9JTlRFUkVTVF9PUkFDTEUpLAogICAgLy8gKSwgZXJyLklOVkFMSURfUk9MRQogICAgYXNzZXJ0IC8vIEludmFsaWQgcm9sZSBpZGVudGlmaWVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3MDctNzA4CiAgICAvLyAjIEFycmFuZ2VyIHJvbGUgY2FuIG5vdCBiZSByZXZva2VkIChqdXN0IHJvdGF0ZWQpCiAgICAvLyBjYXNlIFVJbnQ2NChjc3QuUk9MRV9BQ0NPVU5UX01BTkFHRVIpOgogICAgcHVzaGludHMgNDAgNTAgNjAgNzAgODAgLy8gNDAsIDUwLCA2MCwgNzAsIDgwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3MDYtNzI0CiAgICAvLyBtYXRjaCByb2xlLm5hdGl2ZToKICAgIC8vICAgICAjIEFycmFuZ2VyIHJvbGUgY2FuIG5vdCBiZSByZXZva2VkIChqdXN0IHJvdGF0ZWQpCiAgICAvLyAgICAgY2FzZSBVSW50NjQoY3N0LlJPTEVfQUNDT1VOVF9NQU5BR0VSKToKICAgIC8vICAgICAgICAgYXNzZXJ0IHJvbGVfYWRkcmVzcyBpbiBzZWxmLmFjY291bnRfbWFuYWdlciwgZXJyLklOVkFMSURfUk9MRV9BRERSRVNTCiAgICAvLyAgICAgICAgIG9wLkJveC5kZWxldGUoY3N0LlBSRUZJWF9JRF9BQ0NPVU5UX01BTkFHRVIgKyByb2xlX2FkZHJlc3MuYnl0ZXMpCiAgICAvLyAgICAgY2FzZSBVSW50NjQoY3N0LlJPTEVfUFJJTUFSWV9ERUFMRVIpOgogICAgLy8gICAgICAgICBhc3NlcnQgcm9sZV9hZGRyZXNzIGluIHNlbGYucHJpbWFyeV9kZWFsZXIsIGVyci5JTlZBTElEX1JPTEVfQUREUkVTUwogICAgLy8gICAgICAgICBvcC5Cb3guZGVsZXRlKGNzdC5QUkVGSVhfSURfUFJJTUFSWV9ERUFMRVIgKyByb2xlX2FkZHJlc3MuYnl0ZXMpCiAgICAvLyAgICAgY2FzZSBVSW50NjQoY3N0LlJPTEVfVFJVU1RFRSk6CiAgICAvLyAgICAgICAgIGFzc2VydCByb2xlX2FkZHJlc3MgaW4gc2VsZi50cnVzdGVlLCBlcnIuSU5WQUxJRF9ST0xFX0FERFJFU1MKICAgIC8vICAgICAgICAgb3AuQm94LmRlbGV0ZShjc3QuUFJFRklYX0lEX1RSVVNURUUgKyByb2xlX2FkZHJlc3MuYnl0ZXMpCiAgICAvLyAgICAgY2FzZSBVSW50NjQoY3N0LlJPTEVfQVVUSE9SSVRZKToKICAgIC8vICAgICAgICAgYXNzZXJ0IHJvbGVfYWRkcmVzcyBpbiBzZWxmLmF1dGhvcml0eSwgZXJyLklOVkFMSURfUk9MRV9BRERSRVNTCiAgICAvLyAgICAgICAgIG9wLkJveC5kZWxldGUoY3N0LlBSRUZJWF9JRF9BVVRIT1JJVFkgKyByb2xlX2FkZHJlc3MuYnl0ZXMpCiAgICAvLyAgICAgY2FzZSBVSW50NjQoY3N0LlJPTEVfSU5URVJFU1RfT1JBQ0xFKToKICAgIC8vICAgICAgICAgYXNzZXJ0IHJvbGVfYWRkcmVzcyBpbiBzZWxmLmludGVyZXN0X29yYWNsZSwgZXJyLklOVkFMSURfUk9MRV9BRERSRVNTCiAgICAvLyAgICAgICAgIG9wLkJveC5kZWxldGUoY3N0LlBSRUZJWF9JRF9JTlRFUkVTVF9PUkFDTEUgKyByb2xlX2FkZHJlc3MuYnl0ZXMpCiAgICAvLyAgICAgY2FzZSBfOgogICAgLy8gICAgICAgICBvcC5lcnIoKQogICAgZnJhbWVfZGlnIDAKICAgIG1hdGNoIHJldm9rZV9yb2xlX3N3aXRjaF9jYXNlXzBAOCByZXZva2Vfcm9sZV9zd2l0Y2hfY2FzZV8xQDkgcmV2b2tlX3JvbGVfc3dpdGNoX2Nhc2VfMkAxMCByZXZva2Vfcm9sZV9zd2l0Y2hfY2FzZV8zQDExIHJldm9rZV9yb2xlX3N3aXRjaF9jYXNlXzRAMTIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjcyNAogICAgLy8gb3AuZXJyKCkKICAgIGVycgoKcmV2b2tlX3JvbGVfc3dpdGNoX2Nhc2VfNEAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjcyMQogICAgLy8gYXNzZXJ0IHJvbGVfYWRkcmVzcyBpbiBzZWxmLmludGVyZXN0X29yYWNsZSwgZXJyLklOVkFMSURfUk9MRV9BRERSRVNTCiAgICBieXRlYyAyNiAvLyAweDUyMzgzMDIzCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFjY291bnQgcm9sZSBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3MjIKICAgIC8vIG9wLkJveC5kZWxldGUoY3N0LlBSRUZJWF9JRF9JTlRFUkVTVF9PUkFDTEUgKyByb2xlX2FkZHJlc3MuYnl0ZXMpCiAgICBib3hfZGVsCiAgICBwb3AKCnJldm9rZV9yb2xlX3N3aXRjaF9jYXNlX25leHRAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3MjUKICAgIC8vIHJldHVybiBhcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCkKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIHN3YXAKICAgIHJldHN1YgoKcmV2b2tlX3JvbGVfc3dpdGNoX2Nhc2VfM0AxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjcxOAogICAgLy8gYXNzZXJ0IHJvbGVfYWRkcmVzcyBpbiBzZWxmLmF1dGhvcml0eSwgZXJyLklOVkFMSURfUk9MRV9BRERSRVNTCiAgICBieXRlYyAyOCAvLyAweDUyMzczMDIzCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFjY291bnQgcm9sZSBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3MTkKICAgIC8vIG9wLkJveC5kZWxldGUoY3N0LlBSRUZJWF9JRF9BVVRIT1JJVFkgKyByb2xlX2FkZHJlc3MuYnl0ZXMpCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGIgcmV2b2tlX3JvbGVfc3dpdGNoX2Nhc2VfbmV4dEAxNAoKcmV2b2tlX3JvbGVfc3dpdGNoX2Nhc2VfMkAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjcxNQogICAgLy8gYXNzZXJ0IHJvbGVfYWRkcmVzcyBpbiBzZWxmLnRydXN0ZWUsIGVyci5JTlZBTElEX1JPTEVfQUREUkVTUwogICAgYnl0ZWMgMjkgLy8gMHg1MjM2MzAyMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gSW52YWxpZCBhY2NvdW50IHJvbGUgYWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzE2CiAgICAvLyBvcC5Cb3guZGVsZXRlKGNzdC5QUkVGSVhfSURfVFJVU1RFRSArIHJvbGVfYWRkcmVzcy5ieXRlcykKICAgIGJveF9kZWwKICAgIHBvcAogICAgYiByZXZva2Vfcm9sZV9zd2l0Y2hfY2FzZV9uZXh0QDE0CgpyZXZva2Vfcm9sZV9zd2l0Y2hfY2FzZV8xQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3MTIKICAgIC8vIGFzc2VydCByb2xlX2FkZHJlc3MgaW4gc2VsZi5wcmltYXJ5X2RlYWxlciwgZXJyLklOVkFMSURfUk9MRV9BRERSRVNTCiAgICBieXRlYyAzMCAvLyAweDUyMzUzMDIzCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFjY291bnQgcm9sZSBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3MTMKICAgIC8vIG9wLkJveC5kZWxldGUoY3N0LlBSRUZJWF9JRF9QUklNQVJZX0RFQUxFUiArIHJvbGVfYWRkcmVzcy5ieXRlcykKICAgIGJveF9kZWwKICAgIHBvcAogICAgYiByZXZva2Vfcm9sZV9zd2l0Y2hfY2FzZV9uZXh0QDE0CgpyZXZva2Vfcm9sZV9zd2l0Y2hfY2FzZV8wQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3MDkKICAgIC8vIGFzc2VydCByb2xlX2FkZHJlc3MgaW4gc2VsZi5hY2NvdW50X21hbmFnZXIsIGVyci5JTlZBTElEX1JPTEVfQUREUkVTUwogICAgYnl0ZWMgMzEgLy8gMHg1MjM0MzAyMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gSW52YWxpZCBhY2NvdW50IHJvbGUgYWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzEwCiAgICAvLyBvcC5Cb3guZGVsZXRlKGNzdC5QUkVGSVhfSURfQUNDT1VOVF9NQU5BR0VSICsgcm9sZV9hZGRyZXNzLmJ5dGVzKQogICAgYm94X2RlbAogICAgcG9wCiAgICBiIHJldm9rZV9yb2xlX3N3aXRjaF9jYXNlX25leHRAMTQKCnJldm9rZV9yb2xlX2Jvb2xfZmFsc2VANjoKICAgIGludGNfMCAvLyAwCiAgICBiIHJldm9rZV9yb2xlX2Jvb2xfbWVyZ2VANwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5iYXNlX2RfYXNhLmNvbnRyYWN0LkJhc2VEQXNhLm9wZW5fYWNjb3VudChob2xkaW5nX2FkZHJlc3M6IGJ5dGVzLCBwYXltZW50X2FkZHJlc3M6IGJ5dGVzKSAtPiBieXRlczoKb3Blbl9hY2NvdW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzI3LTczMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgb3Blbl9hY2NvdW50KAogICAgLy8gICAgIHNlbGYsIGhvbGRpbmdfYWRkcmVzczogYXJjNC5BZGRyZXNzLCBwYXltZW50X2FkZHJlc3M6IGFyYzQuQWRkcmVzcwogICAgLy8gKSAtPiBhcmM0LlVJbnQ2NDoKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzQ3CiAgICAvLyBzZWxmLmFzc2VydF9jYWxsZXJfaXNfYWNjb3VudF9tYW5hZ2VyKCkKICAgIGNhbGxzdWIgYXNzZXJ0X2NhbGxlcl9pc19hY2NvdW50X21hbmFnZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEwNQogICAgLy8gcmV0dXJuIHNlbGYuc3RhdHVzID09IGNmZy5TVEFUVVNfRU5ERUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJzdGF0dXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3RhdHVzIGV4aXN0cwogICAgaW50YyA3IC8vIDIwMAogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojc0OAogICAgLy8gYXNzZXJ0IG5vdCBzZWxmLnN0YXR1c19pc19lbmRlZCgpLCBlcnIuVU5BVVRIT1JJWkVECiAgICAhCiAgICBhc3NlcnQgLy8gTm90IGF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojc0OQogICAgLy8gc2VsZi5hc3NlcnRfaXNfbm90X2RlZmF1bHRlZCgpCiAgICBjYWxsc3ViIGFzc2VydF9pc19ub3RfZGVmYXVsdGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3NTAKICAgIC8vIHNlbGYuYXNzZXJ0X2lzX25vdF9zdXNwZW5kZWQoKQogICAgY2FsbHN1YiBhc3NlcnRfaXNfbm90X3N1c3BlbmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzUxCiAgICAvLyBhc3NlcnQgaG9sZGluZ19hZGRyZXNzIG5vdCBpbiBzZWxmLmFjY291bnQsIGVyci5JTlZBTElEX0hPTERJTkdfQUREUkVTUwogICAgYnl0ZWNfMSAvLyAweDUyMzMzMDIzCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFjY291bnQgaG9sZGluZyBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3NTMtNzU5CiAgICAvLyBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXSA9IHR5cC5BY2NvdW50SW5mbygKICAgIC8vICAgICBwYXltZW50X2FkZHJlc3M9cGF5bWVudF9hZGRyZXNzLAogICAgLy8gICAgIHVuaXRzPWFyYzQuVUludDY0KCksCiAgICAvLyAgICAgdW5pdF92YWx1ZT1hcmM0LlVJbnQ2NCgpLAogICAgLy8gICAgIHBhaWRfY291cG9ucz1hcmM0LlVJbnQ2NCgpLAogICAgLy8gICAgIHN1c3BlbmRlZD1hcmM0LkJvb2woKSwKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzU1CiAgICAvLyB1bml0cz1hcmM0LlVJbnQ2NCgpLAogICAgYnl0ZWMgNyAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojc1My03NTkKICAgIC8vIHNlbGYuYWNjb3VudFtob2xkaW5nX2FkZHJlc3NdID0gdHlwLkFjY291bnRJbmZvKAogICAgLy8gICAgIHBheW1lbnRfYWRkcmVzcz1wYXltZW50X2FkZHJlc3MsCiAgICAvLyAgICAgdW5pdHM9YXJjNC5VSW50NjQoKSwKICAgIC8vICAgICB1bml0X3ZhbHVlPWFyYzQuVUludDY0KCksCiAgICAvLyAgICAgcGFpZF9jb3Vwb25zPWFyYzQuVUludDY0KCksCiAgICAvLyAgICAgc3VzcGVuZGVkPWFyYzQuQm9vbCgpLAogICAgLy8gKQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3NTYKICAgIC8vIHVuaXRfdmFsdWU9YXJjNC5VSW50NjQoKSwKICAgIGJ5dGVjIDcgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3NTMtNzU5CiAgICAvLyBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXSA9IHR5cC5BY2NvdW50SW5mbygKICAgIC8vICAgICBwYXltZW50X2FkZHJlc3M9cGF5bWVudF9hZGRyZXNzLAogICAgLy8gICAgIHVuaXRzPWFyYzQuVUludDY0KCksCiAgICAvLyAgICAgdW5pdF92YWx1ZT1hcmM0LlVJbnQ2NCgpLAogICAgLy8gICAgIHBhaWRfY291cG9ucz1hcmM0LlVJbnQ2NCgpLAogICAgLy8gICAgIHN1c3BlbmRlZD1hcmM0LkJvb2woKSwKICAgIC8vICkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzU3CiAgICAvLyBwYWlkX2NvdXBvbnM9YXJjNC5VSW50NjQoKSwKICAgIGJ5dGVjIDcgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3NTMtNzU5CiAgICAvLyBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXSA9IHR5cC5BY2NvdW50SW5mbygKICAgIC8vICAgICBwYXltZW50X2FkZHJlc3M9cGF5bWVudF9hZGRyZXNzLAogICAgLy8gICAgIHVuaXRzPWFyYzQuVUludDY0KCksCiAgICAvLyAgICAgdW5pdF92YWx1ZT1hcmM0LlVJbnQ2NCgpLAogICAgLy8gICAgIHBhaWRfY291cG9ucz1hcmM0LlVJbnQ2NCgpLAogICAgLy8gICAgIHN1c3BlbmRlZD1hcmM0LkJvb2woKSwKICAgIC8vICkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzU4CiAgICAvLyBzdXNwZW5kZWQ9YXJjNC5Cb29sKCksCiAgICBieXRlYyAxMSAvLyAweDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3NTMtNzU5CiAgICAvLyBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXSA9IHR5cC5BY2NvdW50SW5mbygKICAgIC8vICAgICBwYXltZW50X2FkZHJlc3M9cGF5bWVudF9hZGRyZXNzLAogICAgLy8gICAgIHVuaXRzPWFyYzQuVUludDY0KCksCiAgICAvLyAgICAgdW5pdF92YWx1ZT1hcmM0LlVJbnQ2NCgpLAogICAgLy8gICAgIHBhaWRfY291cG9ucz1hcmM0LlVJbnQ2NCgpLAogICAgLy8gICAgIHN1c3BlbmRlZD1hcmM0LkJvb2woKSwKICAgIC8vICkKICAgIGNvbmNhdAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzYwCiAgICAvLyByZXR1cm4gYXJjNC5VSW50NjQoR2xvYmFsLmxhdGVzdF90aW1lc3RhbXApCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuYmFzZV9kX2FzYS5jb250cmFjdC5CYXNlREFzYS5hc3NlcnRfY2FsbGVyX2lzX2FjY291bnRfbWFuYWdlcigpIC0+IHZvaWQ6CmFzc2VydF9jYWxsZXJfaXNfYWNjb3VudF9tYW5hZ2VyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTE5LTEyMAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBhc3NlcnRfY2FsbGVyX2lzX2FjY291bnRfbWFuYWdlcihzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTIzCiAgICAvLyBjYWxsZXIgaW4gc2VsZi5hY2NvdW50X21hbmFnZXIKICAgIGJ5dGVjIDMxIC8vIDB4NTIzNDMwMjMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEyMQogICAgLy8gY2FsbGVyID0gYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxMjMKICAgIC8vIGNhbGxlciBpbiBzZWxmLmFjY291bnRfbWFuYWdlcgogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTIzLTEyNgogICAgLy8gY2FsbGVyIGluIHNlbGYuYWNjb3VudF9tYW5hZ2VyCiAgICAvLyBhbmQgc2VsZi5hY2NvdW50X21hbmFnZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPD0gc2VsZi5hY2NvdW50X21hbmFnZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X2VuZAogICAgYnogYXNzZXJ0X2NhbGxlcl9pc19hY2NvdW50X21hbmFnZXJfYm9vbF9mYWxzZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxMjQKICAgIC8vIGFuZCBzZWxmLmFjY291bnRfbWFuYWdlcltjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50X21hbmFnZXIgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEyNQogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEyNC0xMjUKICAgIC8vIGFuZCBzZWxmLmFjY291bnRfbWFuYWdlcltjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIC8vIDw9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICBpdG9iCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgYjw9CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxMjQtMTI2CiAgICAvLyBhbmQgc2VsZi5hY2NvdW50X21hbmFnZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPD0gc2VsZi5hY2NvdW50X21hbmFnZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X2VuZAogICAgYnogYXNzZXJ0X2NhbGxlcl9pc19hY2NvdW50X21hbmFnZXJfYm9vbF9mYWxzZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxMjYKICAgIC8vIDw9IHNlbGYuYWNjb3VudF9tYW5hZ2VyW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9lbmQKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50X21hbmFnZXIgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDggOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEyNS0xMjYKICAgIC8vIDw9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICAvLyA8PSBzZWxmLmFjY291bnRfbWFuYWdlcltjYWxsZXJdLnJvbGVfdmFsaWRpdHlfZW5kCiAgICBmcmFtZV9kaWcgMAogICAgYj49CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxMjQtMTI2CiAgICAvLyBhbmQgc2VsZi5hY2NvdW50X21hbmFnZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPD0gc2VsZi5hY2NvdW50X21hbmFnZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X2VuZAogICAgYnogYXNzZXJ0X2NhbGxlcl9pc19hY2NvdW50X21hbmFnZXJfYm9vbF9mYWxzZUA0CiAgICBpbnRjXzEgLy8gMQoKYXNzZXJ0X2NhbGxlcl9pc19hY2NvdW50X21hbmFnZXJfYm9vbF9tZXJnZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTIyLTEyNwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBjYWxsZXIgaW4gc2VsZi5hY2NvdW50X21hbmFnZXIKICAgIC8vICAgICBhbmQgc2VsZi5hY2NvdW50X21hbmFnZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyAgICAgPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIC8vICAgICA8PSBzZWxmLmFjY291bnRfbWFuYWdlcltjYWxsZXJdLnJvbGVfdmFsaWRpdHlfZW5kCiAgICAvLyApLCBlcnIuVU5BVVRIT1JJWkVECiAgICBhc3NlcnQgLy8gTm90IGF1dGhvcml6ZWQKICAgIHJldHN1YgoKYXNzZXJ0X2NhbGxlcl9pc19hY2NvdW50X21hbmFnZXJfYm9vbF9mYWxzZUA0OgogICAgaW50Y18wIC8vIDAKICAgIGIgYXNzZXJ0X2NhbGxlcl9pc19hY2NvdW50X21hbmFnZXJfYm9vbF9tZXJnZUA1CgoKLy8gc21hcnRfY29udHJhY3RzLmJhc2VfZF9hc2EuY29udHJhY3QuQmFzZURBc2EuY2xvc2VfYWNjb3VudChob2xkaW5nX2FkZHJlc3M6IGJ5dGVzKSAtPiBieXRlczoKY2xvc2VfYWNjb3VudDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojc2Mi03NjUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGNsb3NlX2FjY291bnQoCiAgICAvLyAgICAgc2VsZiwgaG9sZGluZ19hZGRyZXNzOiBhcmM0LkFkZHJlc3MKICAgIC8vICkgLT4gYXJjNC5UdXBsZVthcmM0LlVJbnQ2NCwgYXJjNC5VSW50NjRdOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3ODAKICAgIC8vIHNlbGYuYXNzZXJ0X2NhbGxlcl9pc19hY2NvdW50X21hbmFnZXIoKQogICAgY2FsbHN1YiBhc3NlcnRfY2FsbGVyX2lzX2FjY291bnRfbWFuYWdlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6NzgxCiAgICAvLyBzZWxmLmFzc2VydF9pc19ub3RfZGVmYXVsdGVkKCkKICAgIGNhbGxzdWIgYXNzZXJ0X2lzX25vdF9kZWZhdWx0ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE3MQogICAgLy8gYXNzZXJ0IGhvbGRpbmdfYWRkcmVzcyBpbiBzZWxmLmFjY291bnQsIGVyci5JTlZBTElEX0hPTERJTkdfQUREUkVTUwogICAgYnl0ZWNfMSAvLyAweDUyMzMzMDIzCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBJbnZhbGlkIGFjY291bnQgaG9sZGluZyBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3ODQKICAgIC8vIGNsb3NlZF91bml0cyA9IHNlbGYuYWNjb3VudFtob2xkaW5nX2FkZHJlc3NdLnVuaXRzLm5hdGl2ZQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCAzMiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojc4NQogICAgLy8gb3AuQm94LmRlbGV0ZShjc3QuUFJFRklYX0lEX0FDQ09VTlQgKyBob2xkaW5nX2FkZHJlc3MuYnl0ZXMpCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojc4NgogICAgLy8gc2VsZi5jaXJjdWxhdGluZ191bml0cyAtPSBjbG9zZWRfdW5pdHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJjaXJjdWxhdGluZ191bml0cyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jaXJjdWxhdGluZ191bml0cyBleGlzdHMKICAgIHN3YXAKICAgIC0KICAgIGJ5dGVjXzMgLy8gImNpcmN1bGF0aW5nX3VuaXRzIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjM2MQogICAgLy8gaWYgc2VsZi5jaXJjdWxhdGluZ191bml0cyA9PSAwOgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gImNpcmN1bGF0aW5nX3VuaXRzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNpcmN1bGF0aW5nX3VuaXRzIGV4aXN0cwogICAgYm56IGNsb3NlX2FjY291bnRfYWZ0ZXJfaWZfZWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTozNjIKICAgIC8vIHNlbGYuc3RhdHVzID0gVUludDY0KGNmZy5TVEFUVVNfRU5ERUQpCiAgICBieXRlY18yIC8vICJzdGF0dXMiCiAgICBpbnRjIDcgLy8gMjAwCiAgICBhcHBfZ2xvYmFsX3B1dAoKY2xvc2VfYWNjb3VudF9hZnRlcl9pZl9lbHNlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3ODkKICAgIC8vIChhcmM0LlVJbnQ2NChjbG9zZWRfdW5pdHMpLCBhcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCkpCiAgICBmcmFtZV9kaWcgMAogICAgaXRvYgogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6Nzg4LTc5MAogICAgLy8gcmV0dXJuIGFyYzQuVHVwbGUoCiAgICAvLyAgICAgKGFyYzQuVUludDY0KGNsb3NlZF91bml0cyksIGFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wKSkKICAgIC8vICkKICAgIGNvbmNhdAogICAgc3dhcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmJhc2VfZF9hc2EuY29udHJhY3QuQmFzZURBc2EucHJpbWFyeV9kaXN0cmlidXRpb24oaG9sZGluZ19hZGRyZXNzOiBieXRlcywgdW5pdHM6IGJ5dGVzKSAtPiBieXRlczoKcHJpbWFyeV9kaXN0cmlidXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo3OTItNzk1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBwcmltYXJ5X2Rpc3RyaWJ1dGlvbigKICAgIC8vICAgICBzZWxmLCBob2xkaW5nX2FkZHJlc3M6IGFyYzQuQWRkcmVzcywgdW5pdHM6IGFyYzQuVUludDY0CiAgICAvLyApIC0+IGFyYzQuVUludDY0OgogICAgcHJvdG8gMiAxCiAgICBpbnRjXzAgLy8gMAogICAgZHVwCiAgICBwdXNoYnl0ZXMgIiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEwMQogICAgLy8gcmV0dXJuIHNlbGYuc3RhdHVzID09IGNmZy5TVEFUVVNfQUNUSVZFCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAic3RhdHVzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXR1cyBleGlzdHMKICAgIGludGNfMyAvLyAxMDAKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyODQtMjg3CiAgICAvLyBzZWxmLnN0YXR1c19pc19hY3RpdmUoKQogICAgLy8gYW5kIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRlCiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPCBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX2Nsb3N1cmVfZGF0ZQogICAgYnogcHJpbWFyeV9kaXN0cmlidXRpb25fYm9vbF9mYWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyODUKICAgIC8vIGFuZCBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX29wZW5pbmdfZGF0ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDkgLy8gInByaW1hcnlfZGlzdHJpYnV0aW9uX29wZW5pbmdfZGF0ZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyODYKICAgIC8vIDw9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6Mjg1LTI4NgogICAgLy8gYW5kIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRlCiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgPD0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI4NS0yODcKICAgIC8vIGFuZCBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX29wZW5pbmdfZGF0ZQogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIC8vIDwgc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9jbG9zdXJlX2RhdGUKICAgIGJ6IHByaW1hcnlfZGlzdHJpYnV0aW9uX2Jvb2xfZmFsc2VANQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6Mjg3CiAgICAvLyA8IHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fY2xvc3VyZV9kYXRlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMjAgLy8gInByaW1hcnlfZGlzdHJpYnV0aW9uX2Nsb3N1cmVfZGF0ZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9jbG9zdXJlX2RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToyODYtMjg3CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPCBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX2Nsb3N1cmVfZGF0ZQogICAgZnJhbWVfZGlnIDIKICAgID4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI4NS0yODcKICAgIC8vIGFuZCBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX29wZW5pbmdfZGF0ZQogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIC8vIDwgc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9jbG9zdXJlX2RhdGUKICAgIGJ6IHByaW1hcnlfZGlzdHJpYnV0aW9uX2Jvb2xfZmFsc2VANQogICAgaW50Y18xIC8vIDEKCnByaW1hcnlfZGlzdHJpYnV0aW9uX2Jvb2xfbWVyZ2VANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjI4My0yODgKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc2VsZi5zdGF0dXNfaXNfYWN0aXZlKCkKICAgIC8vICAgICBhbmQgc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUKICAgIC8vICAgICA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gICAgIDwgc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9jbG9zdXJlX2RhdGUKICAgIC8vICksIGVyci5QUklNQVJZX0RJU1RSSUJVVElPTl9DTE9TRUQKICAgIGFzc2VydCAvLyBQcmltYXJ5IGRpc3RyaWJ1dGlvbiBpcyBjbG9zZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEzMwogICAgLy8gY2FsbGVyIGluIHNlbGYucHJpbWFyeV9kZWFsZXIKICAgIGJ5dGVjIDMwIC8vIDB4NTIzNTMwMjMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEzMQogICAgLy8gY2FsbGVyID0gYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxMzMKICAgIC8vIGNhbGxlciBpbiBzZWxmLnByaW1hcnlfZGVhbGVyCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEzMy0xMzYKICAgIC8vIGNhbGxlciBpbiBzZWxmLnByaW1hcnlfZGVhbGVyCiAgICAvLyBhbmQgc2VsZi5wcmltYXJ5X2RlYWxlcltjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIC8vIDw9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICAvLyA8PSBzZWxmLnByaW1hcnlfZGVhbGVyW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9lbmQKICAgIGJ6IHByaW1hcnlfZGlzdHJpYnV0aW9uX2Jvb2xfZmFsc2VAMTIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEzNAogICAgLy8gYW5kIHNlbGYucHJpbWFyeV9kZWFsZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucHJpbWFyeV9kZWFsZXIgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEzNQogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEzNC0xMzUKICAgIC8vIGFuZCBzZWxmLnByaW1hcnlfZGVhbGVyW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9zdGFydAogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGl0b2IKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICBiPD0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEzNC0xMzYKICAgIC8vIGFuZCBzZWxmLnByaW1hcnlfZGVhbGVyW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9zdGFydAogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIC8vIDw9IHNlbGYucHJpbWFyeV9kZWFsZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X2VuZAogICAgYnogcHJpbWFyeV9kaXN0cmlidXRpb25fYm9vbF9mYWxzZUAxMgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTM2CiAgICAvLyA8PSBzZWxmLnByaW1hcnlfZGVhbGVyW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9lbmQKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wcmltYXJ5X2RlYWxlciBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgOCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTM1LTEzNgogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIC8vIDw9IHNlbGYucHJpbWFyeV9kZWFsZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X2VuZAogICAgZnJhbWVfZGlnIDEKICAgIGI+PQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTM0LTEzNgogICAgLy8gYW5kIHNlbGYucHJpbWFyeV9kZWFsZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPD0gc2VsZi5wcmltYXJ5X2RlYWxlcltjYWxsZXJdLnJvbGVfdmFsaWRpdHlfZW5kCiAgICBieiBwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9ib29sX2ZhbHNlQDEyCiAgICBpbnRjXzEgLy8gMQoKcHJpbWFyeV9kaXN0cmlidXRpb25fYm9vbF9tZXJnZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjEzMi0xMzcKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgY2FsbGVyIGluIHNlbGYucHJpbWFyeV9kZWFsZXIKICAgIC8vICAgICBhbmQgc2VsZi5wcmltYXJ5X2RlYWxlcltjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIC8vICAgICA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gICAgIDw9IHNlbGYucHJpbWFyeV9kZWFsZXJbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X2VuZAogICAgLy8gKSwgZXJyLlVOQVVUSE9SSVpFRAogICAgYXNzZXJ0IC8vIE5vdCBhdXRob3JpemVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNzEKICAgIC8vIGFzc2VydCBob2xkaW5nX2FkZHJlc3MgaW4gc2VsZi5hY2NvdW50LCBlcnIuSU5WQUxJRF9IT0xESU5HX0FERFJFU1MKICAgIGJ5dGVjXzEgLy8gMHg1MjMzMzAyMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gSW52YWxpZCBhY2NvdW50IGhvbGRpbmcgYWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6ODIwCiAgICAvLyBzZWxmLmFzc2VydF9pc19ub3RfZGVmYXVsdGVkKCkKICAgIGNhbGxzdWIgYXNzZXJ0X2lzX25vdF9kZWZhdWx0ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjgyMQogICAgLy8gc2VsZi5hc3NlcnRfaXNfbm90X3N1c3BlbmRlZCgpCiAgICBjYWxsc3ViIGFzc2VydF9pc19ub3Rfc3VzcGVuZGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4MjIKICAgIC8vIGFzc2VydCB1bml0cy5uYXRpdmUgPiAwLCBlcnIuWkVST19VTklUUwogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBkdXAKICAgIGFzc2VydCAvLyBDYW4gbm90IGRpc3RyaWJ1dGUgemVybyB1bml0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6ODI0CiAgICAvLyBzZWxmLmNpcmN1bGF0aW5nX3VuaXRzICsgdW5pdHMubmF0aXZlIDw9IHNlbGYudG90YWxfdW5pdHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJjaXJjdWxhdGluZ191bml0cyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jaXJjdWxhdGluZ191bml0cyBleGlzdHMKICAgIGRpZyAxCiAgICArCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTQgLy8gInRvdGFsX3VuaXRzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX3VuaXRzIGV4aXN0cwogICAgPD0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjgyMy04MjUKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc2VsZi5jaXJjdWxhdGluZ191bml0cyArIHVuaXRzLm5hdGl2ZSA8PSBzZWxmLnRvdGFsX3VuaXRzCiAgICAvLyApLCBlcnIuT1ZFUl9ESVNUUklCVVRJT04KICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgcmVtYWluaW5nIEQtQVNBIHVuaXRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4MjcKICAgIC8vIHNlbGYuY2lyY3VsYXRpbmdfdW5pdHMgKz0gdW5pdHMubmF0aXZlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiY2lyY3VsYXRpbmdfdW5pdHMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY2lyY3VsYXRpbmdfdW5pdHMgZXhpc3RzCiAgICBkaWcgMQogICAgKwogICAgYnl0ZWNfMyAvLyAiY2lyY3VsYXRpbmdfdW5pdHMiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6ODI5CiAgICAvLyBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS51bml0cy5uYXRpdmUgKyB1bml0cy5uYXRpdmUKICAgIGRpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCAzMiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6ODI4LTgzMAogICAgLy8gc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10udW5pdHMgPSBhcmM0LlVJbnQ2NCgKICAgIC8vICAgICBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS51bml0cy5uYXRpdmUgKyB1bml0cy5uYXRpdmUKICAgIC8vICkKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjgyOAogICAgLy8gc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10udW5pdHMgPSBhcmM0LlVJbnQ2NCgKICAgIGRpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY2NvdW50IGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6ODI4LTgzMAogICAgLy8gc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10udW5pdHMgPSBhcmM0LlVJbnQ2NCgKICAgIC8vICAgICBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS51bml0cy5uYXRpdmUgKyB1bml0cy5uYXRpdmUKICAgIC8vICkKICAgIHN3YXAKICAgIHJlcGxhY2UyIDMyCiAgICBkaWcgMQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6ODMxCiAgICAvLyBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS51bml0X3ZhbHVlID0gYXJjNC5VSW50NjQoc2VsZi51bml0X3ZhbHVlKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEyIC8vICJ1bml0X3ZhbHVlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVuaXRfdmFsdWUgZXhpc3RzCiAgICBpdG9iCiAgICBkaWcgMQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWNjb3VudCBlbnRyeSBleGlzdHMKICAgIHN3YXAKICAgIHJlcGxhY2UyIDQwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4MzIKICAgIC8vIHJldHVybiBhcmM0LlVJbnQ2NChzZWxmLnRvdGFsX3VuaXRzIC0gc2VsZi5jaXJjdWxhdGluZ191bml0cykKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxNCAvLyAidG90YWxfdW5pdHMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudG90YWxfdW5pdHMgZXhpc3RzCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiY2lyY3VsYXRpbmdfdW5pdHMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY2lyY3VsYXRpbmdfdW5pdHMgZXhpc3RzCiAgICAtCiAgICBpdG9iCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKcHJpbWFyeV9kaXN0cmlidXRpb25fYm9vbF9mYWxzZUAxMjoKICAgIGludGNfMCAvLyAwCiAgICBiIHByaW1hcnlfZGlzdHJpYnV0aW9uX2Jvb2xfbWVyZ2VAMTMKCnByaW1hcnlfZGlzdHJpYnV0aW9uX2Jvb2xfZmFsc2VANToKICAgIGludGNfMCAvLyAwCiAgICBiIHByaW1hcnlfZGlzdHJpYnV0aW9uX2Jvb2xfbWVyZ2VANgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5iYXNlX2RfYXNhLmNvbnRyYWN0LkJhc2VEQXNhLnNldF9hc3NldF9zdXNwZW5zaW9uKHN1c3BlbmRlZDogYnl0ZXMpIC0+IGJ5dGVzOgpzZXRfYXNzZXRfc3VzcGVuc2lvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjgzNC04MzUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHNldF9hc3NldF9zdXNwZW5zaW9uKHNlbGYsIHN1c3BlbmRlZDogYXJjNC5Cb29sKSAtPiBhcmM0LlVJbnQ2NDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6ODQ4CiAgICAvLyBzZWxmLmFzc2VydF9jYWxsZXJfaXNfYXV0aG9yaXR5KCkKICAgIGNhbGxzdWIgYXNzZXJ0X2NhbGxlcl9pc19hdXRob3JpdHkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojg0OQogICAgLy8gc2VsZi5zdXNwZW5kZWQgPSBVSW50NjQoc3VzcGVuZGVkLm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgYnl0ZWMgMjEgLy8gInN1c3BlbmRlZCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4NTAKICAgIC8vIHJldHVybiBhcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCkKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5iYXNlX2RfYXNhLmNvbnRyYWN0LkJhc2VEQXNhLmFzc2VydF9jYWxsZXJfaXNfYXV0aG9yaXR5KCkgLT4gdm9pZDoKYXNzZXJ0X2NhbGxlcl9pc19hdXRob3JpdHk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNDktMTUwCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGFzc2VydF9jYWxsZXJfaXNfYXV0aG9yaXR5KHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNTMKICAgIC8vIGNhbGxlciBpbiBzZWxmLmF1dGhvcml0eQogICAgYnl0ZWMgMjggLy8gMHg1MjM3MzAyMwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTUxCiAgICAvLyBjYWxsZXIgPSBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE1MwogICAgLy8gY2FsbGVyIGluIHNlbGYuYXV0aG9yaXR5CiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNTMtMTU2CiAgICAvLyBjYWxsZXIgaW4gc2VsZi5hdXRob3JpdHkKICAgIC8vIGFuZCBzZWxmLmF1dGhvcml0eVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIC8vIDw9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICAvLyA8PSBzZWxmLmF1dGhvcml0eVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfZW5kCiAgICBieiBhc3NlcnRfY2FsbGVyX2lzX2F1dGhvcml0eV9ib29sX2ZhbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE1NAogICAgLy8gYW5kIHNlbGYuYXV0aG9yaXR5W2NhbGxlcl0ucm9sZV92YWxpZGl0eV9zdGFydAogICAgZnJhbWVfZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmF1dGhvcml0eSBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgMCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTU1CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTU0LTE1NQogICAgLy8gYW5kIHNlbGYuYXV0aG9yaXR5W2NhbGxlcl0ucm9sZV92YWxpZGl0eV9zdGFydAogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGl0b2IKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBiPD0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE1NC0xNTYKICAgIC8vIGFuZCBzZWxmLmF1dGhvcml0eVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIC8vIDw9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICAvLyA8PSBzZWxmLmF1dGhvcml0eVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfZW5kCiAgICBieiBhc3NlcnRfY2FsbGVyX2lzX2F1dGhvcml0eV9ib29sX2ZhbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE1NgogICAgLy8gPD0gc2VsZi5hdXRob3JpdHlbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X2VuZAogICAgZnJhbWVfZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmF1dGhvcml0eSBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgOCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTU1LTE1NgogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIC8vIDw9IHNlbGYuYXV0aG9yaXR5W2NhbGxlcl0ucm9sZV92YWxpZGl0eV9lbmQKICAgIGZyYW1lX2RpZyAwCiAgICBiPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE1NC0xNTYKICAgIC8vIGFuZCBzZWxmLmF1dGhvcml0eVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIC8vIDw9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICAvLyA8PSBzZWxmLmF1dGhvcml0eVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfZW5kCiAgICBieiBhc3NlcnRfY2FsbGVyX2lzX2F1dGhvcml0eV9ib29sX2ZhbHNlQDQKICAgIGludGNfMSAvLyAxCgphc3NlcnRfY2FsbGVyX2lzX2F1dGhvcml0eV9ib29sX21lcmdlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNTItMTU3CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGNhbGxlciBpbiBzZWxmLmF1dGhvcml0eQogICAgLy8gICAgIGFuZCBzZWxmLmF1dGhvcml0eVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIC8vICAgICA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gICAgIDw9IHNlbGYuYXV0aG9yaXR5W2NhbGxlcl0ucm9sZV92YWxpZGl0eV9lbmQKICAgIC8vICksIGVyci5VTkFVVEhPUklaRUQKICAgIGFzc2VydCAvLyBOb3QgYXV0aG9yaXplZAogICAgcmV0c3ViCgphc3NlcnRfY2FsbGVyX2lzX2F1dGhvcml0eV9ib29sX2ZhbHNlQDQ6CiAgICBpbnRjXzAgLy8gMAogICAgYiBhc3NlcnRfY2FsbGVyX2lzX2F1dGhvcml0eV9ib29sX21lcmdlQDUKCgovLyBzbWFydF9jb250cmFjdHMuYmFzZV9kX2FzYS5jb250cmFjdC5CYXNlREFzYS5zZXRfYWNjb3VudF9zdXNwZW5zaW9uKGhvbGRpbmdfYWRkcmVzczogYnl0ZXMsIHN1c3BlbmRlZDogYnl0ZXMpIC0+IGJ5dGVzOgpzZXRfYWNjb3VudF9zdXNwZW5zaW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6ODUyLTg1NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0X2FjY291bnRfc3VzcGVuc2lvbigKICAgIC8vICAgICBzZWxmLCBob2xkaW5nX2FkZHJlc3M6IGFyYzQuQWRkcmVzcywgc3VzcGVuZGVkOiBhcmM0LkJvb2wKICAgIC8vICkgLT4gYXJjNC5VSW50NjQ6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojg3MAogICAgLy8gc2VsZi5hc3NlcnRfY2FsbGVyX2lzX2F1dGhvcml0eSgpCiAgICBjYWxsc3ViIGFzc2VydF9jYWxsZXJfaXNfYXV0aG9yaXR5CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNzEKICAgIC8vIGFzc2VydCBob2xkaW5nX2FkZHJlc3MgaW4gc2VsZi5hY2NvdW50LCBlcnIuSU5WQUxJRF9IT0xESU5HX0FERFJFU1MKICAgIGJ5dGVjXzEgLy8gMHg1MjMzMzAyMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gSW52YWxpZCBhY2NvdW50IGhvbGRpbmcgYWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6ODcyCiAgICAvLyBzZWxmLmFjY291bnRbaG9sZGluZ19hZGRyZXNzXS5zdXNwZW5kZWQgPSBzdXNwZW5kZWQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWNjb3VudCBlbnRyeSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgaW50YyA0IC8vIDQ0OAogICAgc3dhcAogICAgc2V0Yml0CiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4NzMKICAgIC8vIHJldHVybiBhcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCkKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5iYXNlX2RfYXNhLmNvbnRyYWN0LkJhc2VEQXNhLnNldF9kZWZhdWx0X3N0YXR1cyhkZWZhdWx0ZWQ6IGJ5dGVzKSAtPiB2b2lkOgpzZXRfZGVmYXVsdF9zdGF0dXM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4NzUtODc2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBzZXRfZGVmYXVsdF9zdGF0dXMoc2VsZiwgZGVmYXVsdGVkOiBhcmM0LkJvb2wpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNDMKICAgIC8vIGNhbGxlciBpbiBzZWxmLnRydXN0ZWUKICAgIGJ5dGVjIDI5IC8vIDB4NTIzNjMwMjMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE0MQogICAgLy8gY2FsbGVyID0gYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNDMKICAgIC8vIGNhbGxlciBpbiBzZWxmLnRydXN0ZWUKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE0My0xNDYKICAgIC8vIGNhbGxlciBpbiBzZWxmLnRydXN0ZWUKICAgIC8vIGFuZCBzZWxmLnRydXN0ZWVbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPD0gc2VsZi50cnVzdGVlW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9lbmQKICAgIGJ6IHNldF9kZWZhdWx0X3N0YXR1c19ib29sX2ZhbHNlQDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE0NAogICAgLy8gYW5kIHNlbGYudHJ1c3RlZVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50cnVzdGVlIGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNDUKICAgIC8vIDw9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNDQtMTQ1CiAgICAvLyBhbmQgc2VsZi50cnVzdGVlW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9zdGFydAogICAgLy8gPD0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGl0b2IKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBiPD0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE0NC0xNDYKICAgIC8vIGFuZCBzZWxmLnRydXN0ZWVbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPD0gc2VsZi50cnVzdGVlW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9lbmQKICAgIGJ6IHNldF9kZWZhdWx0X3N0YXR1c19ib29sX2ZhbHNlQDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE0NgogICAgLy8gPD0gc2VsZi50cnVzdGVlW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9lbmQKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50cnVzdGVlIGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCA4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNDUtMTQ2CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPD0gc2VsZi50cnVzdGVlW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9lbmQKICAgIGZyYW1lX2RpZyAwCiAgICBiPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjE0NC0xNDYKICAgIC8vIGFuZCBzZWxmLnRydXN0ZWVbY2FsbGVyXS5yb2xlX3ZhbGlkaXR5X3N0YXJ0CiAgICAvLyA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gPD0gc2VsZi50cnVzdGVlW2NhbGxlcl0ucm9sZV92YWxpZGl0eV9lbmQKICAgIGJ6IHNldF9kZWZhdWx0X3N0YXR1c19ib29sX2ZhbHNlQDUKICAgIGludGNfMSAvLyAxCgpzZXRfZGVmYXVsdF9zdGF0dXNfYm9vbF9tZXJnZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MTQyLTE0NwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBjYWxsZXIgaW4gc2VsZi50cnVzdGVlCiAgICAvLyAgICAgYW5kIHNlbGYudHJ1c3RlZVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfc3RhcnQKICAgIC8vICAgICA8PSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gICAgIDw9IHNlbGYudHJ1c3RlZVtjYWxsZXJdLnJvbGVfdmFsaWRpdHlfZW5kCiAgICAvLyApLCBlcnIuVU5BVVRIT1JJWkVECiAgICBhc3NlcnQgLy8gTm90IGF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojg4NwogICAgLy8gc2VsZi5kZWZhdWx0ZWQgPSBVSW50NjQoZGVmYXVsdGVkLm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgYnl0ZWMgMjIgLy8gImRlZmF1bHRlZCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCnNldF9kZWZhdWx0X3N0YXR1c19ib29sX2ZhbHNlQDU6CiAgICBpbnRjXzAgLy8gMAogICAgYiBzZXRfZGVmYXVsdF9zdGF0dXNfYm9vbF9tZXJnZUA2CgoKLy8gc21hcnRfY29udHJhY3RzLmJhc2VfZF9hc2EuY29udHJhY3QuQmFzZURBc2EuZ2V0X2Fzc2V0X2luZm8oKSAtPiBieXRlczoKZ2V0X2Fzc2V0X2luZm86CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4ODktODkwCiAgICAvLyBAYXJjNC5hYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiBnZXRfYXNzZXRfaW5mbyhzZWxmKSAtPiB0eXAuQXNzZXRJbmZvOgogICAgcHJvdG8gMCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo4OTkKICAgIC8vIHBlcmZvcm1hbmNlID0gVUludDY0KGNzdC5QUkZfUEVSRk9STUFOVCkKICAgIGludGNfMCAvLyAwCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjkwMAogICAgLy8gaWYgR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPiBzZWxmLm1hdHVyaXR5X2RhdGUgPiAwOgogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEwIC8vICJtYXR1cml0eV9kYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgY292ZXIgNAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubWF0dXJpdHlfZGF0ZSBleGlzdHMKICAgID4KICAgIGJ6IGdldF9hc3NldF9pbmZvX2FmdGVyX2lmX2Vsc2VAMwogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2J1cnkgMgogICAgZnJhbWVfZGlnIDEKICAgIGJ6IGdldF9hc3NldF9pbmZvX2FmdGVyX2lmX2Vsc2VAMwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTAxCiAgICAvLyBwZXJmb3JtYW5jZSA9IFVJbnQ2NChjc3QuUFJGX01BVFVSRUQpCiAgICBwdXNoaW50IDQgLy8gNAogICAgZnJhbWVfYnVyeSAyCgpnZXRfYXNzZXRfaW5mb19hZnRlcl9pZl9lbHNlQDM6CiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo5MDItOTAzCiAgICAvLyAjIFRoZSByZWZlcmVuY2UgaW1wbGVtZW50YXRpb24gaGFzIG5vIGdyYWNlIG9yIGRlbGlucXVlbmN5IHBlcmlvZHMKICAgIC8vIGlmIHNlbGYuZGVmYXVsdGVkOgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDIyIC8vICJkZWZhdWx0ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVmYXVsdGVkIGV4aXN0cwogICAgYnogZ2V0X2Fzc2V0X2luZm9fYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo5MDQKICAgIC8vIHBlcmZvcm1hbmNlID0gVUludDY0KGNzdC5QUkZfREVGQVVMVEVEKQogICAgcHVzaGludCAzIC8vIDMKICAgIGZyYW1lX2J1cnkgMAoKZ2V0X2Fzc2V0X2luZm9fYWZ0ZXJfaWZfZWxzZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTA3CiAgICAvLyBkZW5vbWluYXRpb25fYXNzZXRfaWQ9YXJjNC5VSW50NjQoc2VsZi5kZW5vbWluYXRpb25fYXNzZXRfaWQpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDE5IC8vICJkZW5vbWluYXRpb25fYXNzZXRfaWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVub21pbmF0aW9uX2Fzc2V0X2lkIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTA4CiAgICAvLyBzZXR0bGVtZW50X2Fzc2V0X2lkPWFyYzQuVUludDY0KHNlbGYuc2V0dGxlbWVudF9hc3NldF9pZCksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAic2V0dGxlbWVudF9hc3NldF9pZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zZXR0bGVtZW50X2Fzc2V0X2lkIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6MzM1CiAgICAvLyByZXR1cm4gc2VsZi5jaXJjdWxhdGluZ191bml0cyAqIHNlbGYudW5pdF92YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gImNpcmN1bGF0aW5nX3VuaXRzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNpcmN1bGF0aW5nX3VuaXRzIGV4aXN0cwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEyIC8vICJ1bml0X3ZhbHVlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVuaXRfdmFsdWUgZXhpc3RzCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo5MDkKICAgIC8vIG91dHN0YW5kaW5nX3ByaW5jaXBhbD1hcmM0LlVJbnQ2NChzZWxmLm91dHN0YW5kaW5nX3ByaW5jaXBhbCgpKSwKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjkxMAogICAgLy8gdW5pdF92YWx1ZT1hcmM0LlVJbnQ2NChzZWxmLnVuaXRfdmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEyIC8vICJ1bml0X3ZhbHVlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVuaXRfdmFsdWUgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo5MTEKICAgIC8vIGRheV9jb3VudF9jb252ZW50aW9uPWFyYzQuVUludDgoc2VsZi5kYXlfY291bnRfY29udmVudGlvbiksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTMgLy8gImRheV9jb3VudF9jb252ZW50aW9uIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRheV9jb3VudF9jb252ZW50aW9uIGV4aXN0cwogICAgaXRvYgogICAgZXh0cmFjdCA3IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjkxMgogICAgLy8gaW50ZXJlc3RfcmF0ZT1hcmM0LlVJbnQxNihzZWxmLmludGVyZXN0X3JhdGUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gImludGVyZXN0X3JhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuaW50ZXJlc3RfcmF0ZSBleGlzdHMKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo5MTMKICAgIC8vIHRvdGFsX3N1cHBseT1hcmM0LlVJbnQ2NChzZWxmLnRvdGFsX3VuaXRzKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxNCAvLyAidG90YWxfdW5pdHMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudG90YWxfdW5pdHMgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo5MTQKICAgIC8vIGNpcmN1bGF0aW5nX3N1cHBseT1hcmM0LlVJbnQ2NChzZWxmLmNpcmN1bGF0aW5nX3VuaXRzKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJjaXJjdWxhdGluZ191bml0cyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jaXJjdWxhdGluZ191bml0cyBleGlzdHMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjkxNgogICAgLy8gc2VsZi5wcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA5IC8vICJwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTE1LTkxNwogICAgLy8gcHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRlPWFyYzQuVUludDY0KAogICAgLy8gICAgIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRlCiAgICAvLyApLAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTE5CiAgICAvLyBzZWxmLnByaW1hcnlfZGlzdHJpYnV0aW9uX2Nsb3N1cmVfZGF0ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDIwIC8vICJwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9jbG9zdXJlX2RhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fY2xvc3VyZV9kYXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTE4LTkyMAogICAgLy8gcHJpbWFyeV9kaXN0cmlidXRpb25fY2xvc3VyZV9kYXRlPWFyYzQuVUludDY0KAogICAgLy8gICAgIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fY2xvc3VyZV9kYXRlCiAgICAvLyApLAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTIxCiAgICAvLyBpc3N1YW5jZV9kYXRlPWFyYzQuVUludDY0KHNlbGYuaXNzdWFuY2VfZGF0ZSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAiaXNzdWFuY2VfZGF0ZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5pc3N1YW5jZV9kYXRlIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTIyCiAgICAvLyBtYXR1cml0eV9kYXRlPWFyYzQuVUludDY0KHNlbGYubWF0dXJpdHlfZGF0ZSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTAgLy8gIm1hdHVyaXR5X2RhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubWF0dXJpdHlfZGF0ZSBleGlzdHMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjkyMwogICAgLy8gc3VzcGVuZGVkPWFyYzQuQm9vbChib29sKHNlbGYuc3VzcGVuZGVkKSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMjEgLy8gInN1c3BlbmRlZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zdXNwZW5kZWQgZXhpc3RzCiAgICBieXRlYyAxMSAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjkyNAogICAgLy8gcGVyZm9ybWFuY2U9YXJjNC5VSW50OChwZXJmb3JtYW5jZSksCiAgICBmcmFtZV9kaWcgMAogICAgaXRvYgogICAgZXh0cmFjdCA3IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjkwNi05MjUKICAgIC8vIHJldHVybiB0eXAuQXNzZXRJbmZvKAogICAgLy8gICAgIGRlbm9taW5hdGlvbl9hc3NldF9pZD1hcmM0LlVJbnQ2NChzZWxmLmRlbm9taW5hdGlvbl9hc3NldF9pZCksCiAgICAvLyAgICAgc2V0dGxlbWVudF9hc3NldF9pZD1hcmM0LlVJbnQ2NChzZWxmLnNldHRsZW1lbnRfYXNzZXRfaWQpLAogICAgLy8gICAgIG91dHN0YW5kaW5nX3ByaW5jaXBhbD1hcmM0LlVJbnQ2NChzZWxmLm91dHN0YW5kaW5nX3ByaW5jaXBhbCgpKSwKICAgIC8vICAgICB1bml0X3ZhbHVlPWFyYzQuVUludDY0KHNlbGYudW5pdF92YWx1ZSksCiAgICAvLyAgICAgZGF5X2NvdW50X2NvbnZlbnRpb249YXJjNC5VSW50OChzZWxmLmRheV9jb3VudF9jb252ZW50aW9uKSwKICAgIC8vICAgICBpbnRlcmVzdF9yYXRlPWFyYzQuVUludDE2KHNlbGYuaW50ZXJlc3RfcmF0ZSksCiAgICAvLyAgICAgdG90YWxfc3VwcGx5PWFyYzQuVUludDY0KHNlbGYudG90YWxfdW5pdHMpLAogICAgLy8gICAgIGNpcmN1bGF0aW5nX3N1cHBseT1hcmM0LlVJbnQ2NChzZWxmLmNpcmN1bGF0aW5nX3VuaXRzKSwKICAgIC8vICAgICBwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGU9YXJjNC5VSW50NjQoCiAgICAvLyAgICAgICAgIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRlCiAgICAvLyAgICAgKSwKICAgIC8vICAgICBwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9jbG9zdXJlX2RhdGU9YXJjNC5VSW50NjQoCiAgICAvLyAgICAgICAgIHNlbGYucHJpbWFyeV9kaXN0cmlidXRpb25fY2xvc3VyZV9kYXRlCiAgICAvLyAgICAgKSwKICAgIC8vICAgICBpc3N1YW5jZV9kYXRlPWFyYzQuVUludDY0KHNlbGYuaXNzdWFuY2VfZGF0ZSksCiAgICAvLyAgICAgbWF0dXJpdHlfZGF0ZT1hcmM0LlVJbnQ2NChzZWxmLm1hdHVyaXR5X2RhdGUpLAogICAgLy8gICAgIHN1c3BlbmRlZD1hcmM0LkJvb2woYm9vbChzZWxmLnN1c3BlbmRlZCkpLAogICAgLy8gICAgIHBlcmZvcm1hbmNlPWFyYzQuVUludDgocGVyZm9ybWFuY2UpLAogICAgLy8gKQogICAgdW5jb3ZlciAxMwogICAgdW5jb3ZlciAxMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDEyCiAgICBjb25jYXQKICAgIHVuY292ZXIgMTEKICAgIGNvbmNhdAogICAgdW5jb3ZlciAxMAogICAgY29uY2F0CiAgICB1bmNvdmVyIDkKICAgIGNvbmNhdAogICAgdW5jb3ZlciA4CiAgICBjb25jYXQKICAgIHVuY292ZXIgNwogICAgY29uY2F0CiAgICB1bmNvdmVyIDYKICAgIGNvbmNhdAogICAgdW5jb3ZlciA1CiAgICBjb25jYXQKICAgIHVuY292ZXIgNAogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuYmFzZV9kX2FzYS5jb250cmFjdC5CYXNlREFzYS5nZXRfYWNjb3VudF9pbmZvKGhvbGRpbmdfYWRkcmVzczogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRfYWNjb3VudF9pbmZvOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTI3LTkyOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZ2V0X2FjY291bnRfaW5mbyhzZWxmLCBob2xkaW5nX2FkZHJlc3M6IGFyYzQuQWRkcmVzcykgLT4gdHlwLkFjY291bnRJbmZvOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxNzEKICAgIC8vIGFzc2VydCBob2xkaW5nX2FkZHJlc3MgaW4gc2VsZi5hY2NvdW50LCBlcnIuSU5WQUxJRF9IT0xESU5HX0FERFJFU1MKICAgIGJ5dGVjXzEgLy8gMHg1MjMzMzAyMwogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gSW52YWxpZCBhY2NvdW50IGhvbGRpbmcgYWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTQyCiAgICAvLyByZXR1cm4gc2VsZi5hY2NvdW50W2hvbGRpbmdfYWRkcmVzc10KICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjY291bnQgZW50cnkgZXhpc3RzCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuYmFzZV9kX2FzYS5jb250cmFjdC5CYXNlREFzYS5nZXRfdGltZV9ldmVudHMoKSAtPiBieXRlczoKZ2V0X3RpbWVfZXZlbnRzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTQ0LTk0NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZ2V0X3RpbWVfZXZlbnRzKHNlbGYpIC0+IHR5cC5UaW1lRXZlbnRzOgogICAgcHJvdG8gMCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo5NTIKICAgIC8vIHRpbWVfZXZlbnRzID0gdHlwLlRpbWVFdmVudHMoKQogICAgYnl0ZWMgMzIgLy8gMHgwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weToxMDEKICAgIC8vIHJldHVybiBzZWxmLnN0YXR1cyA9PSBjZmcuU1RBVFVTX0FDVElWRQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gInN0YXR1cyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zdGF0dXMgZXhpc3RzCiAgICBpbnRjXzMgLy8gMTAwCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTUzCiAgICAvLyBpZiBzZWxmLnN0YXR1c19pc19hY3RpdmUoKToKICAgIGJ6IGdldF90aW1lX2V2ZW50c19hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojk1NAogICAgLy8gdGltZV9ldmVudHMgPSBzZWxmLnRpbWVfZXZlbnRzLnZhbHVlLmNvcHkoKQogICAgYnl0ZWMgMjcgLy8gMHg3NDY5NmQ2NTQ1NzY2NTZlNzQ3MwogICAgYm94X2dldAogICAgc3dhcAogICAgZnJhbWVfYnVyeSAwCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50aW1lX2V2ZW50cyBleGlzdHMKCmdldF90aW1lX2V2ZW50c19hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo5NTUKICAgIC8vIHJldHVybiB0aW1lX2V2ZW50cwogICAgZnJhbWVfZGlnIDAKICAgIHN3YXAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5iYXNlX2RfYXNhLmNvbnRyYWN0LkJhc2VEQXNhLmdldF9zZWNvbmRhcnlfbWFya2V0X3NjaGVkdWxlKCkgLT4gYnl0ZXM6CmdldF9zZWNvbmRhcnlfbWFya2V0X3NjaGVkdWxlOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTU3LTk1OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZ2V0X3NlY29uZGFyeV9tYXJrZXRfc2NoZWR1bGUoc2VsZikgLT4gdHlwLlRpbWVFdmVudHM6CiAgICBwcm90byAwIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojk2NgogICAgLy8gYXJjNC5VSW50NjQoc2VsZi5zZWNvbmRhcnlfbWFya2V0X29wZW5pbmdfZGF0ZSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTUgLy8gInNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNlY29uZGFyeV9tYXJrZXRfb3BlbmluZ19kYXRlIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTY3CiAgICAvLyBhcmM0LlVJbnQ2NChzZWxmLnNlY29uZGFyeV9tYXJrZXRfY2xvc3VyZV9kYXRlKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxNiAvLyAic2Vjb25kYXJ5X21hcmtldF9jbG9zdXJlX2RhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc2Vjb25kYXJ5X21hcmtldF9jbG9zdXJlX2RhdGUgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvYmFzZV9kX2FzYS9jb250cmFjdC5weTo5NjUtOTY4CiAgICAvLyByZXR1cm4gdHlwLlRpbWVFdmVudHMoCiAgICAvLyAgICAgYXJjNC5VSW50NjQoc2VsZi5zZWNvbmRhcnlfbWFya2V0X29wZW5pbmdfZGF0ZSksCiAgICAvLyAgICAgYXJjNC5VSW50NjQoc2VsZi5zZWNvbmRhcnlfbWFya2V0X2Nsb3N1cmVfZGF0ZSksCiAgICAvLyApCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDAwMDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmJhc2VfZF9hc2EuY29udHJhY3QuQmFzZURBc2EuZ2V0X2Fzc2V0X21ldGFkYXRhKCkgLT4gYnl0ZXM6CmdldF9hc3NldF9tZXRhZGF0YToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5Ojk3MC05NzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIGdldF9hc3NldF9tZXRhZGF0YShzZWxmKSAtPiB0eXAuQXNzZXRNZXRhZGF0YToKICAgIHByb3RvIDAgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2Jhc2VfZF9hc2EvY29udHJhY3QucHk6OTc5CiAgICAvLyByZXR1cm4gdHlwLkFzc2V0TWV0YWRhdGEuZnJvbV9ieXRlcyhzZWxmLm1ldGFkYXRhKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDI1IC8vICJtZXRhZGF0YSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tZXRhZGF0YSBleGlzdHMKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5iYXNlX2RfYXNhLmNvbnRyYWN0LkJhc2VEQXNhLmFzc2V0X3VwZGF0ZSgpIC0+IHZvaWQ6CmFzc2V0X3VwZGF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjQ2OC00NjkKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bIlVwZGF0ZUFwcGxpY2F0aW9uIl0pCiAgICAvLyBkZWYgYXNzZXRfdXBkYXRlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9iYXNlX2RfYXNhL2NvbnRyYWN0LnB5OjQ3My00NzYKICAgIC8vICMgVGhlIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiBncmFudHMgdGhlIHVwZGF0ZSBwZXJtaXNzaW9ucyB0byB0aGUgQXJyYW5nZXIuCiAgICAvLyAjIE90aGVyIGltcGxlbWVudGF0aW9ucyBtYXkgZGlzYWJsZSBELUFTQSBhcHBsaWNhdGlvbiB1cGRhdGFiaWxpdHkgb3IgY2hhbmdlIGl0cyBhdXRob3JpemF0aW9ucy4KICAgIC8vICMg4pqg77iPIFdBUk5JTkc6IEFwcGxpY2F0aW9uIHVwZGF0ZXMgbXVzdCBiZSBleGVjdXRlZCBWRVJZIGNhcmVmdWxseSwgYXMgdGhleSBtaWdodCBpbnRyb2R1Y2UgYnJlYWtpbmcgY2hhbmdlcy4KICAgIC8vIHNlbGYuYXNzZXJ0X2NhbGxlcl9pc19hcnJhbmdlcigpCiAgICBjYWxsc3ViIGFzc2VydF9jYWxsZXJfaXNfYXJyYW5nZXIKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 19
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "arranger": {
                    "type": "bytes",
                    "key": "R20#"
                },
                "circulating_units": {
                    "type": "uint64",
                    "key": "circulating_units"
                },
                "coupon_period": {
                    "type": "uint64",
                    "key": "coupon_period"
                },
                "day_count_convention": {
                    "type": "uint64",
                    "key": "day_count_convention"
                },
                "defaulted": {
                    "type": "uint64",
                    "key": "defaulted"
                },
                "denomination_asset_id": {
                    "type": "uint64",
                    "key": "denomination_asset_id"
                },
                "interest_rate": {
                    "type": "uint64",
                    "key": "interest_rate"
                },
                "issuance_date": {
                    "type": "uint64",
                    "key": "issuance_date"
                },
                "maturity_date": {
                    "type": "uint64",
                    "key": "maturity_date"
                },
                "metadata": {
                    "type": "bytes",
                    "key": "metadata"
                },
                "paid_coupon_units": {
                    "type": "uint64",
                    "key": "paid_coupon_units"
                },
                "primary_distribution_closure_date": {
                    "type": "uint64",
                    "key": "primary_distribution_closure_date"
                },
                "primary_distribution_opening_date": {
                    "type": "uint64",
                    "key": "primary_distribution_opening_date"
                },
                "secondary_market_closure_date": {
                    "type": "uint64",
                    "key": "secondary_market_closure_date"
                },
                "secondary_market_opening_date": {
                    "type": "uint64",
                    "key": "secondary_market_opening_date"
                },
                "settlement_asset_id": {
                    "type": "uint64",
                    "key": "settlement_asset_id"
                },
                "status": {
                    "type": "uint64",
                    "key": "status"
                },
                "suspended": {
                    "type": "uint64",
                    "key": "suspended"
                },
                "total_coupons": {
                    "type": "uint64",
                    "key": "total_coupons"
                },
                "total_units": {
                    "type": "uint64",
                    "key": "total_units"
                },
                "unit_value": {
                    "type": "uint64",
                    "key": "unit_value"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "PerpetualBond",
        "methods": [
            {
                "name": "asset_transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "sender_holding_address",
                        "desc": "Sender Account Holding Address"
                    },
                    {
                        "type": "address",
                        "name": "receiver_holding_address",
                        "desc": "Receiver Account Holding Address"
                    },
                    {
                        "type": "uint64",
                        "name": "units",
                        "desc": "Amount of D-ASA units to transfer"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Transferred actualized value in denomination asset"
                },
                "desc": "Transfer D-ASA units between accounts"
            },
            {
                "name": "pay_coupon",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "byte[]",
                        "name": "payment_info",
                        "desc": "Additional payment information (Optional)"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64,byte[])",
                    "desc": "Paid coupon amount in denomination asset, Payment timestamp, Payment context"
                },
                "desc": "Pay due coupon to an account"
            },
            {
                "name": "update_interest_rate",
                "args": [
                    {
                        "type": "uint64",
                        "name": "interest_rate",
                        "desc": "Interest rate in bps"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the update"
                },
                "desc": "Update variable interest rates in bps"
            },
            {
                "name": "get_account_units_current_value",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "uint64",
                        "name": "units",
                        "desc": "Account's units for the current value calculation"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64,(uint64,uint64))",
                    "desc": "Units current value in denomination asset, Accrued interest in denomination asset"
                },
                "desc": "Get account's units current value and accrued interest"
            },
            {
                "name": "get_payment_amount",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Interest amount in denomination asset, Principal amount in denomination asset"
                },
                "desc": "Get the next payment amount"
            },
            {
                "name": "get_coupons_status",
                "args": [],
                "returns": {
                    "type": "(uint64,uint64,uint64,(uint64,uint64),bool)",
                    "desc": "Total coupons, Due coupons, Next coupon due date, (Day count factor numerator, Day count factor denominator), All due coupons paid"
                },
                "desc": "Get D-ASA coupons status"
            },
            {
                "name": "get_time_periods",
                "args": [],
                "returns": {
                    "type": "(uint64,uint64)[]",
                    "desc": "Time periods"
                },
                "desc": "Get D-ASA time periods"
            },
            {
                "name": "asset_create",
                "args": [
                    {
                        "type": "address",
                        "name": "arranger",
                        "desc": "D-ASA Arranger Address"
                    },
                    {
                        "type": "(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)",
                        "name": "metadata",
                        "desc": "D-ASA metadata"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Create a new D-ASA"
            },
            {
                "name": "asset_config",
                "args": [
                    {
                        "type": "uint64",
                        "name": "denomination_asset_id",
                        "desc": "Denomination asset identifier"
                    },
                    {
                        "type": "uint64",
                        "name": "settlement_asset_id",
                        "desc": "Settlement asset identifier"
                    },
                    {
                        "type": "uint64",
                        "name": "principal",
                        "desc": "Principal, expressed in denomination asset"
                    },
                    {
                        "type": "uint64",
                        "name": "minimum_denomination",
                        "desc": "Minimum denomination, expressed in denomination asset"
                    },
                    {
                        "type": "uint8",
                        "name": "day_count_convention",
                        "desc": "Day-count convention for interests calculation"
                    },
                    {
                        "type": "uint16",
                        "name": "interest_rate",
                        "desc": "Interest rate in bps"
                    },
                    {
                        "type": "uint16[]",
                        "name": "coupon_rates",
                        "desc": "Coupon interest rates in bps"
                    },
                    {
                        "type": "uint64[]",
                        "name": "time_events",
                        "desc": "Time events (strictly ascending order)"
                    },
                    {
                        "type": "(uint64,uint64)[]",
                        "name": "time_periods",
                        "desc": "Time periods of recurring time events"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Configure the Debt Algorand Standard Application"
            },
            {
                "name": "set_secondary_time_events",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "secondary_market_time_events",
                        "desc": "Secondary market time events (strictly ascending order)"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Secondary Market Opening Date, Secondary Market Closure Date"
                },
                "desc": "Set secondary market time schedule"
            },
            {
                "name": "assign_role",
                "args": [
                    {
                        "type": "address",
                        "name": "role_address",
                        "desc": "Account Role Address"
                    },
                    {
                        "type": "uint8",
                        "name": "role",
                        "desc": "Role identifier"
                    },
                    {
                        "type": "byte[]",
                        "name": "config",
                        "desc": "Role configuration (Optional)"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the role assignment"
                },
                "desc": "Assign a role to an address"
            },
            {
                "name": "revoke_role",
                "args": [
                    {
                        "type": "address",
                        "name": "role_address",
                        "desc": "Account Role Address"
                    },
                    {
                        "type": "uint8",
                        "name": "role",
                        "desc": "Role identifier"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the role revocation"
                },
                "desc": "Revoke a role from an address"
            },
            {
                "name": "open_account",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "address",
                        "name": "payment_address",
                        "desc": "Account Payment Address"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the account opening"
                },
                "desc": "Open D-ASA account"
            },
            {
                "name": "close_account",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Closed units, Timestamp of the account closing"
                },
                "desc": "Close D-ASA account"
            },
            {
                "name": "primary_distribution",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "uint64",
                        "name": "units",
                        "desc": "Amount of D-ASA units to distribute"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Remaining D-ASA units to be distributed"
                },
                "desc": "Distribute D-ASA units to accounts according the primary market"
            },
            {
                "name": "set_asset_suspension",
                "args": [
                    {
                        "type": "bool",
                        "name": "suspended",
                        "desc": "Suspension status"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the set asset suspension status"
                },
                "desc": "Set asset suspension status"
            },
            {
                "name": "set_account_suspension",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "bool",
                        "name": "suspended",
                        "desc": "Suspension status"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the set account suspension status"
                },
                "desc": "Set account suspension status"
            },
            {
                "name": "set_default_status",
                "args": [
                    {
                        "type": "bool",
                        "name": "defaulted",
                        "desc": "Default status"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set D-ASA default status"
            },
            {
                "name": "get_asset_info",
                "args": [],
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)",
                    "desc": "Denomination asset ID, Settlement asset ID, Outstanding principal, Unit nominal value, Day-count convention, Interest rate, Total supply, Circulating supply, Primary distribution opening date, Primary distribution closure date, Issuance date, Maturity date, Suspended, Performance"
                },
                "desc": "Get D-ASA info"
            },
            {
                "name": "get_account_info",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    }
                ],
                "returns": {
                    "type": "(address,uint64,uint64,uint64,bool)",
                    "desc": "Payment Address, D-ASA units, Unit nominal value in denomination asset, Paid coupons, Suspended"
                },
                "desc": "Get account info"
            },
            {
                "name": "get_time_events",
                "args": [],
                "returns": {
                    "type": "uint64[]",
                    "desc": "Time events"
                },
                "desc": "Get D-ASA time events"
            },
            {
                "name": "get_secondary_market_schedule",
                "args": [],
                "returns": {
                    "type": "uint64[]",
                    "desc": "Secondary market schedule"
                },
                "desc": "Get secondary market schedule"
            },
            {
                "name": "get_asset_metadata",
                "args": [],
                "returns": {
                    "type": "(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)",
                    "desc": "Contract type, Calendar, Business day convention, End of month convention, Early repayment effect, Early repayment penalty type, Prospectus hash, Prospectus URL"
                },
                "desc": "Get D-ASA metadata"
            }
        ],
        "networks": {},
        "desc": "\n    Perpetual Bond, variable interest rate, not callable.\n    "
    },
    "bare_call_config": {
        "update_application": "CALL"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class AssetTransferArgs(_ArgsBase[int]):
    """Transfer D-ASA units between accounts"""

    sender_holding_address: str
    """Sender Account Holding Address"""
    receiver_holding_address: str
    """Receiver Account Holding Address"""
    units: int
    """Amount of D-ASA units to transfer"""

    @staticmethod
    def method() -> str:
        return "asset_transfer(address,address,uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class PaymentResult:
    amount: int
    timestamp: int
    context: bytes | bytearray


@dataclasses.dataclass(kw_only=True)
class PayCouponArgs(_ArgsBase[PaymentResult]):
    """Pay due coupon to an account"""

    holding_address: str
    """Account Holding Address"""
    payment_info: bytes | bytearray
    """Additional payment information (Optional)"""

    @staticmethod
    def method() -> str:
        return "pay_coupon(address,byte[])(uint64,uint64,byte[])"


@dataclasses.dataclass(kw_only=True)
class UpdateInterestRateArgs(_ArgsBase[int]):
    """Update variable interest rates in bps"""

    interest_rate: int
    """Interest rate in bps"""

    @staticmethod
    def method() -> str:
        return "update_interest_rate(uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class CurrentUnitsValue:
    units_value: int
    accrued_interest: int
    day_count_factor: tuple[int, int]


@dataclasses.dataclass(kw_only=True)
class GetAccountUnitsCurrentValueArgs(_ArgsBase[CurrentUnitsValue]):
    """Get account's units current value and accrued interest"""

    holding_address: str
    """Account Holding Address"""
    units: int
    """Account's units for the current value calculation"""

    @staticmethod
    def method() -> str:
        return "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))"


@dataclasses.dataclass(kw_only=True)
class PaymentAmounts:
    interest: int
    principal: int


@dataclasses.dataclass(kw_only=True)
class GetPaymentAmountArgs(_ArgsBase[PaymentAmounts]):
    """Get the next payment amount"""

    holding_address: str
    """Account Holding Address"""

    @staticmethod
    def method() -> str:
        return "get_payment_amount(address)(uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class CouponsInfo:
    total_coupons: int
    due_coupons: int
    next_coupon_due_date: int
    day_count_factor: tuple[int, int]
    all_due_coupons_paid: bool


@dataclasses.dataclass(kw_only=True)
class GetCouponsStatusArgs(_ArgsBase[CouponsInfo]):
    """Get D-ASA coupons status"""

    @staticmethod
    def method() -> str:
        return "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)"


@dataclasses.dataclass(kw_only=True)
class GetTimePeriodsArgs(_ArgsBase[list[tuple[int, int]]]):
    """Get D-ASA time periods"""

    @staticmethod
    def method() -> str:
        return "get_time_periods()(uint64,uint64)[]"


@dataclasses.dataclass(kw_only=True)
class AssetConfigArgs(_ArgsBase[None]):
    """Configure the Debt Algorand Standard Application"""

    denomination_asset_id: int
    """Denomination asset identifier"""
    settlement_asset_id: int
    """Settlement asset identifier"""
    principal: int
    """Principal, expressed in denomination asset"""
    minimum_denomination: int
    """Minimum denomination, expressed in denomination asset"""
    day_count_convention: int
    """Day-count convention for interests calculation"""
    interest_rate: int
    """Interest rate in bps"""
    coupon_rates: list[int]
    """Coupon interest rates in bps"""
    time_events: list[int]
    """Time events (strictly ascending order)"""
    time_periods: list[tuple[int, int]]
    """Time periods of recurring time events"""

    @staticmethod
    def method() -> str:
        return "asset_config(uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void"


@dataclasses.dataclass(kw_only=True)
class SecondaryMarketSchedule:
    secondary_market_opening_date: int
    secondary_market_closure_date: int


@dataclasses.dataclass(kw_only=True)
class SetSecondaryTimeEventsArgs(_ArgsBase[SecondaryMarketSchedule]):
    """Set secondary market time schedule"""

    secondary_market_time_events: list[int]
    """Secondary market time events (strictly ascending order)"""

    @staticmethod
    def method() -> str:
        return "set_secondary_time_events(uint64[])(uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class AssignRoleArgs(_ArgsBase[int]):
    """Assign a role to an address"""

    role_address: str
    """Account Role Address"""
    role: int
    """Role identifier"""
    config: bytes | bytearray
    """Role configuration (Optional)"""

    @staticmethod
    def method() -> str:
        return "assign_role(address,uint8,byte[])uint64"


@dataclasses.dataclass(kw_only=True)
class RevokeRoleArgs(_ArgsBase[int]):
    """Revoke a role from an address"""

    role_address: str
    """Account Role Address"""
    role: int
    """Role identifier"""

    @staticmethod
    def method() -> str:
        return "revoke_role(address,uint8)uint64"


@dataclasses.dataclass(kw_only=True)
class OpenAccountArgs(_ArgsBase[int]):
    """Open D-ASA account"""

    holding_address: str
    """Account Holding Address"""
    payment_address: str
    """Account Payment Address"""

    @staticmethod
    def method() -> str:
        return "open_account(address,address)uint64"


@dataclasses.dataclass(kw_only=True)
class CloseAccountArgs(_ArgsBase[tuple[int, int]]):
    """Close D-ASA account"""

    holding_address: str
    """Account Holding Address"""

    @staticmethod
    def method() -> str:
        return "close_account(address)(uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class PrimaryDistributionArgs(_ArgsBase[int]):
    """Distribute D-ASA units to accounts according the primary market"""

    holding_address: str
    """Account Holding Address"""
    units: int
    """Amount of D-ASA units to distribute"""

    @staticmethod
    def method() -> str:
        return "primary_distribution(address,uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class SetAssetSuspensionArgs(_ArgsBase[int]):
    """Set asset suspension status"""

    suspended: bool
    """Suspension status"""

    @staticmethod
    def method() -> str:
        return "set_asset_suspension(bool)uint64"


@dataclasses.dataclass(kw_only=True)
class SetAccountSuspensionArgs(_ArgsBase[int]):
    """Set account suspension status"""

    holding_address: str
    """Account Holding Address"""
    suspended: bool
    """Suspension status"""

    @staticmethod
    def method() -> str:
        return "set_account_suspension(address,bool)uint64"


@dataclasses.dataclass(kw_only=True)
class SetDefaultStatusArgs(_ArgsBase[None]):
    """Set D-ASA default status"""

    defaulted: bool
    """Default status"""

    @staticmethod
    def method() -> str:
        return "set_default_status(bool)void"


@dataclasses.dataclass(kw_only=True)
class AssetInfo:
    denomination_asset_id: int
    settlement_asset_id: int
    outstanding_principal: int
    unit_value: int
    day_count_convention: int
    interest_rate: int
    total_supply: int
    circulating_supply: int
    primary_distribution_opening_date: int
    primary_distribution_closure_date: int
    issuance_date: int
    maturity_date: int
    suspended: bool
    performance: int


@dataclasses.dataclass(kw_only=True)
class GetAssetInfoArgs(_ArgsBase[AssetInfo]):
    """Get D-ASA info"""

    @staticmethod
    def method() -> str:
        return "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)"


@dataclasses.dataclass(kw_only=True)
class AccountInfo:
    payment_address: str
    units: int
    unit_value: int
    paid_coupons: int
    suspended: bool


@dataclasses.dataclass(kw_only=True)
class GetAccountInfoArgs(_ArgsBase[AccountInfo]):
    """Get account info"""

    holding_address: str
    """Account Holding Address"""

    @staticmethod
    def method() -> str:
        return "get_account_info(address)(address,uint64,uint64,uint64,bool)"


@dataclasses.dataclass(kw_only=True)
class GetTimeEventsArgs(_ArgsBase[list[int]]):
    """Get D-ASA time events"""

    @staticmethod
    def method() -> str:
        return "get_time_events()uint64[]"


@dataclasses.dataclass(kw_only=True)
class GetSecondaryMarketScheduleArgs(_ArgsBase[list[int]]):
    """Get secondary market schedule"""

    @staticmethod
    def method() -> str:
        return "get_secondary_market_schedule()uint64[]"


@dataclasses.dataclass(kw_only=True)
class AssetMetadata:
    contract_type: int
    calendar: int
    business_day_convention: int
    end_of_month_convention: int
    prepayment_effect: int
    penalty_type: int
    prospectus_hash: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    prospectus_url: str


@dataclasses.dataclass(kw_only=True)
class GetAssetMetadataArgs(_ArgsBase[AssetMetadata]):
    """Get D-ASA metadata"""

    @staticmethod
    def method() -> str:
        return "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)"


@dataclasses.dataclass(kw_only=True)
class AssetCreateArgs(_ArgsBase[None]):
    """Create a new D-ASA"""

    arranger: str
    """D-ASA Arranger Address"""
    metadata: AssetMetadata
    """D-ASA metadata"""

    @staticmethod
    def method() -> str:
        return "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.arranger = ByteReader(typing.cast(bytes, data.get(b"R20#")))
        self.circulating_units = typing.cast(int, data.get(b"circulating_units"))
        self.coupon_period = typing.cast(int, data.get(b"coupon_period"))
        self.day_count_convention = typing.cast(int, data.get(b"day_count_convention"))
        self.defaulted = typing.cast(int, data.get(b"defaulted"))
        self.denomination_asset_id = typing.cast(int, data.get(b"denomination_asset_id"))
        self.interest_rate = typing.cast(int, data.get(b"interest_rate"))
        self.issuance_date = typing.cast(int, data.get(b"issuance_date"))
        self.maturity_date = typing.cast(int, data.get(b"maturity_date"))
        self.metadata = ByteReader(typing.cast(bytes, data.get(b"metadata")))
        self.paid_coupon_units = typing.cast(int, data.get(b"paid_coupon_units"))
        self.primary_distribution_closure_date = typing.cast(int, data.get(b"primary_distribution_closure_date"))
        self.primary_distribution_opening_date = typing.cast(int, data.get(b"primary_distribution_opening_date"))
        self.secondary_market_closure_date = typing.cast(int, data.get(b"secondary_market_closure_date"))
        self.secondary_market_opening_date = typing.cast(int, data.get(b"secondary_market_opening_date"))
        self.settlement_asset_id = typing.cast(int, data.get(b"settlement_asset_id"))
        self.status = typing.cast(int, data.get(b"status"))
        self.suspended = typing.cast(int, data.get(b"suspended"))
        self.total_coupons = typing.cast(int, data.get(b"total_coupons"))
        self.total_units = typing.cast(int, data.get(b"total_units"))
        self.unit_value = typing.cast(int, data.get(b"unit_value"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def asset_transfer(
        self,
        *,
        sender_holding_address: str,
        receiver_holding_address: str,
        units: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Transfer D-ASA units between accounts
        
        Adds a call to `asset_transfer(address,address,uint64)uint64` ABI method
        
        :param str sender_holding_address: Sender Account Holding Address
        :param str receiver_holding_address: Receiver Account Holding Address
        :param int units: Amount of D-ASA units to transfer
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AssetTransferArgs(
            sender_holding_address=sender_holding_address,
            receiver_holding_address=receiver_holding_address,
            units=units,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def pay_coupon(
        self,
        *,
        holding_address: str,
        payment_info: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Pay due coupon to an account
        
        Adds a call to `pay_coupon(address,byte[])(uint64,uint64,byte[])` ABI method
        
        :param str holding_address: Account Holding Address
        :param bytes | bytearray payment_info: Additional payment information (Optional)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PayCouponArgs(
            holding_address=holding_address,
            payment_info=payment_info,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_interest_rate(
        self,
        *,
        interest_rate: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Update variable interest rates in bps
        
        Adds a call to `update_interest_rate(uint64)uint64` ABI method
        
        :param int interest_rate: Interest rate in bps
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateInterestRateArgs(
            interest_rate=interest_rate,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_account_units_current_value(
        self,
        *,
        holding_address: str,
        units: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get account's units current value and accrued interest
        
        Adds a call to `get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))` ABI method
        
        :param str holding_address: Account Holding Address
        :param int units: Account's units for the current value calculation
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetAccountUnitsCurrentValueArgs(
            holding_address=holding_address,
            units=units,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_payment_amount(
        self,
        *,
        holding_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get the next payment amount
        
        Adds a call to `get_payment_amount(address)(uint64,uint64)` ABI method
        
        :param str holding_address: Account Holding Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetPaymentAmountArgs(
            holding_address=holding_address,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_coupons_status(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get D-ASA coupons status
        
        Adds a call to `get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetCouponsStatusArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_time_periods(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get D-ASA time periods
        
        Adds a call to `get_time_periods()(uint64,uint64)[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetTimePeriodsArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def asset_config(
        self,
        *,
        denomination_asset_id: int,
        settlement_asset_id: int,
        principal: int,
        minimum_denomination: int,
        day_count_convention: int,
        interest_rate: int,
        coupon_rates: list[int],
        time_events: list[int],
        time_periods: list[tuple[int, int]],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Configure the Debt Algorand Standard Application
        
        Adds a call to `asset_config(uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void` ABI method
        
        :param int denomination_asset_id: Denomination asset identifier
        :param int settlement_asset_id: Settlement asset identifier
        :param int principal: Principal, expressed in denomination asset
        :param int minimum_denomination: Minimum denomination, expressed in denomination asset
        :param int day_count_convention: Day-count convention for interests calculation
        :param int interest_rate: Interest rate in bps
        :param list[int] coupon_rates: Coupon interest rates in bps
        :param list[int] time_events: Time events (strictly ascending order)
        :param list[tuple[int, int]] time_periods: Time periods of recurring time events
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AssetConfigArgs(
            denomination_asset_id=denomination_asset_id,
            settlement_asset_id=settlement_asset_id,
            principal=principal,
            minimum_denomination=minimum_denomination,
            day_count_convention=day_count_convention,
            interest_rate=interest_rate,
            coupon_rates=coupon_rates,
            time_events=time_events,
            time_periods=time_periods,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_secondary_time_events(
        self,
        *,
        secondary_market_time_events: list[int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set secondary market time schedule
        
        Adds a call to `set_secondary_time_events(uint64[])(uint64,uint64)` ABI method
        
        :param list[int] secondary_market_time_events: Secondary market time events (strictly ascending order)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetSecondaryTimeEventsArgs(
            secondary_market_time_events=secondary_market_time_events,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def assign_role(
        self,
        *,
        role_address: str,
        role: int,
        config: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Assign a role to an address
        
        Adds a call to `assign_role(address,uint8,byte[])uint64` ABI method
        
        :param str role_address: Account Role Address
        :param int role: Role identifier
        :param bytes | bytearray config: Role configuration (Optional)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AssignRoleArgs(
            role_address=role_address,
            role=role,
            config=config,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def revoke_role(
        self,
        *,
        role_address: str,
        role: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Revoke a role from an address
        
        Adds a call to `revoke_role(address,uint8)uint64` ABI method
        
        :param str role_address: Account Role Address
        :param int role: Role identifier
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RevokeRoleArgs(
            role_address=role_address,
            role=role,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def open_account(
        self,
        *,
        holding_address: str,
        payment_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Open D-ASA account
        
        Adds a call to `open_account(address,address)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param str payment_address: Account Payment Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OpenAccountArgs(
            holding_address=holding_address,
            payment_address=payment_address,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def close_account(
        self,
        *,
        holding_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Close D-ASA account
        
        Adds a call to `close_account(address)(uint64,uint64)` ABI method
        
        :param str holding_address: Account Holding Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CloseAccountArgs(
            holding_address=holding_address,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def primary_distribution(
        self,
        *,
        holding_address: str,
        units: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Distribute D-ASA units to accounts according the primary market
        
        Adds a call to `primary_distribution(address,uint64)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param int units: Amount of D-ASA units to distribute
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PrimaryDistributionArgs(
            holding_address=holding_address,
            units=units,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_asset_suspension(
        self,
        *,
        suspended: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set asset suspension status
        
        Adds a call to `set_asset_suspension(bool)uint64` ABI method
        
        :param bool suspended: Suspension status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetAssetSuspensionArgs(
            suspended=suspended,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_account_suspension(
        self,
        *,
        holding_address: str,
        suspended: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set account suspension status
        
        Adds a call to `set_account_suspension(address,bool)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param bool suspended: Suspension status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetAccountSuspensionArgs(
            holding_address=holding_address,
            suspended=suspended,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_default_status(
        self,
        *,
        defaulted: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set D-ASA default status
        
        Adds a call to `set_default_status(bool)void` ABI method
        
        :param bool defaulted: Default status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetDefaultStatusArgs(
            defaulted=defaulted,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_asset_info(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get D-ASA info
        
        Adds a call to `get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetAssetInfoArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_account_info(
        self,
        *,
        holding_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get account info
        
        Adds a call to `get_account_info(address)(address,uint64,uint64,uint64,bool)` ABI method
        
        :param str holding_address: Account Holding Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetAccountInfoArgs(
            holding_address=holding_address,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_time_events(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get D-ASA time events
        
        Adds a call to `get_time_events()uint64[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetTimeEventsArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_secondary_market_schedule(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get secondary market schedule
        
        Adds a call to `get_secondary_market_schedule()uint64[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetSecondaryMarketScheduleArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_asset_metadata(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get D-ASA metadata
        
        Adds a call to `get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetAssetMetadataArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_asset_create(
        self,
        *,
        arranger: str,
        metadata: AssetMetadata,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Create a new D-ASA
        
        Adds a call to `asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void` ABI method
        
        :param str arranger: D-ASA Arranger Address
        :param AssetMetadata metadata: D-ASA metadata
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AssetCreateArgs(
            arranger=arranger,
            metadata=metadata,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a calls to the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_update(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class PerpetualBondClient:
    """
        Perpetual Bond, variable interest rate, not callable.
        
    
    A class for interacting with the PerpetualBond app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        PerpetualBondClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def asset_transfer(
        self,
        *,
        sender_holding_address: str,
        receiver_holding_address: str,
        units: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Transfer D-ASA units between accounts
        
        Calls `asset_transfer(address,address,uint64)uint64` ABI method
        
        :param str sender_holding_address: Sender Account Holding Address
        :param str receiver_holding_address: Receiver Account Holding Address
        :param int units: Amount of D-ASA units to transfer
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Transferred actualized value in denomination asset"""

        args = AssetTransferArgs(
            sender_holding_address=sender_holding_address,
            receiver_holding_address=receiver_holding_address,
            units=units,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def pay_coupon(
        self,
        *,
        holding_address: str,
        payment_info: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[PaymentResult]:
        """Pay due coupon to an account
        
        Calls `pay_coupon(address,byte[])(uint64,uint64,byte[])` ABI method
        
        :param str holding_address: Account Holding Address
        :param bytes | bytearray payment_info: Additional payment information (Optional)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[PaymentResult]: Paid coupon amount in denomination asset, Payment timestamp, Payment context"""

        args = PayCouponArgs(
            holding_address=holding_address,
            payment_info=payment_info,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = PaymentResult(**result_dict)
        return result

    def update_interest_rate(
        self,
        *,
        interest_rate: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Update variable interest rates in bps
        
        Calls `update_interest_rate(uint64)uint64` ABI method
        
        :param int interest_rate: Interest rate in bps
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Timestamp of the update"""

        args = UpdateInterestRateArgs(
            interest_rate=interest_rate,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_account_units_current_value(
        self,
        *,
        holding_address: str,
        units: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[CurrentUnitsValue]:
        """Get account's units current value and accrued interest
        
        Calls `get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))` ABI method
        
        :param str holding_address: Account Holding Address
        :param int units: Account's units for the current value calculation
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[CurrentUnitsValue]: Units current value in denomination asset, Accrued interest in denomination asset"""

        args = GetAccountUnitsCurrentValueArgs(
            holding_address=holding_address,
            units=units,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = CurrentUnitsValue(**result_dict)
        return result

    def get_payment_amount(
        self,
        *,
        holding_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[PaymentAmounts]:
        """Get the next payment amount
        
        Calls `get_payment_amount(address)(uint64,uint64)` ABI method
        
        :param str holding_address: Account Holding Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[PaymentAmounts]: Interest amount in denomination asset, Principal amount in denomination asset"""

        args = GetPaymentAmountArgs(
            holding_address=holding_address,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = PaymentAmounts(**result_dict)
        return result

    def get_coupons_status(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[CouponsInfo]:
        """Get D-ASA coupons status
        
        Calls `get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[CouponsInfo]: Total coupons, Due coupons, Next coupon due date, (Day count factor numerator, Day count factor denominator), All due coupons paid"""

        args = GetCouponsStatusArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = CouponsInfo(**result_dict)
        return result

    def get_time_periods(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[list[tuple[int, int]]]:
        """Get D-ASA time periods
        
        Calls `get_time_periods()(uint64,uint64)[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[list[tuple[int, int]]]: Time periods"""

        args = GetTimePeriodsArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def asset_config(
        self,
        *,
        denomination_asset_id: int,
        settlement_asset_id: int,
        principal: int,
        minimum_denomination: int,
        day_count_convention: int,
        interest_rate: int,
        coupon_rates: list[int],
        time_events: list[int],
        time_periods: list[tuple[int, int]],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Configure the Debt Algorand Standard Application
        
        Calls `asset_config(uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void` ABI method
        
        :param int denomination_asset_id: Denomination asset identifier
        :param int settlement_asset_id: Settlement asset identifier
        :param int principal: Principal, expressed in denomination asset
        :param int minimum_denomination: Minimum denomination, expressed in denomination asset
        :param int day_count_convention: Day-count convention for interests calculation
        :param int interest_rate: Interest rate in bps
        :param list[int] coupon_rates: Coupon interest rates in bps
        :param list[int] time_events: Time events (strictly ascending order)
        :param list[tuple[int, int]] time_periods: Time periods of recurring time events
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AssetConfigArgs(
            denomination_asset_id=denomination_asset_id,
            settlement_asset_id=settlement_asset_id,
            principal=principal,
            minimum_denomination=minimum_denomination,
            day_count_convention=day_count_convention,
            interest_rate=interest_rate,
            coupon_rates=coupon_rates,
            time_events=time_events,
            time_periods=time_periods,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_secondary_time_events(
        self,
        *,
        secondary_market_time_events: list[int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[SecondaryMarketSchedule]:
        """Set secondary market time schedule
        
        Calls `set_secondary_time_events(uint64[])(uint64,uint64)` ABI method
        
        :param list[int] secondary_market_time_events: Secondary market time events (strictly ascending order)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[SecondaryMarketSchedule]: Secondary Market Opening Date, Secondary Market Closure Date"""

        args = SetSecondaryTimeEventsArgs(
            secondary_market_time_events=secondary_market_time_events,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = SecondaryMarketSchedule(**result_dict)
        return result

    def assign_role(
        self,
        *,
        role_address: str,
        role: int,
        config: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Assign a role to an address
        
        Calls `assign_role(address,uint8,byte[])uint64` ABI method
        
        :param str role_address: Account Role Address
        :param int role: Role identifier
        :param bytes | bytearray config: Role configuration (Optional)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Timestamp of the role assignment"""

        args = AssignRoleArgs(
            role_address=role_address,
            role=role,
            config=config,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def revoke_role(
        self,
        *,
        role_address: str,
        role: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Revoke a role from an address
        
        Calls `revoke_role(address,uint8)uint64` ABI method
        
        :param str role_address: Account Role Address
        :param int role: Role identifier
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Timestamp of the role revocation"""

        args = RevokeRoleArgs(
            role_address=role_address,
            role=role,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def open_account(
        self,
        *,
        holding_address: str,
        payment_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Open D-ASA account
        
        Calls `open_account(address,address)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param str payment_address: Account Payment Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Timestamp of the account opening"""

        args = OpenAccountArgs(
            holding_address=holding_address,
            payment_address=payment_address,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def close_account(
        self,
        *,
        holding_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[tuple[int, int]]:
        """Close D-ASA account
        
        Calls `close_account(address)(uint64,uint64)` ABI method
        
        :param str holding_address: Account Holding Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[tuple[int, int]]: Closed units, Timestamp of the account closing"""

        args = CloseAccountArgs(
            holding_address=holding_address,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def primary_distribution(
        self,
        *,
        holding_address: str,
        units: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Distribute D-ASA units to accounts according the primary market
        
        Calls `primary_distribution(address,uint64)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param int units: Amount of D-ASA units to distribute
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Remaining D-ASA units to be distributed"""

        args = PrimaryDistributionArgs(
            holding_address=holding_address,
            units=units,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_asset_suspension(
        self,
        *,
        suspended: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Set asset suspension status
        
        Calls `set_asset_suspension(bool)uint64` ABI method
        
        :param bool suspended: Suspension status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Timestamp of the set asset suspension status"""

        args = SetAssetSuspensionArgs(
            suspended=suspended,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_account_suspension(
        self,
        *,
        holding_address: str,
        suspended: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Set account suspension status
        
        Calls `set_account_suspension(address,bool)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param bool suspended: Suspension status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Timestamp of the set account suspension status"""

        args = SetAccountSuspensionArgs(
            holding_address=holding_address,
            suspended=suspended,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_default_status(
        self,
        *,
        defaulted: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set D-ASA default status
        
        Calls `set_default_status(bool)void` ABI method
        
        :param bool defaulted: Default status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetDefaultStatusArgs(
            defaulted=defaulted,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_asset_info(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[AssetInfo]:
        """Get D-ASA info
        
        Calls `get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[AssetInfo]: Denomination asset ID, Settlement asset ID, Outstanding principal, Unit nominal value, Day-count convention, Interest rate, Total supply, Circulating supply, Primary distribution opening date, Primary distribution closure date, Issuance date, Maturity date, Suspended, Performance"""

        args = GetAssetInfoArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = AssetInfo(**result_dict)
        return result

    def get_account_info(
        self,
        *,
        holding_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[AccountInfo]:
        """Get account info
        
        Calls `get_account_info(address)(address,uint64,uint64,uint64,bool)` ABI method
        
        :param str holding_address: Account Holding Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[AccountInfo]: Payment Address, D-ASA units, Unit nominal value in denomination asset, Paid coupons, Suspended"""

        args = GetAccountInfoArgs(
            holding_address=holding_address,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = AccountInfo(**result_dict)
        return result

    def get_time_events(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[list[int]]:
        """Get D-ASA time events
        
        Calls `get_time_events()uint64[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[list[int]]: Time events"""

        args = GetTimeEventsArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_secondary_market_schedule(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[list[int]]:
        """Get secondary market schedule
        
        Calls `get_secondary_market_schedule()uint64[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[list[int]]: Secondary market schedule"""

        args = GetSecondaryMarketScheduleArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_asset_metadata(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[AssetMetadata]:
        """Get D-ASA metadata
        
        Calls `get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[AssetMetadata]: Contract type, Calendar, Business day convention, End of month convention, Early repayment effect, Early repayment penalty type, Prospectus hash, Prospectus URL"""

        args = GetAssetMetadataArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = AssetMetadata(**result_dict)
        return result

    def create_asset_create(
        self,
        *,
        arranger: str,
        metadata: AssetMetadata,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Create a new D-ASA
        
        Calls `asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void` ABI method
        
        :param str arranger: D-ASA Arranger Address
        :param AssetMetadata metadata: D-ASA metadata
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AssetCreateArgs(
            arranger=arranger,
            metadata=metadata,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.update(
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[AssetCreateArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[AssetCreateArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
