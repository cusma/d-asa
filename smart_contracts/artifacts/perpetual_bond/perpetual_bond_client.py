# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Sender Account Holding Address", "name": "sender_holding_address"}, {"type": "address", "desc": "Receiver Account Holding Address", "name": "receiver_holding_address"}, {"type": "uint64", "desc": "Amount of D-ASA units to transfer", "name": "units"}], "name": "asset_transfer", "returns": {"type": "uint64", "desc": "Transferred actualized value in denomination asset"}, "desc": "Transfer D-ASA units between accounts", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}, {"type": "byte[]", "desc": "Additional payment information (Optional)", "name": "payment_info"}], "name": "pay_coupon", "returns": {"type": "(uint64,uint64,byte[])", "desc": "Paid coupon amount in denomination asset, Payment timestamp, Payment context", "struct": "PaymentResult"}, "desc": "Pay due coupon to an account", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "Interest rate in bps", "name": "interest_rate"}], "name": "update_interest_rate", "returns": {"type": "uint64", "desc": "Timestamp of the update"}, "desc": "Update variable interest rates in bps", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}, {"type": "uint64", "desc": "Account's units for the current value calculation", "name": "units"}], "name": "get_account_units_current_value", "returns": {"type": "(uint64,uint64,(uint64,uint64))", "desc": "Units current value in denomination asset, Accrued interest in denomination asset", "struct": "CurrentUnitsValue"}, "desc": "Get account's units current value and accrued interest", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}], "name": "get_payment_amount", "returns": {"type": "(uint64,uint64)", "desc": "Interest amount in denomination asset, Principal amount in denomination asset", "struct": "PaymentAmounts"}, "desc": "Get the next payment amount", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_coupons_status", "returns": {"type": "(uint64,uint64,uint64,(uint64,uint64),bool)", "desc": "Total coupons, Due coupons, Next coupon due date, (Day count factor numerator, Day count factor denominator), All due coupons paid", "struct": "CouponsInfo"}, "desc": "Get D-ASA coupons status", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_time_periods", "returns": {"type": "(uint64,uint64)[]", "desc": "Time periods"}, "desc": "Get D-ASA time periods", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "address", "desc": "D-ASA Arranger Address", "name": "arranger"}, {"type": "(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)", "desc": "D-ASA metadata", "name": "metadata", "struct": "AssetMetadata"}], "name": "asset_create", "returns": {"type": "void"}, "desc": "Create a new D-ASA", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["UpdateApplication"], "create": []}, "args": [{"type": "(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)", "name": "metadata", "struct": "AssetMetadata"}], "name": "asset_update", "returns": {"type": "void"}, "desc": "Update D-ASA application.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "Denomination asset identifier", "name": "denomination_asset_id"}, {"type": "uint64", "desc": "Settlement asset identifier", "name": "settlement_asset_id"}, {"type": "uint64", "desc": "Principal, expressed in denomination asset", "name": "principal"}, {"type": "uint64", "desc": "Principal discount in bps", "name": "principal_discount"}, {"type": "uint64", "desc": "Minimum denomination, expressed in denomination asset", "name": "minimum_denomination"}, {"type": "uint8", "desc": "Day-count convention for interests calculation", "name": "day_count_convention"}, {"type": "uint16", "desc": "Interest rate in bps", "name": "interest_rate"}, {"type": "uint16[]", "desc": "Coupon interest rates in bps", "name": "coupon_rates"}, {"type": "uint64[]", "desc": "Time events (strictly ascending order)", "name": "time_events"}, {"type": "(uint64,uint64)[]", "desc": "Time periods of recurring time events", "name": "time_periods"}], "name": "asset_config", "returns": {"type": "void"}, "desc": "Configure the Debt Algorand Standard Application", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64[]", "desc": "Secondary market time events (strictly ascending order)", "name": "secondary_market_time_events"}], "name": "set_secondary_time_events", "returns": {"type": "(uint64,uint64)", "desc": "Secondary Market Opening Date, Secondary Market Closure Date", "struct": "SecondaryMarketSchedule"}, "desc": "Set secondary market time schedule", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Role Address", "name": "role_address"}, {"type": "uint8", "desc": "Role identifier", "name": "role"}, {"type": "byte[]", "desc": "Role configuration (Optional)", "name": "config"}], "name": "assign_role", "returns": {"type": "uint64", "desc": "Timestamp of the role assignment"}, "desc": "Assign a role to an address", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Role Address", "name": "role_address"}, {"type": "uint8", "desc": "Role identifier", "name": "role"}], "name": "revoke_role", "returns": {"type": "uint64", "desc": "Timestamp of the role revocation"}, "desc": "Revoke a role from an address", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}, {"type": "address", "desc": "Account Payment Address", "name": "payment_address"}], "name": "open_account", "returns": {"type": "uint64", "desc": "Timestamp of the account opening"}, "desc": "Open D-ASA account", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}], "name": "close_account", "returns": {"type": "(uint64,uint64)", "desc": "Closed units, Timestamp of the account closing"}, "desc": "Close D-ASA account", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}, {"type": "uint64", "desc": "Amount of D-ASA units to distribute", "name": "units"}], "name": "primary_distribution", "returns": {"type": "uint64", "desc": "Remaining D-ASA units to be distributed"}, "desc": "Distribute D-ASA units to accounts according the primary market", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "bool", "desc": "Suspension status", "name": "suspended"}], "name": "set_asset_suspension", "returns": {"type": "uint64", "desc": "Timestamp of the set asset suspension status"}, "desc": "Set asset suspension status", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}, {"type": "bool", "desc": "Suspension status", "name": "suspended"}], "name": "set_account_suspension", "returns": {"type": "uint64", "desc": "Timestamp of the set account suspension status"}, "desc": "Set account suspension status", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "bool", "desc": "Default status", "name": "defaulted"}], "name": "set_default_status", "returns": {"type": "void"}, "desc": "Set D-ASA default status", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_asset_info", "returns": {"type": "(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)", "desc": "Denomination asset ID, Settlement asset ID, Outstanding principal, Unit nominal value, Day-count convention, Interest rate, Total supply, Circulating supply, Primary distribution opening date, Primary distribution closure date, Issuance date, Maturity date, Suspended, Performance", "struct": "AssetInfo"}, "desc": "Get D-ASA info", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}], "name": "get_account_info", "returns": {"type": "(address,uint64,uint64,uint64,bool)", "desc": "Payment Address, D-ASA units, Unit nominal value in denomination asset, Paid coupons, Suspended", "struct": "AccountInfo"}, "desc": "Get account info", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_time_events", "returns": {"type": "uint64[]", "desc": "Time events"}, "desc": "Get D-ASA time events", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_secondary_market_schedule", "returns": {"type": "uint64[]", "desc": "Secondary market schedule"}, "desc": "Get secondary market schedule", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_asset_metadata", "returns": {"type": "(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)", "desc": "Contract type, Calendar, Business day convention, End of month convention, Early repayment effect, Early repayment penalty type, Prospectus hash, Prospectus URL", "struct": "AssetMetadata"}, "desc": "Get D-ASA metadata", "events": [], "readonly": true, "recommendations": {}}], "name": "PerpetualBond", "state": {"keys": {"box": {"coupon_rates": {"key": "Y291cG9uUmF0ZXM=", "keyType": "AVMBytes", "valueType": "uint16[]"}, "time_events": {"key": "dGltZUV2ZW50cw==", "keyType": "AVMBytes", "valueType": "uint64[]"}, "time_periods": {"key": "dGltZVBlcmlvZHM=", "keyType": "AVMBytes", "valueType": "(uint64,uint64)[]"}}, "global": {"arranger": {"key": "UjIwIw==", "keyType": "AVMBytes", "valueType": "AVMBytes"}, "denomination_asset_id": {"key": "ZGVub21pbmF0aW9uX2Fzc2V0X2lk", "keyType": "AVMString", "valueType": "AVMUint64"}, "settlement_asset_id": {"key": "c2V0dGxlbWVudF9hc3NldF9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "unit_value": {"key": "dW5pdF92YWx1ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "day_count_convention": {"key": "ZGF5X2NvdW50X2NvbnZlbnRpb24=", "keyType": "AVMString", "valueType": "AVMUint64"}, "metadata": {"key": "bWV0YWRhdGE=", "keyType": "AVMString", "valueType": "AVMBytes"}, "total_units": {"key": "dG90YWxfdW5pdHM=", "keyType": "AVMString", "valueType": "AVMUint64"}, "circulating_units": {"key": "Y2lyY3VsYXRpbmdfdW5pdHM=", "keyType": "AVMString", "valueType": "AVMUint64"}, "principal_discount": {"key": "cHJpbmNpcGFsX2Rpc2NvdW50", "keyType": "AVMString", "valueType": "AVMUint64"}, "interest_rate": {"key": "aW50ZXJlc3RfcmF0ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_coupons": {"key": "dG90YWxfY291cG9ucw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "primary_distribution_opening_date": {"key": "cHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRl", "keyType": "AVMString", "valueType": "AVMUint64"}, "primary_distribution_closure_date": {"key": "cHJpbWFyeV9kaXN0cmlidXRpb25fY2xvc3VyZV9kYXRl", "keyType": "AVMString", "valueType": "AVMUint64"}, "issuance_date": {"key": "aXNzdWFuY2VfZGF0ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "secondary_market_opening_date": {"key": "c2Vjb25kYXJ5X21hcmtldF9vcGVuaW5nX2RhdGU=", "keyType": "AVMString", "valueType": "AVMUint64"}, "secondary_market_closure_date": {"key": "c2Vjb25kYXJ5X21hcmtldF9jbG9zdXJlX2RhdGU=", "keyType": "AVMString", "valueType": "AVMUint64"}, "maturity_date": {"key": "bWF0dXJpdHlfZGF0ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "status": {"key": "c3RhdHVz", "keyType": "AVMString", "valueType": "AVMUint64"}, "suspended": {"key": "c3VzcGVuZGVk", "keyType": "AVMString", "valueType": "AVMUint64"}, "defaulted": {"key": "ZGVmYXVsdGVk", "keyType": "AVMString", "valueType": "AVMUint64"}, "coupon_period": {"key": "Y291cG9uX3BlcmlvZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "paid_coupon_units": {"key": "cGFpZF9jb3Vwb25fdW5pdHM=", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"account_manager": {"keyType": "address", "valueType": "RoleConfig", "prefix": "UjQwIw=="}, "primary_dealer": {"keyType": "address", "valueType": "RoleConfig", "prefix": "UjUwIw=="}, "trustee": {"keyType": "address", "valueType": "RoleConfig", "prefix": "UjYwIw=="}, "authority": {"keyType": "address", "valueType": "RoleConfig", "prefix": "UjcwIw=="}, "interest_oracle": {"keyType": "address", "valueType": "RoleConfig", "prefix": "UjgwIw=="}, "account": {"keyType": "address", "valueType": "AccountInfo", "prefix": "UjMwIw=="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 2, "ints": 20}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"AccountInfo": [{"name": "payment_address", "type": "address"}, {"name": "units", "type": "uint64"}, {"name": "unit_value", "type": "uint64"}, {"name": "paid_coupons", "type": "uint64"}, {"name": "suspended", "type": "bool"}], "AssetInfo": [{"name": "denomination_asset_id", "type": "uint64"}, {"name": "settlement_asset_id", "type": "uint64"}, {"name": "outstanding_principal", "type": "uint64"}, {"name": "unit_value", "type": "uint64"}, {"name": "day_count_convention", "type": "uint8"}, {"name": "principal_discount", "type": "uint16"}, {"name": "interest_rate", "type": "uint16"}, {"name": "total_supply", "type": "uint64"}, {"name": "circulating_supply", "type": "uint64"}, {"name": "primary_distribution_opening_date", "type": "uint64"}, {"name": "primary_distribution_closure_date", "type": "uint64"}, {"name": "issuance_date", "type": "uint64"}, {"name": "maturity_date", "type": "uint64"}, {"name": "suspended", "type": "bool"}, {"name": "performance", "type": "uint8"}], "AssetMetadata": [{"name": "contract_type", "type": "uint8"}, {"name": "calendar", "type": "uint8"}, {"name": "business_day_convention", "type": "uint8"}, {"name": "end_of_month_convention", "type": "uint8"}, {"name": "prepayment_effect", "type": "uint8"}, {"name": "penalty_type", "type": "uint8"}, {"name": "prospectus_hash", "type": "byte[32]"}, {"name": "prospectus_url", "type": "string"}], "CouponsInfo": [{"name": "total_coupons", "type": "uint64"}, {"name": "due_coupons", "type": "uint64"}, {"name": "next_coupon_due_date", "type": "uint64"}, {"name": "day_count_factor", "type": "DayCountFactor"}, {"name": "all_due_coupons_paid", "type": "bool"}], "CurrentUnitsValue": [{"name": "units_value", "type": "uint64"}, {"name": "accrued_interest", "type": "uint64"}, {"name": "day_count_factor", "type": "DayCountFactor"}], "DayCountFactor": [{"name": "numerator", "type": "uint64"}, {"name": "denominator", "type": "uint64"}], "PaymentAmounts": [{"name": "interest", "type": "uint64"}, {"name": "principal", "type": "uint64"}], "PaymentResult": [{"name": "amount", "type": "uint64"}, {"name": "timestamp", "type": "uint64"}, {"name": "context", "type": "byte[]"}], "RoleConfig": [{"name": "role_validity_start", "type": "uint64"}, {"name": "role_validity_end", "type": "uint64"}], "SecondaryMarketSchedule": [{"name": "secondary_market_opening_date", "type": "uint64"}, {"name": "secondary_market_closure_date", "type": "uint64"}]}, "byteCode": {"approval": "CiAIAAEIZMADgKMFkE7IASYkBBUffHUEUjMwIwZzdGF0dXMRY2lyY3VsYXRpbmdfdW5pdHMNaXNzdWFuY2VfZGF0ZRNzZXR0bGVtZW50X2Fzc2V0X2lkDWludGVyZXN0X3JhdGUIAAAAAAAAAAANdG90YWxfY291cG9ucyFwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUNbWF0dXJpdHlfZGF0ZQEACnVuaXRfdmFsdWUUZGF5X2NvdW50X2NvbnZlbnRpb24LdG90YWxfdW5pdHMdc2Vjb25kYXJ5X21hcmtldF9vcGVuaW5nX2RhdGUdc2Vjb25kYXJ5X21hcmtldF9jbG9zdXJlX2RhdGUNY291cG9uX3BlcmlvZARSMjAjFWRlbm9taW5hdGlvbl9hc3NldF9pZAhtZXRhZGF0YRJwcmluY2lwYWxfZGlzY291bnQhcHJpbWFyeV9kaXN0cmlidXRpb25fY2xvc3VyZV9kYXRlCXN1c3BlbmRlZAlkZWZhdWx0ZWQRcGFpZF9jb3Vwb25fdW5pdHMLdGltZVBlcmlvZHMEUjgwIwRSNDAjBFI3MCMKdGltZUV2ZW50cwRSNjAjBFI1MCMCAAADBoEBC2NvdXBvblJhdGVzMRhAAGwnEjIDZycTImcnBSJnJwwiZycNImcnFIAAZycOImcrImcnFSJnJwYiZycIImcnCSJnJxYiZycEImcnDyJnJxAiZycKImcqImcnFyJnJxgiZzE1gQISRDE0gRQSRDE3FEQxNhREJxEiZycZImcxG0EAr4IYBE/Wo8wEjPFLUQSA5R6fBEQ2PUkEZ9tPIAT2qWyNBCKbcG8EPw78bAQl26lbBIlHQTQEHW/CVQT+90VnBLj8E5AEPUPR8ATr2WsvBGyF4+4E9jrOjQS7zKGKBBp7q7QEQC26RwTtAnWfBPrSFz4ECO/qNQTkpatUNhoAjhgBzgG4AaUBjwF8AWwBXAFJATgBDgD7AOIAzAC2AKMAjQB6AGQAVQBFADIAIgASAAIiQzEZFEQxGESIDdcoTFCwI0MxGRREMRhEiA2wKExQsCNDMRkURDEYRIgNhyhMULAjQzEZFEQxGEQ2GgGIDWUoTFCwI0MxGRREMRhEiAyIKExQsCNDMRkURDEYRDYaAYgMOCNDMRkURDEYRDYaATYaAogMByhMULAjQzEZFEQxGEQ2GgGIC+IoTFCwI0MxGRREMRhENhoBNhoCiAsOKExQsCNDMRkURDEYRDYaAYgKwChMULAjQzEZFEQxGEQ2GgE2GgKICngoTFCwI0MxGRREMRhENhoBNhoCiAnGKExQsCNDMRkURDEYRDYaATYaAjYaA4gI5ShMULAjQzEZFEQxGEQ2GgGICFUoTFCwI0MxGRREMRhENhoBNhoCNhoDNhoENhoFNhoGNhoHNhoINhoJNhoKiAbJI0MxGYEEEkQxGEQ2GgGIBqwjQzEZFEQxGBRENhoBNhoCiAaLI0MxGRREMRhEiAUwKExQsCNDMRkURDEYRIgEryhMULAjQzEZFEQxGEQ2GgGIBH4oTFCwI0MxGRREMRhENhoBNhoCiAPDKExQsCNDMRkURDEYRDYaAYgDYihMULAjQzEZFEQxGEQ2GgE2GgKIAncoTFCwI0MxGRREMRhENhoBNhoCNhoDiAEFKExQsCNDigABIjIHSSInBGVEDUEAESInBGVEiwFMCSInEWVECowAiYoBASInBGVEIicRZUSL/wsIiYoBASInGWVEIitlRIv/Cw+JigIAKYv+UL5EVzAIi/8WqESJigEBgABHBIv/QAA+IicEZUQyB0wJSYwAIicRZUxJTgKMA0QiJw1lREyMBEyMAUAADosAIQUKiwMhBQqMBIwBiwSLARZMFlCMAIkijAKL/0EAB4v/iP90jAKLAkL/s4oAASInBGVEQQANMgciJwRlRA1BAAIjiSKJigMBi/2L/4j/bIv/iP95SVcACBdMVwgIF4v9i/6IBOoiJwZlRAtPAgshBk8CCwqJigMBIkcCgABJi/8XIiplRCUSQQFAIicPZUQyB0mMBA5BATIiJxBlRIsEDUEBJyNEMQCL/RJEiAOQiAOYKYv9UEmMAUm9RQFEKYv+UEmMAkm9RQFESwG+RCEEUycLIk8CVCJTFERJvkQhBFMnCyJPAlQiUxRESwG+RFcgCBeLBQ9ETL5EVygIjAC+RFcgCBdBAKSLAb5EVygIiwK+RFcoCKhBAI6LAb5EVzAIiwK+RFcwCKhBAHwjRIj+Rov9SwGI/oSLAUlOAr5EVygIjACL/YsFSU4ETwKI/vaMA0m+RFcgCBdLAgkWSwG+RExcIEsBTL+LAkm+RFcgCBdPAwgWSwG+RExcIL++RFcgCBdAABWLAUm+RCcHXChLAUy/Sb5EJwdcML+LABeLBQuLAwgWjACJIkL/gYsCSb5EiwBcKEsBTL+LAb5ESwG+RExXMAhcML9C/2MiQv7WigIBIiplRCUSRIgCY4gCaymL/lBHAr1FAURJvkRXIAgXSU4CRIj9gEsBvkRXMAgXTEsBDUSI/aREvkRXACAiJwVlRHAARQFBAIeLAL5EIQRTJwsiTwJUIlNAAHUjQQBti/6IAy0iJwZlRAshBgpJMgoiJwVlRHAAREsBD0SLAL5EVwAgsTIAIicFZURPA7ISTwKyFLIRgQSyELIBs4sASb5EVzAIFyMIFksBvkRMXDC/IicZZUSLAQgnGUxnFjIHFlCAAgASUIv/UIwAiSJC/8wiQv+IigEBIicbMQBQSb1FAUEAOosBvkRXAAgyBxZJjACmQQApiwG+RFcICIsAp0EAHCNEiAFoiAFwiPyaiPzLRIv/FycGTGcyBxaMAIkiQv/higIBIoAARwUiJwllREEAkTIHIicJZUQPQQCGI0Qpi/5QSYwAvUUBRIv/JwelQQBtiwC+RFcgCBcWi/+nQQBeI0SL/xdJjAaL/kyIAhGMASKMAiKMBSKMA4j8KkmMBIv+TIj8Zoj800EAHosESYj8bIv+iwZPA4j824wCSVcACBeMBVcICBeMA4sBFosCFosFFosDFlBOAlBMUIwAiSJC/58iQv93igEBKYv/UL1FAUSL/4gBuiInBmVECyEGChYnB1CJigABgABHBCIqZUQlEkEAW4j7r4wCiwJJIwiI+8eMA4j71IwAIowEIowBiPxKQQASiwKI++RJVwAIF4wEVwgIF4wBIicIZUQWiwIWiwMWiwQWiwEWUCcLIosAVE8ETwRQTwNQTwJQTFCMAIkijAJC/6SKAAEnISIqZUQlEkEABycavkyMAESLAEyJigAAIicYZUQURImKAAAiJxdlRBREiYoAADEAIicSZUQSRImKAAAiJxwxAFBJvUUBQQAhiwG+RFcACDIHFkmMAKZBABCLAb5EVwgIiwCnQQADI0SJIkL/+ooAACInHTEAUEm9RQFBACGLAb5EVwAIMgcWSYwApkEAEIsBvkRXCAiLAKdBAAMjRIkiQv/6igEBgABJi/9XAgBJVwAIFzIHDUSL/yJZIwkiiwSLAwxBAFyBSzIMDUEAGbGBBrIQgQWyGScish4nIrIfMgCyAbNC/9+LBEkkC4sCSU4DTCRYF0lOA4wBIwhJjAQkCyRYF0mMAAxEIicNZUSB/wETQf+piwCLAQkhBRgUREL/nIv/jACJigIBKYv+UL5EVygIF4v/C4mKAQEpi/9QvkRXIAgXi/9MiP/ciYoCACcSi/5nJxSL/2eJigEAiP7MJxSL/2eJigoAIoAARwKI/rsiKmVEFESL9hdJQQFCiwRxC0QyAxNBATcjRCcTiwRni/cXIicTZURLARJEJwVMZ7EyACInBWVEMgoishKyFLIRgQSyELIBs4v4F4v6F0oYFEQnDEsBZwonDkxni/kXJxVMZ4v7F0mMAUEACYsBgf8BEkEA1yNEJw2LAWeL/BeMAiInFWVEQAADiwJEJwaLAmeL/SJZSRREJwhMZyInCGVEQQAJJyO8SCcji/2/i/4iWSInCGVEgQMIEkSL/oj+c4z+Jx68SCcei/6/i/5XAgBJjABJVwAIFycJTGdJVwgIFycWTGdXEAgXJwRMZ4v+IllJjAMiJwhlRIEECBJBABCLAyMJJAuLAEwkWBcnCkxni/8iWSMSRIv/VwIAVwAQSVcACBdMVwgIF0xEFEQnGrxIJxqL/78nGr5EVwIAVwAQVwAIFycRTGcqJWeJIkL/JiJC/saKAQEiiP1hIiplRCEHEhREiP0/i/8iWUlEIw2L/0xBAAqL/4j9uUmM/4wBiwGM/yInBGVEi/9XAgBJjABXAAgXTEsBDkQnD0xnIicKZURBABwiJwplRIv/IlkjCSQLiwBMJFgXTEsBD0QnEExnIicPZUQWIicQZUQWUIwAiYoDAYj85Yj8zIv+F0mBFBJAACiLAIEoEkAAIIsAgTISQAAYiwCBPBJAABCLAIFGEkAACIsAgVASQQCJI0SDBhQoMjxGUIsAjgYAZwBTAD8AKwAXAAEAJxuL/VBJvUUBFESL/1cCAL8yBxZMiScdi/1QSb1FARREi/9XAgC/Qv/nJx+L/VBJvUUBFESL/1cCAL9C/9MnIIv9UEm9RQEURIv/VwIAv0L/vycci/1QSb1FARREi/9XAgC/Qv+rJxKL/WdC/6MiQv90igIBiPwdiPwEi/8XSYEoEkAAIIsAgTISQAAYiwCBPBJAABCLAIFGEkAACIsAgVASQQBlI0SDBSgyPEZQiwCOBQA/ADAAIQASAAEAJxuL/lBJvUUBRLxIMgcWTIknHYv+UEm9RQFEvEhC/+wnH4v+UEm9RQFEvEhC/90nIIv+UEm9RQFEvEhC/84nHIv+UEm9RQFEvEhC/78iQv+YigIBiPuOIiplRCEHEhREiPtfiPtnKYv+UEm9RQEURIv/JwdQJwdQJwdQJwtQvzIHFomKAQGI+1yI+zYpi/9QSb1FAURJvkRXIAgXSU8CvEgiK2VETAkrTGciK2VEQAAEKiEHZ4sAFjIHFlBMiYoCASJJgAAiKmVEJRJBAKoiJwllRDIHSYwCDkEAnCInFmVEiwINQQCRI0QnIDEAUEmMAL1FAUEAfYsAvkRXAAgyBxZJjAGmQQBsiwC+RFcICIsBp0EAXyNEKYv+UEm9RQFEiPqfiPqni/8XSUQiK2VESwEIIicOZUQORCIrZURLAQgrTGdLAb5EVyAIFwgWSwG+RExcIEsBTL8iJwxlRBZLAb5ETFwovyInDmVEIitlRAkWjACJIkL/niJC/2yKAQGI+piL/yJTJxdMZzIHFomKAgGI+oYpi/5QSb1FAURJvkSL/yJTIQRMVL8yBxaJigEAIicfMQBQSb1FAUEAKYsBvkRXAAgyBxZJjACmQQAYiwG+RFcICIsAp0EACyNEi/8iUycYTGeJIkL/8ooAASJJMgciJwplTElOAk4ERA1BAA2LAIwCiwFBAASBBIwCiwKMACInGGVEQQAEgQOMACInE2VEFiInBWVEFiIrZUQiJwxlRAsWIicMZUQWIicNZUQWVwcBIicVZUQWVwYCIicGZUQWVwYCIicOZUQWIitlRBYiJwllRBYiJxZlRBYiJwRlRBYiJwplRBYiJxdlRCcLIk8CVIsAFlcHAU8OTw5QTw1QTwxQTwtQTwpQTwlQTwhQTwdQTwZQTwVQTwRQTwNQTwJQTFCMAImKAQEpi/9QSb1FAUS+RImKAAEnISIqZUQlEkEABycevkyMAESLAEyJigABIicPZUQWIicQZUQWUIACAAJMUImKAAEiJxRlRIk=", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 3, "patch": 1}}, "desc": "\n    Perpetual Bond, variable interest rate, not callable.\n    ", "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [3874], "errorMessage": "Can not distribute zero units"}, {"pc": [2987], "errorMessage": "Coupon rates are not properly defined"}, {"pc": [2842], "errorMessage": "D-ASA already configured"}, {"pc": [2499], "errorMessage": "Defaulted"}, {"pc": [2862], "errorMessage": "Denomination asset is not properly set"}, {"pc": [2879], "errorMessage": "Different settlement asset not supported, must be equal to denomination asset"}, {"pc": [1344, 1489, 1494, 1642, 1653, 1660, 1671, 1678, 1689, 1696, 1722, 1744, 1768, 1786, 1853, 1895, 1910, 1925, 1995, 2028, 2099, 2116, 2209, 2281, 2287, 2406, 2412, 2545, 2562, 2598, 2615, 2643, 2711, 2726, 2772, 2789, 3048, 3057, 3065, 3102, 3120, 3124, 3129, 3153, 3156, 3236, 3274, 3728, 3827, 3844, 3903, 4025, 4042], "errorMessage": "Index access is out of bounds"}, {"pc": [3888], "errorMessage": "Insufficient remaining D-ASA units"}, {"pc": [1649], "errorMessage": "Insufficient sender units to transfer"}, {"pc": [2975], "errorMessage": "Interest rate is not properly defined"}, {"pc": [1592, 1604, 1891, 2196, 2332, 3687, 3724, 3863, 3988, 4282], "errorMessage": "Invalid account holding address"}, {"pc": [3397, 3419, 3439, 3459, 3479, 3585, 3602, 3617, 3632, 3647], "errorMessage": "Invalid account role address"}, {"pc": [2221], "errorMessage": "Invalid amount of units for the account"}, {"pc": [2954], "errorMessage": "Invalid day-count convention ID"}, {"pc": [3361, 3553], "errorMessage": "Invalid role identifier"}, {"pc": [3280], "errorMessage": "Invalid secondary market closure date"}, {"pc": [3244], "errorMessage": "Invalid secondary market opening date"}, {"pc": [2917], "errorMessage": "Minimum denomination is not a divisor of principal"}, {"pc": [1902], "errorMessage": "No D-ASA units"}, {"pc": [1918], "errorMessage": "No due coupon to pay"}, {"pc": [1574, 1875, 2126, 2523, 2572, 2625, 3191, 3671, 3854, 4052], "errorMessage": "Not authorized"}, {"pc": [1990], "errorMessage": "Not enough funds for the payment"}, {"pc": [784, 800, 816, 832, 851, 867, 882, 904, 923, 945, 964, 986, 1008, 1033, 1052, 1111, 1130, 1146, 1162, 1181, 1203, 1222, 1244], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [1096], "errorMessage": "OnCompletion is not UpdateApplication"}, {"pc": [1351, 1922, 2139], "errorMessage": "Pending due coupon payment"}, {"pc": [3808], "errorMessage": "Primary distribution is closed"}, {"pc": [2185], "errorMessage": "Primary distribution not yet executed"}, {"pc": [1568], "errorMessage": "Secondary market is closed"}, {"pc": [1704], "errorMessage": "Sender and receiver units are not fungible"}, {"pc": [1621, 1637, 2510], "errorMessage": "Suspended operations"}, {"pc": [3022, 3200], "errorMessage": "Time events length is invalid"}, {"pc": [2650], "errorMessage": "Time events must be set in the future"}, {"pc": [2732], "errorMessage": "Time events must be sorted in strictly ascending order"}, {"pc": [3134], "errorMessage": "Time period durations must be strictly greater than zero"}, {"pc": [3136], "errorMessage": "Time period repetitions are not properly defined"}, {"pc": [3114], "errorMessage": "Time periods are not properly defined"}, {"pc": [2754], "errorMessage": "Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)"}, {"pc": [576], "errorMessage": "Wrong Global Bytes allocation"}, {"pc": [582], "errorMessage": "Wrong Global UInts allocation"}, {"pc": [586], "errorMessage": "Wrong Local Bytes allocation"}, {"pc": [590], "errorMessage": "Wrong Local UInts allocation"}, {"pc": [1986], "errorMessage": "account opted into asset"}, {"pc": [2854], "errorMessage": "asset exists"}, {"pc": [1115], "errorMessage": "can only call when creating"}, {"pc": [787, 803, 819, 835, 854, 870, 885, 907, 926, 948, 967, 989, 1011, 1036, 1055, 1099, 1133, 1149, 1165, 1184, 1206, 1225, 1247], "errorMessage": "can only call when not creating"}, {"pc": [1343, 1608, 1624, 1641, 1652, 1659, 1670, 1677, 1688, 1695, 1721, 1743, 1755, 1767, 1779, 1785, 1797, 1808, 1835, 1847, 1851, 1894, 1909, 1924, 1943, 1994, 2027, 2038, 2208, 2771, 2788, 3727, 3902, 3912, 3929, 3991, 4284], "errorMessage": "check self.account entry exists"}, {"pc": [2544, 2561], "errorMessage": "check self.account_manager entry exists"}, {"pc": [2521], "errorMessage": "check self.arranger exists"}, {"pc": [2597, 2614], "errorMessage": "check self.authority entry exists"}, {"pc": [1329, 3740, 3749, 3878, 3892, 3942, 4132, 4182], "errorMessage": "check self.circulating_units exists"}, {"pc": [1295, 1312, 1387], "errorMessage": "check self.coupon_period exists"}, {"pc": [1392, 2737, 4150], "errorMessage": "check self.day_count_convention exists"}, {"pc": [2497, 4109], "errorMessage": "check self.defaulted exists"}, {"pc": [2875, 4121], "errorMessage": "check self.denomination_asset_id exists"}, {"pc": [2098, 2115], "errorMessage": "check self.interest_oracle entry exists"}, {"pc": [1509, 1971, 2342, 4168], "errorMessage": "check self.interest_rate exists"}, {"pc": [1277, 1286, 1307, 1369, 1454, 1464, 3227, 4200], "errorMessage": "check self.issuance_date exists"}, {"pc": [3253, 3261, 4083, 4206], "errorMessage": "check self.maturity_date exists"}, {"pc": [4341], "errorMessage": "check self.metadata exists"}, {"pc": [1325, 2047], "errorMessage": "check self.paid_coupon_units exists"}, {"pc": [3826, 3843], "errorMessage": "check self.primary_dealer entry exists"}, {"pc": [3800, 4194], "errorMessage": "check self.primary_distribution_closure_date exists"}, {"pc": [2169, 2179, 3786, 4188], "errorMessage": "check self.primary_distribution_opening_date exists"}, {"pc": [2969, 4159], "errorMessage": "check self.principal_discount exists"}, {"pc": [1560, 3295, 4324], "errorMessage": "check self.secondary_market_closure_date exists"}, {"pc": [1546, 3289, 4318], "errorMessage": "check self.secondary_market_opening_date exists"}, {"pc": [1932, 1983, 2005, 2891, 4127], "errorMessage": "check self.settlement_asset_id exists"}, {"pc": [1536, 1872, 2362, 2473, 2840, 3186, 3666, 3776, 4294], "errorMessage": "check self.status exists"}, {"pc": [2508, 4212], "errorMessage": "check self.suspended exists"}, {"pc": [4306], "errorMessage": "check self.time_events exists"}, {"pc": [2485, 3149], "errorMessage": "check self.time_periods exists"}, {"pc": [2422, 2996, 3017, 3084], "errorMessage": "check self.total_coupons exists"}, {"pc": [3886, 3938, 4177], "errorMessage": "check self.total_units exists"}, {"pc": [4024, 4041], "errorMessage": "check self.trustee entry exists"}, {"pc": [3924, 4137, 4144], "errorMessage": "check self.unit_value exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: typing.Any | None = None) -> list[typing.Any] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: typing.Any) -> typing.Any:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

ON_COMPLETE_TYPES = typing.Literal[
    OnComplete.NoOpOC,
    OnComplete.UpdateApplicationOC,
    OnComplete.DeleteApplicationOC,
    OnComplete.OptInOC,
    OnComplete.CloseOutOC,
]


@dataclasses.dataclass(frozen=True)
class AccountInfo:
    """Struct for AccountInfo"""
    payment_address: str
    units: int
    unit_value: int
    paid_coupons: int
    suspended: bool

@dataclasses.dataclass(frozen=True)
class AssetInfo:
    """Struct for AssetInfo"""
    denomination_asset_id: int
    settlement_asset_id: int
    outstanding_principal: int
    unit_value: int
    day_count_convention: int
    principal_discount: int
    interest_rate: int
    total_supply: int
    circulating_supply: int
    primary_distribution_opening_date: int
    primary_distribution_closure_date: int
    issuance_date: int
    maturity_date: int
    suspended: bool
    performance: int

@dataclasses.dataclass(frozen=True)
class AssetMetadata:
    """Struct for AssetMetadata"""
    contract_type: int
    calendar: int
    business_day_convention: int
    end_of_month_convention: int
    prepayment_effect: int
    penalty_type: int
    prospectus_hash: bytes
    prospectus_url: str

@dataclasses.dataclass(frozen=True)
class DayCountFactor:
    """Struct for DayCountFactor"""
    numerator: int
    denominator: int

@dataclasses.dataclass(frozen=True)
class CouponsInfo:
    """Struct for CouponsInfo"""
    total_coupons: int
    due_coupons: int
    next_coupon_due_date: int
    day_count_factor: DayCountFactor
    all_due_coupons_paid: bool

@dataclasses.dataclass(frozen=True)
class CurrentUnitsValue:
    """Struct for CurrentUnitsValue"""
    units_value: int
    accrued_interest: int
    day_count_factor: DayCountFactor

@dataclasses.dataclass(frozen=True)
class PaymentAmounts:
    """Struct for PaymentAmounts"""
    interest: int
    principal: int

@dataclasses.dataclass(frozen=True)
class PaymentResult:
    """Struct for PaymentResult"""
    amount: int
    timestamp: int
    context: bytes

@dataclasses.dataclass(frozen=True)
class RoleConfig:
    """Struct for RoleConfig"""
    role_validity_start: int
    role_validity_end: int

@dataclasses.dataclass(frozen=True)
class SecondaryMarketSchedule:
    """Struct for SecondaryMarketSchedule"""
    secondary_market_opening_date: int
    secondary_market_closure_date: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class AssetTransferArgs:
    """Dataclass for asset_transfer arguments"""
    sender_holding_address: str
    receiver_holding_address: str
    units: int

@dataclasses.dataclass(frozen=True, kw_only=True)
class PayCouponArgs:
    """Dataclass for pay_coupon arguments"""
    holding_address: str
    payment_info: bytes | str

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateInterestRateArgs:
    """Dataclass for update_interest_rate arguments"""
    interest_rate: int

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetAccountUnitsCurrentValueArgs:
    """Dataclass for get_account_units_current_value arguments"""
    holding_address: str
    units: int

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetPaymentAmountArgs:
    """Dataclass for get_payment_amount arguments"""
    holding_address: str

@dataclasses.dataclass(frozen=True, kw_only=True)
class AssetConfigArgs:
    """Dataclass for asset_config arguments"""
    denomination_asset_id: int
    settlement_asset_id: int
    principal: int
    principal_discount: int
    minimum_denomination: int
    day_count_convention: int
    interest_rate: int
    coupon_rates: list[int]
    time_events: list[int]
    time_periods: list[tuple[int, int]]

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetSecondaryTimeEventsArgs:
    """Dataclass for set_secondary_time_events arguments"""
    secondary_market_time_events: list[int]

@dataclasses.dataclass(frozen=True, kw_only=True)
class AssignRoleArgs:
    """Dataclass for assign_role arguments"""
    role_address: str
    role: int
    config: bytes | str

@dataclasses.dataclass(frozen=True, kw_only=True)
class RevokeRoleArgs:
    """Dataclass for revoke_role arguments"""
    role_address: str
    role: int

@dataclasses.dataclass(frozen=True, kw_only=True)
class OpenAccountArgs:
    """Dataclass for open_account arguments"""
    holding_address: str
    payment_address: str

@dataclasses.dataclass(frozen=True, kw_only=True)
class CloseAccountArgs:
    """Dataclass for close_account arguments"""
    holding_address: str

@dataclasses.dataclass(frozen=True, kw_only=True)
class PrimaryDistributionArgs:
    """Dataclass for primary_distribution arguments"""
    holding_address: str
    units: int

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetAssetSuspensionArgs:
    """Dataclass for set_asset_suspension arguments"""
    suspended: bool

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetAccountSuspensionArgs:
    """Dataclass for set_account_suspension arguments"""
    holding_address: str
    suspended: bool

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetDefaultStatusArgs:
    """Dataclass for set_default_status arguments"""
    defaulted: bool

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetAccountInfoArgs:
    """Dataclass for get_account_info arguments"""
    holding_address: str

@dataclasses.dataclass(frozen=True, kw_only=True)
class AssetCreateArgs:
    """Dataclass for asset_create arguments"""
    arranger: str
    metadata: AssetMetadata

@dataclasses.dataclass(frozen=True, kw_only=True)
class AssetUpdateArgs:
    """Dataclass for asset_update arguments"""
    metadata: AssetMetadata


@dataclasses.dataclass(frozen=True, kw_only=True)
class CommonAppCallParams:
    """Common configuration for app call transaction parameters

    :ivar account_references: List of account addresses to reference
    :ivar app_references: List of app IDs to reference
    :ivar asset_references: List of asset IDs to reference
    :ivar box_references: List of box references to include
    :ivar extra_fee: Additional fee to add to transaction
    :ivar lease: Transaction lease value
    :ivar max_fee: Maximum fee allowed for transaction
    :ivar note: Arbitrary note for the transaction
    :ivar rekey_to: Address to rekey account to
    :ivar sender: Sender address override
    :ivar signer: Custom transaction signer
    :ivar static_fee: Fixed fee for transaction
    :ivar validity_window: Number of rounds valid
    :ivar first_valid_round: First valid round number
    :ivar last_valid_round: Last valid round number"""

    account_references: list[str] | None = None
    app_references: list[int] | None = None
    asset_references: list[int] | None = None
    box_references: list[algokit_utils.BoxReference | algokit_utils.BoxIdentifier] | None = None
    extra_fee: algokit_utils.AlgoAmount | None = None
    lease: bytes | None = None
    max_fee: algokit_utils.AlgoAmount | None = None
    note: bytes | None = None
    rekey_to: str | None = None
    sender: str | None = None
    signer: TransactionSigner | None = None
    static_fee: algokit_utils.AlgoAmount | None = None
    validity_window: int | None = None
    first_valid_round: int | None = None
    last_valid_round: int | None = None

@dataclasses.dataclass(frozen=True, kw_only=True)
class CommonAppFactoryCallParams(CommonAppCallParams):
    """Common configuration for app factory call related transaction parameters"""
    on_complete: ON_COMPLETE_TYPES | None = None


class _PerpetualBondUpdate:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def asset_update(
        self,
        args: tuple[AssetMetadata] | AssetUpdateArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppUpdateMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.params.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }))


class PerpetualBondParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_PerpetualBondUpdate":
        return _PerpetualBondUpdate(self.app_client)

    def asset_transfer(
        self,
        args: tuple[str, str, int] | AssetTransferArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_transfer(address,address,uint64)uint64",
            "args": method_args,
        }))

    def pay_coupon(
        self,
        args: tuple[str, bytes | str] | PayCouponArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_coupon(address,byte[])(uint64,uint64,byte[])",
            "args": method_args,
        }))

    def update_interest_rate(
        self,
        args: tuple[int] | UpdateInterestRateArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_interest_rate(uint64)uint64",
            "args": method_args,
        }))

    def get_account_units_current_value(
        self,
        args: tuple[str, int] | GetAccountUnitsCurrentValueArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))",
            "args": method_args,
        }))

    def get_payment_amount(
        self,
        args: tuple[str] | GetPaymentAmountArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_payment_amount(address)(uint64,uint64)",
            "args": method_args,
        }))

    def get_coupons_status(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)",
        }))

    def get_time_periods(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_time_periods()(uint64,uint64)[]",
        }))

    def asset_config(
        self,
        args: tuple[int, int, int, int, int, int, int, list[int], list[int], list[tuple[int, int]]] | AssetConfigArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void",
            "args": method_args,
        }))

    def set_secondary_time_events(
        self,
        args: tuple[list[int]] | SetSecondaryTimeEventsArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_secondary_time_events(uint64[])(uint64,uint64)",
            "args": method_args,
        }))

    def assign_role(
        self,
        args: tuple[str, int, bytes | str] | AssignRoleArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "assign_role(address,uint8,byte[])uint64",
            "args": method_args,
        }))

    def revoke_role(
        self,
        args: tuple[str, int] | RevokeRoleArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "revoke_role(address,uint8)uint64",
            "args": method_args,
        }))

    def open_account(
        self,
        args: tuple[str, str] | OpenAccountArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_account(address,address)uint64",
            "args": method_args,
        }))

    def close_account(
        self,
        args: tuple[str] | CloseAccountArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_account(address)(uint64,uint64)",
            "args": method_args,
        }))

    def primary_distribution(
        self,
        args: tuple[str, int] | PrimaryDistributionArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "primary_distribution(address,uint64)uint64",
            "args": method_args,
        }))

    def set_asset_suspension(
        self,
        args: tuple[bool] | SetAssetSuspensionArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_asset_suspension(bool)uint64",
            "args": method_args,
        }))

    def set_account_suspension(
        self,
        args: tuple[str, bool] | SetAccountSuspensionArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_account_suspension(address,bool)uint64",
            "args": method_args,
        }))

    def set_default_status(
        self,
        args: tuple[bool] | SetDefaultStatusArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_default_status(bool)void",
            "args": method_args,
        }))

    def get_asset_info(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)",
        }))

    def get_account_info(
        self,
        args: tuple[str] | GetAccountInfoArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_info(address)(address,uint64,uint64,uint64,bool)",
            "args": method_args,
        }))

    def get_time_events(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_time_events()uint64[]",
        }))

    def get_secondary_market_schedule(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_secondary_market_schedule()uint64[]",
        }))

    def get_asset_metadata(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)",
        }))

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _PerpetualBondUpdateTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def asset_update(
        self,
        args: tuple[AssetMetadata] | AssetUpdateArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.create_transaction.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }))


class PerpetualBondCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_PerpetualBondUpdateTransaction":
        return _PerpetualBondUpdateTransaction(self.app_client)

    def asset_transfer(
        self,
        args: tuple[str, str, int] | AssetTransferArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_transfer(address,address,uint64)uint64",
            "args": method_args,
        }))

    def pay_coupon(
        self,
        args: tuple[str, bytes | str] | PayCouponArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_coupon(address,byte[])(uint64,uint64,byte[])",
            "args": method_args,
        }))

    def update_interest_rate(
        self,
        args: tuple[int] | UpdateInterestRateArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_interest_rate(uint64)uint64",
            "args": method_args,
        }))

    def get_account_units_current_value(
        self,
        args: tuple[str, int] | GetAccountUnitsCurrentValueArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))",
            "args": method_args,
        }))

    def get_payment_amount(
        self,
        args: tuple[str] | GetPaymentAmountArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_payment_amount(address)(uint64,uint64)",
            "args": method_args,
        }))

    def get_coupons_status(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)",
        }))

    def get_time_periods(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_time_periods()(uint64,uint64)[]",
        }))

    def asset_config(
        self,
        args: tuple[int, int, int, int, int, int, int, list[int], list[int], list[tuple[int, int]]] | AssetConfigArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void",
            "args": method_args,
        }))

    def set_secondary_time_events(
        self,
        args: tuple[list[int]] | SetSecondaryTimeEventsArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_secondary_time_events(uint64[])(uint64,uint64)",
            "args": method_args,
        }))

    def assign_role(
        self,
        args: tuple[str, int, bytes | str] | AssignRoleArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "assign_role(address,uint8,byte[])uint64",
            "args": method_args,
        }))

    def revoke_role(
        self,
        args: tuple[str, int] | RevokeRoleArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "revoke_role(address,uint8)uint64",
            "args": method_args,
        }))

    def open_account(
        self,
        args: tuple[str, str] | OpenAccountArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_account(address,address)uint64",
            "args": method_args,
        }))

    def close_account(
        self,
        args: tuple[str] | CloseAccountArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_account(address)(uint64,uint64)",
            "args": method_args,
        }))

    def primary_distribution(
        self,
        args: tuple[str, int] | PrimaryDistributionArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "primary_distribution(address,uint64)uint64",
            "args": method_args,
        }))

    def set_asset_suspension(
        self,
        args: tuple[bool] | SetAssetSuspensionArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_asset_suspension(bool)uint64",
            "args": method_args,
        }))

    def set_account_suspension(
        self,
        args: tuple[str, bool] | SetAccountSuspensionArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_account_suspension(address,bool)uint64",
            "args": method_args,
        }))

    def set_default_status(
        self,
        args: tuple[bool] | SetDefaultStatusArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_default_status(bool)void",
            "args": method_args,
        }))

    def get_asset_info(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)",
        }))

    def get_account_info(
        self,
        args: tuple[str] | GetAccountInfoArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_info(address)(address,uint64,uint64,uint64,bool)",
            "args": method_args,
        }))

    def get_time_events(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_time_events()uint64[]",
        }))

    def get_secondary_market_schedule(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_secondary_market_schedule()uint64[]",
        }))

    def get_asset_metadata(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)",
        }))

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _PerpetualBondUpdateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def asset_update(
        self,
        args: tuple[AssetMetadata] | AssetUpdateArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        response = self.app_client.send.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }), send_params=send_params, compilation_params=compilation_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppUpdateTransactionResult[None], parsed_response)


class PerpetualBondSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_PerpetualBondUpdateSend":
        return _PerpetualBondUpdateSend(self.app_client)

    def asset_transfer(
        self,
        args: tuple[str, str, int] | AssetTransferArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_transfer(address,address,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def pay_coupon(
        self,
        args: tuple[str, bytes | str] | PayCouponArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[PaymentResult]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_coupon(address,byte[])(uint64,uint64,byte[])",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=PaymentResult(**typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[PaymentResult], parsed_response)

    def update_interest_rate(
        self,
        args: tuple[int] | UpdateInterestRateArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_interest_rate(uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_account_units_current_value(
        self,
        args: tuple[str, int] | GetAccountUnitsCurrentValueArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[CurrentUnitsValue]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=CurrentUnitsValue(**typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[CurrentUnitsValue], parsed_response)

    def get_payment_amount(
        self,
        args: tuple[str] | GetPaymentAmountArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[PaymentAmounts]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_payment_amount(address)(uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=PaymentAmounts(**typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[PaymentAmounts], parsed_response)

    def get_coupons_status(
        self,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[CouponsInfo]:
    
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)",
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=CouponsInfo(**typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[CouponsInfo], parsed_response)

    def get_time_periods(
        self,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[tuple[int, int]]]:
    
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_time_periods()(uint64,uint64)[]",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[tuple[int, int]]], parsed_response)

    def asset_config(
        self,
        args: tuple[int, int, int, int, int, int, int, list[int], list[int], list[tuple[int, int]]] | AssetConfigArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_secondary_time_events(
        self,
        args: tuple[list[int]] | SetSecondaryTimeEventsArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[SecondaryMarketSchedule]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_secondary_time_events(uint64[])(uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=SecondaryMarketSchedule(**typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[SecondaryMarketSchedule], parsed_response)

    def assign_role(
        self,
        args: tuple[str, int, bytes | str] | AssignRoleArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "assign_role(address,uint8,byte[])uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def revoke_role(
        self,
        args: tuple[str, int] | RevokeRoleArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "revoke_role(address,uint8)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def open_account(
        self,
        args: tuple[str, str] | OpenAccountArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_account(address,address)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def close_account(
        self,
        args: tuple[str] | CloseAccountArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int]]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_account(address)(uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int]], parsed_response)

    def primary_distribution(
        self,
        args: tuple[str, int] | PrimaryDistributionArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "primary_distribution(address,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_asset_suspension(
        self,
        args: tuple[bool] | SetAssetSuspensionArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_asset_suspension(bool)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_account_suspension(
        self,
        args: tuple[str, bool] | SetAccountSuspensionArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_account_suspension(address,bool)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_default_status(
        self,
        args: tuple[bool] | SetDefaultStatusArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_default_status(bool)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_asset_info(
        self,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[AssetInfo]:
    
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)",
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=AssetInfo(**typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[AssetInfo], parsed_response)

    def get_account_info(
        self,
        args: tuple[str] | GetAccountInfoArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[AccountInfo]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_info(address)(address,uint64,uint64,uint64,bool)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=AccountInfo(**typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[AccountInfo], parsed_response)

    def get_time_events(
        self,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
    
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_time_events()uint64[]",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def get_secondary_market_schedule(
        self,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
    
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_secondary_market_schedule()uint64[]",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def get_asset_metadata(
        self,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[AssetMetadata]:
    
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)",
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=AssetMetadata(**typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[AssetMetadata], parsed_response)

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    arranger: bytes
    denomination_asset_id: int
    settlement_asset_id: int
    unit_value: int
    day_count_convention: int
    metadata: bytes
    total_units: int
    circulating_units: int
    principal_discount: int
    interest_rate: int
    total_coupons: int
    primary_distribution_opening_date: int
    primary_distribution_closure_date: int
    issuance_date: int
    secondary_market_opening_date: int
    secondary_market_closure_date: int
    maturity_date: int
    status: int
    suspended: int
    defaulted: int
    coupon_period: int
    paid_coupon_units: int

class BoxStateValue(typing.TypedDict):
    """Shape of box state key values"""
    coupon_rates: list[int]
    time_events: list[int]
    time_periods: list[tuple[int, int]]

class PerpetualBondState:
    """Methods to access state for the current PerpetualBond app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                struct_class(**value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def arranger(self) -> bytes:
        """Get the current value of the arranger key in global_state state"""
        value = self.app_client.state.global_state.get_value("arranger")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return self._struct_classes["AVMBytes"](**value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def denomination_asset_id(self) -> int:
        """Get the current value of the denomination_asset_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("denomination_asset_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def settlement_asset_id(self) -> int:
        """Get the current value of the settlement_asset_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("settlement_asset_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def unit_value(self) -> int:
        """Get the current value of the unit_value key in global_state state"""
        value = self.app_client.state.global_state.get_value("unit_value")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def day_count_convention(self) -> int:
        """Get the current value of the day_count_convention key in global_state state"""
        value = self.app_client.state.global_state.get_value("day_count_convention")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def metadata(self) -> bytes:
        """Get the current value of the metadata key in global_state state"""
        value = self.app_client.state.global_state.get_value("metadata")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return self._struct_classes["AVMBytes"](**value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def total_units(self) -> int:
        """Get the current value of the total_units key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_units")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def circulating_units(self) -> int:
        """Get the current value of the circulating_units key in global_state state"""
        value = self.app_client.state.global_state.get_value("circulating_units")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def principal_discount(self) -> int:
        """Get the current value of the principal_discount key in global_state state"""
        value = self.app_client.state.global_state.get_value("principal_discount")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def interest_rate(self) -> int:
        """Get the current value of the interest_rate key in global_state state"""
        value = self.app_client.state.global_state.get_value("interest_rate")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_coupons(self) -> int:
        """Get the current value of the total_coupons key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_coupons")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def primary_distribution_opening_date(self) -> int:
        """Get the current value of the primary_distribution_opening_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("primary_distribution_opening_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def primary_distribution_closure_date(self) -> int:
        """Get the current value of the primary_distribution_closure_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("primary_distribution_closure_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def issuance_date(self) -> int:
        """Get the current value of the issuance_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("issuance_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def secondary_market_opening_date(self) -> int:
        """Get the current value of the secondary_market_opening_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("secondary_market_opening_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def secondary_market_closure_date(self) -> int:
        """Get the current value of the secondary_market_closure_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("secondary_market_closure_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def maturity_date(self) -> int:
        """Get the current value of the maturity_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("maturity_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def status(self) -> int:
        """Get the current value of the status key in global_state state"""
        value = self.app_client.state.global_state.get_value("status")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def suspended(self) -> int:
        """Get the current value of the suspended key in global_state state"""
        value = self.app_client.state.global_state.get_value("suspended")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def defaulted(self) -> int:
        """Get the current value of the defaulted key in global_state state"""
        value = self.app_client.state.global_state.get_value("defaulted")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def coupon_period(self) -> int:
        """Get the current value of the coupon_period key in global_state state"""
        value = self.app_client.state.global_state.get_value("coupon_period")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def paid_coupon_units(self) -> int:
        """Get the current value of the paid_coupon_units key in global_state state"""
        value = self.app_client.state.global_state.get_value("paid_coupon_units")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "RoleConfig": RoleConfig,
            "AccountInfo": AccountInfo
        }

    def get_all(self) -> BoxStateValue:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return typing.cast(BoxStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                struct_class(**value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(BoxStateValue, converted)

    @property
    def coupon_rates(self) -> list[int]:
        """Get the current value of the coupon_rates key in box state"""
        value = self.app_client.state.box.get_value("coupon_rates")
        if isinstance(value, dict) and "uint16[]" in self._struct_classes:
            return self._struct_classes["uint16[]"](**value)  # type: ignore
        return typing.cast(list[int], value)

    @property
    def time_events(self) -> list[int]:
        """Get the current value of the time_events key in box state"""
        value = self.app_client.state.box.get_value("time_events")
        if isinstance(value, dict) and "uint64[]" in self._struct_classes:
            return self._struct_classes["uint64[]"](**value)  # type: ignore
        return typing.cast(list[int], value)

    @property
    def time_periods(self) -> list[tuple[int, int]]:
        """Get the current value of the time_periods key in box state"""
        value = self.app_client.state.box.get_value("time_periods")
        if isinstance(value, dict) and "(uint64,uint64)[]" in self._struct_classes:
            return self._struct_classes["(uint64,uint64)[]"](**value)  # type: ignore
        return typing.cast(list[tuple[int, int]], value)

    @property
    def account_manager(self) -> "_MapState[str, RoleConfig]":
        """Get values from the account_manager map in box state"""
        return _MapState(
            self.app_client.state.box,
            "account_manager",
            self._struct_classes.get("RoleConfig")
        )

    @property
    def primary_dealer(self) -> "_MapState[str, RoleConfig]":
        """Get values from the primary_dealer map in box state"""
        return _MapState(
            self.app_client.state.box,
            "primary_dealer",
            self._struct_classes.get("RoleConfig")
        )

    @property
    def trustee(self) -> "_MapState[str, RoleConfig]":
        """Get values from the trustee map in box state"""
        return _MapState(
            self.app_client.state.box,
            "trustee",
            self._struct_classes.get("RoleConfig")
        )

    @property
    def authority(self) -> "_MapState[str, RoleConfig]":
        """Get values from the authority map in box state"""
        return _MapState(
            self.app_client.state.box,
            "authority",
            self._struct_classes.get("RoleConfig")
        )

    @property
    def interest_oracle(self) -> "_MapState[str, RoleConfig]":
        """Get values from the interest_oracle map in box state"""
        return _MapState(
            self.app_client.state.box,
            "interest_oracle",
            self._struct_classes.get("RoleConfig")
        )

    @property
    def account(self) -> "_MapState[str, AccountInfo]":
        """Get values from the account map in box state"""
        return _MapState(
            self.app_client.state.box,
            "account",
            self._struct_classes.get("AccountInfo")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: self._struct_class(**v) if isinstance(v, dict) else v
                    for k, v in result.items()}
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return self._struct_class(**value)
        return typing.cast(_ValueType | None, value)


class PerpetualBondClient:
    """Client for interacting with PerpetualBond smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = PerpetualBondParams(self.app_client)
        self.create_transaction = PerpetualBondCreateTransactionParams(self.app_client)
        self.send = PerpetualBondSend(self.app_client)
        self.state = PerpetualBondState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "PerpetualBondClient":
        return PerpetualBondClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PerpetualBondClient":
        return PerpetualBondClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PerpetualBondClient":
        return PerpetualBondClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "PerpetualBondComposer":
        return PerpetualBondComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["asset_transfer(address,address,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["pay_coupon(address,byte[])(uint64,uint64,byte[])"],
        return_value: algokit_utils.ABIReturn | None
    ) -> PaymentResult | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_interest_rate(uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))"],
        return_value: algokit_utils.ABIReturn | None
    ) -> CurrentUnitsValue | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_payment_amount(address)(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> PaymentAmounts | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> CouponsInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_time_periods()(uint64,uint64)[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[tuple[int, int]] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_secondary_time_events(uint64[])(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> SecondaryMarketSchedule | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["assign_role(address,uint8,byte[])uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["revoke_role(address,uint8)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["open_account(address,address)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["close_account(address)(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["primary_distribution(address,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_asset_suspension(bool)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_account_suspension(address,bool)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_default_status(bool)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> AssetInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_account_info(address)(address,uint64,uint64,uint64,bool)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> AccountInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_time_events()uint64[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_secondary_market_schedule()uint64[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> AssetMetadata | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | AccountInfo | AssetInfo | AssetMetadata | CouponsInfo | CurrentUnitsValue | None | PaymentAmounts | PaymentResult | SecondaryMarketSchedule | int | list[int] | list[tuple[int, int]] | tuple[int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class PerpetualBondMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        tuple[str, AssetMetadata] | AssetCreateArgs,
        typing.Literal["asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void"],
    ]
):
    """Parameters for creating PerpetualBond contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class PerpetualBondMethodCallUpdateParams(
    algokit_utils.BaseAppClientMethodCallParams[
        tuple[AssetMetadata] | AssetUpdateArgs,
        typing.Literal["asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void"],
    ]
):
    """Parameters for calling PerpetualBond contract using ABI"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "args": method_args,
            }
        )

class PerpetualBondFactory(algokit_utils.TypedAppFactoryProtocol[PerpetualBondMethodCallCreateParams, PerpetualBondMethodCallUpdateParams, None]):
    """Factory for deploying and managing PerpetualBondClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = PerpetualBondFactoryParams(self.app_factory)
        self.create_transaction = PerpetualBondFactoryCreateTransaction(self.app_factory)
        self.send = PerpetualBondFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: PerpetualBondMethodCallCreateParams | None = None,
        update_params: PerpetualBondMethodCallUpdateParams | None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[PerpetualBondClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return PerpetualBondClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PerpetualBondClient:
        """Get an app client by creator address and name"""
        return PerpetualBondClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PerpetualBondClient:
        """Get an app client by app ID"""
        return PerpetualBondClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class PerpetualBondFactoryParams:
    """Parameters for creating transactions for PerpetualBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PerpetualBondFactoryCreateParams(app_factory)
        self.update = PerpetualBondFactoryUpdateParams(app_factory)
        self.delete = PerpetualBondFactoryDeleteParams(app_factory)

class PerpetualBondFactoryCreateParams:
    """Parameters for 'create' operations of PerpetualBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def asset_transfer(
        self,
        args: tuple[str, str, int] | AssetTransferArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the asset_transfer(address,address,uint64)uint64 ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "asset_transfer(address,address,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def pay_coupon(
        self,
        args: tuple[str, bytes | str] | PayCouponArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the pay_coupon(address,byte[])(uint64,uint64,byte[]) ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "pay_coupon(address,byte[])(uint64,uint64,byte[])",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_interest_rate(
        self,
        args: tuple[int] | UpdateInterestRateArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_interest_rate(uint64)uint64 ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_interest_rate(uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_account_units_current_value(
        self,
        args: tuple[str, int] | GetAccountUnitsCurrentValueArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64)) ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_payment_amount(
        self,
        args: tuple[str] | GetPaymentAmountArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_payment_amount(address)(uint64,uint64) ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_payment_amount(address)(uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_coupons_status(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool) ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_time_periods(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_time_periods()(uint64,uint64)[] ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_time_periods()(uint64,uint64)[]",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def asset_config(
        self,
        args: tuple[int, int, int, int, int, int, int, list[int], list[int], list[tuple[int, int]]] | AssetConfigArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_secondary_time_events(
        self,
        args: tuple[list[int]] | SetSecondaryTimeEventsArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_secondary_time_events(uint64[])(uint64,uint64) ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_secondary_time_events(uint64[])(uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def assign_role(
        self,
        args: tuple[str, int, bytes | str] | AssignRoleArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the assign_role(address,uint8,byte[])uint64 ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "assign_role(address,uint8,byte[])uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def revoke_role(
        self,
        args: tuple[str, int] | RevokeRoleArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the revoke_role(address,uint8)uint64 ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "revoke_role(address,uint8)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def open_account(
        self,
        args: tuple[str, str] | OpenAccountArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the open_account(address,address)uint64 ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "open_account(address,address)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def close_account(
        self,
        args: tuple[str] | CloseAccountArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the close_account(address)(uint64,uint64) ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "close_account(address)(uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def primary_distribution(
        self,
        args: tuple[str, int] | PrimaryDistributionArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the primary_distribution(address,uint64)uint64 ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "primary_distribution(address,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_asset_suspension(
        self,
        args: tuple[bool] | SetAssetSuspensionArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_asset_suspension(bool)uint64 ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_asset_suspension(bool)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_account_suspension(
        self,
        args: tuple[str, bool] | SetAccountSuspensionArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_account_suspension(address,bool)uint64 ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_account_suspension(address,bool)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_default_status(
        self,
        args: tuple[bool] | SetDefaultStatusArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_default_status(bool)void ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_default_status(bool)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_asset_info(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8) ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_account_info(
        self,
        args: tuple[str] | GetAccountInfoArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_account_info(address)(address,uint64,uint64,uint64,bool) ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_account_info(address)(address,uint64,uint64,uint64,bool)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_time_events(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_time_events()uint64[] ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_time_events()uint64[]",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_secondary_market_schedule(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_secondary_market_schedule()uint64[] ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_secondary_market_schedule()uint64[]",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_asset_metadata(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string) ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def asset_update(
        self,
        args: tuple[AssetMetadata] | AssetUpdateArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class PerpetualBondFactoryUpdateParams:
    """Parameters for 'update' operations of PerpetualBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            )

class PerpetualBondFactoryDeleteParams:
    """Parameters for 'delete' operations of PerpetualBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            )


class PerpetualBondFactoryCreateTransaction:
    """Create transactions for PerpetualBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PerpetualBondFactoryCreateTransactionCreate(app_factory)


class PerpetualBondFactoryCreateTransactionCreate:
    """Create new instances of PerpetualBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: CommonAppFactoryCallParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class PerpetualBondFactorySend:
    """Send calls to PerpetualBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PerpetualBondFactorySendCreate(app_factory)


class PerpetualBondFactorySendCreate:
    """Send create calls to PerpetualBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[PerpetualBondClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or CommonAppFactoryCallParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return PerpetualBondClient(result[0]), result[1]

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[PerpetualBondClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void ABI method"""
            params = params or CommonAppFactoryCallParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return PerpetualBondClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _PerpetualBondUpdateComposer:
    def __init__(self, composer: "PerpetualBondComposer"):
        self.composer = composer
    def asset_update(
        self,
        args: tuple[AssetMetadata] | AssetUpdateArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self.composer._composer.add_app_update_method_call(
            self.composer.client.params.update.asset_update(
                args=args,
                params=params,
                compilation_params=compilation_params
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void", v
            )
        )
        return self.composer


class PerpetualBondComposer:
    """Composer for creating transaction groups for PerpetualBond contract calls"""

    def __init__(self, client: "PerpetualBondClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], typing.Any] | None] = []

    @property
    def update(self) -> "_PerpetualBondUpdateComposer":
        return _PerpetualBondUpdateComposer(self)

    def asset_transfer(
        self,
        args: tuple[str, str, int] | AssetTransferArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.asset_transfer(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "asset_transfer(address,address,uint64)uint64", v
            )
        )
        return self

    def pay_coupon(
        self,
        args: tuple[str, bytes | str] | PayCouponArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.pay_coupon(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "pay_coupon(address,byte[])(uint64,uint64,byte[])", v
            )
        )
        return self

    def update_interest_rate(
        self,
        args: tuple[int] | UpdateInterestRateArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_interest_rate(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_interest_rate(uint64)uint64", v
            )
        )
        return self

    def get_account_units_current_value(
        self,
        args: tuple[str, int] | GetAccountUnitsCurrentValueArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_account_units_current_value(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))", v
            )
        )
        return self

    def get_payment_amount(
        self,
        args: tuple[str] | GetPaymentAmountArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_payment_amount(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_payment_amount(address)(uint64,uint64)", v
            )
        )
        return self

    def get_coupons_status(
        self,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_coupons_status(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)", v
            )
        )
        return self

    def get_time_periods(
        self,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_time_periods(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_time_periods()(uint64,uint64)[]", v
            )
        )
        return self

    def asset_config(
        self,
        args: tuple[int, int, int, int, int, int, int, list[int], list[int], list[tuple[int, int]]] | AssetConfigArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.asset_config(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void", v
            )
        )
        return self

    def set_secondary_time_events(
        self,
        args: tuple[list[int]] | SetSecondaryTimeEventsArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_secondary_time_events(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_secondary_time_events(uint64[])(uint64,uint64)", v
            )
        )
        return self

    def assign_role(
        self,
        args: tuple[str, int, bytes | str] | AssignRoleArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.assign_role(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "assign_role(address,uint8,byte[])uint64", v
            )
        )
        return self

    def revoke_role(
        self,
        args: tuple[str, int] | RevokeRoleArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.revoke_role(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "revoke_role(address,uint8)uint64", v
            )
        )
        return self

    def open_account(
        self,
        args: tuple[str, str] | OpenAccountArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.open_account(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "open_account(address,address)uint64", v
            )
        )
        return self

    def close_account(
        self,
        args: tuple[str] | CloseAccountArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.close_account(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "close_account(address)(uint64,uint64)", v
            )
        )
        return self

    def primary_distribution(
        self,
        args: tuple[str, int] | PrimaryDistributionArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.primary_distribution(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "primary_distribution(address,uint64)uint64", v
            )
        )
        return self

    def set_asset_suspension(
        self,
        args: tuple[bool] | SetAssetSuspensionArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_asset_suspension(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_asset_suspension(bool)uint64", v
            )
        )
        return self

    def set_account_suspension(
        self,
        args: tuple[str, bool] | SetAccountSuspensionArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_account_suspension(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_account_suspension(address,bool)uint64", v
            )
        )
        return self

    def set_default_status(
        self,
        args: tuple[bool] | SetDefaultStatusArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_default_status(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_default_status(bool)void", v
            )
        )
        return self

    def get_asset_info(
        self,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_asset_info(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)", v
            )
        )
        return self

    def get_account_info(
        self,
        args: tuple[str] | GetAccountInfoArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_account_info(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_account_info(address)(address,uint64,uint64,uint64,bool)", v
            )
        )
        return self

    def get_time_events(
        self,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_time_events(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_time_events()uint64[]", v
            )
        )
        return self

    def get_secondary_market_schedule(
        self,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_secondary_market_schedule(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_secondary_market_schedule()uint64[]", v
            )
        )
        return self

    def get_asset_metadata(
        self,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_asset_metadata(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)", v
            )
        )
        return self

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        params: CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.asset_create(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: CommonAppCallParams | None = None,
    ) -> "PerpetualBondComposer":
        params=params or CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "PerpetualBondComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
