{
  "version": 3,
  "sources": [
    "../../base_d_asa/contract.py",
    "../../fixed_coupon_bond/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCmD;;AAAf;;AAA5B;AAkBA;;AAA6B;AAA7B;AACA;;AAA2B;AAA3B;AACA;;AAAkB;AAAlB;AACA;;AAA4B;AAA5B;AAGA;;AAAgB;;AAAhB;AAGA;;AAAmB;AAAnB;AACA;AAAyB;AAAzB;AAGA;;AAAqB;AAArB;AAIA;;AAAqB;AAArB;AAKA;;AAAyC;AAAzC;AACA;;AAAyC;AAAzC;AACA;;AAAqB;AAArB;AACA;;AAAqC;AAArC;AACA;;AAAqC;AAArC;AACA;;AAAqB;AAArB;AAGA;AAAc;AAAd;AACA;;AAAiB;AAAjB;AACA;;AAAiB;AAAjB;ACvDO;;AAA6B;;AAA7B;AAAP;AACO;;AAAuB;;AAAvB;AAAP;AACO;;AAAA;AAAP;AACO;;AAAA;AAAP;AAGA;;AAA6B;AAA7B;AACA;;AAAyB;AAAzB;AAxBR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ADs7BK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AC34BL;;;AD24BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;ACv1BL;;;ADu1BK;;;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;ACh0BL;;;AAAA;;;ADg0BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AC9yBL;;;AD8yBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;ACpwBL;;;AAAA;;;ADowBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;ACtuBL;;;ADsuBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;ACnsBL;;;AAAA;;;ADmsBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;ACnpBL;;;AAAA;;;ADmpBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/DA;;AAAA;AAAA;AAAA;;AAAA;ACplBL;;;AAAA;;;AAAA;;;ADolBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxDA;;AAAA;AAAA;AAAA;;AAAA;AC5hBL;;;AD4hBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlFA;;AAAA;AAAA;AAAA;;AAAA;AC1cL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AD0cK;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;ACpbL;;;AAAA;;;ADobK;;;AAAA;;ACzCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AA1WL;;;AA0WK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AApSL;;;AAAA;;;AAoSK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AApPL;;;AAAA;;;AAoPK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9DA;;AAAA;AAAA;AAAA;;AAAA;AAtLL;;;AAAA;;;AAsLK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjDA;;AAAA;AAAA;AAAA;;AAAA;AArIL;;;AAAA;;;AAAA;;;AAqIK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AArIL;;AAAA;;AAAA;;;;AAAA;;;ADgcK;;AAAA;AAAL;;;AAAA;;AC3TA;;;;;;;;;AA+BY;;AAAA;ADnFG;AAAA;AAAA;AAAA;AAAe;AAAf;AAgMH;;;AACI;AAAA;;AAAA;AAAA;AACD;;AAAA;AAAA;;AADC;AAAA;;;AAEF;AAAA;;AAAA;AAAA;AADC;;AAAA;AADC;;;;AAFR;AAiFO;;AAAA;;AAAA;AAAP;AACA;;;AACA;;;AA5M0B;AAAnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAP;AAA0B;AAAnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAP;AA+MW;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AACW;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AAIa;;AAAA;AAAA;AAAA;;;AAAA;AAAT;;AAAA;AADJ;AAUoB;AAAA;AAAA;AAAA;;;AAApB;;AACG;AAAA;AAAA;;;AAAA;AAAX;;;AAzFY;;AAAA;AAAA;AAAA;;;AAAmC;;AAAA;AAAA;AAAA;;;AAAnC;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AAAqC;;AAAA;AAAA;AAAA;;;AAArC;AADJ;;;;AADJ;ACnHc;;;AACd;;AAAA;;AAAA;;;AAGoB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAApB;;AACA;;AAAA;;AAAA;AAAA;;AAAA;;AAAmB;;;AAAnB;;AD4OI;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AADyC;AAA7C;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAII;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAD2C;AAA/C;;AAAA;AAAA;AAAA;AAAA;;AAAA;AA5EG;AAAA;AAAA;;;AAAA;AAAX;;;AACY;;AAAA;AAAA;AAAA;AAA2C;;AAA3C;;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAA6C;;AAA7C;;AAAA;AC7J8B;;AAAA;AAAf;;AAAA;AAAA;;AAAA;AAAZ;AAAP;;AAAA;;;;;ADsMI;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACsD;;AAAA;AAAA;AAAtD;;AAAA;AAAA;AAAA;AAAsD;;;AAAtD;;AAAA;;;;;;;;AApSZ;;;AAEmB;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AAER;;;AAEmB;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AC/DR;;;;;AAEqB;;AAAb;AACc;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACG;AAAA;;AAAA;AAAA;AAAd;AAAX;;;AAC0B;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAYlB;;AAAA;;AAAA;AAAA;;AAAA;AACA;;AAAA;AAZkB;AAAA;;AAAA;AAAA;AAAb;;AAAA;AAAb;;;AAC6D;AAAA;;AAAA;AAAA;AAApC;;AAAA;AAAb;AAAA;;AACkB;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACZ;;AAAA;AAAlB;;;AAEoC;;AACL;AAFf;;;AAIA;;AAAc;AAAd;AAAA;AAAA;;AACkB;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACtB;;AAA2B;;AAAb;AAAd;;;;;AA0BZ;;;AAKY;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AADJ;;AAoCR;;;AAKQ;;AAAA;;AAAA;;;AACA;;AAAmB;;;AACK;AAAA;;;AAAA;AACR;AAAA;;;AAAA;AACO;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAInB;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;AAII;;;AAAA;;AAAA;AAJJ;AADJ;AArCR;;;;;;;AAGA;;AAAA;;;AACkC;AAAA;;AAAA;AAAA;AAGF;;AAAxB;;AAAwB;AAAxB;AAAA;;AAAA;;AACgB;;AAAA;;;AAAhB;AAAgB;AAAhB;AAAA;;AACG;AAAA;;AAAA;AAAA;;;;;;;AAAX;;;AD2Oe;;AAAe;;AAAf;AAAA;;AAAe;;AAAf;;;;;;;;;ACvOO;AACE;AAAA;AAFT;AAAP;;AAAA;AA3CkB;AAAlB;;AACR;;AAAA;;;AACY;;AAAkB;;;AAAlB;;;;;;;AARZ;;;AAEsC;;AAAA;;AAAA;AAAqC;AAArC;AAAvB;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AASR;;;AAE0B;AACD;AAAA;;AAAA;AAAA;AAAd;;AAAA;AAAX;;;AACmD;;AAAc;AAAd;AAArB;;;AAAlB;;AACJ;;AAAA;AAAA;AD2PR;;;AAIuB;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAR;;AAAA;AAAP;AC3IR;;;ADrGe;AAAA;AAAA;AAAA;AAAe;AAAf;AC6HP;AACA;;;AACA;;;ADzD0B;AAAnB;;AAAA;AAAA;;AAAA;AAAA;;AAAP;AC2DQ;AAAA;AAAA;AAAA;;;AAAA;AAAR;AAAA;;AACA;AACc;;;AACS;AAAA;AAAA;AAAA;;;AAAA;AAAvB;AAAA;;AACO;;AAAA;AAAP;AAEO;;;AAAP;AAKG;;AAAA;;;AAAX;;;AAEgB;;AAAA;;;AACA;;AAAuB;AAAvB;AAFa;;;AAAjB;;AAKA;;;AAES;;AAAA;AAAA;AAAA;;;AAAT;AAAA;;;AAMA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAoD;AAApD;AADyC;AAA7C;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAEW;AACe;;AAAZ;AAFP;AAAA;;AAAA;AAAA;;AAAA;AAAP;;AAAA;AANqB;;;;AApK7B;;;AAEe;AAAA;;AAAA;AAAA;AAA0B;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA1B;AAAP;AD0NR;;;AAGY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACU;AAAA;;AAAA;AAAA;AADV;;AAAA;;AAAA;;;AAGQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAJ;;;;AAJR;AAAA;;;;;AAiCR;;;AAG6B;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AADd;;AAAA;AAAA;;;AAAP;ACrPR;;;AAIkD;;AAAS;AAAT;AAAxB;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACX;;AAAA;AAAsC;;;AAAtC;AAAP;ADoNR;;;AAGoD;;AAAlC;AAAA;;AAAA;AAAA;AAAN;;AAAA;AAAA;;AAAA;AADJ;;AAKR;;;AAEQ;AAIQ;;AAHO;AAAA;;AAAA;AAAA;;;;;;;;;;;AADf;;;;;;AAAA;;AC9DR;;;ADnKe;AAAA;AAAA;AAAA;AAAe;AAAf;AAkVP;AACA;;;AACA;;;AA9Q0B;AAAnB;;AAAA;AAAA;;AAAA;AAAA;;AAAP;AAgRQ;AAAA;AAAA;;;AAAA;AACR;AACO;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AAAP;AC1JI;;;AADG;;;AAAP;AAKG;;AAAA;;;AAAX;;;AACY;;AAAiB;;;AAAjB;;AAEA;;;AAES;;AAAA;AAAA;AAAA;;;AAAT;AAAA;;;ADwJJ;AAAA;AAAA;AAAA;AAA0B;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAA1B;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAsC;;AAAtC;;AAAA;AACA;;;ACnJW;AACe;;AAAZ;AAFP;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAAA;AAHqB;;;;ADwD7B;;;AAEW;AAAA;AAAA;AAAA;AAAX;;;AACY;AAAc;;AAAd;;AClDZ;;;;;;;;AAqBY;AAAA;;AAAA;AAAA;AAAA;;;AACI;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AADJ;;;;AADJ;ADjK0B;AAAnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAP;ACuKI;;AAAA;;AAAA;AAAA;;;AAAa;;AAAA;AAAA;AAAA;;;AAAA;AAAT;AAAA;;AAAA;AAAJ;;;;AADJ;AAMqB;;AAAA;AAAA;AAAA;;AADrB;;AAAA;AAA8B;;;AAA9B;;AAImB;AAAnB;;AACY;AAAZ;;AACc;AAAd;;AAGc;;;AAAd;AAAA;;AACA;;AAAA;;AAAA;;;AACG;;;AAAX;;;AACY;;AAAA;AAAmB;;;AACnB;;AAAA;;AAAA;;AAAmB;;;AAAnB;;AAGY;AAAA;;;AAAA;AAAZ;;AACc;;;AAAA;AAAd;;AAEY;;AAAA;AACK;;AAAA;AAEH;;AAAA;AACE;;AAAA;AAFC;AAHd;;AAAA;AAAA;AAAA;AAAP;;AAAA;;;;;;;;;AA5OR;;;AAGY;AAAA;;AAAA;AAAA;AAAA;;;AACI;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AADJ;;;AAEkB;AAAA;;AAAA;AAAA;AAAd;;AAAA;AAFJ;;;;AADJ;;AAAA;AAmPR;;;AAQuB;;ADpRR;AAAA;AAAA;AAAA;AAAe;AAAf;ACqRf;;;AAC2B;;AAAA;AAAA;AAAA;;AAAA;AACnB;;AAAA;AAAA;AAER;;;;;ADnNkC;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;ACkOkB;AAAlB;;ADxSO;AAAA;AAAA;AAAe;AAAf;;;;AC0Sf;;;AAC2B;;AAAA;AAAA;AAAA;;;AAAA;AAAf;AAAA;;AACkB;AAAA;;AAAA;AAAA;AAAf;AAAf;;;AAGoB;;AAAA;;;AACA;;AAAe;AAAf;AAFc;;;AAAlB;;;;;;;;;;;;;;AAQK;AACC;AAAA;AAFP;AAAP;;AAAA;AADQ;;AAAmB;;;AAAnB;;;;;AAMhB;;;AASsB;;;AAAd;;AACuB;;;AAAvB;AACA;AAAuB;;;AAAvB;AACY;AAAZ;AACc;AAAd;AACG;;;AAAX;;;AACY;;AAAmB;;;AACP;AAAA;;;AAAA;AAAZ;;AACc;;;AAAA;AAAd;;AAE0B;AAAA;;AAAA;AAAA;AAAZ;AACF;;AAAA;AACS;;AAAA;AAEP;;AAAA;AACE;;AAAA;AAFC;AAII;;AAAA;AAAA;;AAAA;AARlB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;;AAAA;ADuBR;;;AASQ;;AAAA;;AAAA;AACA;;AAAA;;AAAA;;AAYR;;;;;;;AAyCQ;;;AACO;AAAA;AAAA;AAAA;AAAA;AAAP;AAG+B;;AAAA;AAAA;AA1V3B;;;AAAuC;;AAAA;;AAAA;AAAA;;AAAA;AAAvC;;;;AADJ;AAMA;;AAAA;;AAAA;AAyV6B;;AAAA;AAnVF;AAAA;;AAAA;AAAA;AAAvB;;AAAA;AADJ;AAMA;;AAAA;AAAA;AAEA;AAIQ;;AAHO;AAAA;;AAAA;AAAA;AACI;;AACF;;;;;;;AAHjB;;;;;;AAAA;AAiVI;;AAAA;AAAmB;;AAAA;AAAnB;AAAA;AAAA;AADJ;AAGA;;AAAA;;AAAA;AACmB;AAAnB;;AAAA;AAAA;AAGiC;;AAAA;AAAA;AAAA;;AA7U1B;;;AAAA;;AAEH;;AAFG;AAAA;;;;AAAP;AAOA;;AAAA;;AAAA;AA0U0B;;AAAA;AAtU1B;AAAA;AAIA;;AAAA;AAAA;AC5KO;;AAAA;AAAA;AAAP;AAAA;ADoLA;;AAAA;AAAA;AACG;AAAA;;AAAA;AAAA;AAAX;;;AACY;;AAAA;;AAAA;;AAAA;;AAAA;AAKA;;AAAA;AAAA;AAAsB;AAAA;;AAAA;AAAA;AAAqB;;AAArB;AAAtB;AADJ;AA6TA;;AAAA;;;AAAA;;AAnSA;;AAAA;;AAAA;;AAAA;;AAAA;AACyC;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAzC;;AAAA;AAAA;AAGyC;AAAA;;;AAAA;AAAzC;;AAAA;AAAA;AAGqB;;;AAAA;AAArB;;AAAA;AAAA;AAGG;;AAAA;AAAA;AAAA;AAAA;;AAAsB;AAAA;;AAAA;AAAA;AAAqB;;AAArB;AAAtB;AAAX;;;AACiC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAArB;;AAAA;AAAA;AAIO;;AAAA;AAAA;AAAJ;AAAP;AA2RA;AAAc;AAAd;;;;;;;;;;AA3bR;;;AAEe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;;AAyHR;;;;;;AAGY;;AAAA;;;AAAA;AAAA;;;AAAA;AACE;;AADF;AADJ;AAIiB;;AAAA;AAAA;AAAqB;AAArB;AAAP;AAAA;;AAAA;;AAAA;AAAlB;;;AAEgC;;AACL;AAFf;;;AAIS;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;;AAAA;;AAC0B;AAAL;AAAA;AAAA;;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;;AACO;AAAP;AACG;AAAA;;AAAA;AAAA;AAA6B;;AAA7B;AAAf;;;AAEwB;;AAAA;;AAAA;AAAmB;;AAApB;AAAA;AAAP;;;;;;;;;AAkThB;;;;AAqBQ;;;AA5dO;AAAA;AAAA;AAAA;AAAe;;AAAf;AA6dA;AAAP;AACA;;;AAEO;;AAAA;AAAA;AAAP;AAAA;AACyC;AAAtC;;;;AAAX;;;AACY;;AAAA;;;;AAAA;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AACG;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AADH;AAAA;;AAAA;AADJ;AAMA;;AAAA;AAAA;AAGG;AAAA;;AAAA;AAAA;AAAX;;;AAEgB;AAAA;;AAAA;AAAA;AAEI;;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;;AAAA;AADJ;AAMA;;AAAA;AAAA;AAKI;AAAA;;AAAA;AAAA;AAD0B;AAI1B;AAAA;;AAAA;AAAA;AAD0B;AAJ3B;AAAP;;AAAA;AASR;;;AAqBQ;;;AACA;;;AACO;;AAAA;AAAA;AACH;;AADG;AAAA;;;AAAA;;AAEH;;AAFG;AAAA;;;AAAA;;AAGH;;AAHG;AAAA;;;AAAA;;AAIH;;AAJG;AAAA;;;AAAA;;AAKH;;AALG;AAAA;;;AAAA;;AAMH;;AANG;AAAA;;;;AAAP;AASS;;;;;;;;AADT;;AAAA;;;;;;;;;;;;;;AA6BQ;AANwB;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAII;;AAAA;;;AADJ;AAKW;;AAAZ;AAAP;AAAA;AAXmC;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACyD;;AAAA;;;AAAzD;;;;AAJ2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACuD;;AAAA;;;AAAvD;;;;AAN2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEI;;AAAA;;;AADJ;;;;AAPwB;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAII;;AAAA;;;AADJ;;;;AALA;;AAAA;;AAAA;;;;;;;;AA8BhB;;;AAkBQ;;;AACA;;;AACO;;AAAA;AAAA;AACH;;AADG;AAAA;;;AAAA;;AAEH;;AAFG;AAAA;;;AAAA;;AAGH;;AAHG;AAAA;;;AAAA;;AAIH;;AAJG;AAAA;;;AAAA;;AAKH;;AALG;AAAA;;;;AAAP;AASS;;;;;;;AAFT;;AAAA;;;;;;;;;;;;AAkBQ;AAHuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;AAGW;;AAAZ;AAAP;AAAA;AAP+B;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAJuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAJuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAJuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;;;;;AAiBhB;;;AAoBQ;;;AAloBO;AAAA;AAAA;AAAA;AAAe;;AAAf;AAmoBA;AAAP;AACA;;;AACA;;;AAC8B;AAAvB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEgC;;AAEtB;;AAFsB;AAGjB;;AAHiB;AAIf;;AAJe;AAKlB;;AALkB;AAAhC;AAOmB;;AAAZ;AAAP;AAjoBR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;;;;;;AAgoBR;;;AAkBQ;;;AACA;;;AAlmB0B;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAqmBe;AAAA;AAAA;AAAA;;;AAAA;AACf;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEK;AAAuC;;AAAZ;AADzB;AAAP;AAIR;;;;;;;AAnrBe;AAAA;AAAA;AAAA;AAAe;AAAf;AAuLH;;;AACI;AAAA;;AAAA;AAAA;AACD;;AAAA;AAAA;;AADC;AAAA;;;AAEF;AAAA;;AAAA;AAAA;AADC;;AAAA;AADC;;;;AAFR;AAtJc;;AAFQ;;AAElB;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;AAuC0B;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAyoBA;;;AACA;;;AACO;;AAAA;AAAP;AAAA;AAEI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAyC;AAAA;;AAAA;AAAA;AAAzC;AADJ;AAIA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEI;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AADkC;AAAtC;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAGuD;AAAA;;AAAA;AAAA;AAAZ;AAA3C;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACmB;AAAA;;AAAA;AAAA;AAAmB;AAAA;AAAA;AAAA;AAAnB;AAAZ;AAAP;;AAAA;;;;;;;;;AAER;;;AAcQ;;;AACiB;;;AAAO;AAAxB;;AAAA;AAAA;AACmB;;AAAZ;AAAP;AA7rBR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;;;;;;AA4rBR;;;AAkBQ;;;AA3rB0B;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AA6rBA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACmB;;AAAZ;AAAP;AAER;;;;AA5tBsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;AAyuBiB;;;AAAO;AAAxB;;AAAA;AAAA;;;;;;AAER;;;AAUsB;AAAd;AACG;;AAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA1B;AAAA;;;;;;;AAAA;;AAAA;;;AACe;;;;;;;;AAEf;AAAA;;AAAA;AAAA;AAAX;;;AAC0B;;AAAd;;AAGkC;AAAA;;AAAA;AAAA;AAAZ;AACU;AAAA;;AAAA;AAAA;AAAZ;AA7jBjB;AAAA;AAAA;AAAA;AAAyB;AAAA;;AAAA;AAAA;AAAzB;AA8jBmB;AACC;AAAA;;AAAA;AAAA;AAAZ;AACqB;AAAA;;AAAA;AAAA;AAAX;AAAA;;;AACK;AAAA;;AAAA;AAAA;AAAZ;AAAA;;;AACW;AAAA;;AAAA;AAAA;AAAZ;AACkB;AAAA;AAAA;AAAA;AAAZ;AAEf;AAAA;;AAAA;AAAA;AAD8B;AAI9B;AAAA;;AAAA;AAAA;AAD8B;AAGR;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AACW;AAAA;;AAAA;AAAA;AAAf;;AAAA;AAAA;;AAAA;AACE;;AAAA;AAAA;;;AAlBT;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;;AAAA;AAqBR;;;AApvBkC;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAmwBO;AAAA;AAAP;AAER;;;AAQsB;;AAn1BP;AAAA;AAAA;AAAA;AAAe;AAAf;AAo1Bf;;;AAC0B;;AAAA;AAAA;AAAA;;AAAA;AAClB;;AAAA;AAAA;AAER;;;AASwB;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AAFG;AAAA;;;;AAAA;AAAA;AAAP;AAKR;;;AAS4C;AAAA;;AAAA;AAAA;AAApC;AA/fR;;;AAQQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 100 448 255 86400 200"
    },
    "16": {
      "op": "bytecblock 0x151f7c75 0x52333023 \"circulating_units\" \"status\" \"total_coupons\" \"issuance_date\" \"maturity_date\" \"settlement_asset_id\" 0x0000000000000000 \"primary_distribution_opening_date\" 0x00 0x74696d654576656e7473 \"unit_value\" \"day_count_convention\" \"total_units\" \"secondary_market_opening_date\" \"secondary_market_closure_date\" 0x636f75706f6e5261746573 0x52323023 \"denomination_asset_id\" \"primary_distribution_closure_date\" \"suspended\" \"defaulted\" \"due_coupons_watermark\" \"paid_coupon_units\" \"metadata\" \"interest_rate\" 0x52373023 0x52363023 0x52353023 0x52343023 0x0012 0x0000 0x52383023 0x068101"
    },
    "466": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "468": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "471": {
      "op": "bytec 18 // 0x52323023"
    },
    "473": {
      "op": "global ZeroAddress"
    },
    "475": {
      "op": "app_global_put"
    },
    "476": {
      "op": "bytec 19 // \"denomination_asset_id\""
    },
    "478": {
      "op": "intc_0 // 0"
    },
    "479": {
      "op": "app_global_put"
    },
    "480": {
      "op": "bytec 7 // \"settlement_asset_id\""
    },
    "482": {
      "op": "intc_0 // 0"
    },
    "483": {
      "op": "app_global_put"
    },
    "484": {
      "op": "bytec 12 // \"unit_value\""
    },
    "486": {
      "op": "intc_0 // 0"
    },
    "487": {
      "op": "app_global_put"
    },
    "488": {
      "op": "bytec 13 // \"day_count_convention\""
    },
    "490": {
      "op": "intc_0 // 0"
    },
    "491": {
      "op": "app_global_put"
    },
    "492": {
      "op": "bytec 25 // \"metadata\""
    },
    "494": {
      "op": "pushbytes 0x"
    },
    "496": {
      "op": "app_global_put"
    },
    "497": {
      "op": "bytec 14 // \"total_units\""
    },
    "499": {
      "op": "intc_0 // 0"
    },
    "500": {
      "op": "app_global_put"
    },
    "501": {
      "op": "bytec_2 // \"circulating_units\""
    },
    "502": {
      "op": "intc_0 // 0"
    },
    "503": {
      "op": "app_global_put"
    },
    "504": {
      "op": "bytec 26 // \"interest_rate\""
    },
    "506": {
      "op": "intc_0 // 0"
    },
    "507": {
      "op": "app_global_put"
    },
    "508": {
      "op": "bytec 4 // \"total_coupons\""
    },
    "510": {
      "op": "intc_0 // 0"
    },
    "511": {
      "op": "app_global_put"
    },
    "512": {
      "op": "bytec 9 // \"primary_distribution_opening_date\""
    },
    "514": {
      "op": "intc_0 // 0"
    },
    "515": {
      "op": "app_global_put"
    },
    "516": {
      "op": "bytec 20 // \"primary_distribution_closure_date\""
    },
    "518": {
      "op": "intc_0 // 0"
    },
    "519": {
      "op": "app_global_put"
    },
    "520": {
      "op": "bytec 5 // \"issuance_date\""
    },
    "522": {
      "op": "intc_0 // 0"
    },
    "523": {
      "op": "app_global_put"
    },
    "524": {
      "op": "bytec 15 // \"secondary_market_opening_date\""
    },
    "526": {
      "op": "intc_0 // 0"
    },
    "527": {
      "op": "app_global_put"
    },
    "528": {
      "op": "bytec 16 // \"secondary_market_closure_date\""
    },
    "530": {
      "op": "intc_0 // 0"
    },
    "531": {
      "op": "app_global_put"
    },
    "532": {
      "op": "bytec 6 // \"maturity_date\""
    },
    "534": {
      "op": "intc_0 // 0"
    },
    "535": {
      "op": "app_global_put"
    },
    "536": {
      "op": "bytec_3 // \"status\""
    },
    "537": {
      "op": "intc_0 // 0"
    },
    "538": {
      "op": "app_global_put"
    },
    "539": {
      "op": "bytec 21 // \"suspended\""
    },
    "541": {
      "op": "intc_0 // 0"
    },
    "542": {
      "op": "app_global_put"
    },
    "543": {
      "op": "bytec 22 // \"defaulted\""
    },
    "545": {
      "op": "intc_0 // 0"
    },
    "546": {
      "op": "app_global_put"
    },
    "547": {
      "op": "txn GlobalNumByteSlice"
    },
    "549": {
      "op": "pushint 2 // 2"
    },
    "551": {
      "op": "=="
    },
    "552": {
      "error": "Wrong Global Bytes allocation",
      "op": "assert // Wrong Global Bytes allocation"
    },
    "553": {
      "op": "txn GlobalNumUint"
    },
    "555": {
      "op": "pushint 19 // 19"
    },
    "557": {
      "op": "=="
    },
    "558": {
      "error": "Wrong Global UInts allocation",
      "op": "assert // Wrong Global UInts allocation"
    },
    "559": {
      "op": "txn LocalNumByteSlice"
    },
    "561": {
      "op": "!"
    },
    "562": {
      "error": "Wrong Local Bytes allocation",
      "op": "assert // Wrong Local Bytes allocation"
    },
    "563": {
      "op": "txn LocalNumUint"
    },
    "565": {
      "op": "!"
    },
    "566": {
      "error": "Wrong Local UInts allocation",
      "op": "assert // Wrong Local UInts allocation"
    },
    "567": {
      "op": "bytec 23 // \"due_coupons_watermark\""
    },
    "569": {
      "op": "intc_0 // 0"
    },
    "570": {
      "op": "app_global_put"
    },
    "571": {
      "op": "bytec 24 // \"paid_coupon_units\""
    },
    "573": {
      "op": "intc_0 // 0"
    },
    "574": {
      "op": "app_global_put"
    },
    "575": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "577": {
      "op": "bz main_bare_routing@28",
      "stack_out": []
    },
    "580": {
      "op": "pushbytess 0x4fd6a3cc 0x8cf14b51 0x9c76b6a3 0x44363d49 0x53bef045 0x67db4f20 0xf6a96c8d 0x3f0efc6c 0xd3a4d6ab 0x1d6fc255 0xfef74567 0xb8fc1390 0x3d43d1f0 0xebd96b2f 0x6c85e3ee 0xf63ace8d 0xbbcca18a 0x1a7babb4 0x1460a966 0xed02759f 0xfad2173e 0x08efea35 0xe4a5ab54 // method \"asset_transfer(address,address,uint64)uint64\", method \"pay_coupon(address,byte[])(uint64,uint64,byte[])\", method \"pay_principal(address,byte[])(uint64,uint64,byte[])\", method \"get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))\", method \"get_coupon_rates()uint16[]\", method \"get_payment_amount(address)(uint64,uint64)\", method \"get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)\", method \"asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void\", method \"asset_config(uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void\", method \"set_secondary_time_events(uint64[])(uint64,uint64)\", method \"assign_role(address,uint8,byte[])uint64\", method \"revoke_role(address,uint8)uint64\", method \"open_account(address,address)uint64\", method \"close_account(address)(uint64,uint64)\", method \"primary_distribution(address,uint64)uint64\", method \"set_asset_suspension(bool)uint64\", method \"set_account_suspension(address,bool)uint64\", method \"set_default_status(bool)void\", method \"get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)\", method \"get_account_info(address)(address,uint64,uint64,uint64,bool)\", method \"get_time_events()uint64[]\", method \"get_secondary_market_schedule()uint64[]\", method \"get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)\""
    },
    "697": {
      "op": "txna ApplicationArgs 0"
    },
    "700": {
      "op": "match main_asset_transfer_route@5 main_pay_coupon_route@6 main_pay_principal_route@7 main_get_account_units_current_value_route@8 main_get_coupon_rates_route@9 main_get_payment_amount_route@10 main_get_coupons_status_route@11 main_asset_create_route@12 main_asset_config_route@13 main_set_secondary_time_events_route@14 main_assign_role_route@15 main_revoke_role_route@16 main_open_account_route@17 main_close_account_route@18 main_primary_distribution_route@19 main_set_asset_suspension_route@20 main_set_account_suspension_route@21 main_set_default_status_route@22 main_get_asset_info_route@23 main_get_account_info_route@24 main_get_time_events_route@25 main_get_secondary_market_schedule_route@26 main_get_asset_metadata_route@27"
    },
    "748": {
      "block": "main_after_if_else@30",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "749": {
      "op": "return"
    },
    "750": {
      "block": "main_get_asset_metadata_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "752": {
      "op": "!",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "753": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "754": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "756": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "757": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata",
      "op": "callsub get_asset_metadata",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "760": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0",
        "0x151f7c75"
      ]
    },
    "761": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%170#0"
      ]
    },
    "762": {
      "op": "concat",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "763": {
      "op": "log",
      "stack_out": []
    },
    "764": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "765": {
      "op": "return"
    },
    "766": {
      "block": "main_get_secondary_market_schedule_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "768": {
      "op": "!",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "769": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "770": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "772": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "773": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule",
      "op": "callsub get_secondary_market_schedule",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "776": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "0x151f7c75"
      ]
    },
    "777": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%164#0"
      ]
    },
    "778": {
      "op": "concat",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "779": {
      "op": "log",
      "stack_out": []
    },
    "780": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "781": {
      "op": "return"
    },
    "782": {
      "block": "main_get_time_events_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "784": {
      "op": "!",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "785": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "786": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "788": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "789": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events",
      "op": "callsub get_time_events",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "792": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "0x151f7c75"
      ]
    },
    "793": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%158#0"
      ]
    },
    "794": {
      "op": "concat",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "795": {
      "op": "log",
      "stack_out": []
    },
    "796": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "797": {
      "op": "return"
    },
    "798": {
      "block": "main_get_account_info_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "800": {
      "op": "!",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "801": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "802": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "804": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "805": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "808": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info",
      "op": "callsub get_account_info",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "811": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0",
        "0x151f7c75"
      ]
    },
    "812": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%152#0"
      ]
    },
    "813": {
      "op": "concat",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "814": {
      "op": "log",
      "stack_out": []
    },
    "815": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "816": {
      "op": "return"
    },
    "817": {
      "block": "main_get_asset_info_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "819": {
      "op": "!",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "820": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "821": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "823": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "824": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info",
      "op": "callsub get_asset_info",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "827": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "0x151f7c75"
      ]
    },
    "828": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%145#0"
      ]
    },
    "829": {
      "op": "concat",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "830": {
      "op": "log",
      "stack_out": []
    },
    "831": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "832": {
      "op": "return"
    },
    "833": {
      "block": "main_set_default_status_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "835": {
      "op": "!",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "836": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "837": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "839": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "840": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "843": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status",
      "op": "callsub set_default_status",
      "stack_out": []
    },
    "846": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "847": {
      "op": "return"
    },
    "848": {
      "block": "main_set_account_suspension_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "850": {
      "op": "!",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "851": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "852": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "854": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "855": {
      "op": "txna ApplicationArgs 1"
    },
    "858": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%132#0",
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%132#0",
        "tmp%133#0"
      ]
    },
    "861": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension",
      "op": "callsub set_account_suspension",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "864": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0",
        "0x151f7c75"
      ]
    },
    "865": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%134#0"
      ]
    },
    "866": {
      "op": "concat",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "867": {
      "op": "log",
      "stack_out": []
    },
    "868": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "869": {
      "op": "return"
    },
    "870": {
      "block": "main_set_asset_suspension_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "872": {
      "op": "!",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "873": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "874": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "876": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "877": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "880": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension",
      "op": "callsub set_asset_suspension",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "883": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0",
        "0x151f7c75"
      ]
    },
    "884": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%126#0"
      ]
    },
    "885": {
      "op": "concat",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "886": {
      "op": "log",
      "stack_out": []
    },
    "887": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "888": {
      "op": "return"
    },
    "889": {
      "block": "main_primary_distribution_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "891": {
      "op": "!",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "892": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "893": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "895": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "896": {
      "op": "txna ApplicationArgs 1"
    },
    "899": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%117#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "tmp%118#0"
      ]
    },
    "902": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution",
      "op": "callsub primary_distribution",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "905": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0",
        "0x151f7c75"
      ]
    },
    "906": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%119#0"
      ]
    },
    "907": {
      "op": "concat",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "908": {
      "op": "log",
      "stack_out": []
    },
    "909": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "910": {
      "op": "return"
    },
    "911": {
      "block": "main_close_account_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "913": {
      "op": "!",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "914": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "915": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "917": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "918": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "921": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.close_account",
      "op": "callsub close_account",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "924": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "0x151f7c75"
      ]
    },
    "925": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%111#0"
      ]
    },
    "926": {
      "op": "concat",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "927": {
      "op": "log",
      "stack_out": []
    },
    "928": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "929": {
      "op": "return"
    },
    "930": {
      "block": "main_open_account_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "932": {
      "op": "!",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "933": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "934": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "936": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "937": {
      "op": "txna ApplicationArgs 1"
    },
    "940": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%102#0",
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%102#0",
        "tmp%103#0"
      ]
    },
    "943": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.open_account",
      "op": "callsub open_account",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "946": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0",
        "0x151f7c75"
      ]
    },
    "947": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%104#0"
      ]
    },
    "948": {
      "op": "concat",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "949": {
      "op": "log",
      "stack_out": []
    },
    "950": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "951": {
      "op": "return"
    },
    "952": {
      "block": "main_revoke_role_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "954": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "955": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "956": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "958": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "959": {
      "op": "txna ApplicationArgs 1"
    },
    "962": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%94#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0"
      ]
    },
    "965": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role",
      "op": "callsub revoke_role",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "968": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0",
        "0x151f7c75"
      ]
    },
    "969": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%96#0"
      ]
    },
    "970": {
      "op": "concat",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "971": {
      "op": "log",
      "stack_out": []
    },
    "972": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "973": {
      "op": "return"
    },
    "974": {
      "block": "main_assign_role_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "976": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "977": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "978": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "980": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "981": {
      "op": "txna ApplicationArgs 1"
    },
    "984": {
      "op": "txna ApplicationArgs 2"
    },
    "987": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ]
    },
    "990": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assign_role",
      "op": "callsub assign_role",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "993": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0",
        "0x151f7c75"
      ]
    },
    "994": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%88#0"
      ]
    },
    "995": {
      "op": "concat",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "996": {
      "op": "log",
      "stack_out": []
    },
    "997": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "998": {
      "op": "return"
    },
    "999": {
      "block": "main_set_secondary_time_events_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1001": {
      "op": "!",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1002": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1003": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "1005": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1006": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "1009": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events",
      "op": "callsub set_secondary_time_events",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1012": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0",
        "0x151f7c75"
      ]
    },
    "1013": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%79#0"
      ]
    },
    "1014": {
      "op": "concat",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1015": {
      "op": "log",
      "stack_out": []
    },
    "1016": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1017": {
      "op": "return"
    },
    "1018": {
      "block": "main_asset_config_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1020": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1021": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1022": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1024": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1025": {
      "op": "txna ApplicationArgs 1"
    },
    "1028": {
      "op": "txna ApplicationArgs 2"
    },
    "1031": {
      "op": "txna ApplicationArgs 3"
    },
    "1034": {
      "op": "txna ApplicationArgs 4"
    },
    "1037": {
      "op": "txna ApplicationArgs 5"
    },
    "1040": {
      "op": "txna ApplicationArgs 6"
    },
    "1043": {
      "op": "txna ApplicationArgs 7"
    },
    "1046": {
      "op": "txna ApplicationArgs 8"
    },
    "1049": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%68#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%68#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0"
      ]
    },
    "1052": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_config",
      "op": "callsub asset_config",
      "stack_out": []
    },
    "1055": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1056": {
      "op": "return"
    },
    "1057": {
      "block": "main_asset_create_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1059": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1060": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1061": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1063": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1064": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1065": {
      "op": "txna ApplicationArgs 1"
    },
    "1068": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0"
      ]
    },
    "1071": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_create",
      "op": "callsub asset_create",
      "stack_out": []
    },
    "1074": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1075": {
      "op": "return"
    },
    "1076": {
      "block": "main_get_coupons_status_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1078": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1079": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1080": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1082": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1083": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.get_coupons_status",
      "op": "callsub get_coupons_status",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1086": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "0x151f7c75"
      ]
    },
    "1087": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%53#0"
      ]
    },
    "1088": {
      "op": "concat",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1089": {
      "op": "log",
      "stack_out": []
    },
    "1090": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1091": {
      "op": "return"
    },
    "1092": {
      "block": "main_get_payment_amount_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1094": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1095": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1096": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1098": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1099": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1102": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.get_payment_amount",
      "op": "callsub get_payment_amount",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1105": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "0x151f7c75"
      ]
    },
    "1106": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%47#0"
      ]
    },
    "1107": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1108": {
      "op": "log",
      "stack_out": []
    },
    "1109": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1110": {
      "op": "return"
    },
    "1111": {
      "block": "main_get_coupon_rates_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1113": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1114": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1115": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1117": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1118": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.get_coupon_rates",
      "op": "callsub get_coupon_rates",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1121": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "0x151f7c75"
      ]
    },
    "1122": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%40#0"
      ]
    },
    "1123": {
      "op": "concat",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1124": {
      "op": "log",
      "stack_out": []
    },
    "1125": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1126": {
      "op": "return"
    },
    "1127": {
      "block": "main_get_account_units_current_value_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1129": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1130": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1131": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1133": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1134": {
      "op": "txna ApplicationArgs 1"
    },
    "1137": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1140": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.get_account_units_current_value",
      "op": "callsub get_account_units_current_value",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1143": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "1144": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%34#0"
      ]
    },
    "1145": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1146": {
      "op": "log",
      "stack_out": []
    },
    "1147": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1148": {
      "op": "return"
    },
    "1149": {
      "block": "main_pay_principal_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1151": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1152": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1153": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1155": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1156": {
      "op": "txna ApplicationArgs 1"
    },
    "1159": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "1162": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.pay_principal",
      "op": "callsub pay_principal",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1165": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0x151f7c75"
      ]
    },
    "1166": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%26#0"
      ]
    },
    "1167": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1168": {
      "op": "log",
      "stack_out": []
    },
    "1169": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1170": {
      "op": "return"
    },
    "1171": {
      "block": "main_pay_coupon_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1173": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1174": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1175": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1177": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1178": {
      "op": "txna ApplicationArgs 1"
    },
    "1181": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1184": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.pay_coupon",
      "op": "callsub pay_coupon",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1187": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "1188": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "1189": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1190": {
      "op": "log",
      "stack_out": []
    },
    "1191": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1192": {
      "op": "return"
    },
    "1193": {
      "block": "main_asset_transfer_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "1195": {
      "op": "!",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "1196": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1197": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%5#1"
      ]
    },
    "1199": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1200": {
      "op": "txna ApplicationArgs 1"
    },
    "1203": {
      "op": "txna ApplicationArgs 2"
    },
    "1206": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1209": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.asset_transfer",
      "op": "callsub asset_transfer",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1212": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "1213": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%10#0"
      ]
    },
    "1214": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1215": {
      "op": "log",
      "stack_out": []
    },
    "1216": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1217": {
      "op": "return"
    },
    "1218": {
      "block": "main_bare_routing@28",
      "stack_in": [],
      "op": "pushint 4 // 4"
    },
    "1220": {
      "op": "txn OnCompletion",
      "defined_out": [
        "4",
        "tmp%172#0"
      ],
      "stack_out": [
        "4",
        "tmp%172#0"
      ]
    },
    "1222": {
      "op": "match main_asset_update@29",
      "stack_out": []
    },
    "1226": {
      "op": "b main_after_if_else@30"
    },
    "1229": {
      "block": "main_asset_update@29",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "1231": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1232": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_update",
      "op": "callsub asset_update"
    },
    "1235": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1236": {
      "op": "return"
    },
    "1237": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.asset_transfer",
      "params": {
        "sender_holding_address#0": "bytes",
        "receiver_holding_address#0": "bytes",
        "units#0": "bytes"
      },
      "block": "asset_transfer",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1240": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender_unit_value#0"
      ]
    },
    "1241": {
      "op": "dupn 2",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3"
      ]
    },
    "1243": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0"
      ]
    },
    "1245": {
      "op": "dup",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0"
      ]
    },
    "1246": {
      "op": "frame_dig -1",
      "defined_out": [
        "units#0 (copy)"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#0 (copy)"
      ]
    },
    "1248": {
      "op": "btoi",
      "defined_out": [
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1249": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "0"
      ]
    },
    "1250": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "0",
        "\"status\""
      ]
    },
    "1251": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#2",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "1252": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#2"
      ]
    },
    "1253": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#2",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#2",
        "100"
      ]
    },
    "1254": {
      "op": "==",
      "defined_out": [
        "tmp%0#4",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#4"
      ]
    },
    "1255": {
      "op": "bz asset_transfer_bool_false@5",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1258": {
      "op": "intc_0 // 0"
    },
    "1259": {
      "op": "bytec 15 // \"secondary_market_opening_date\""
    },
    "1261": {
      "op": "app_global_get_ex"
    },
    "1262": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists"
    },
    "1263": {
      "op": "global LatestTimestamp"
    },
    "1265": {
      "op": "dup"
    },
    "1266": {
      "op": "frame_bury 4"
    },
    "1268": {
      "op": "<="
    },
    "1269": {
      "op": "bz asset_transfer_bool_false@5"
    },
    "1272": {
      "op": "intc_0 // 0"
    },
    "1273": {
      "op": "bytec 16 // \"secondary_market_closure_date\""
    },
    "1275": {
      "op": "app_global_get_ex"
    },
    "1276": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists"
    },
    "1277": {
      "op": "frame_dig 4"
    },
    "1279": {
      "op": ">"
    },
    "1280": {
      "op": "bz asset_transfer_bool_false@5"
    },
    "1283": {
      "op": "intc_1 // 1"
    },
    "1284": {
      "block": "asset_transfer_bool_merge@6",
      "stack_in": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "and_result%0#0"
      ],
      "error": "Secondary market is closed",
      "op": "assert // Secondary market is closed",
      "defined_out": [],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1285": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1"
      ]
    },
    "1287": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender_holding_address#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1289": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#2"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%1#2"
      ]
    },
    "1290": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1291": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1294": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "1297": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023",
        "tmp%0#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "0x52333023"
      ]
    },
    "1298": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "0x52333023",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1300": {
      "op": "concat",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1"
      ]
    },
    "1301": {
      "op": "dup",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "1302": {
      "op": "frame_bury 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1"
      ]
    },
    "1304": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "1305": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#2",
        "tmp%0#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "1306": {
      "op": "bury 1",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1308": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1"
      ]
    },
    "1309": {
      "op": "bytec_1 // 0x52333023",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "0x52333023"
      ]
    },
    "1310": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "receiver_holding_address#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "0x52333023",
        "receiver_holding_address#0 (copy)"
      ]
    },
    "1312": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3"
      ]
    },
    "1313": {
      "op": "dup",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%0#3"
      ]
    },
    "1314": {
      "op": "frame_bury 2",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3"
      ]
    },
    "1316": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "1317": {
      "op": "box_len",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "1318": {
      "op": "bury 1",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_exists%0#0"
      ]
    },
    "1320": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3"
      ]
    },
    "1321": {
      "op": "dig 1",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%0#1 (copy)"
      ]
    },
    "1323": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1324": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%0#0"
      ]
    },
    "1325": {
      "op": "intc 4 // 448",
      "defined_out": [
        "448",
        "maybe_value%0#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%0#0",
        "448"
      ]
    },
    "1327": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "is_true%0#0"
      ]
    },
    "1328": {
      "op": "bytec 10 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1330": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1331": {
      "op": "uncover 2",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1333": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "encoded_bool%0#0"
      ]
    },
    "1334": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1335": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#3",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%3#0"
      ]
    },
    "1336": {
      "op": "!",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#3",
        "tmp%4#2"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%4#2"
      ]
    },
    "1337": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3"
      ]
    },
    "1338": {
      "op": "dup",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "1339": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1340": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%1#0"
      ]
    },
    "1341": {
      "op": "intc 4 // 448",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%1#0",
        "448"
      ]
    },
    "1343": {
      "op": "getbit",
      "defined_out": [
        "is_true%1#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "is_true%1#0"
      ]
    },
    "1344": {
      "op": "bytec 10 // 0x00",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "is_true%1#0",
        "0x00"
      ]
    },
    "1346": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "1347": {
      "op": "uncover 2",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "1349": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "encoded_bool%1#0"
      ]
    },
    "1350": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1351": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#3",
        "tmp%6#2"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%6#2"
      ]
    },
    "1352": {
      "op": "!",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#3",
        "tmp%7#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%7#0"
      ]
    },
    "1353": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3"
      ]
    },
    "1354": {
      "op": "dig 1",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%0#1 (copy)"
      ]
    },
    "1356": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1357": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%2#0"
      ]
    },
    "1358": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#3",
        "tmp%9#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%9#0"
      ]
    },
    "1361": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#3",
        "tmp%10#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%10#0"
      ]
    },
    "1362": {
      "op": "frame_dig 5",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#3",
        "tmp%10#0",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%10#0",
        "units#1"
      ]
    },
    "1364": {
      "op": ">=",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#3",
        "tmp%11#0",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%11#0"
      ]
    },
    "1365": {
      "error": "Insufficient sender units to transfer",
      "op": "assert // Insufficient sender units to transfer",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3"
      ]
    },
    "1366": {
      "op": "swap",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "tmp%0#1"
      ]
    },
    "1367": {
      "op": "box_get",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1368": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%0#0"
      ]
    },
    "1369": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "sender_unit_value#0"
      ]
    },
    "1372": {
      "op": "frame_bury 0",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3"
      ]
    },
    "1374": {
      "op": "box_get",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1375": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%1#0"
      ]
    },
    "1376": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%2#4",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%2#4"
      ]
    },
    "1379": {
      "op": "btoi",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%3#1",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%3#1"
      ]
    },
    "1380": {
      "op": "bz asset_transfer_else_body@16",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1383": {
      "op": "frame_dig 1"
    },
    "1385": {
      "op": "box_get"
    },
    "1386": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1387": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds"
    },
    "1390": {
      "op": "frame_dig 2"
    },
    "1392": {
      "op": "box_get"
    },
    "1393": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1394": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds"
    },
    "1397": {
      "op": "b=="
    },
    "1398": {
      "op": "bz asset_transfer_bool_false@14"
    },
    "1401": {
      "op": "frame_dig 1"
    },
    "1403": {
      "op": "box_get"
    },
    "1404": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1405": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds"
    },
    "1408": {
      "op": "frame_dig 2"
    },
    "1410": {
      "op": "box_get"
    },
    "1411": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1412": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds"
    },
    "1415": {
      "op": "b=="
    },
    "1416": {
      "op": "bz asset_transfer_bool_false@14"
    },
    "1419": {
      "op": "intc_1 // 1"
    },
    "1420": {
      "block": "asset_transfer_bool_merge@15",
      "stack_in": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "and_result%0#0"
      ],
      "error": "Sender and receiver units are not fungible",
      "op": "assert // Sender and receiver units are not fungible",
      "defined_out": [],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1421": {
      "block": "asset_transfer_after_if_else@17",
      "stack_in": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ],
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.count_due_coupons",
      "op": "callsub count_due_coupons",
      "defined_out": [
        "due_coupons#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "due_coupons#0"
      ]
    },
    "1424": {
      "op": "frame_dig -3",
      "defined_out": [
        "due_coupons#0",
        "sender_holding_address#0 (copy)"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "due_coupons#0",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1426": {
      "op": "dig 1",
      "defined_out": [
        "due_coupons#0",
        "due_coupons#0 (copy)",
        "sender_holding_address#0 (copy)"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "due_coupons#0",
        "sender_holding_address#0 (copy)",
        "due_coupons#0 (copy)"
      ]
    },
    "1428": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.assert_no_pending_coupon_payment",
      "op": "callsub assert_no_pending_coupon_payment",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "due_coupons#0"
      ]
    },
    "1431": {
      "op": "frame_dig 1",
      "defined_out": [
        "due_coupons#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "due_coupons#0",
        "tmp%0#1"
      ]
    },
    "1433": {
      "op": "dup",
      "defined_out": [
        "due_coupons#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "due_coupons#0",
        "tmp%0#1 (copy)",
        "tmp%0#1 (copy)"
      ]
    },
    "1434": {
      "op": "cover 2",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "due_coupons#0",
        "tmp%0#1 (copy)"
      ]
    },
    "1436": {
      "op": "box_get",
      "defined_out": [
        "due_coupons#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "due_coupons#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1437": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "due_coupons#0",
        "maybe_value%0#0"
      ]
    },
    "1438": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "due_coupons#0",
        "sender_unit_value#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "due_coupons#0",
        "sender_unit_value#0"
      ]
    },
    "1441": {
      "op": "frame_bury 0",
      "defined_out": [
        "due_coupons#0",
        "sender_unit_value#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "due_coupons#0"
      ]
    },
    "1443": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "due_coupons#0",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1445": {
      "op": "frame_dig 5",
      "defined_out": [
        "due_coupons#0",
        "sender_holding_address#0 (copy)",
        "sender_unit_value#0",
        "tmp%0#1",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "due_coupons#0",
        "sender_holding_address#0 (copy)",
        "units#1"
      ]
    },
    "1447": {
      "op": "dup",
      "defined_out": [
        "due_coupons#0",
        "sender_holding_address#0 (copy)",
        "sender_unit_value#0",
        "tmp%0#1",
        "units#1",
        "units#1 (copy)"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "due_coupons#0",
        "sender_holding_address#0 (copy)",
        "units#1 (copy)",
        "units#1 (copy)"
      ]
    },
    "1448": {
      "op": "cover 4",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "due_coupons#0",
        "sender_holding_address#0 (copy)",
        "units#1 (copy)"
      ]
    },
    "1450": {
      "op": "uncover 2",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "sender_holding_address#0 (copy)",
        "units#1 (copy)",
        "due_coupons#0"
      ]
    },
    "1452": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.accrued_interest_amount",
      "op": "callsub accrued_interest_amount",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "accrued_interest#0"
      ]
    },
    "1455": {
      "op": "frame_bury 3",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1"
      ]
    },
    "1457": {
      "op": "dup",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "1458": {
      "op": "box_get",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1459": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "1460": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%1#1",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "1463": {
      "op": "btoi",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%2#1",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "1464": {
      "op": "dig 2",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "tmp%2#1",
        "units#1 (copy)"
      ]
    },
    "1466": {
      "op": "-",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "to_encode%0#0",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "to_encode%0#0"
      ]
    },
    "1467": {
      "op": "itob",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "units#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ]
    },
    "1468": {
      "op": "dig 1",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "tmp%0#1 (copy)"
      ]
    },
    "1470": {
      "op": "box_get",
      "defined_out": [
        "accrued_interest#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "units#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1471": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1472": {
      "op": "swap",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1473": {
      "op": "replace2 32",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "units#1",
        "updated_data%0#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "updated_data%0#0"
      ]
    },
    "1475": {
      "op": "dig 1",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "updated_data%0#0",
        "tmp%0#1 (copy)"
      ]
    },
    "1477": {
      "op": "swap",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "tmp%0#1 (copy)",
        "updated_data%0#0"
      ]
    },
    "1478": {
      "op": "box_put",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1"
      ]
    },
    "1479": {
      "op": "frame_dig 2",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "tmp%0#3"
      ]
    },
    "1481": {
      "op": "dup",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "1482": {
      "op": "box_get",
      "defined_out": [
        "accrued_interest#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1483": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%2#0"
      ]
    },
    "1484": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%5#1",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%5#1"
      ]
    },
    "1487": {
      "op": "btoi",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%6#0",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%6#0"
      ]
    },
    "1488": {
      "op": "uncover 3",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "tmp%6#0",
        "units#1"
      ]
    },
    "1490": {
      "op": "+",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "to_encode%1#0",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "to_encode%1#0"
      ]
    },
    "1491": {
      "op": "itob",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "units#1",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "val_as_bytes%1#0"
      ]
    },
    "1492": {
      "op": "dig 1",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "val_as_bytes%1#0",
        "tmp%0#3 (copy)"
      ]
    },
    "1494": {
      "op": "box_get",
      "defined_out": [
        "accrued_interest#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "units#1",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "val_as_bytes%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1495": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "val_as_bytes%1#0",
        "maybe_value%3#0"
      ]
    },
    "1496": {
      "op": "swap",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "maybe_value%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "1497": {
      "op": "replace2 32",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "units#1",
        "updated_data%1#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "tmp%0#3",
        "updated_data%1#0"
      ]
    },
    "1499": {
      "op": "box_put",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1"
      ]
    },
    "1500": {
      "op": "box_get",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1501": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#0"
      ]
    },
    "1502": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%1#1"
      ]
    },
    "1505": {
      "op": "btoi",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%2#1"
      ]
    },
    "1506": {
      "op": "bnz asset_transfer_after_if_else@21",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1509": {
      "op": "frame_dig 1"
    },
    "1511": {
      "op": "dup"
    },
    "1512": {
      "op": "box_get"
    },
    "1513": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1514": {
      "op": "bytec 8 // 0x0000000000000000"
    },
    "1516": {
      "op": "replace2 40"
    },
    "1518": {
      "op": "dig 1"
    },
    "1520": {
      "op": "swap"
    },
    "1521": {
      "op": "box_put"
    },
    "1522": {
      "op": "dup"
    },
    "1523": {
      "op": "box_get"
    },
    "1524": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1525": {
      "op": "bytec 8 // 0x0000000000000000"
    },
    "1527": {
      "op": "replace2 48"
    },
    "1529": {
      "op": "box_put"
    },
    "1530": {
      "block": "asset_transfer_after_if_else@21",
      "stack_in": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "sender_unit_value#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "sender_unit_value#0"
      ]
    },
    "1532": {
      "op": "btoi",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%5#0"
      ]
    },
    "1533": {
      "op": "frame_dig 5",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%5#0",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%5#0",
        "units#1"
      ]
    },
    "1535": {
      "op": "*",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%6#0",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%6#0"
      ]
    },
    "1536": {
      "op": "frame_dig 3",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%6#0",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%6#0",
        "accrued_interest#0"
      ]
    },
    "1538": {
      "op": "+",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "to_encode%0#0",
        "units#1"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "to_encode%0#0"
      ]
    },
    "1539": {
      "op": "itob",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "units#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "val_as_bytes%0#0"
      ]
    },
    "1540": {
      "op": "frame_bury 0"
    },
    "1542": {
      "retsub": true,
      "op": "retsub"
    },
    "1543": {
      "block": "asset_transfer_bool_false@14",
      "stack_in": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "and_result%0#0"
      ]
    },
    "1544": {
      "op": "b asset_transfer_bool_merge@15"
    },
    "1547": {
      "block": "asset_transfer_else_body@16",
      "stack_in": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3"
      ]
    },
    "1549": {
      "op": "dup",
      "defined_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "1550": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1551": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%2#0"
      ]
    },
    "1552": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%2#0",
        "sender_unit_value#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%2#0",
        "sender_unit_value#0"
      ]
    },
    "1554": {
      "op": "replace2 40",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#3",
        "updated_data%0#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "updated_data%0#0"
      ]
    },
    "1556": {
      "op": "dig 1",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "updated_data%0#0",
        "tmp%0#3 (copy)"
      ]
    },
    "1558": {
      "op": "swap",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "updated_data%0#0"
      ]
    },
    "1559": {
      "op": "box_put",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3"
      ]
    },
    "1560": {
      "op": "frame_dig 1",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "tmp%0#1"
      ]
    },
    "1562": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1563": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%3#0"
      ]
    },
    "1564": {
      "op": "dig 1",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%3#0",
        "tmp%0#3 (copy)"
      ]
    },
    "1566": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1567": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "1568": {
      "op": "swap",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%4#0",
        "maybe_value%3#0"
      ]
    },
    "1569": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds",
      "defined_out": [
        "assigned_value%1#0",
        "maybe_value%4#0",
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%4#0",
        "assigned_value%1#0"
      ]
    },
    "1572": {
      "op": "replace2 48",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "updated_data%1#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "updated_data%1#0"
      ]
    },
    "1574": {
      "op": "box_put",
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1575": {
      "op": "b asset_transfer_after_if_else@17"
    },
    "1578": {
      "block": "asset_transfer_bool_false@5",
      "stack_in": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "sender_unit_value#0",
        "tmp%0#1",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "and_result%0#0"
      ]
    },
    "1579": {
      "op": "b asset_transfer_bool_merge@6"
    },
    "1582": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "params": {},
      "block": "assert_is_not_defaulted",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1585": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1586": {
      "op": "bytec 22 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"defaulted\""
      ]
    },
    "1588": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1589": {
      "error": "check self.defaulted exists",
      "op": "assert // check self.defaulted exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1590": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1591": {
      "error": "Defaulted",
      "op": "assert // Defaulted",
      "stack_out": []
    },
    "1592": {
      "retsub": true,
      "op": "retsub"
    },
    "1593": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "params": {},
      "block": "assert_is_not_suspended",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1596": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1597": {
      "op": "bytec 21 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"suspended\""
      ]
    },
    "1599": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1600": {
      "error": "check self.suspended exists",
      "op": "assert // check self.suspended exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1601": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1602": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": []
    },
    "1603": {
      "retsub": true,
      "op": "retsub"
    },
    "1604": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.count_due_coupons",
      "params": {},
      "block": "count_due_coupons",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1607": {
      "op": "pushbytes \"\""
    },
    "1609": {
      "op": "global LatestTimestamp"
    },
    "1611": {
      "op": "dup"
    },
    "1612": {
      "op": "intc_0 // 0"
    },
    "1613": {
      "op": "bytec 23 // \"due_coupons_watermark\"",
      "defined_out": [
        "\"due_coupons_watermark\"",
        "0",
        "current_ts#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "current_ts#0",
        "0",
        "\"due_coupons_watermark\""
      ]
    },
    "1615": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_ts#0",
        "due_coupons#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "current_ts#0",
        "due_coupons#0",
        "maybe_exists%0#0"
      ]
    },
    "1616": {
      "op": "swap",
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "current_ts#0",
        "maybe_exists%0#0",
        "due_coupons#0"
      ]
    },
    "1617": {
      "op": "cover 2",
      "defined_out": [
        "current_ts#0",
        "due_coupons#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "current_ts#0",
        "maybe_exists%0#0"
      ]
    },
    "1619": {
      "error": "check self.due_coupons_watermark exists",
      "op": "assert // check self.due_coupons_watermark exists",
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "current_ts#0"
      ]
    },
    "1620": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "current_ts#0",
        "0"
      ]
    },
    "1621": {
      "op": "bytec 6 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "current_ts#0",
        "due_coupons#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "current_ts#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "1623": {
      "op": "app_global_get_ex",
      "defined_out": [
        "current_ts#0",
        "due_coupons#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "current_ts#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1624": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "current_ts#0",
        "maybe_value%1#0"
      ]
    },
    "1625": {
      "op": ">=",
      "defined_out": [
        "current_ts#0",
        "due_coupons#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "tmp%0#0"
      ]
    },
    "1626": {
      "op": "bz count_due_coupons_else_body@2",
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0"
      ]
    },
    "1629": {
      "op": "intc_0 // 0"
    },
    "1630": {
      "op": "bytec 4 // \"total_coupons\""
    },
    "1632": {
      "op": "app_global_get_ex"
    },
    "1633": {
      "op": "swap"
    },
    "1634": {
      "op": "frame_bury 2"
    },
    "1636": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists"
    },
    "1637": {
      "block": "count_due_coupons_after_if_else@8",
      "stack_in": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0"
      ],
      "op": "bytec 23 // \"due_coupons_watermark\"",
      "defined_out": [
        "\"due_coupons_watermark\""
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "\"due_coupons_watermark\""
      ]
    },
    "1639": {
      "op": "frame_dig 2",
      "defined_out": [
        "\"due_coupons_watermark\"",
        "due_coupons#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "\"due_coupons_watermark\"",
        "due_coupons#0"
      ]
    },
    "1641": {
      "op": "dup",
      "defined_out": [
        "\"due_coupons_watermark\"",
        "due_coupons#0",
        "due_coupons#0 (copy)"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "\"due_coupons_watermark\"",
        "due_coupons#0 (copy)",
        "due_coupons#0 (copy)"
      ]
    },
    "1642": {
      "op": "cover 2",
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "due_coupons#0",
        "\"due_coupons_watermark\"",
        "due_coupons#0 (copy)"
      ]
    },
    "1644": {
      "op": "app_global_put",
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "due_coupons#0"
      ]
    },
    "1645": {
      "op": "frame_bury 0"
    },
    "1647": {
      "retsub": true,
      "op": "retsub"
    },
    "1648": {
      "block": "count_due_coupons_else_body@2",
      "stack_in": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "0"
      ]
    },
    "1649": {
      "op": "bytec 5 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "1651": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1652": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "maybe_value%3#0"
      ]
    },
    "1653": {
      "op": "frame_dig 1",
      "defined_out": [
        "current_ts#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "maybe_value%3#0",
        "current_ts#0"
      ]
    },
    "1655": {
      "op": "<",
      "defined_out": [
        "current_ts#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "tmp%1#0"
      ]
    },
    "1656": {
      "op": "bz count_due_coupons_after_if_else@8",
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0"
      ]
    },
    "1659": {
      "op": "intc_0 // 0"
    },
    "1660": {
      "op": "bytec 23 // \"due_coupons_watermark\""
    },
    "1662": {
      "op": "app_global_get_ex"
    },
    "1663": {
      "error": "check self.due_coupons_watermark exists",
      "op": "assert // check self.due_coupons_watermark exists"
    },
    "1664": {
      "op": "pushint 3 // 3"
    },
    "1666": {
      "op": "+"
    },
    "1667": {
      "op": "dup"
    },
    "1668": {
      "op": "frame_bury 0"
    },
    "1670": {
      "op": "bytec 11 // 0x74696d654576656e7473"
    },
    "1672": {
      "op": "box_get"
    },
    "1673": {
      "error": "check self.time_events exists",
      "op": "assert // check self.time_events exists"
    },
    "1674": {
      "op": "extract 2 0"
    },
    "1677": {
      "op": "swap"
    },
    "1678": {
      "op": "intc_2 // 8"
    },
    "1679": {
      "op": "*"
    },
    "1680": {
      "op": "intc_2 // 8"
    },
    "1681": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "1682": {
      "op": "btoi"
    },
    "1683": {
      "block": "count_due_coupons_while_top@4",
      "stack_in": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "coupon_due_date#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "current_ts#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "coupon_due_date#0",
        "current_ts#0"
      ]
    },
    "1685": {
      "op": "<=",
      "defined_out": [
        "current_ts#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "tmp%3#0"
      ]
    },
    "1686": {
      "op": "bz count_due_coupons_after_while@6",
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0"
      ]
    },
    "1689": {
      "op": "intc 5 // 255"
    },
    "1691": {
      "op": "intc_0 // 0"
    },
    "1692": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget"
    },
    "1695": {
      "op": "frame_dig 0"
    },
    "1697": {
      "op": "intc_1 // 1"
    },
    "1698": {
      "op": "+"
    },
    "1699": {
      "op": "dup"
    },
    "1700": {
      "op": "frame_bury 0"
    },
    "1702": {
      "op": "bytec 11 // 0x74696d654576656e7473"
    },
    "1704": {
      "op": "box_get"
    },
    "1705": {
      "error": "check self.time_events exists",
      "op": "assert // check self.time_events exists"
    },
    "1706": {
      "op": "extract 2 0"
    },
    "1709": {
      "op": "swap"
    },
    "1710": {
      "op": "intc_2 // 8"
    },
    "1711": {
      "op": "*"
    },
    "1712": {
      "op": "intc_2 // 8"
    },
    "1713": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "1714": {
      "op": "btoi"
    },
    "1715": {
      "op": "b count_due_coupons_while_top@4"
    },
    "1718": {
      "block": "count_due_coupons_after_while@6",
      "stack_in": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "coupon_idx#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "coupon_idx#0"
      ]
    },
    "1720": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "coupon_idx#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "coupon_idx#0",
        "3"
      ]
    },
    "1722": {
      "op": "-",
      "defined_out": [
        "coupon_idx#0",
        "due_coupons#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0",
        "due_coupons#0"
      ]
    },
    "1723": {
      "op": "frame_bury 2",
      "defined_out": [
        "coupon_idx#0",
        "due_coupons#0"
      ],
      "stack_out": [
        "coupon_idx#0",
        "current_ts#0",
        "due_coupons#0"
      ]
    },
    "1725": {
      "op": "b count_due_coupons_after_if_else@8"
    },
    "1728": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.assert_no_pending_coupon_payment",
      "params": {
        "holding_address#0": "bytes",
        "due_coupons#0": "uint64"
      },
      "block": "assert_no_pending_coupon_payment",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1731": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1732": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1734": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1735": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1736": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1737": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "1740": {
      "op": "frame_dig -1",
      "defined_out": [
        "due_coupons#0 (copy)",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "due_coupons#0 (copy)"
      ]
    },
    "1742": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ]
    },
    "1743": {
      "op": "b==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1744": {
      "error": "Pending due coupon payment",
      "op": "assert // Pending due coupon payment",
      "stack_out": []
    },
    "1745": {
      "retsub": true,
      "op": "retsub"
    },
    "1746": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.accrued_interest_amount",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "uint64",
        "due_coupons#0": "uint64"
      },
      "block": "accrued_interest_amount",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1749": {
      "op": "frame_dig -3",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "1751": {
      "op": "frame_dig -1",
      "defined_out": [
        "due_coupons#0 (copy)",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)",
        "due_coupons#0 (copy)"
      ]
    },
    "1753": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.assert_no_pending_coupon_payment",
      "op": "callsub assert_no_pending_coupon_payment",
      "stack_out": []
    },
    "1756": {
      "op": "frame_dig -1",
      "stack_out": [
        "due_coupons#0 (copy)"
      ]
    },
    "1758": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.day_count_factor",
      "op": "callsub day_count_factor",
      "defined_out": [
        "day_count_factor#0"
      ],
      "stack_out": [
        "day_count_factor#0"
      ]
    },
    "1761": {
      "op": "dup",
      "defined_out": [
        "day_count_factor#0",
        "day_count_factor#0 (copy)"
      ],
      "stack_out": [
        "day_count_factor#0",
        "day_count_factor#0 (copy)"
      ]
    },
    "1762": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "day_count_factor#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "day_count_factor#0",
        "tmp%0#0"
      ]
    },
    "1765": {
      "op": "btoi",
      "defined_out": [
        "coupon_accrued_period#0",
        "day_count_factor#0"
      ],
      "stack_out": [
        "day_count_factor#0",
        "coupon_accrued_period#0"
      ]
    },
    "1766": {
      "op": "swap",
      "stack_out": [
        "coupon_accrued_period#0",
        "day_count_factor#0"
      ]
    },
    "1767": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "coupon_accrued_period#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "tmp%1#0"
      ]
    },
    "1770": {
      "op": "btoi",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0"
      ]
    },
    "1771": {
      "op": "bytec 17 // 0x636f75706f6e5261746573",
      "defined_out": [
        "0x636f75706f6e5261746573",
        "coupon_accrued_period#0",
        "coupon_period#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "0x636f75706f6e5261746573"
      ]
    },
    "1773": {
      "op": "box_get",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1774": {
      "error": "check self.coupon_rates exists",
      "op": "assert // check self.coupon_rates exists",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "maybe_value%0#0"
      ]
    },
    "1775": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "coupon_accrued_period#0",
        "coupon_period#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1778": {
      "op": "frame_dig -1",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "array_head_and_tail%0#0",
        "due_coupons#0 (copy)"
      ]
    },
    "1780": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "coupon_accrued_period#0",
        "coupon_period#0",
        "due_coupons#0 (copy)"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "array_head_and_tail%0#0",
        "due_coupons#0 (copy)",
        "2"
      ]
    },
    "1782": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "coupon_accrued_period#0",
        "coupon_period#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1783": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "2"
      ]
    },
    "1785": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "tmp%2#0"
      ]
    },
    "1786": {
      "op": "btoi",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "next_coupon_rate_bps#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "next_coupon_rate_bps#0"
      ]
    },
    "1787": {
      "op": "frame_dig -3",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "next_coupon_rate_bps#0",
        "holding_address#0 (copy)"
      ]
    },
    "1789": {
      "op": "frame_dig -2",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "holding_address#0 (copy)",
        "next_coupon_rate_bps#0",
        "units#0 (copy)"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "next_coupon_rate_bps#0",
        "holding_address#0 (copy)",
        "units#0 (copy)"
      ]
    },
    "1791": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "op": "callsub account_units_value",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "next_coupon_rate_bps#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "next_coupon_rate_bps#0",
        "tmp%3#0"
      ]
    },
    "1794": {
      "op": "*",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "tmp%4#0"
      ]
    },
    "1795": {
      "op": "uncover 2",
      "stack_out": [
        "coupon_period#0",
        "tmp%4#0",
        "coupon_accrued_period#0"
      ]
    },
    "1797": {
      "op": "*",
      "defined_out": [
        "coupon_period#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "coupon_period#0",
        "tmp%5#0"
      ]
    },
    "1798": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "coupon_period#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "coupon_period#0",
        "tmp%5#0",
        "10000"
      ]
    },
    "1801": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "10000",
        "coupon_period#0"
      ]
    },
    "1803": {
      "op": "*",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1804": {
      "op": "/",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1805": {
      "retsub": true,
      "op": "retsub"
    },
    "1806": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.day_count_factor",
      "params": {
        "due_coupons#0": "uint64"
      },
      "block": "day_count_factor",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1809": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "coupon_accrued_period#0"
      ]
    },
    "1811": {
      "op": "dupn 4",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5"
      ]
    },
    "1813": {
      "op": "frame_dig -1",
      "defined_out": [
        "due_coupons#0 (copy)"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "due_coupons#0 (copy)"
      ]
    },
    "1815": {
      "op": "bnz day_count_factor_else_body@2",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5"
      ]
    },
    "1818": {
      "op": "intc_0 // 0"
    },
    "1819": {
      "op": "bytec 5 // \"issuance_date\""
    },
    "1821": {
      "op": "app_global_get_ex"
    },
    "1822": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists"
    },
    "1823": {
      "block": "day_count_factor_after_if_else@3",
      "stack_in": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "accruing_start_time#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "accruing_start_time#0",
        "tmp%1#0"
      ]
    },
    "1825": {
      "op": "dig 1",
      "defined_out": [
        "accruing_start_time#0",
        "accruing_start_time#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "accruing_start_time#0",
        "tmp%1#0",
        "accruing_start_time#0 (copy)"
      ]
    },
    "1827": {
      "op": "-",
      "defined_out": [
        "accruing_start_time#0",
        "coupon_accrued_period#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "accruing_start_time#0",
        "coupon_accrued_period#0"
      ]
    },
    "1828": {
      "op": "dup",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "accruing_start_time#0",
        "coupon_accrued_period#0",
        "coupon_accrued_period#0 (copy)"
      ]
    },
    "1829": {
      "op": "cover 2",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "accruing_start_time#0",
        "coupon_accrued_period#0"
      ]
    },
    "1831": {
      "op": "frame_bury 0",
      "defined_out": [
        "accruing_start_time#0",
        "coupon_accrued_period#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "accruing_start_time#0"
      ]
    },
    "1833": {
      "op": "frame_dig -1",
      "defined_out": [
        "accruing_start_time#0",
        "coupon_accrued_period#0",
        "due_coupons#0 (copy)"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "accruing_start_time#0",
        "due_coupons#0 (copy)"
      ]
    },
    "1835": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.next_coupon_due_date",
      "op": "callsub next_coupon_due_date",
      "defined_out": [
        "accruing_start_time#0",
        "coupon_accrued_period#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "accruing_start_time#0",
        "tmp%2#0"
      ]
    },
    "1838": {
      "op": "swap",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "tmp%2#0",
        "accruing_start_time#0"
      ]
    },
    "1839": {
      "op": "-",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "coupon_period#0"
      ]
    },
    "1840": {
      "op": "dup",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "coupon_period#0",
        "coupon_period#0"
      ]
    },
    "1841": {
      "op": "frame_bury 3",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "coupon_period#0"
      ]
    },
    "1843": {
      "op": "intc_0 // 0",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "coupon_period#0",
        "0"
      ]
    },
    "1844": {
      "op": "bytec 13 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "coupon_accrued_period#0",
        "coupon_period#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "coupon_period#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "1846": {
      "op": "app_global_get_ex",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "coupon_period#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1847": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "coupon_period#0",
        "maybe_value%1#0"
      ]
    },
    "1848": {
      "op": "swap",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "coupon_period#5",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "maybe_value%1#0",
        "coupon_period#5"
      ]
    },
    "1849": {
      "op": "frame_bury 4",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "coupon_period#5",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_accrued_period#0",
        "maybe_value%1#0"
      ]
    },
    "1851": {
      "op": "swap",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_period#0",
        "coupon_period#5",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "maybe_value%1#0",
        "coupon_accrued_period#5"
      ]
    },
    "1852": {
      "op": "frame_bury 1",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "maybe_value%1#0"
      ]
    },
    "1854": {
      "op": "bnz day_count_factor_after_if_else@5",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5"
      ]
    },
    "1857": {
      "op": "frame_dig 0"
    },
    "1859": {
      "op": "intc 6 // 86400"
    },
    "1861": {
      "op": "/"
    },
    "1862": {
      "op": "frame_dig 3"
    },
    "1864": {
      "op": "intc 6 // 86400"
    },
    "1866": {
      "op": "/"
    },
    "1867": {
      "op": "frame_bury 4"
    },
    "1869": {
      "op": "frame_bury 1"
    },
    "1871": {
      "block": "day_count_factor_after_if_else@5",
      "stack_in": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "coupon_period#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_period#0"
      ]
    },
    "1873": {
      "op": "frame_dig 1",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_period#0",
        "coupon_accrued_period#0"
      ]
    },
    "1875": {
      "op": "itob",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_period#0",
        "val_as_bytes%0#0"
      ]
    },
    "1876": {
      "op": "swap",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "val_as_bytes%0#0",
        "coupon_period#0"
      ]
    },
    "1877": {
      "op": "itob",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1878": {
      "op": "concat",
      "defined_out": [
        "coupon_accrued_period#0",
        "coupon_period#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1879": {
      "op": "frame_bury 0"
    },
    "1881": {
      "retsub": true,
      "op": "retsub"
    },
    "1882": {
      "block": "day_count_factor_else_body@2",
      "stack_in": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "coupon_due_date#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "coupon_due_date#0"
      ]
    },
    "1883": {
      "op": "frame_bury 2",
      "defined_out": [
        "coupon_due_date#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5"
      ]
    },
    "1885": {
      "op": "frame_dig -1",
      "defined_out": [
        "coupon_due_date#0",
        "due_coupons#0 (copy)"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "due_coupons#0 (copy)"
      ]
    },
    "1887": {
      "op": "bz day_count_factor_after_if_else@8",
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5"
      ]
    },
    "1890": {
      "op": "frame_dig -1"
    },
    "1892": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.coupon_due_date",
      "op": "callsub coupon_due_date"
    },
    "1895": {
      "op": "frame_bury 2"
    },
    "1897": {
      "block": "day_count_factor_after_if_else@8",
      "stack_in": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "accruing_start_time#0"
      ],
      "stack_out": [
        "coupon_accrued_period#0",
        "coupon_accrued_period#5",
        "coupon_due_date#0",
        "coupon_period#0",
        "coupon_period#5",
        "accruing_start_time#0"
      ]
    },
    "1899": {
      "op": "b day_count_factor_after_if_else@3"
    },
    "1902": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.coupon_due_date",
      "params": {
        "coupon#0": "uint64"
      },
      "block": "coupon_due_date",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1905": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "1907": {
      "op": "frame_dig -1",
      "defined_out": [
        "3",
        "coupon#0 (copy)"
      ],
      "stack_out": [
        "3",
        "coupon#0 (copy)"
      ]
    },
    "1909": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1910": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "1911": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1912": {
      "op": "bytec 11 // 0x74696d654576656e7473",
      "defined_out": [
        "0x74696d654576656e7473",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x74696d654576656e7473"
      ]
    },
    "1914": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1915": {
      "error": "check self.time_events exists",
      "op": "assert // check self.time_events exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0"
      ]
    },
    "1916": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1919": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ]
    },
    "1920": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0",
        "8"
      ]
    },
    "1921": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1922": {
      "op": "intc_2 // 8",
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "8"
      ]
    },
    "1923": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1924": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1925": {
      "retsub": true,
      "op": "retsub"
    },
    "1926": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.next_coupon_due_date",
      "params": {
        "due_coupons#0": "uint64"
      },
      "block": "next_coupon_due_date",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1929": {
      "op": "intc_0 // 0"
    },
    "1930": {
      "op": "dup"
    },
    "1931": {
      "op": "bytec 4 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\"",
        "0",
        "coupon_due_date#0"
      ],
      "stack_out": [
        "coupon_due_date#0",
        "0",
        "\"total_coupons\""
      ]
    },
    "1933": {
      "op": "app_global_get_ex",
      "defined_out": [
        "coupon_due_date#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "coupon_due_date#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1934": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "coupon_due_date#0",
        "maybe_value%0#0"
      ]
    },
    "1935": {
      "op": "frame_dig -1",
      "defined_out": [
        "coupon_due_date#0",
        "due_coupons#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "coupon_due_date#0",
        "maybe_value%0#0",
        "due_coupons#0 (copy)"
      ]
    },
    "1937": {
      "op": ">",
      "defined_out": [
        "coupon_due_date#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "coupon_due_date#0",
        "tmp%0#0"
      ]
    },
    "1938": {
      "op": "bz next_coupon_due_date_after_if_else@2",
      "stack_out": [
        "coupon_due_date#0"
      ]
    },
    "1941": {
      "op": "frame_dig -1"
    },
    "1943": {
      "op": "intc_1 // 1"
    },
    "1944": {
      "op": "+"
    },
    "1945": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.coupon_due_date",
      "op": "callsub coupon_due_date"
    },
    "1948": {
      "op": "frame_bury 0"
    },
    "1950": {
      "block": "next_coupon_due_date_after_if_else@2",
      "stack_in": [
        "coupon_due_date#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "coupon_due_date#0"
      ],
      "stack_out": [
        "coupon_due_date#0",
        "coupon_due_date#0"
      ]
    },
    "1952": {
      "op": "swap"
    },
    "1953": {
      "retsub": true,
      "op": "retsub"
    },
    "1954": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "uint64"
      },
      "block": "account_units_value",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1957": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1958": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1960": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1961": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1962": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1963": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1966": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1967": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%2#0",
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "units#0 (copy)"
      ]
    },
    "1969": {
      "op": "*",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1970": {
      "retsub": true,
      "op": "retsub"
    },
    "1971": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.pay_coupon",
      "params": {
        "holding_address#0": "bytes",
        "payment_info#0": "bytes"
      },
      "block": "pay_coupon",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1974": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1975": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "1976": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1977": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "1978": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "100"
      ]
    },
    "1979": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1980": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "1981": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1984": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "1987": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1988": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1990": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "1991": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1993": {
      "op": "box_len",
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1994": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "1996": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "1997": {
      "op": "dup",
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1998": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1999": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%0#0"
      ]
    },
    "2000": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2",
        "tmp%2#0"
      ]
    },
    "2003": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2",
        "units#0"
      ]
    },
    "2004": {
      "op": "dup",
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2",
        "units#0",
        "units#0"
      ]
    },
    "2005": {
      "op": "cover 2",
      "defined_out": [
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "tmp%0#2",
        "units#0"
      ]
    },
    "2007": {
      "error": "No D-ASA units",
      "op": "assert // No D-ASA units",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "tmp%0#2"
      ]
    },
    "2008": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.count_due_coupons",
      "op": "callsub count_due_coupons",
      "defined_out": [
        "due_coupons#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "tmp%0#2",
        "due_coupons#0"
      ]
    },
    "2011": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "due_coupons#0",
        "tmp%0#2"
      ]
    },
    "2012": {
      "op": "box_get",
      "defined_out": [
        "due_coupons#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "due_coupons#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2013": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "due_coupons#0",
        "maybe_value%1#0"
      ]
    },
    "2014": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds",
      "defined_out": [
        "due_coupons#0",
        "tmp%0#2",
        "tmp%5#0",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "due_coupons#0",
        "tmp%5#0"
      ]
    },
    "2017": {
      "op": "btoi",
      "defined_out": [
        "account_paid_coupons#0",
        "due_coupons#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "due_coupons#0",
        "account_paid_coupons#0"
      ]
    },
    "2018": {
      "op": "dup"
    },
    "2019": {
      "op": "uncover 2",
      "defined_out": [
        "account_paid_coupons#0",
        "due_coupons#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "account_paid_coupons#0",
        "due_coupons#0"
      ]
    },
    "2021": {
      "op": "dig 1",
      "defined_out": [
        "account_paid_coupons#0",
        "account_paid_coupons#0 (copy)",
        "due_coupons#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "account_paid_coupons#0",
        "due_coupons#0",
        "account_paid_coupons#0 (copy)"
      ]
    },
    "2023": {
      "op": ">",
      "defined_out": [
        "account_paid_coupons#0",
        "tmp%0#2",
        "tmp%6#0",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "account_paid_coupons#0",
        "tmp%6#0"
      ]
    },
    "2024": {
      "error": "No due coupon to pay",
      "op": "assert // No due coupon to pay",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "account_paid_coupons#0"
      ]
    },
    "2025": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.all_due_coupons_paid",
      "op": "callsub all_due_coupons_paid",
      "defined_out": [
        "account_paid_coupons#0",
        "tmp%0#2",
        "tmp%7#0",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "tmp%7#0"
      ]
    },
    "2028": {
      "error": "Pending due coupon payment",
      "op": "assert // Pending due coupon payment",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0"
      ]
    },
    "2029": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "holding_address#0 (copy)"
      ]
    },
    "2031": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.is_payment_executable",
      "op": "callsub is_payment_executable",
      "defined_out": [
        "account_paid_coupons#0",
        "tmp%0#2",
        "tmp%8#0",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "tmp%8#0"
      ]
    },
    "2034": {
      "op": "bz pay_coupon_else_body@2",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0"
      ]
    },
    "2037": {
      "op": "frame_dig -2"
    },
    "2039": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value",
      "op": "callsub account_total_units_value"
    },
    "2042": {
      "op": "frame_dig 2"
    },
    "2044": {
      "op": "intc_1 // 1"
    },
    "2045": {
      "op": "+"
    },
    "2046": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.coupon_interest_amount",
      "op": "callsub coupon_interest_amount"
    },
    "2049": {
      "op": "dupn 2"
    },
    "2051": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_enough_funds",
      "op": "callsub assert_enough_funds"
    },
    "2054": {
      "op": "frame_dig 0"
    },
    "2056": {
      "op": "box_get"
    },
    "2057": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "2058": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds"
    },
    "2061": {
      "op": "swap"
    },
    "2062": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.pay",
      "op": "callsub pay"
    },
    "2065": {
      "block": "pay_coupon_after_if_else@3",
      "stack_in": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2"
      ]
    },
    "2067": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "2068": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2069": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "maybe_value%3#0"
      ]
    },
    "2070": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#2",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "tmp%14#0"
      ]
    },
    "2073": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#2",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "tmp%15#0"
      ]
    },
    "2074": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#2",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "tmp%15#0",
        "1"
      ]
    },
    "2075": {
      "op": "+",
      "defined_out": [
        "tmp%0#2",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "to_encode%0#0"
      ]
    },
    "2076": {
      "op": "itob",
      "defined_out": [
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ]
    },
    "2077": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "tmp%0#2 (copy)"
      ]
    },
    "2079": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2080": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%4#0"
      ]
    },
    "2081": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "2082": {
      "op": "replace2 48",
      "defined_out": [
        "tmp%0#2",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "tmp%0#2",
        "updated_data%0#0"
      ]
    },
    "2084": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0"
      ]
    },
    "2085": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "0"
      ]
    },
    "2086": {
      "op": "bytec 24 // \"paid_coupon_units\"",
      "defined_out": [
        "\"paid_coupon_units\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "0",
        "\"paid_coupon_units\""
      ]
    },
    "2088": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2089": {
      "error": "check self.paid_coupon_units exists",
      "op": "assert // check self.paid_coupon_units exists",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "maybe_value%5#0"
      ]
    },
    "2090": {
      "op": "frame_dig 1",
      "defined_out": [
        "maybe_value%5#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "maybe_value%5#0",
        "units#0"
      ]
    },
    "2092": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "new_state_value%0#0"
      ]
    },
    "2093": {
      "op": "bytec 24 // \"paid_coupon_units\"",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "new_state_value%0#0",
        "\"paid_coupon_units\""
      ]
    },
    "2095": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0",
        "\"paid_coupon_units\"",
        "new_state_value%0#0"
      ]
    },
    "2096": {
      "op": "app_global_put",
      "defined_out": [
        "payment_amount#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0"
      ]
    },
    "2097": {
      "op": "itob",
      "defined_out": [
        "tmp%0#2",
        "units#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "val_as_bytes%1#0"
      ]
    },
    "2098": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#2",
        "to_encode%1#0",
        "units#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "val_as_bytes%1#0",
        "to_encode%1#0"
      ]
    },
    "2100": {
      "op": "itob",
      "defined_out": [
        "tmp%0#2",
        "units#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "2101": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2102": {
      "op": "bytec 31 // 0x0012",
      "defined_out": [
        "0x0012",
        "encoded_tuple_buffer%2#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "encoded_tuple_buffer%2#0",
        "0x0012"
      ]
    },
    "2104": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2105": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "payment_info#0 (copy)",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "encoded_tuple_buffer%3#0",
        "payment_info#0 (copy)"
      ]
    },
    "2107": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#2",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2108": {
      "op": "frame_bury 0"
    },
    "2110": {
      "retsub": true,
      "op": "retsub"
    },
    "2111": {
      "block": "pay_coupon_else_body@2",
      "stack_in": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "payment_amount#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "units#0",
        "account_paid_coupons#0",
        "payment_amount#0"
      ]
    },
    "2112": {
      "op": "b pay_coupon_after_if_else@3"
    },
    "2115": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.all_due_coupons_paid",
      "params": {
        "due_coupons#0": "uint64"
      },
      "block": "all_due_coupons_paid",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2118": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2119": {
      "op": "bytec 24 // \"paid_coupon_units\"",
      "defined_out": [
        "\"paid_coupon_units\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"paid_coupon_units\""
      ]
    },
    "2121": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2122": {
      "error": "check self.paid_coupon_units exists",
      "op": "assert // check self.paid_coupon_units exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "2124": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "2125": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2126": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2127": {
      "op": "frame_dig -1",
      "defined_out": [
        "due_coupons#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "due_coupons#0 (copy)"
      ]
    },
    "2129": {
      "op": "*",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "2130": {
      "op": ">=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2131": {
      "retsub": true,
      "op": "retsub"
    },
    "2132": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.is_payment_executable",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "is_payment_executable",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2135": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2136": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2138": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2139": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2140": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2141": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2142": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2145": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "2146": {
      "op": "bytec 7 // \"settlement_asset_id\"",
      "defined_out": [
        "\"settlement_asset_id\"",
        "0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0",
        "\"settlement_asset_id\""
      ]
    },
    "2148": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2149": {
      "error": "check self.settlement_asset_id exists",
      "op": "assert // check self.settlement_asset_id exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "2150": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2152": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2154": {
      "op": "bz is_payment_executable_bool_false@3",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2157": {
      "op": "frame_dig 0"
    },
    "2159": {
      "op": "box_get"
    },
    "2160": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "2161": {
      "op": "intc 4 // 448"
    },
    "2163": {
      "op": "getbit"
    },
    "2164": {
      "op": "bytec 10 // 0x00"
    },
    "2166": {
      "op": "intc_0 // 0"
    },
    "2167": {
      "op": "uncover 2"
    },
    "2169": {
      "op": "setbit"
    },
    "2170": {
      "op": "intc_0 // 0"
    },
    "2171": {
      "op": "getbit"
    },
    "2172": {
      "op": "bnz is_payment_executable_bool_false@3"
    },
    "2175": {
      "op": "intc_1 // 1"
    },
    "2176": {
      "block": "is_payment_executable_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "and_result%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "and_result%0#0"
      ]
    },
    "2177": {
      "retsub": true,
      "op": "retsub"
    },
    "2178": {
      "block": "is_payment_executable_bool_false@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2179": {
      "op": "b is_payment_executable_bool_merge@4"
    },
    "2182": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "account_total_units_value",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2185": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2186": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2188": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2189": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2190": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2191": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2194": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2195": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "holding_address#0 (copy)"
      ]
    },
    "2197": {
      "op": "swap",
      "stack_out": [
        "holding_address#0 (copy)",
        "tmp%2#0"
      ]
    },
    "2198": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "op": "callsub account_units_value",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2201": {
      "retsub": true,
      "op": "retsub"
    },
    "2202": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.coupon_interest_amount",
      "params": {
        "principal_amount#0": "uint64",
        "coupon#0": "uint64"
      },
      "block": "coupon_interest_amount",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2205": {
      "op": "frame_dig -1",
      "defined_out": [
        "coupon#0 (copy)"
      ],
      "stack_out": [
        "coupon#0 (copy)"
      ]
    },
    "2207": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "coupon#0 (copy)"
      ],
      "stack_out": [
        "coupon#0 (copy)",
        "1"
      ]
    },
    "2208": {
      "op": "-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2209": {
      "op": "bytec 17 // 0x636f75706f6e5261746573",
      "defined_out": [
        "0x636f75706f6e5261746573",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x636f75706f6e5261746573"
      ]
    },
    "2211": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2212": {
      "error": "check self.coupon_rates exists",
      "op": "assert // check self.coupon_rates exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2213": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2216": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%0#0"
      ]
    },
    "2217": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%0#0",
        "2"
      ]
    },
    "2219": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "2220": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "2"
      ]
    },
    "2222": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2223": {
      "op": "btoi",
      "defined_out": [
        "coupon_rate_bps#0"
      ],
      "stack_out": [
        "coupon_rate_bps#0"
      ]
    },
    "2224": {
      "op": "frame_dig -2",
      "defined_out": [
        "coupon_rate_bps#0",
        "principal_amount#0 (copy)"
      ],
      "stack_out": [
        "coupon_rate_bps#0",
        "principal_amount#0 (copy)"
      ]
    },
    "2226": {
      "op": "*",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2227": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "10000"
      ]
    },
    "2230": {
      "op": "/",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2231": {
      "retsub": true,
      "op": "retsub"
    },
    "2232": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_enough_funds",
      "params": {
        "payment_amount#0": "uint64"
      },
      "block": "assert_enough_funds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2235": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2237": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2238": {
      "op": "bytec 7 // \"settlement_asset_id\"",
      "defined_out": [
        "\"settlement_asset_id\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"settlement_asset_id\""
      ]
    },
    "2240": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2241": {
      "error": "check self.settlement_asset_id exists",
      "op": "assert // check self.settlement_asset_id exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2242": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "2244": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "2245": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment_amount#0 (copy)",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "payment_amount#0 (copy)"
      ]
    },
    "2247": {
      "op": ">=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2248": {
      "error": "Not enough funds for the payment",
      "op": "assert // Not enough funds for the payment",
      "stack_out": []
    },
    "2249": {
      "retsub": true,
      "op": "retsub"
    },
    "2250": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.pay",
      "params": {
        "receiver#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "pay",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2253": {
      "op": "itxn_begin"
    },
    "2254": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2256": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "2257": {
      "op": "bytec 7 // \"settlement_asset_id\"",
      "defined_out": [
        "\"settlement_asset_id\"",
        "0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0",
        "\"settlement_asset_id\""
      ]
    },
    "2259": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2260": {
      "error": "check self.settlement_asset_id exists",
      "op": "assert // check self.settlement_asset_id exists",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "2261": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "2263": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "2265": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "receiver#0 (copy)"
      ]
    },
    "2267": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "2269": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2271": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "axfer"
      ]
    },
    "2273": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2275": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2277": {
      "op": "itxn_submit"
    },
    "2278": {
      "retsub": true,
      "op": "retsub"
    },
    "2279": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.pay_principal",
      "params": {
        "holding_address#0": "bytes",
        "payment_info#0": "bytes"
      },
      "block": "pay_principal",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2282": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2283": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "2284": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2285": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "2286": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "100"
      ]
    },
    "2287": {
      "op": "==",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "2288": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "2289": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "2292": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "2295": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2296": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2298": {
      "op": "concat",
      "defined_out": [
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4"
      ]
    },
    "2299": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#4",
        "tmp%0#4 (copy)"
      ],
      "stack_out": [
        "tmp%0#4",
        "tmp%0#4",
        "tmp%0#4 (copy)"
      ]
    },
    "2301": {
      "op": "box_len",
      "stack_out": [
        "tmp%0#4",
        "tmp%0#4",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2302": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#4",
        "tmp%0#4",
        "maybe_exists%0#0"
      ]
    },
    "2304": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#4",
        "tmp%0#4"
      ]
    },
    "2305": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2306": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#4",
        "maybe_value%0#0"
      ]
    },
    "2307": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#4",
        "tmp%2#2"
      ],
      "stack_out": [
        "tmp%0#4",
        "tmp%2#2"
      ]
    },
    "2310": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#4",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#4",
        "units#0"
      ]
    },
    "2311": {
      "error": "No D-ASA units",
      "op": "assert // No D-ASA units",
      "stack_out": [
        "tmp%0#4"
      ]
    },
    "2312": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#4",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%0#4",
        "tmp%4#1"
      ]
    },
    "2314": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#4",
        "tmp%4#1",
        "0"
      ]
    },
    "2315": {
      "op": "bytec 6 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "tmp%0#4",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%0#4",
        "tmp%4#1",
        "0",
        "\"maturity_date\""
      ]
    },
    "2317": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#1",
        "tmp%0#4",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%0#4",
        "tmp%4#1",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "2318": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "tmp%0#4",
        "tmp%4#1",
        "maybe_value%1#1"
      ]
    },
    "2319": {
      "op": ">=",
      "defined_out": [
        "tmp%0#4",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#4",
        "tmp%5#0"
      ]
    },
    "2320": {
      "error": "Not mature",
      "op": "assert // Not mature",
      "stack_out": [
        "tmp%0#4"
      ]
    },
    "2321": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.count_due_coupons",
      "op": "callsub count_due_coupons",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "tmp%0#0"
      ]
    },
    "2324": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.all_due_coupons_paid",
      "op": "callsub all_due_coupons_paid",
      "defined_out": [
        "tmp%0#4",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#4",
        "tmp%1#0"
      ]
    },
    "2327": {
      "error": "Pending due coupon payment",
      "op": "assert // Pending due coupon payment",
      "stack_out": [
        "tmp%0#4"
      ]
    },
    "2328": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#4",
        "holding_address#0 (copy)"
      ]
    },
    "2330": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.is_payment_executable",
      "op": "callsub is_payment_executable",
      "defined_out": [
        "tmp%0#4",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#4",
        "tmp%2#0"
      ]
    },
    "2333": {
      "op": "bz pay_principal_else_body@2",
      "stack_out": [
        "tmp%0#4"
      ]
    },
    "2336": {
      "op": "frame_dig -2"
    },
    "2338": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value",
      "op": "callsub account_total_units_value"
    },
    "2341": {
      "op": "dupn 2"
    },
    "2343": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_enough_funds",
      "op": "callsub assert_enough_funds"
    },
    "2346": {
      "op": "frame_dig 0"
    },
    "2348": {
      "op": "box_get"
    },
    "2349": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "2350": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds"
    },
    "2353": {
      "op": "swap"
    },
    "2354": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.pay",
      "op": "callsub pay"
    },
    "2357": {
      "block": "pay_principal_after_if_else@3",
      "stack_in": [
        "tmp%0#4",
        "payment_amount#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "0"
      ]
    },
    "2358": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "2359": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2360": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "maybe_value%0#1"
      ]
    },
    "2361": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "maybe_value%0#1",
        "tmp%0#4"
      ]
    },
    "2363": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%0#4",
        "tmp%0#4 (copy)"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "maybe_value%0#1",
        "tmp%0#4 (copy)",
        "tmp%0#4 (copy)"
      ]
    },
    "2364": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "maybe_value%0#1",
        "tmp%0#4 (copy)"
      ]
    },
    "2366": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#1",
        "maybe_value%1#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "maybe_value%0#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2367": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "maybe_value%0#1",
        "maybe_value%1#0"
      ]
    },
    "2368": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%0#4",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "maybe_value%0#1",
        "tmp%1#1"
      ]
    },
    "2371": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%0#4",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "maybe_value%0#1",
        "tmp%2#1"
      ]
    },
    "2372": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "new_state_value%0#0"
      ]
    },
    "2373": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "new_state_value%0#0",
        "\"circulating_units\""
      ]
    },
    "2374": {
      "op": "swap",
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "\"circulating_units\"",
        "new_state_value%0#0"
      ]
    },
    "2375": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4"
      ]
    },
    "2376": {
      "op": "dup",
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "tmp%0#4 (copy)"
      ]
    },
    "2377": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2378": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "maybe_value%2#0"
      ]
    },
    "2379": {
      "op": "bytec 8 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "maybe_value%2#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "maybe_value%2#0",
        "0x0000000000000000"
      ]
    },
    "2381": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%0#4",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0",
        "tmp%0#4",
        "updated_data%0#0"
      ]
    },
    "2383": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0"
      ]
    },
    "2384": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units",
      "op": "callsub end_if_no_circulating_units",
      "defined_out": [
        "payment_amount#0",
        "tmp%0#4"
      ]
    },
    "2387": {
      "op": "itob",
      "defined_out": [
        "tmp%0#4",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#4",
        "val_as_bytes%0#0"
      ]
    },
    "2388": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#4",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#4",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "2390": {
      "op": "itob",
      "defined_out": [
        "tmp%0#4",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#4",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2391": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2392": {
      "op": "bytec 31 // 0x0012",
      "defined_out": [
        "0x0012",
        "encoded_tuple_buffer%2#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "encoded_tuple_buffer%2#0",
        "0x0012"
      ]
    },
    "2394": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2395": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "payment_info#0 (copy)",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "encoded_tuple_buffer%3#0",
        "payment_info#0 (copy)"
      ]
    },
    "2397": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2398": {
      "op": "swap"
    },
    "2399": {
      "retsub": true,
      "op": "retsub"
    },
    "2400": {
      "block": "pay_principal_else_body@2",
      "stack_in": [
        "tmp%0#4"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "payment_amount#0"
      ],
      "stack_out": [
        "tmp%0#4",
        "payment_amount#0"
      ]
    },
    "2401": {
      "op": "b pay_principal_after_if_else@3"
    },
    "2404": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units",
      "params": {},
      "block": "end_if_no_circulating_units",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2407": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2408": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_units\""
      ]
    },
    "2409": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2410": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2411": {
      "op": "bnz end_if_no_circulating_units_after_if_else@2",
      "stack_out": []
    },
    "2414": {
      "op": "bytec_3 // \"status\""
    },
    "2415": {
      "op": "intc 7 // 200"
    },
    "2417": {
      "op": "app_global_put"
    },
    "2418": {
      "block": "end_if_no_circulating_units_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2419": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.get_account_units_current_value",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "bytes"
      },
      "block": "get_account_units_current_value",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2422": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2423": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0"
      ]
    },
    "2425": {
      "op": "dupn 5",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "2427": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "0"
      ]
    },
    "2428": {
      "op": "bytec 9 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "2430": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2431": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_value%0#0"
      ]
    },
    "2432": {
      "op": "bz get_account_units_current_value_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "2435": {
      "op": "global LatestTimestamp"
    },
    "2437": {
      "op": "intc_0 // 0"
    },
    "2438": {
      "op": "bytec 9 // \"primary_distribution_opening_date\""
    },
    "2440": {
      "op": "app_global_get_ex"
    },
    "2441": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists"
    },
    "2442": {
      "op": ">="
    },
    "2443": {
      "op": "bz get_account_units_current_value_bool_false@3"
    },
    "2446": {
      "op": "intc_1 // 1"
    },
    "2447": {
      "block": "get_account_units_current_value_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "and_result%0#0"
      ],
      "error": "Primary distribution not yet executed",
      "op": "assert // Primary distribution not yet executed",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "2448": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "0x52333023"
      ]
    },
    "2449": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2451": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%0#0"
      ]
    },
    "2452": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2453": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%0#0"
      ]
    },
    "2455": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2456": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_exists%0#0"
      ]
    },
    "2458": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "2459": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "units#0 (copy)"
      ]
    },
    "2461": {
      "op": "bytec 8 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "tmp%0#0",
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "units#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "2463": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%3#0"
      ]
    },
    "2464": {
      "op": "bz get_account_units_current_value_bool_false@7",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "2467": {
      "op": "frame_dig 0"
    },
    "2469": {
      "op": "box_get"
    },
    "2470": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "2471": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds"
    },
    "2474": {
      "op": "btoi"
    },
    "2475": {
      "op": "itob"
    },
    "2476": {
      "op": "frame_dig -1"
    },
    "2478": {
      "op": "b>="
    },
    "2479": {
      "op": "bz get_account_units_current_value_bool_false@7"
    },
    "2482": {
      "op": "intc_1 // 1"
    },
    "2483": {
      "block": "get_account_units_current_value_bool_merge@8",
      "stack_in": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "and_result%1#0"
      ],
      "error": "Invalid amount of units for the account",
      "op": "assert // Invalid amount of units for the account",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "2484": {
      "op": "frame_dig -1",
      "defined_out": [
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "units#0 (copy)"
      ]
    },
    "2486": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "2487": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "2488": {
      "op": "frame_bury 6",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "2490": {
      "op": "frame_dig -2",
      "defined_out": [
        "holding_address#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%9#0",
        "holding_address#0 (copy)"
      ]
    },
    "2492": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "holding_address#0 (copy)",
        "tmp%9#0"
      ]
    },
    "2493": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "op": "callsub account_units_value",
      "defined_out": [
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0"
      ]
    },
    "2496": {
      "op": "frame_bury 1",
      "defined_out": [
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "2498": {
      "op": "intc_0 // 0",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "accrued_interest#0"
      ]
    },
    "2499": {
      "op": "frame_bury 2",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "2501": {
      "op": "intc_0 // 0",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "numerator#0"
      ]
    },
    "2502": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "2504": {
      "op": "intc_0 // 0",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "denominator#0"
      ]
    },
    "2505": {
      "op": "frame_bury 3",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "2507": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.count_due_coupons",
      "op": "callsub count_due_coupons",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "due_coupons#0"
      ]
    },
    "2510": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "due_coupons#0",
        "due_coupons#0"
      ]
    },
    "2511": {
      "op": "frame_bury 4",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "due_coupons#0"
      ]
    },
    "2513": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "due_coupons#0",
        "holding_address#0 (copy)"
      ]
    },
    "2515": {
      "op": "dig 1",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "due_coupons#0 (copy)",
        "holding_address#0 (copy)",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "due_coupons#0",
        "holding_address#0 (copy)",
        "due_coupons#0 (copy)"
      ]
    },
    "2517": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.assert_no_pending_coupon_payment",
      "op": "callsub assert_no_pending_coupon_payment",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "due_coupons#0"
      ]
    },
    "2520": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.is_accruing_interest",
      "op": "callsub is_accruing_interest",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "2523": {
      "op": "bz get_account_units_current_value_after_if_else@10",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "2526": {
      "op": "frame_dig 4"
    },
    "2528": {
      "op": "dup"
    },
    "2529": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.day_count_factor",
      "op": "callsub day_count_factor"
    },
    "2532": {
      "op": "frame_dig -2"
    },
    "2534": {
      "op": "frame_dig 6"
    },
    "2536": {
      "op": "uncover 3"
    },
    "2538": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.accrued_interest_amount",
      "op": "callsub accrued_interest_amount"
    },
    "2541": {
      "op": "frame_bury 2"
    },
    "2543": {
      "op": "dup"
    },
    "2544": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "2547": {
      "op": "btoi"
    },
    "2548": {
      "op": "frame_bury 5"
    },
    "2550": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "2553": {
      "op": "btoi"
    },
    "2554": {
      "op": "frame_bury 3"
    },
    "2556": {
      "block": "get_account_units_current_value_after_if_else@10",
      "stack_in": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "account_units_nominal_value#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0"
      ]
    },
    "2558": {
      "op": "itob",
      "defined_out": [
        "account_units_nominal_value#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "2559": {
      "op": "frame_dig 2",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "accrued_interest#0"
      ]
    },
    "2561": {
      "op": "itob",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2562": {
      "op": "frame_dig 5",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "numerator#0"
      ]
    },
    "2564": {
      "op": "itob",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "2565": {
      "op": "frame_dig 3",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "denominator#0"
      ]
    },
    "2567": {
      "op": "itob",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "2568": {
      "op": "concat",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "encoded_tuple_buffer%2#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2569": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2571": {
      "op": "concat",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "numerator#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2572": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2573": {
      "op": "concat",
      "defined_out": [
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "encoded_tuple_buffer%6#0",
        "numerator#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2574": {
      "op": "frame_bury 0"
    },
    "2576": {
      "retsub": true,
      "op": "retsub"
    },
    "2577": {
      "block": "get_account_units_current_value_bool_false@7",
      "stack_in": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "and_result%1#0"
      ]
    },
    "2578": {
      "op": "b get_account_units_current_value_bool_merge@8"
    },
    "2581": {
      "block": "get_account_units_current_value_bool_false@3",
      "stack_in": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "due_coupons#0",
        "numerator#0",
        "tmp%9#0",
        "and_result%0#0"
      ]
    },
    "2582": {
      "op": "b get_account_units_current_value_bool_merge@4"
    },
    "2585": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.is_accruing_interest",
      "params": {
        "due_coupons#0": "uint64"
      },
      "block": "is_accruing_interest",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2588": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2589": {
      "op": "bytec 5 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"issuance_date\""
      ]
    },
    "2591": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2592": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2593": {
      "op": "bz is_accruing_interest_bool_false@4",
      "stack_out": []
    },
    "2596": {
      "op": "global LatestTimestamp"
    },
    "2598": {
      "op": "intc_0 // 0"
    },
    "2599": {
      "op": "bytec 5 // \"issuance_date\""
    },
    "2601": {
      "op": "app_global_get_ex"
    },
    "2602": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists"
    },
    "2603": {
      "op": ">="
    },
    "2604": {
      "op": "bz is_accruing_interest_bool_false@4"
    },
    "2607": {
      "op": "intc_0 // 0"
    },
    "2608": {
      "op": "bytec 4 // \"total_coupons\""
    },
    "2610": {
      "op": "app_global_get_ex"
    },
    "2611": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists"
    },
    "2612": {
      "op": "frame_dig -1"
    },
    "2614": {
      "op": ">"
    },
    "2615": {
      "op": "bz is_accruing_interest_bool_false@4"
    },
    "2618": {
      "op": "intc_1 // 1"
    },
    "2619": {
      "retsub": true,
      "op": "retsub"
    },
    "2620": {
      "block": "is_accruing_interest_bool_false@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2621": {
      "retsub": true,
      "op": "retsub"
    },
    "2622": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.get_coupon_rates",
      "params": {},
      "block": "get_coupon_rates",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2625": {
      "op": "bytec 32 // 0x0000"
    },
    "2627": {
      "op": "intc_0 // 0"
    },
    "2628": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0",
        "coupon_rates#0"
      ],
      "stack_out": [
        "coupon_rates#0",
        "0",
        "\"status\""
      ]
    },
    "2629": {
      "op": "app_global_get_ex",
      "defined_out": [
        "coupon_rates#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "coupon_rates#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2630": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "coupon_rates#0",
        "maybe_value%0#0"
      ]
    },
    "2631": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "coupon_rates#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "coupon_rates#0",
        "maybe_value%0#0",
        "100"
      ]
    },
    "2632": {
      "op": "==",
      "defined_out": [
        "coupon_rates#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "coupon_rates#0",
        "tmp%0#1"
      ]
    },
    "2633": {
      "op": "bz get_coupon_rates_after_if_else@2",
      "stack_out": [
        "coupon_rates#0"
      ]
    },
    "2636": {
      "op": "bytec 17 // 0x636f75706f6e5261746573"
    },
    "2638": {
      "op": "box_get"
    },
    "2639": {
      "op": "swap"
    },
    "2640": {
      "op": "frame_bury 0"
    },
    "2642": {
      "error": "check self.coupon_rates exists",
      "op": "assert // check self.coupon_rates exists"
    },
    "2643": {
      "block": "get_coupon_rates_after_if_else@2",
      "stack_in": [
        "coupon_rates#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "coupon_rates#0"
      ],
      "stack_out": [
        "coupon_rates#0",
        "coupon_rates#0"
      ]
    },
    "2645": {
      "op": "swap"
    },
    "2646": {
      "retsub": true,
      "op": "retsub"
    },
    "2647": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.get_payment_amount",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "get_payment_amount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2650": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "paid_coupons#0"
      ]
    },
    "2652": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "paid_coupons#0",
        "0x52333023"
      ]
    },
    "2653": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "paid_coupons#0",
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2655": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1"
      ]
    },
    "2656": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "2657": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2658": {
      "op": "bury 1",
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2660": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1"
      ]
    },
    "2661": {
      "op": "intc_0 // 0"
    },
    "2662": {
      "op": "dupn 4"
    },
    "2664": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0",
        "interest_amount#0",
        "principal_amount#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "interest_amount#0",
        "principal_amount#0",
        "0",
        "\"status\""
      ]
    },
    "2665": {
      "op": "app_global_get_ex",
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "interest_amount#0",
        "principal_amount#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2666": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "interest_amount#0",
        "principal_amount#0",
        "maybe_value%0#1"
      ]
    },
    "2667": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "interest_amount#0",
        "maybe_value%0#1",
        "principal_amount#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "interest_amount#0",
        "principal_amount#0",
        "maybe_value%0#1",
        "100"
      ]
    },
    "2668": {
      "op": "==",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0",
        "tmp%0#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "interest_amount#0",
        "principal_amount#0",
        "tmp%0#2"
      ]
    },
    "2669": {
      "op": "swap",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "tmp%0#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "interest_amount#0",
        "tmp%0#2",
        "principal_amount#9"
      ]
    },
    "2670": {
      "op": "cover 2",
      "defined_out": [
        "interest_amount#0",
        "interest_amount#9",
        "principal_amount#0",
        "principal_amount#9",
        "tmp%0#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9",
        "tmp%0#2"
      ]
    },
    "2672": {
      "op": "bz get_payment_amount_after_if_else@5",
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9"
      ]
    },
    "2675": {
      "op": "frame_dig 1"
    },
    "2677": {
      "op": "box_get"
    },
    "2678": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "2679": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds"
    },
    "2682": {
      "op": "btoi"
    },
    "2683": {
      "op": "dup"
    },
    "2684": {
      "op": "frame_bury 0"
    },
    "2686": {
      "op": "intc_0 // 0"
    },
    "2687": {
      "op": "bytec 4 // \"total_coupons\""
    },
    "2689": {
      "op": "app_global_get_ex"
    },
    "2690": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists"
    },
    "2691": {
      "op": "<"
    },
    "2692": {
      "op": "bz get_payment_amount_else_body@3"
    },
    "2695": {
      "op": "frame_dig -1"
    },
    "2697": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value",
      "op": "callsub account_total_units_value"
    },
    "2700": {
      "op": "frame_dig 0"
    },
    "2702": {
      "op": "intc_1 // 1"
    },
    "2703": {
      "op": "+"
    },
    "2704": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.coupon_interest_amount",
      "op": "callsub coupon_interest_amount"
    },
    "2707": {
      "op": "frame_bury 2"
    },
    "2709": {
      "block": "get_payment_amount_after_if_else@4",
      "stack_in": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "principal_amount#9"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9",
        "principal_amount#9"
      ]
    },
    "2711": {
      "op": "frame_bury 4",
      "defined_out": [
        "principal_amount#9"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9"
      ]
    },
    "2713": {
      "op": "frame_dig 2",
      "defined_out": [
        "interest_amount#9",
        "principal_amount#9"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9",
        "interest_amount#9"
      ]
    },
    "2715": {
      "op": "frame_bury 5",
      "defined_out": [
        "interest_amount#9",
        "principal_amount#9"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9"
      ]
    },
    "2717": {
      "block": "get_payment_amount_after_if_else@5",
      "stack_in": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "principal_amount#0"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9",
        "principal_amount#0"
      ]
    },
    "2719": {
      "op": "frame_dig 5",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9",
        "principal_amount#0",
        "interest_amount#0"
      ]
    },
    "2721": {
      "op": "itob",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9",
        "principal_amount#0",
        "val_as_bytes%0#0"
      ]
    },
    "2722": {
      "op": "swap",
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9",
        "val_as_bytes%0#0",
        "principal_amount#0"
      ]
    },
    "2723": {
      "op": "itob",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2724": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "interest_amount#0",
        "principal_amount#0"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2725": {
      "op": "frame_bury 0"
    },
    "2727": {
      "retsub": true,
      "op": "retsub"
    },
    "2728": {
      "block": "get_payment_amount_else_body@3",
      "stack_in": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9",
        "holding_address#0 (copy)"
      ]
    },
    "2730": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value",
      "op": "callsub account_total_units_value",
      "defined_out": [
        "principal_amount#0"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9",
        "principal_amount#0"
      ]
    },
    "2733": {
      "op": "frame_bury 3",
      "defined_out": [
        "principal_amount#0"
      ],
      "stack_out": [
        "paid_coupons#0",
        "tmp%0#1",
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#9",
        "interest_amount#9"
      ]
    },
    "2735": {
      "op": "b get_payment_amount_after_if_else@4"
    },
    "2738": {
      "subroutine": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.get_coupons_status",
      "params": {},
      "block": "get_coupons_status",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2741": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.count_due_coupons",
      "op": "callsub count_due_coupons",
      "defined_out": [
        "due_coupons#0"
      ],
      "stack_out": [
        "due_coupons#0"
      ]
    },
    "2744": {
      "op": "dupn 2",
      "defined_out": [
        "due_coupons#0",
        "due_coupons#0 (copy)"
      ],
      "stack_out": [
        "due_coupons#0",
        "due_coupons#0",
        "due_coupons#0 (copy)"
      ]
    },
    "2746": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.next_coupon_due_date",
      "op": "callsub next_coupon_due_date",
      "defined_out": [
        "due_coupons#0",
        "next_coupon_due_date#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "due_coupons#0",
        "next_coupon_due_date#0"
      ]
    },
    "2749": {
      "op": "swap",
      "defined_out": [
        "due_coupons#0",
        "next_coupon_due_date#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "due_coupons#0"
      ]
    },
    "2750": {
      "op": "dup",
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "due_coupons#0",
        "due_coupons#0 (copy)"
      ]
    },
    "2751": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.all_due_coupons_paid",
      "op": "callsub all_due_coupons_paid",
      "defined_out": [
        "all_due_coupons_paid#0",
        "due_coupons#0",
        "next_coupon_due_date#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "due_coupons#0",
        "all_due_coupons_paid#0"
      ]
    },
    "2754": {
      "op": "swap",
      "defined_out": [
        "all_due_coupons_paid#0",
        "due_coupons#0",
        "next_coupon_due_date#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "due_coupons#0"
      ]
    },
    "2755": {
      "op": "intc_0 // 0",
      "defined_out": [
        "all_due_coupons_paid#0",
        "due_coupons#0",
        "next_coupon_due_date#0",
        "numerator#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "due_coupons#0",
        "numerator#0"
      ]
    },
    "2756": {
      "op": "swap",
      "defined_out": [
        "all_due_coupons_paid#0",
        "due_coupons#0",
        "next_coupon_due_date#0",
        "numerator#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "due_coupons#0"
      ]
    },
    "2757": {
      "op": "intc_0 // 0",
      "defined_out": [
        "all_due_coupons_paid#0",
        "denominator#0",
        "due_coupons#0",
        "next_coupon_due_date#0",
        "numerator#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "due_coupons#0",
        "denominator#0"
      ]
    },
    "2758": {
      "op": "swap",
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "due_coupons#0"
      ]
    },
    "2759": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.is_accruing_interest",
      "op": "callsub is_accruing_interest",
      "defined_out": [
        "all_due_coupons_paid#0",
        "denominator#0",
        "due_coupons#0",
        "next_coupon_due_date#0",
        "numerator#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "tmp%0#0"
      ]
    },
    "2762": {
      "op": "bz get_coupons_status_after_if_else@2",
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0"
      ]
    },
    "2765": {
      "op": "frame_dig 0"
    },
    "2767": {
      "callsub": "smart_contracts.fixed_coupon_bond.contract.FixedCouponBond.day_count_factor",
      "op": "callsub day_count_factor"
    },
    "2770": {
      "op": "dup"
    },
    "2771": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "2774": {
      "op": "btoi"
    },
    "2775": {
      "op": "frame_bury 3"
    },
    "2777": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "2780": {
      "op": "btoi"
    },
    "2781": {
      "op": "frame_bury 4"
    },
    "2783": {
      "block": "get_coupons_status_after_if_else@2",
      "stack_in": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "0"
      ]
    },
    "2784": {
      "op": "bytec 4 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\"",
        "0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "0",
        "\"total_coupons\""
      ]
    },
    "2786": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2787": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "maybe_value%0#0"
      ]
    },
    "2788": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0"
      ]
    },
    "2789": {
      "op": "frame_dig 0",
      "defined_out": [
        "due_coupons#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "due_coupons#0"
      ]
    },
    "2791": {
      "op": "itob",
      "defined_out": [
        "due_coupons#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2792": {
      "op": "frame_dig 1",
      "defined_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "next_coupon_due_date#0"
      ]
    },
    "2794": {
      "op": "itob",
      "defined_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "2795": {
      "op": "frame_dig 3",
      "defined_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "numerator#0"
      ]
    },
    "2797": {
      "op": "itob",
      "defined_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "2798": {
      "op": "frame_dig 4",
      "defined_out": [
        "denominator#0",
        "due_coupons#0",
        "next_coupon_due_date#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "denominator#0"
      ]
    },
    "2800": {
      "op": "itob",
      "defined_out": [
        "denominator#0",
        "due_coupons#0",
        "next_coupon_due_date#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "2801": {
      "op": "concat",
      "defined_out": [
        "denominator#0",
        "due_coupons#0",
        "encoded_tuple_buffer%2#0",
        "next_coupon_due_date#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2802": {
      "op": "bytec 10 // 0x00",
      "defined_out": [
        "0x00",
        "denominator#0",
        "due_coupons#0",
        "encoded_tuple_buffer%2#0",
        "next_coupon_due_date#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "0x00"
      ]
    },
    "2804": {
      "op": "intc_0 // 0",
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "0x00",
        "0"
      ]
    },
    "2805": {
      "op": "frame_dig 2",
      "defined_out": [
        "0",
        "0x00",
        "all_due_coupons_paid#0",
        "denominator#0",
        "due_coupons#0",
        "encoded_tuple_buffer%2#0",
        "next_coupon_due_date#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "0x00",
        "0",
        "all_due_coupons_paid#0"
      ]
    },
    "2807": {
      "op": "setbit",
      "defined_out": [
        "all_due_coupons_paid#0",
        "denominator#0",
        "due_coupons#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "next_coupon_due_date#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_bool%0#0"
      ]
    },
    "2808": {
      "op": "uncover 4"
    },
    "2810": {
      "op": "uncover 4",
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_bool%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2812": {
      "op": "concat",
      "defined_out": [
        "all_due_coupons_paid#0",
        "denominator#0",
        "due_coupons#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "next_coupon_due_date#0",
        "numerator#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2813": {
      "op": "uncover 3",
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "encoded_tuple_buffer%2#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%2#0"
      ]
    },
    "2815": {
      "op": "concat",
      "defined_out": [
        "all_due_coupons_paid#0",
        "denominator#0",
        "due_coupons#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%6#0",
        "next_coupon_due_date#0",
        "numerator#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "encoded_tuple_buffer%2#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2816": {
      "op": "uncover 2",
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%6#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2818": {
      "op": "concat",
      "defined_out": [
        "all_due_coupons_paid#0",
        "denominator#0",
        "due_coupons#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%7#0",
        "next_coupon_due_date#0",
        "numerator#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2819": {
      "op": "swap",
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "encoded_tuple_buffer%7#0",
        "encoded_bool%0#0"
      ]
    },
    "2820": {
      "op": "concat",
      "defined_out": [
        "all_due_coupons_paid#0",
        "denominator#0",
        "due_coupons#0",
        "encoded_tuple_buffer%8#0",
        "next_coupon_due_date#0",
        "numerator#0"
      ],
      "stack_out": [
        "due_coupons#0",
        "next_coupon_due_date#0",
        "all_due_coupons_paid#0",
        "numerator#0",
        "denominator#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2821": {
      "op": "frame_bury 0"
    },
    "2823": {
      "retsub": true,
      "op": "retsub"
    },
    "2824": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_create",
      "params": {
        "arranger#0": "bytes",
        "metadata#0": "bytes"
      },
      "block": "asset_create",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2827": {
      "op": "bytec 18 // 0x52323023",
      "defined_out": [
        "0x52323023"
      ],
      "stack_out": [
        "0x52323023"
      ]
    },
    "2829": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52323023",
        "arranger#0 (copy)"
      ],
      "stack_out": [
        "0x52323023",
        "arranger#0 (copy)"
      ]
    },
    "2831": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2832": {
      "op": "bytec 25 // \"metadata\"",
      "defined_out": [
        "\"metadata\""
      ],
      "stack_out": [
        "\"metadata\""
      ]
    },
    "2834": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"metadata\"",
        "metadata#0 (copy)"
      ],
      "stack_out": [
        "\"metadata\"",
        "metadata#0 (copy)"
      ]
    },
    "2836": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2837": {
      "retsub": true,
      "op": "retsub"
    },
    "2838": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_config",
      "params": {
        "denomination_asset_id#0": "bytes",
        "settlement_asset_id#0": "bytes",
        "principal#0": "bytes",
        "minimum_denomination#0": "bytes",
        "day_count_convention#0": "bytes",
        "interest_rate#0": "bytes",
        "coupon_rates#0": "bytes",
        "time_events#0": "bytes",
        "time_periods#0": "bytes"
      },
      "block": "asset_config",
      "stack_in": [],
      "op": "proto 9 0"
    },
    "2841": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "2842": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1"
      ]
    },
    "2844": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1"
      ]
    },
    "2845": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "2848": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "0"
      ]
    },
    "2849": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "0",
        "\"status\""
      ]
    },
    "2850": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2851": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "maybe_value%0#0"
      ]
    },
    "2852": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "tmp%0#0"
      ]
    },
    "2853": {
      "error": "D-ASA already configured",
      "op": "assert // D-ASA already configured",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1"
      ]
    },
    "2854": {
      "op": "frame_dig -9",
      "defined_out": [
        "denomination_asset_id#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#0 (copy)"
      ]
    },
    "2856": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2857": {
      "op": "dup",
      "defined_out": [
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "denomination_asset_id#1"
      ]
    },
    "2858": {
      "op": "bz asset_config_bool_false@4",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2861": {
      "op": "frame_dig 3"
    },
    "2863": {
      "op": "asset_params_get AssetCreator"
    },
    "2865": {
      "error": "asset exists",
      "op": "assert // asset exists"
    },
    "2866": {
      "op": "global ZeroAddress"
    },
    "2868": {
      "op": "!="
    },
    "2869": {
      "op": "bz asset_config_bool_false@4"
    },
    "2872": {
      "op": "intc_1 // 1"
    },
    "2873": {
      "block": "asset_config_bool_merge@5",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "and_result%0#0"
      ],
      "error": "Denomination asset is not properly set",
      "op": "assert // Denomination asset is not properly set",
      "defined_out": [],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2874": {
      "op": "bytec 19 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\""
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"denomination_asset_id\""
      ]
    },
    "2876": {
      "op": "frame_dig 3",
      "defined_out": [
        "\"denomination_asset_id\"",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"denomination_asset_id\"",
        "denomination_asset_id#1"
      ]
    },
    "2878": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2879": {
      "op": "frame_dig -8",
      "defined_out": [
        "denomination_asset_id#1",
        "settlement_asset_id#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#0 (copy)"
      ]
    },
    "2881": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ]
    },
    "2882": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "0"
      ]
    },
    "2883": {
      "op": "bytec 19 // \"denomination_asset_id\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "0",
        "\"denomination_asset_id\""
      ]
    },
    "2885": {
      "op": "app_global_get_ex",
      "defined_out": [
        "denomination_asset_id#1",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2886": {
      "error": "check self.denomination_asset_id exists",
      "op": "assert // check self.denomination_asset_id exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "maybe_value%0#0"
      ]
    },
    "2887": {
      "op": "dig 1",
      "defined_out": [
        "denomination_asset_id#1",
        "maybe_value%0#0",
        "settlement_asset_id#1",
        "settlement_asset_id#1 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "maybe_value%0#0",
        "settlement_asset_id#1 (copy)"
      ]
    },
    "2889": {
      "op": "==",
      "defined_out": [
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "tmp%0#0"
      ]
    },
    "2890": {
      "error": "Different settlement asset not supported, must be equal to denomination asset",
      "op": "assert // Different settlement asset not supported, must be equal to denomination asset",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ]
    },
    "2891": {
      "op": "bytec 7 // \"settlement_asset_id\"",
      "defined_out": [
        "\"settlement_asset_id\"",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "\"settlement_asset_id\""
      ]
    },
    "2893": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"settlement_asset_id\"",
        "settlement_asset_id#1"
      ]
    },
    "2894": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2895": {
      "op": "itxn_begin"
    },
    "2896": {
      "op": "global MinTxnFee",
      "defined_out": [
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2898": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "2899": {
      "op": "bytec 7 // \"settlement_asset_id\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0",
        "\"settlement_asset_id\""
      ]
    },
    "2901": {
      "op": "app_global_get_ex",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2902": {
      "error": "check self.settlement_asset_id exists",
      "op": "assert // check self.settlement_asset_id exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "2903": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2905": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2906": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2908": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "2910": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2912": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "axfer"
      ]
    },
    "2914": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2916": {
      "op": "itxn_field Fee",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2918": {
      "op": "itxn_submit"
    },
    "2919": {
      "op": "frame_dig -7",
      "defined_out": [
        "denomination_asset_id#1",
        "principal#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "principal#0 (copy)"
      ]
    },
    "2921": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0"
      ]
    },
    "2922": {
      "op": "frame_dig -6",
      "defined_out": [
        "denomination_asset_id#1",
        "minimum_denomination#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "minimum_denomination#0 (copy)"
      ]
    },
    "2924": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2925": {
      "op": "dup2",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%5#0 (copy)",
        "tmp%6#0 (copy)"
      ]
    },
    "2926": {
      "op": "%",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2927": {
      "op": "!",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "2928": {
      "error": "Minimum denomination is not a divisor of principal",
      "op": "assert // Minimum denomination is not a divisor of principal",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2929": {
      "op": "bytec 12 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "\"unit_value\""
      ]
    },
    "2931": {
      "op": "dig 1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "\"unit_value\"",
        "tmp%6#0 (copy)"
      ]
    },
    "2933": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2934": {
      "op": "/",
      "defined_out": [
        "denomination_asset_id#1",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%1#0"
      ]
    },
    "2935": {
      "op": "bytec 14 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "denomination_asset_id#1",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%1#0",
        "\"total_units\""
      ]
    },
    "2937": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"total_units\"",
        "new_state_value%1#0"
      ]
    },
    "2938": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2939": {
      "op": "frame_dig -5",
      "defined_out": [
        "day_count_convention#0 (copy)",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#0 (copy)"
      ]
    },
    "2941": {
      "op": "btoi",
      "defined_out": [
        "day_count_convention#1",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#1"
      ]
    },
    "2942": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#1",
        "day_count_convention#1"
      ]
    },
    "2943": {
      "op": "frame_bury 1",
      "defined_out": [
        "day_count_convention#1",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#1"
      ]
    },
    "2945": {
      "op": "bz asset_config_bool_true@16",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2948": {
      "op": "frame_dig 1"
    },
    "2950": {
      "op": "intc 5 // 255"
    },
    "2952": {
      "op": "=="
    },
    "2953": {
      "op": "bz asset_config_bool_false@17"
    },
    "2956": {
      "block": "asset_config_bool_true@16",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "or_result%0#0"
      ]
    },
    "2957": {
      "block": "asset_config_bool_merge@18",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "or_result%0#0"
      ],
      "error": "Invalid day-count convention ID",
      "op": "assert // Invalid day-count convention ID",
      "defined_out": [],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2958": {
      "op": "bytec 13 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\""
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"day_count_convention\""
      ]
    },
    "2960": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"day_count_convention\"",
        "day_count_convention#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"day_count_convention\"",
        "day_count_convention#1"
      ]
    },
    "2962": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2963": {
      "op": "frame_dig -4",
      "defined_out": [
        "day_count_convention#1",
        "interest_rate#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#0 (copy)"
      ]
    },
    "2965": {
      "op": "btoi",
      "defined_out": [
        "day_count_convention#1",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#1"
      ]
    },
    "2966": {
      "op": "dup",
      "defined_out": [
        "day_count_convention#1",
        "interest_rate#1",
        "interest_rate#1 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#1",
        "interest_rate#1 (copy)"
      ]
    },
    "2967": {
      "error": "Interest rate is not properly defined",
      "op": "assert // Interest rate is not properly defined",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#1"
      ]
    },
    "2968": {
      "op": "bytec 26 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "day_count_convention#1",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#1",
        "\"interest_rate\""
      ]
    },
    "2970": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"interest_rate\"",
        "interest_rate#1"
      ]
    },
    "2971": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2972": {
      "op": "frame_dig -3",
      "defined_out": [
        "coupon_rates#0 (copy)",
        "day_count_convention#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "coupon_rates#0 (copy)"
      ]
    },
    "2974": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "coupon_rates#0 (copy)",
        "day_count_convention#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "coupon_rates#0 (copy)",
        "0"
      ]
    },
    "2975": {
      "op": "extract_uint16",
      "defined_out": [
        "day_count_convention#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "2976": {
      "op": "dup",
      "defined_out": [
        "day_count_convention#1",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ]
    },
    "2977": {
      "error": "Coupon rates are not properly defined",
      "op": "assert // Coupon rates are not properly defined",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "2978": {
      "op": "bytec 4 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\"",
        "day_count_convention#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "\"total_coupons\""
      ]
    },
    "2980": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"total_coupons\"",
        "tmp%0#5"
      ]
    },
    "2981": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2982": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0"
      ]
    },
    "2983": {
      "op": "bytec 4 // \"total_coupons\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0",
        "\"total_coupons\""
      ]
    },
    "2985": {
      "op": "app_global_get_ex",
      "defined_out": [
        "day_count_convention#1",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2986": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "maybe_value%0#0"
      ]
    },
    "2987": {
      "op": "bz asset_config_after_if_else@30",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2990": {
      "op": "bytec 17 // 0x636f75706f6e5261746573"
    },
    "2992": {
      "op": "box_del"
    },
    "2993": {
      "op": "pop"
    },
    "2994": {
      "op": "bytec 17 // 0x636f75706f6e5261746573"
    },
    "2996": {
      "op": "frame_dig -3"
    },
    "2998": {
      "op": "box_put"
    },
    "2999": {
      "block": "asset_config_after_if_else@30",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "3001": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "3002": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "3003": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "0"
      ]
    },
    "3004": {
      "op": "bytec 4 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\"",
        "0",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "0",
        "\"total_coupons\""
      ]
    },
    "3006": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3007": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "maybe_value%0#0"
      ]
    },
    "3008": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "maybe_value%0#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "maybe_value%0#0",
        "4"
      ]
    },
    "3010": {
      "op": "+",
      "defined_out": [
        "tmp%0#5",
        "tmp%1#4"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "tmp%1#4"
      ]
    },
    "3011": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%2#1"
      ]
    },
    "3012": {
      "error": "Time events length is invalid",
      "op": "assert // Time events length is invalid",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "3013": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "3015": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "op": "callsub assert_time_events_sorted",
      "defined_out": [
        "time_events#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0"
      ]
    },
    "3018": {
      "op": "frame_bury -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "3020": {
      "op": "bytec 11 // 0x74696d654576656e7473",
      "defined_out": [
        "0x74696d654576656e7473"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x74696d654576656e7473"
      ]
    },
    "3022": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "{box_del}"
      ]
    },
    "3023": {
      "op": "pop",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "3024": {
      "op": "bytec 11 // 0x74696d654576656e7473",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x74696d654576656e7473"
      ]
    },
    "3026": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x74696d654576656e7473",
        "time_events#0 (copy)"
      ]
    },
    "3028": {
      "op": "box_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "3029": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "3031": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0"
      ]
    },
    "3034": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "3035": {
      "op": "frame_bury 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0"
      ]
    },
    "3037": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "3038": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%0#8"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "tmp%0#8"
      ]
    },
    "3041": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%0#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "new_state_value%0#2"
      ]
    },
    "3042": {
      "op": "bytec 9 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%0#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "new_state_value%0#2",
        "\"primary_distribution_opening_date\""
      ]
    },
    "3044": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "\"primary_distribution_opening_date\"",
        "new_state_value%0#2"
      ]
    },
    "3045": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0"
      ]
    },
    "3046": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "3047": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "tmp%1#1"
      ]
    },
    "3050": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "new_state_value%1#0"
      ]
    },
    "3051": {
      "op": "bytec 20 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "new_state_value%1#0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "3053": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "\"primary_distribution_closure_date\"",
        "new_state_value%1#0"
      ]
    },
    "3054": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0"
      ]
    },
    "3055": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%2#3"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%2#3"
      ]
    },
    "3058": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%2#0"
      ]
    },
    "3059": {
      "op": "bytec 5 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%2#0",
        "\"issuance_date\""
      ]
    },
    "3061": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"issuance_date\"",
        "new_state_value%2#0"
      ]
    },
    "3062": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "3063": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "3065": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "3066": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1"
      ]
    },
    "3067": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "tmp%3#1"
      ]
    },
    "3068": {
      "op": "frame_bury 2",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1"
      ]
    },
    "3070": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "0"
      ]
    },
    "3071": {
      "op": "bytec 4 // \"total_coupons\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "0",
        "\"total_coupons\""
      ]
    },
    "3073": {
      "op": "app_global_get_ex",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3074": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "maybe_value%0#0"
      ]
    },
    "3075": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "maybe_value%0#0",
        "4"
      ]
    },
    "3077": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "3078": {
      "op": "==",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#1"
      ]
    },
    "3079": {
      "op": "bz asset_config_after_if_else@36",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "3082": {
      "op": "frame_dig 2"
    },
    "3084": {
      "op": "intc_1 // 1"
    },
    "3085": {
      "op": "-"
    },
    "3086": {
      "op": "intc_2 // 8"
    },
    "3087": {
      "op": "*"
    },
    "3088": {
      "op": "frame_dig 0"
    },
    "3090": {
      "op": "swap"
    },
    "3091": {
      "op": "intc_2 // 8"
    },
    "3092": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "3093": {
      "op": "btoi"
    },
    "3094": {
      "op": "bytec 6 // \"maturity_date\""
    },
    "3096": {
      "op": "swap"
    },
    "3097": {
      "op": "app_global_put"
    },
    "3098": {
      "block": "asset_config_after_if_else@36",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "time_periods#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_periods#0 (copy)"
      ]
    },
    "3100": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "time_periods#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_periods#0 (copy)",
        "0"
      ]
    },
    "3101": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "3102": {
      "op": "!",
      "defined_out": [
        "tmp%1#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%1#2"
      ]
    },
    "3103": {
      "error": "Time periods are not properly defined",
      "op": "assert // Time periods are not properly defined",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "3104": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"status\""
      ]
    },
    "3105": {
      "op": "intc_3 // 100",
      "defined_out": [
        "\"status\"",
        "100"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"status\"",
        "100"
      ]
    },
    "3106": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "3107": {
      "retsub": true,
      "op": "retsub"
    },
    "3108": {
      "block": "asset_config_bool_false@17",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "or_result%0#0"
      ]
    },
    "3109": {
      "op": "b asset_config_bool_merge@18"
    },
    "3112": {
      "block": "asset_config_bool_false@4",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "and_result%0#0"
      ]
    },
    "3113": {
      "op": "b asset_config_bool_merge@5"
    },
    "3116": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "params": {},
      "block": "assert_caller_is_arranger",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "3119": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3121": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3122": {
      "op": "bytec 18 // 0x52323023",
      "defined_out": [
        "0",
        "0x52323023",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x52323023"
      ]
    },
    "3124": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3125": {
      "error": "check self.arranger exists",
      "op": "assert // check self.arranger exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3126": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3127": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "3128": {
      "retsub": true,
      "op": "retsub"
    },
    "3129": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "params": {
        "time_events#0": "bytes"
      },
      "block": "assert_time_events_sorted",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3132": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "time_f#0"
      ]
    },
    "3134": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0"
      ]
    },
    "3135": {
      "op": "frame_dig -1",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "time_events#0 (copy)"
      ]
    },
    "3137": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "3140": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "3141": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%0#0"
      ]
    },
    "3144": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ]
    },
    "3145": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "3147": {
      "op": ">",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ]
    },
    "3148": {
      "error": "Time events must be set in the future",
      "op": "assert // Time events must be set in the future",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "3149": {
      "op": "frame_dig -1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ]
    },
    "3151": {
      "op": "intc_0 // 0",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "3152": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ]
    },
    "3153": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%4#0",
        "1"
      ]
    },
    "3154": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ]
    },
    "3155": {
      "op": "intc_0 // 0",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "3156": {
      "block": "assert_time_events_sorted_for_header@1",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "_t#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0"
      ]
    },
    "3158": {
      "op": "frame_dig 3",
      "defined_out": [
        "_t#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "tmp%5#0"
      ]
    },
    "3160": {
      "op": "<",
      "defined_out": [
        "_t#0",
        "continue_looping%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "continue_looping%0#0"
      ]
    },
    "3161": {
      "op": "bz assert_time_events_sorted_after_for@6",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "3164": {
      "op": "pushint 65 // 65"
    },
    "3166": {
      "op": "intc_1 // 1"
    },
    "3167": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget"
    },
    "3170": {
      "op": "frame_dig 4"
    },
    "3172": {
      "op": "dup"
    },
    "3173": {
      "op": "intc_2 // 8"
    },
    "3174": {
      "op": "*"
    },
    "3175": {
      "op": "frame_dig 2"
    },
    "3177": {
      "op": "dup"
    },
    "3178": {
      "op": "cover 3"
    },
    "3180": {
      "op": "swap"
    },
    "3181": {
      "op": "intc_2 // 8"
    },
    "3182": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "3183": {
      "op": "btoi"
    },
    "3184": {
      "op": "dup"
    },
    "3185": {
      "op": "cover 3"
    },
    "3187": {
      "op": "frame_bury 1"
    },
    "3189": {
      "op": "intc_1 // 1"
    },
    "3190": {
      "op": "+"
    },
    "3191": {
      "op": "dup"
    },
    "3192": {
      "op": "frame_bury 4"
    },
    "3194": {
      "op": "intc_2 // 8"
    },
    "3195": {
      "op": "*"
    },
    "3196": {
      "op": "intc_2 // 8"
    },
    "3197": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "3198": {
      "op": "btoi"
    },
    "3199": {
      "op": "dup"
    },
    "3200": {
      "op": "frame_bury 0"
    },
    "3202": {
      "op": "<"
    },
    "3203": {
      "error": "Time events must be sorted in strictly ascending order",
      "op": "assert // Time events must be sorted in strictly ascending order"
    },
    "3204": {
      "op": "intc_0 // 0"
    },
    "3205": {
      "op": "bytec 13 // \"day_count_convention\""
    },
    "3207": {
      "op": "app_global_get_ex"
    },
    "3208": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists"
    },
    "3209": {
      "op": "intc 5 // 255"
    },
    "3211": {
      "op": "!="
    },
    "3212": {
      "op": "bz assert_time_events_sorted_for_header@1"
    },
    "3215": {
      "op": "frame_dig 0"
    },
    "3217": {
      "op": "frame_dig 1"
    },
    "3219": {
      "op": "-"
    },
    "3220": {
      "op": "intc 6 // 86400"
    },
    "3222": {
      "op": "%"
    },
    "3223": {
      "op": "!"
    },
    "3224": {
      "error": "Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)",
      "op": "assert // Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)"
    },
    "3225": {
      "op": "b assert_time_events_sorted_for_header@1"
    },
    "3228": {
      "block": "assert_time_events_sorted_after_for@6",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_events#0 (copy)"
      ]
    },
    "3230": {
      "op": "frame_bury 0"
    },
    "3232": {
      "retsub": true,
      "op": "retsub"
    },
    "3233": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events",
      "params": {
        "secondary_market_time_events#0": "bytes"
      },
      "block": "set_secondary_time_events",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3236": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "3237": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "3240": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "3241": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0",
        "\"status\""
      ]
    },
    "3242": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3243": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0"
      ]
    },
    "3244": {
      "op": "intc 7 // 200",
      "defined_out": [
        "200",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "200"
      ]
    },
    "3246": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%0#1"
      ]
    },
    "3247": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ]
    },
    "3248": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "3249": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "3252": {
      "op": "frame_dig -1",
      "defined_out": [
        "secondary_market_time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "3254": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#0 (copy)",
        "0"
      ]
    },
    "3255": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ]
    },
    "3256": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3257": {
      "error": "Time events length is invalid",
      "op": "assert // Time events length is invalid",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ]
    },
    "3258": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0",
        "1"
      ]
    },
    "3259": {
      "op": ">",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ]
    },
    "3260": {
      "op": "frame_dig -1",
      "defined_out": [
        "secondary_market_time_events#5",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "secondary_market_time_events#5"
      ]
    },
    "3262": {
      "op": "swap",
      "defined_out": [
        "secondary_market_time_events#5",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%5#0"
      ]
    },
    "3263": {
      "op": "bz set_secondary_time_events_after_if_else@2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "3266": {
      "op": "frame_dig -1"
    },
    "3268": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "op": "callsub assert_time_events_sorted"
    },
    "3271": {
      "op": "dup"
    },
    "3272": {
      "op": "frame_bury -1"
    },
    "3274": {
      "op": "frame_bury 1"
    },
    "3276": {
      "block": "set_secondary_time_events_after_if_else@2",
      "stack_in": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "secondary_market_time_events#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "secondary_market_time_events#0"
      ]
    },
    "3278": {
      "op": "frame_bury -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "3280": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0"
      ]
    },
    "3281": {
      "op": "bytec 5 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0",
        "\"issuance_date\""
      ]
    },
    "3283": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3284": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0"
      ]
    },
    "3285": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "3287": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "3290": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "3291": {
      "op": "frame_bury 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "3293": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "tmp%6#0"
      ]
    },
    "3296": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "tmp%7#0"
      ]
    },
    "3297": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "maybe_value%0#0"
      ]
    },
    "3298": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "maybe_value%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3300": {
      "op": "<=",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "3301": {
      "error": "Invalid secondary market opening date",
      "op": "assert // Invalid secondary market opening date",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0"
      ]
    },
    "3302": {
      "op": "bytec 15 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "array_head_and_tail%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "\"secondary_market_opening_date\""
      ]
    },
    "3304": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "\"secondary_market_opening_date\"",
        "tmp%7#0"
      ]
    },
    "3305": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "3306": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0"
      ]
    },
    "3307": {
      "op": "bytec 6 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0",
        "\"maturity_date\""
      ]
    },
    "3309": {
      "op": "app_global_get_ex",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3310": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%1#0"
      ]
    },
    "3311": {
      "op": "bz set_secondary_time_events_after_if_else@4",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "3314": {
      "op": "intc_0 // 0"
    },
    "3315": {
      "op": "bytec 6 // \"maturity_date\""
    },
    "3317": {
      "op": "app_global_get_ex"
    },
    "3318": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists"
    },
    "3319": {
      "op": "frame_dig -1"
    },
    "3321": {
      "op": "intc_0 // 0"
    },
    "3322": {
      "op": "extract_uint16"
    },
    "3323": {
      "op": "intc_1 // 1"
    },
    "3324": {
      "op": "-"
    },
    "3325": {
      "op": "intc_2 // 8"
    },
    "3326": {
      "op": "*"
    },
    "3327": {
      "op": "frame_dig 0"
    },
    "3329": {
      "op": "swap"
    },
    "3330": {
      "op": "intc_2 // 8"
    },
    "3331": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "3332": {
      "op": "btoi"
    },
    "3333": {
      "op": "swap"
    },
    "3334": {
      "op": "dig 1"
    },
    "3336": {
      "op": ">="
    },
    "3337": {
      "error": "Invalid secondary market closure date",
      "op": "assert // Invalid secondary market closure date"
    },
    "3338": {
      "op": "bytec 16 // \"secondary_market_closure_date\""
    },
    "3340": {
      "op": "swap"
    },
    "3341": {
      "op": "app_global_put"
    },
    "3342": {
      "block": "set_secondary_time_events_after_if_else@4",
      "stack_in": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0"
      ]
    },
    "3343": {
      "op": "bytec 15 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0",
        "\"secondary_market_opening_date\""
      ]
    },
    "3345": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3346": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%3#0"
      ]
    },
    "3347": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0"
      ]
    },
    "3348": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3349": {
      "op": "bytec 16 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "0",
        "\"secondary_market_closure_date\""
      ]
    },
    "3351": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3352": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "maybe_value%4#0"
      ]
    },
    "3353": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3354": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3355": {
      "op": "frame_bury 0"
    },
    "3357": {
      "retsub": true,
      "op": "retsub"
    },
    "3358": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assign_role",
      "params": {
        "role_address#0": "bytes",
        "role#0": "bytes",
        "config#0": "bytes"
      },
      "block": "assign_role",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "3361": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "3364": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "3367": {
      "op": "frame_dig -2",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "3369": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3370": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3371": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "20"
      ]
    },
    "3373": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3374": {
      "op": "bnz assign_role_bool_true@6",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3377": {
      "op": "frame_dig 0"
    },
    "3379": {
      "op": "pushint 40 // 40"
    },
    "3381": {
      "op": "=="
    },
    "3382": {
      "op": "bnz assign_role_bool_true@6"
    },
    "3385": {
      "op": "frame_dig 0"
    },
    "3387": {
      "op": "pushint 50 // 50"
    },
    "3389": {
      "op": "=="
    },
    "3390": {
      "op": "bnz assign_role_bool_true@6"
    },
    "3393": {
      "op": "frame_dig 0"
    },
    "3395": {
      "op": "pushint 60 // 60"
    },
    "3397": {
      "op": "=="
    },
    "3398": {
      "op": "bnz assign_role_bool_true@6"
    },
    "3401": {
      "op": "frame_dig 0"
    },
    "3403": {
      "op": "pushint 70 // 70"
    },
    "3405": {
      "op": "=="
    },
    "3406": {
      "op": "bnz assign_role_bool_true@6"
    },
    "3409": {
      "op": "frame_dig 0"
    },
    "3411": {
      "op": "pushint 80 // 80"
    },
    "3413": {
      "op": "=="
    },
    "3414": {
      "op": "bz assign_role_bool_false@7"
    },
    "3417": {
      "block": "assign_role_bool_true@6",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "3418": {
      "block": "assign_role_bool_merge@8",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid role identifier",
      "op": "assert // Invalid role identifier",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3419": {
      "op": "pushints 20 40 50 60 70 80 // 20, 40, 50, 60, 70, 80",
      "defined_out": [
        "20",
        "40",
        "50",
        "60",
        "70",
        "80"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20",
        "40",
        "50",
        "60",
        "70",
        "80"
      ]
    },
    "3427": {
      "op": "frame_dig 0",
      "defined_out": [
        "20",
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20",
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ]
    },
    "3429": {
      "op": "match assign_role_switch_case_0@9 assign_role_switch_case_1@10 assign_role_switch_case_2@11 assign_role_switch_case_3@12 assign_role_switch_case_4@13 assign_role_switch_case_5@14",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3443": {
      "op": "err"
    },
    "3444": {
      "block": "assign_role_switch_case_5@14",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 33 // 0x52383023",
      "defined_out": [
        "0x52383023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023"
      ]
    },
    "3446": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52383023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023",
        "role_address#0 (copy)"
      ]
    },
    "3448": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0"
      ]
    },
    "3449": {
      "op": "dup",
      "defined_out": [
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "3450": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3451": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "maybe_exists%4#0"
      ]
    },
    "3453": {
      "op": "!",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "3454": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0"
      ]
    },
    "3455": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%19#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "config#0 (copy)"
      ]
    },
    "3457": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%4#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "new_box_value%4#0"
      ]
    },
    "3460": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3461": {
      "block": "assign_role_switch_case_next@16",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "3463": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "3464": {
      "op": "swap"
    },
    "3465": {
      "retsub": true,
      "op": "retsub"
    },
    "3466": {
      "block": "assign_role_switch_case_4@13",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 27 // 0x52373023",
      "defined_out": [
        "0x52373023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023"
      ]
    },
    "3468": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52373023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023",
        "role_address#0 (copy)"
      ]
    },
    "3470": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0"
      ]
    },
    "3471": {
      "op": "dup",
      "defined_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "3472": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3473": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "maybe_exists%3#0"
      ]
    },
    "3475": {
      "op": "!",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "3476": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0"
      ]
    },
    "3477": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "config#0 (copy)"
      ]
    },
    "3479": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "new_box_value%3#0"
      ]
    },
    "3482": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3483": {
      "op": "b assign_role_switch_case_next@16"
    },
    "3486": {
      "block": "assign_role_switch_case_3@12",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 28 // 0x52363023",
      "defined_out": [
        "0x52363023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023"
      ]
    },
    "3488": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52363023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023",
        "role_address#0 (copy)"
      ]
    },
    "3490": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ]
    },
    "3491": {
      "op": "dup",
      "defined_out": [
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "3492": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3493": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "maybe_exists%2#0"
      ]
    },
    "3495": {
      "op": "!",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3496": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ]
    },
    "3497": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "config#0 (copy)"
      ]
    },
    "3499": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "new_box_value%2#0"
      ]
    },
    "3502": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3503": {
      "op": "b assign_role_switch_case_next@16"
    },
    "3506": {
      "block": "assign_role_switch_case_2@11",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 29 // 0x52353023",
      "defined_out": [
        "0x52353023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023"
      ]
    },
    "3508": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52353023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023",
        "role_address#0 (copy)"
      ]
    },
    "3510": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0"
      ]
    },
    "3511": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "3512": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3513": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "maybe_exists%1#0"
      ]
    },
    "3515": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "3516": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0"
      ]
    },
    "3517": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "config#0 (copy)"
      ]
    },
    "3519": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "new_box_value%1#0"
      ]
    },
    "3522": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3523": {
      "op": "b assign_role_switch_case_next@16"
    },
    "3526": {
      "block": "assign_role_switch_case_1@10",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 30 // 0x52343023",
      "defined_out": [
        "0x52343023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023"
      ]
    },
    "3528": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52343023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023",
        "role_address#0 (copy)"
      ]
    },
    "3530": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "3531": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3532": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3533": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "maybe_exists%0#0"
      ]
    },
    "3535": {
      "op": "!",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "3536": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "3537": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "config#0 (copy)"
      ]
    },
    "3539": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "new_box_value%0#0"
      ]
    },
    "3542": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3543": {
      "op": "b assign_role_switch_case_next@16"
    },
    "3546": {
      "block": "assign_role_switch_case_0@9",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 18 // 0x52323023",
      "defined_out": [
        "0x52323023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52323023"
      ]
    },
    "3548": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52323023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52323023",
        "role_address#0 (copy)"
      ]
    },
    "3550": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3551": {
      "op": "b assign_role_switch_case_next@16"
    },
    "3554": {
      "block": "assign_role_bool_false@7",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "3555": {
      "op": "b assign_role_bool_merge@8"
    },
    "3558": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role",
      "params": {
        "role_address#0": "bytes",
        "role#0": "bytes"
      },
      "block": "revoke_role",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3561": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "3564": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "3567": {
      "op": "frame_dig -1",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "3569": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3570": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3571": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "40"
      ]
    },
    "3573": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3574": {
      "op": "bnz revoke_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3577": {
      "op": "frame_dig 0"
    },
    "3579": {
      "op": "pushint 50 // 50"
    },
    "3581": {
      "op": "=="
    },
    "3582": {
      "op": "bnz revoke_role_bool_true@5"
    },
    "3585": {
      "op": "frame_dig 0"
    },
    "3587": {
      "op": "pushint 60 // 60"
    },
    "3589": {
      "op": "=="
    },
    "3590": {
      "op": "bnz revoke_role_bool_true@5"
    },
    "3593": {
      "op": "frame_dig 0"
    },
    "3595": {
      "op": "pushint 70 // 70"
    },
    "3597": {
      "op": "=="
    },
    "3598": {
      "op": "bnz revoke_role_bool_true@5"
    },
    "3601": {
      "op": "frame_dig 0"
    },
    "3603": {
      "op": "pushint 80 // 80"
    },
    "3605": {
      "op": "=="
    },
    "3606": {
      "op": "bz revoke_role_bool_false@6"
    },
    "3609": {
      "block": "revoke_role_bool_true@5",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "3610": {
      "block": "revoke_role_bool_merge@7",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid role identifier",
      "op": "assert // Invalid role identifier",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3611": {
      "op": "pushints 40 50 60 70 80 // 40, 50, 60, 70, 80",
      "defined_out": [
        "40",
        "50",
        "60",
        "70",
        "80"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "40",
        "50",
        "60",
        "70",
        "80"
      ]
    },
    "3618": {
      "op": "frame_dig 0",
      "defined_out": [
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ]
    },
    "3620": {
      "op": "match revoke_role_switch_case_0@8 revoke_role_switch_case_1@9 revoke_role_switch_case_2@10 revoke_role_switch_case_3@11 revoke_role_switch_case_4@12",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3632": {
      "op": "err"
    },
    "3633": {
      "block": "revoke_role_switch_case_4@12",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 33 // 0x52383023",
      "defined_out": [
        "0x52383023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023"
      ]
    },
    "3635": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52383023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023",
        "role_address#0 (copy)"
      ]
    },
    "3637": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%14#0"
      ]
    },
    "3638": {
      "op": "dup",
      "defined_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "3639": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%14#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3640": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%14#0",
        "maybe_exists%4#0"
      ]
    },
    "3642": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%14#0"
      ]
    },
    "3643": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "3644": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3645": {
      "block": "revoke_role_switch_case_next@14",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "3647": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "3648": {
      "op": "swap"
    },
    "3649": {
      "retsub": true,
      "op": "retsub"
    },
    "3650": {
      "block": "revoke_role_switch_case_3@11",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 27 // 0x52373023",
      "defined_out": [
        "0x52373023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023"
      ]
    },
    "3652": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52373023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023",
        "role_address#0 (copy)"
      ]
    },
    "3654": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ]
    },
    "3655": {
      "op": "dup",
      "defined_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "3656": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3657": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "maybe_exists%3#0"
      ]
    },
    "3659": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ]
    },
    "3660": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "3661": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3662": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "3665": {
      "block": "revoke_role_switch_case_2@10",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 28 // 0x52363023",
      "defined_out": [
        "0x52363023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023"
      ]
    },
    "3667": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52363023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023",
        "role_address#0 (copy)"
      ]
    },
    "3669": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0"
      ]
    },
    "3670": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "3671": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3672": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "maybe_exists%2#0"
      ]
    },
    "3674": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0"
      ]
    },
    "3675": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "3676": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3677": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "3680": {
      "block": "revoke_role_switch_case_1@9",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 29 // 0x52353023",
      "defined_out": [
        "0x52353023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023"
      ]
    },
    "3682": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52353023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023",
        "role_address#0 (copy)"
      ]
    },
    "3684": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0"
      ]
    },
    "3685": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3686": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3687": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0",
        "maybe_exists%1#0"
      ]
    },
    "3689": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0"
      ]
    },
    "3690": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "3691": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3692": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "3695": {
      "block": "revoke_role_switch_case_0@8",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 30 // 0x52343023",
      "defined_out": [
        "0x52343023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023"
      ]
    },
    "3697": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52343023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023",
        "role_address#0 (copy)"
      ]
    },
    "3699": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "3700": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3701": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3702": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "maybe_exists%0#0"
      ]
    },
    "3704": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "3705": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "3706": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3707": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "3710": {
      "block": "revoke_role_bool_false@6",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "3711": {
      "op": "b revoke_role_bool_merge@7"
    },
    "3714": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.open_account",
      "params": {
        "holding_address#0": "bytes",
        "payment_address#0": "bytes"
      },
      "block": "open_account",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3717": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "op": "callsub assert_caller_is_account_manager"
    },
    "3720": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3721": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "3722": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3723": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3724": {
      "op": "intc 7 // 200",
      "defined_out": [
        "200",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "200"
      ]
    },
    "3726": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3727": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3728": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "3729": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "3732": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "3735": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "3736": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3738": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3739": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3740": {
      "op": "box_len",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3741": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "3743": {
      "op": "!",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3744": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3745": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment_address#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "payment_address#0 (copy)"
      ]
    },
    "3747": {
      "op": "bytec 8 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "payment_address#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "payment_address#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "3749": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3750": {
      "op": "bytec 8 // 0x0000000000000000",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "3752": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3753": {
      "op": "bytec 8 // 0x0000000000000000",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "3755": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3756": {
      "op": "bytec 10 // 0x00",
      "defined_out": [
        "0x00",
        "encoded_tuple_buffer%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "0x00"
      ]
    },
    "3758": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3759": {
      "op": "box_put",
      "stack_out": []
    },
    "3760": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3762": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3763": {
      "retsub": true,
      "op": "retsub"
    },
    "3764": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "params": {},
      "block": "assert_caller_is_account_manager",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "3767": {
      "op": "intc_0 // 0"
    },
    "3768": {
      "op": "bytec 30 // 0x52343023"
    },
    "3770": {
      "op": "txn Sender",
      "defined_out": [
        "0x52343023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52343023",
        "caller#0"
      ]
    },
    "3772": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3773": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3774": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3775": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3777": {
      "op": "bz assert_caller_is_account_manager_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3780": {
      "op": "frame_dig 1"
    },
    "3782": {
      "op": "box_get"
    },
    "3783": {
      "error": "check self.account_manager entry exists",
      "op": "assert // check self.account_manager entry exists"
    },
    "3784": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "3787": {
      "op": "global LatestTimestamp"
    },
    "3789": {
      "op": "itob"
    },
    "3790": {
      "op": "dup"
    },
    "3791": {
      "op": "frame_bury 0"
    },
    "3793": {
      "op": "b<="
    },
    "3794": {
      "op": "bz assert_caller_is_account_manager_bool_false@4"
    },
    "3797": {
      "op": "frame_dig 1"
    },
    "3799": {
      "op": "box_get"
    },
    "3800": {
      "error": "check self.account_manager entry exists",
      "op": "assert // check self.account_manager entry exists"
    },
    "3801": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "3804": {
      "op": "frame_dig 0"
    },
    "3806": {
      "op": "b>="
    },
    "3807": {
      "op": "bz assert_caller_is_account_manager_bool_false@4"
    },
    "3810": {
      "op": "intc_1 // 1"
    },
    "3811": {
      "block": "assert_caller_is_account_manager_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3812": {
      "retsub": true,
      "op": "retsub"
    },
    "3813": {
      "block": "assert_caller_is_account_manager_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3814": {
      "op": "b assert_caller_is_account_manager_bool_merge@5"
    },
    "3817": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.close_account",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "close_account",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3820": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "op": "callsub assert_caller_is_account_manager"
    },
    "3823": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "3826": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "3827": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3829": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3830": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "3831": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3832": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3834": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3835": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "3836": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3837": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "3838": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#0"
      ]
    },
    "3841": {
      "op": "btoi",
      "defined_out": [
        "closed_units#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "closed_units#0"
      ]
    },
    "3842": {
      "op": "swap",
      "stack_out": [
        "closed_units#0",
        "tmp%0#1"
      ]
    },
    "3843": {
      "op": "box_del",
      "defined_out": [
        "closed_units#0",
        "{box_del}"
      ],
      "stack_out": [
        "closed_units#0",
        "{box_del}"
      ]
    },
    "3844": {
      "op": "pop",
      "stack_out": [
        "closed_units#0"
      ]
    },
    "3845": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "0"
      ]
    },
    "3846": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3847": {
      "op": "app_global_get_ex",
      "defined_out": [
        "closed_units#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3848": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0"
      ]
    },
    "3849": {
      "op": "dig 1",
      "defined_out": [
        "closed_units#0",
        "closed_units#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0",
        "closed_units#0 (copy)"
      ]
    },
    "3851": {
      "op": "-",
      "defined_out": [
        "closed_units#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "closed_units#0",
        "new_state_value%0#0"
      ]
    },
    "3852": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "closed_units#0",
        "new_state_value%0#0",
        "\"circulating_units\""
      ]
    },
    "3853": {
      "op": "swap",
      "stack_out": [
        "closed_units#0",
        "\"circulating_units\"",
        "new_state_value%0#0"
      ]
    },
    "3854": {
      "op": "app_global_put",
      "stack_out": [
        "closed_units#0"
      ]
    },
    "3855": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units",
      "op": "callsub end_if_no_circulating_units"
    },
    "3858": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3859": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "3861": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3862": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3863": {
      "retsub": true,
      "op": "retsub"
    },
    "3864": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "bytes"
      },
      "block": "primary_distribution",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3867": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "3868": {
      "op": "dup",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2"
      ]
    },
    "3869": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "3871": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "3872": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0",
        "\"status\""
      ]
    },
    "3873": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3874": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3875": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "100"
      ]
    },
    "3876": {
      "op": "==",
      "defined_out": [
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#4"
      ]
    },
    "3877": {
      "op": "bz primary_distribution_bool_false@5",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "3880": {
      "op": "intc_0 // 0"
    },
    "3881": {
      "op": "bytec 9 // \"primary_distribution_opening_date\""
    },
    "3883": {
      "op": "app_global_get_ex"
    },
    "3884": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists"
    },
    "3885": {
      "op": "global LatestTimestamp"
    },
    "3887": {
      "op": "dup"
    },
    "3888": {
      "op": "frame_bury 2"
    },
    "3890": {
      "op": "<="
    },
    "3891": {
      "op": "bz primary_distribution_bool_false@5"
    },
    "3894": {
      "op": "intc_0 // 0"
    },
    "3895": {
      "op": "bytec 20 // \"primary_distribution_closure_date\""
    },
    "3897": {
      "op": "app_global_get_ex"
    },
    "3898": {
      "error": "check self.primary_distribution_closure_date exists",
      "op": "assert // check self.primary_distribution_closure_date exists"
    },
    "3899": {
      "op": "frame_dig 2"
    },
    "3901": {
      "op": ">"
    },
    "3902": {
      "op": "bz primary_distribution_bool_false@5"
    },
    "3905": {
      "op": "intc_1 // 1"
    },
    "3906": {
      "block": "primary_distribution_bool_merge@6",
      "stack_in": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Primary distribution is closed",
      "op": "assert // Primary distribution is closed",
      "defined_out": [],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "3907": {
      "op": "bytec 29 // 0x52353023"
    },
    "3909": {
      "op": "txn Sender",
      "defined_out": [
        "0x52353023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0x52353023",
        "caller#0"
      ]
    },
    "3911": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2"
      ]
    },
    "3912": {
      "op": "dup",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3913": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2"
      ]
    },
    "3915": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3916": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3918": {
      "op": "bz primary_distribution_bool_false@12",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "3921": {
      "op": "frame_dig 0"
    },
    "3923": {
      "op": "box_get"
    },
    "3924": {
      "error": "check self.primary_dealer entry exists",
      "op": "assert // check self.primary_dealer entry exists"
    },
    "3925": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "3928": {
      "op": "global LatestTimestamp"
    },
    "3930": {
      "op": "itob"
    },
    "3931": {
      "op": "dup"
    },
    "3932": {
      "op": "frame_bury 1"
    },
    "3934": {
      "op": "b<="
    },
    "3935": {
      "op": "bz primary_distribution_bool_false@12"
    },
    "3938": {
      "op": "frame_dig 0"
    },
    "3940": {
      "op": "box_get"
    },
    "3941": {
      "error": "check self.primary_dealer entry exists",
      "op": "assert // check self.primary_dealer entry exists"
    },
    "3942": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "3945": {
      "op": "frame_dig 1"
    },
    "3947": {
      "op": "b>="
    },
    "3948": {
      "op": "bz primary_distribution_bool_false@12"
    },
    "3951": {
      "op": "intc_1 // 1"
    },
    "3952": {
      "block": "primary_distribution_bool_merge@13",
      "stack_in": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "3953": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0x52333023"
      ]
    },
    "3954": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3956": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2"
      ]
    },
    "3957": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "3958": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3959": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3961": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2"
      ]
    },
    "3962": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "3965": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "3968": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#2",
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "units#0 (copy)"
      ]
    },
    "3970": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0"
      ]
    },
    "3971": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3972": {
      "error": "Can not distribute zero units",
      "op": "assert // Can not distribute zero units",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0"
      ]
    },
    "3973": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "0"
      ]
    },
    "3974": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3975": {
      "op": "app_global_get_ex",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3976": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3977": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3979": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "3980": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%3#0",
        "0"
      ]
    },
    "3981": {
      "op": "bytec 14 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "0",
        "tmp%0#0",
        "tmp%0#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%3#0",
        "0",
        "\"total_units\""
      ]
    },
    "3983": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%0#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3984": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "3985": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "3986": {
      "error": "Insufficient remaining D-ASA units",
      "op": "assert // Insufficient remaining D-ASA units",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0"
      ]
    },
    "3987": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "0"
      ]
    },
    "3988": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3990": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "3991": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3993": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "new_state_value%0#0"
      ]
    },
    "3994": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "new_state_value%0#0",
        "\"circulating_units\""
      ]
    },
    "3995": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "\"circulating_units\"",
        "new_state_value%0#0"
      ]
    },
    "3996": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0"
      ]
    },
    "3997": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%0#2 (copy)"
      ]
    },
    "3999": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4000": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%3#0"
      ]
    },
    "4001": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#2",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "4004": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#2",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "4005": {
      "op": "+",
      "defined_out": [
        "tmp%0#2",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "to_encode%0#0"
      ]
    },
    "4006": {
      "op": "itob",
      "defined_out": [
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ]
    },
    "4007": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "tmp%0#2 (copy)"
      ]
    },
    "4009": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4010": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%4#0"
      ]
    },
    "4011": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "4012": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%0#2",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "updated_data%0#0"
      ]
    },
    "4014": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "updated_data%0#0",
        "tmp%0#2 (copy)"
      ]
    },
    "4016": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "updated_data%0#0"
      ]
    },
    "4017": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2"
      ]
    },
    "4018": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "0"
      ]
    },
    "4019": {
      "op": "bytec 12 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "0",
        "\"unit_value\""
      ]
    },
    "4021": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4022": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_value%5#0"
      ]
    },
    "4023": {
      "op": "itob",
      "defined_out": [
        "tmp%0#2",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%1#0"
      ]
    },
    "4024": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%1#0",
        "tmp%0#2 (copy)"
      ]
    },
    "4026": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%0#2",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%1#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "4027": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%1#0",
        "maybe_value%6#0"
      ]
    },
    "4028": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_value%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "4029": {
      "op": "replace2 40",
      "defined_out": [
        "tmp%0#2",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "updated_data%1#0"
      ]
    },
    "4031": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "4032": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "4033": {
      "op": "bytec 14 // \"total_units\"",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0",
        "\"total_units\""
      ]
    },
    "4035": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "4036": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0"
      ]
    },
    "4037": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0",
        "0"
      ]
    },
    "4038": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "4039": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "4040": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "4041": {
      "op": "-",
      "defined_out": [
        "tmp%0#2",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "to_encode%1#0"
      ]
    },
    "4042": {
      "op": "itob",
      "defined_out": [
        "tmp%0#2",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "4043": {
      "op": "frame_bury 0"
    },
    "4045": {
      "retsub": true,
      "op": "retsub"
    },
    "4046": {
      "block": "primary_distribution_bool_false@12",
      "stack_in": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "4047": {
      "op": "b primary_distribution_bool_merge@13"
    },
    "4050": {
      "block": "primary_distribution_bool_false@5",
      "stack_in": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "4051": {
      "op": "b primary_distribution_bool_merge@6"
    },
    "4054": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension",
      "params": {
        "suspended#0": "bytes"
      },
      "block": "set_asset_suspension",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4057": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "op": "callsub assert_caller_is_authority"
    },
    "4060": {
      "op": "frame_dig -1",
      "defined_out": [
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "suspended#0 (copy)"
      ]
    },
    "4062": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "suspended#0 (copy)",
        "0"
      ]
    },
    "4063": {
      "op": "getbit",
      "defined_out": [
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0"
      ]
    },
    "4064": {
      "op": "bytec 21 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0",
        "\"suspended\""
      ]
    },
    "4066": {
      "op": "swap",
      "stack_out": [
        "\"suspended\"",
        "reinterpret_uint64%0#0"
      ]
    },
    "4067": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4068": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "4070": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "4071": {
      "retsub": true,
      "op": "retsub"
    },
    "4072": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "params": {},
      "block": "assert_caller_is_authority",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "4075": {
      "op": "intc_0 // 0"
    },
    "4076": {
      "op": "bytec 27 // 0x52373023"
    },
    "4078": {
      "op": "txn Sender",
      "defined_out": [
        "0x52373023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52373023",
        "caller#0"
      ]
    },
    "4080": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "4081": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4082": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4083": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4085": {
      "op": "bz assert_caller_is_authority_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "4088": {
      "op": "frame_dig 1"
    },
    "4090": {
      "op": "box_get"
    },
    "4091": {
      "error": "check self.authority entry exists",
      "op": "assert // check self.authority entry exists"
    },
    "4092": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "4095": {
      "op": "global LatestTimestamp"
    },
    "4097": {
      "op": "itob"
    },
    "4098": {
      "op": "dup"
    },
    "4099": {
      "op": "frame_bury 0"
    },
    "4101": {
      "op": "b<="
    },
    "4102": {
      "op": "bz assert_caller_is_authority_bool_false@4"
    },
    "4105": {
      "op": "frame_dig 1"
    },
    "4107": {
      "op": "box_get"
    },
    "4108": {
      "error": "check self.authority entry exists",
      "op": "assert // check self.authority entry exists"
    },
    "4109": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "4112": {
      "op": "frame_dig 0"
    },
    "4114": {
      "op": "b>="
    },
    "4115": {
      "op": "bz assert_caller_is_authority_bool_false@4"
    },
    "4118": {
      "op": "intc_1 // 1"
    },
    "4119": {
      "block": "assert_caller_is_authority_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "4120": {
      "retsub": true,
      "op": "retsub"
    },
    "4121": {
      "block": "assert_caller_is_authority_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "4122": {
      "op": "b assert_caller_is_authority_bool_merge@5"
    },
    "4125": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension",
      "params": {
        "holding_address#0": "bytes",
        "suspended#0": "bytes"
      },
      "block": "set_account_suspension",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "4128": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "op": "callsub assert_caller_is_authority"
    },
    "4131": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "4132": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "4134": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "4135": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "4136": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "4137": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "4139": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "4140": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "4141": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4142": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "4143": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "suspended#0 (copy)"
      ]
    },
    "4145": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "0"
      ]
    },
    "4146": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "is_true%0#0"
      ]
    },
    "4147": {
      "op": "intc 4 // 448"
    },
    "4149": {
      "op": "swap",
      "defined_out": [
        "448",
        "is_true%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "448",
        "is_true%0#0"
      ]
    },
    "4150": {
      "op": "setbit",
      "defined_out": [
        "tmp%0#1",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "updated_data%0#0"
      ]
    },
    "4151": {
      "op": "box_put",
      "stack_out": []
    },
    "4152": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "4154": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "4155": {
      "retsub": true,
      "op": "retsub"
    },
    "4156": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status",
      "params": {
        "defaulted#0": "bytes"
      },
      "block": "set_default_status",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4159": {
      "op": "intc_0 // 0"
    },
    "4160": {
      "op": "bytec 28 // 0x52363023"
    },
    "4162": {
      "op": "txn Sender",
      "defined_out": [
        "0x52363023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52363023",
        "caller#0"
      ]
    },
    "4164": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "4165": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4166": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4167": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4169": {
      "op": "bz set_default_status_bool_false@5",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "4172": {
      "op": "frame_dig 1"
    },
    "4174": {
      "op": "box_get"
    },
    "4175": {
      "error": "check self.trustee entry exists",
      "op": "assert // check self.trustee entry exists"
    },
    "4176": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "4179": {
      "op": "global LatestTimestamp"
    },
    "4181": {
      "op": "itob"
    },
    "4182": {
      "op": "dup"
    },
    "4183": {
      "op": "frame_bury 0"
    },
    "4185": {
      "op": "b<="
    },
    "4186": {
      "op": "bz set_default_status_bool_false@5"
    },
    "4189": {
      "op": "frame_dig 1"
    },
    "4191": {
      "op": "box_get"
    },
    "4192": {
      "error": "check self.trustee entry exists",
      "op": "assert // check self.trustee entry exists"
    },
    "4193": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "4196": {
      "op": "frame_dig 0"
    },
    "4198": {
      "op": "b>="
    },
    "4199": {
      "op": "bz set_default_status_bool_false@5"
    },
    "4202": {
      "op": "intc_1 // 1"
    },
    "4203": {
      "block": "set_default_status_bool_merge@6",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "4204": {
      "op": "frame_dig -1",
      "defined_out": [
        "defaulted#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "defaulted#0 (copy)"
      ]
    },
    "4206": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "defaulted#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "defaulted#0 (copy)",
        "0"
      ]
    },
    "4207": {
      "op": "getbit",
      "defined_out": [
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_uint64%0#0"
      ]
    },
    "4208": {
      "op": "bytec 22 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_uint64%0#0",
        "\"defaulted\""
      ]
    },
    "4210": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "\"defaulted\"",
        "reinterpret_uint64%0#0"
      ]
    },
    "4211": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "4212": {
      "retsub": true,
      "op": "retsub"
    },
    "4213": {
      "block": "set_default_status_bool_false@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "4214": {
      "op": "b set_default_status_bool_merge@6"
    },
    "4217": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info",
      "params": {},
      "block": "get_asset_info",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4220": {
      "op": "intc_0 // 0"
    },
    "4221": {
      "op": "dup"
    },
    "4222": {
      "op": "global LatestTimestamp"
    },
    "4224": {
      "op": "intc_0 // 0"
    },
    "4225": {
      "op": "bytec 6 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "performance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "4227": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4228": {
      "op": "swap",
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "4229": {
      "op": "dup",
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "4230": {
      "op": "cover 2",
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "4232": {
      "op": "cover 4",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4234": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4235": {
      "op": ">",
      "defined_out": [
        "maybe_value%0#0",
        "performance#0",
        "performance#8",
        "tmp%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%1#0"
      ]
    },
    "4236": {
      "op": "bz get_asset_info_after_if_else@3",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "4239": {
      "op": "frame_dig 0"
    },
    "4241": {
      "op": "frame_bury 2"
    },
    "4243": {
      "op": "frame_dig 1"
    },
    "4245": {
      "op": "bz get_asset_info_after_if_else@3"
    },
    "4248": {
      "op": "pushint 4 // 4"
    },
    "4250": {
      "op": "frame_bury 2"
    },
    "4252": {
      "block": "get_asset_info_after_if_else@3",
      "stack_in": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "performance#0"
      ]
    },
    "4254": {
      "op": "frame_bury 0",
      "defined_out": [
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "4256": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0"
      ]
    },
    "4257": {
      "op": "bytec 22 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "0",
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0",
        "\"defaulted\""
      ]
    },
    "4259": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4260": {
      "error": "check self.defaulted exists",
      "op": "assert // check self.defaulted exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%1#0"
      ]
    },
    "4261": {
      "op": "bz get_asset_info_after_if_else@5",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "4264": {
      "op": "pushint 3 // 3"
    },
    "4266": {
      "op": "frame_bury 0"
    },
    "4268": {
      "block": "get_asset_info_after_if_else@5",
      "stack_in": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0"
      ]
    },
    "4269": {
      "op": "bytec 19 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0",
        "\"denomination_asset_id\""
      ]
    },
    "4271": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4272": {
      "error": "check self.denomination_asset_id exists",
      "op": "assert // check self.denomination_asset_id exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%2#0"
      ]
    },
    "4273": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0"
      ]
    },
    "4274": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4275": {
      "op": "bytec 7 // \"settlement_asset_id\"",
      "defined_out": [
        "\"settlement_asset_id\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "0",
        "\"settlement_asset_id\""
      ]
    },
    "4277": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4278": {
      "error": "check self.settlement_asset_id exists",
      "op": "assert // check self.settlement_asset_id exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "maybe_value%3#0"
      ]
    },
    "4279": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4280": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "4281": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "4282": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4283": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0"
      ]
    },
    "4284": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "4285": {
      "op": "bytec 12 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "0",
        "\"unit_value\""
      ]
    },
    "4287": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4288": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "4289": {
      "op": "*",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%0#0"
      ]
    },
    "4290": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "4291": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "4292": {
      "op": "bytec 12 // \"unit_value\"",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "\"unit_value\""
      ]
    },
    "4294": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4295": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0"
      ]
    },
    "4296": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "4297": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "4298": {
      "op": "bytec 13 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "4300": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4301": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%5#0"
      ]
    },
    "4302": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "4303": {
      "op": "extract 7 1",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0"
      ]
    },
    "4306": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "0"
      ]
    },
    "4307": {
      "op": "bytec 26 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "0",
        "\"interest_rate\""
      ]
    },
    "4309": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%6#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "4310": {
      "error": "check self.interest_rate exists",
      "op": "assert // check self.interest_rate exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "maybe_value%6#0"
      ]
    },
    "4311": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "4312": {
      "op": "extract 6 2",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "4315": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "4316": {
      "op": "bytec 14 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "0",
        "\"total_units\""
      ]
    },
    "4318": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%0#0",
        "maybe_value%7#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "4319": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "maybe_value%7#0"
      ]
    },
    "4320": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "4321": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "0"
      ]
    },
    "4322": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "4323": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%0#0",
        "maybe_value%8#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "4324": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "maybe_value%8#0"
      ]
    },
    "4325": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "4326": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0"
      ]
    },
    "4327": {
      "op": "bytec 9 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "4329": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%0#0",
        "maybe_value%9#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "4330": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%9#0"
      ]
    },
    "4331": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "4332": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0"
      ]
    },
    "4333": {
      "op": "bytec 20 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "4335": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%0#0",
        "maybe_value%10#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "4336": {
      "error": "check self.primary_distribution_closure_date exists",
      "op": "assert // check self.primary_distribution_closure_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%10#0"
      ]
    },
    "4337": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "4338": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "4339": {
      "op": "bytec 5 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "4341": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%0#0",
        "maybe_value%11#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "4342": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%11#0"
      ]
    },
    "4343": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "4344": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "4345": {
      "op": "bytec 6 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "4347": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%0#0",
        "maybe_value%12#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "4348": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0"
      ]
    },
    "4349": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "4350": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0"
      ]
    },
    "4351": {
      "op": "bytec 21 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0",
        "\"suspended\""
      ]
    },
    "4353": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "4354": {
      "error": "check self.suspended exists",
      "op": "assert // check self.suspended exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%13#0"
      ]
    },
    "4355": {
      "op": "bytec 10 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%13#0",
        "0x00"
      ]
    },
    "4357": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%13#0",
        "0x00",
        "0"
      ]
    },
    "4358": {
      "op": "uncover 2",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0x00",
        "0",
        "maybe_value%13#0"
      ]
    },
    "4360": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0"
      ]
    },
    "4361": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "performance#0"
      ]
    },
    "4363": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "val_as_bytes%12#0"
      ]
    },
    "4364": {
      "op": "extract 7 1",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0"
      ]
    },
    "4367": {
      "op": "uncover 13"
    },
    "4369": {
      "op": "uncover 13",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4371": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4372": {
      "op": "uncover 12",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "4374": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4375": {
      "op": "uncover 11",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "4377": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "4378": {
      "op": "uncover 10",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0",
        "tmp%4#0"
      ]
    },
    "4380": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%5#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "4381": {
      "op": "uncover 9",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0",
        "tmp%5#0"
      ]
    },
    "4383": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4384": {
      "op": "uncover 8",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%6#0"
      ]
    },
    "4386": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4387": {
      "op": "uncover 7",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%7#0"
      ]
    },
    "4389": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4390": {
      "op": "uncover 6",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%8#0"
      ]
    },
    "4392": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4393": {
      "op": "uncover 5",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%9#0"
      ]
    },
    "4395": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%10#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4396": {
      "op": "uncover 4",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%10#0"
      ]
    },
    "4398": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%11#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%6#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%11#0",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4399": {
      "op": "uncover 3",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%11#0"
      ]
    },
    "4401": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%12#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_bool%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "4402": {
      "op": "uncover 2",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%6#0",
        "encoded_tuple_buffer%12#0",
        "encoded_bool%0#0"
      ]
    },
    "4404": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%6#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "4405": {
      "op": "swap",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_tuple_buffer%13#0",
        "tmp%6#0"
      ]
    },
    "4406": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "maybe_value%0#0",
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "4407": {
      "op": "frame_bury 0"
    },
    "4409": {
      "retsub": true,
      "op": "retsub"
    },
    "4410": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "get_account_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4413": {
      "op": "bytec_1 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "4414": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "4416": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "4417": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "4418": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "4419": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "4421": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "4422": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4423": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4424": {
      "retsub": true,
      "op": "retsub"
    },
    "4425": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events",
      "params": {},
      "block": "get_time_events",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4428": {
      "op": "bytec 32 // 0x0000"
    },
    "4430": {
      "op": "intc_0 // 0"
    },
    "4431": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "0",
        "\"status\""
      ]
    },
    "4432": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4433": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "time_events#0",
        "maybe_value%0#0"
      ]
    },
    "4434": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#0",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "maybe_value%0#0",
        "100"
      ]
    },
    "4435": {
      "op": "==",
      "defined_out": [
        "time_events#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "time_events#0",
        "tmp%0#1"
      ]
    },
    "4436": {
      "op": "bz get_time_events_after_if_else@2",
      "stack_out": [
        "time_events#0"
      ]
    },
    "4439": {
      "op": "bytec 11 // 0x74696d654576656e7473"
    },
    "4441": {
      "op": "box_get"
    },
    "4442": {
      "op": "swap"
    },
    "4443": {
      "op": "frame_bury 0"
    },
    "4445": {
      "error": "check self.time_events exists",
      "op": "assert // check self.time_events exists"
    },
    "4446": {
      "block": "get_time_events_after_if_else@2",
      "stack_in": [
        "time_events#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "time_events#0"
      ]
    },
    "4448": {
      "op": "swap"
    },
    "4449": {
      "retsub": true,
      "op": "retsub"
    },
    "4450": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule",
      "params": {},
      "block": "get_secondary_market_schedule",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4453": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4454": {
      "op": "bytec 15 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"secondary_market_opening_date\""
      ]
    },
    "4456": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4457": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4458": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "4459": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4460": {
      "op": "bytec 16 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"secondary_market_closure_date\""
      ]
    },
    "4462": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4463": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "4464": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4465": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "4466": {
      "op": "pushbytes 0x0002",
      "defined_out": [
        "0x0002",
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0",
        "0x0002"
      ]
    },
    "4470": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "result%1#0"
      ]
    },
    "4471": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "4472": {
      "retsub": true,
      "op": "retsub"
    },
    "4473": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata",
      "params": {},
      "block": "get_asset_metadata",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4476": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4477": {
      "op": "bytec 25 // \"metadata\"",
      "defined_out": [
        "\"metadata\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"metadata\""
      ]
    },
    "4479": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4480": {
      "error": "check self.metadata exists",
      "op": "assert // check self.metadata exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4481": {
      "retsub": true,
      "op": "retsub"
    },
    "4482": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_update",
      "params": {},
      "block": "asset_update",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "4485": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "4488": {
      "retsub": true,
      "op": "retsub"
    },
    "4489": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4492": {
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "4494": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "4496": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "4497": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "frame_dig 0"
    },
    "4499": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "4501": {
      "op": ">",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "4502": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "4505": {
      "op": "itxn_begin"
    },
    "4506": {
      "op": "pushint 6 // appl"
    },
    "4508": {
      "op": "itxn_field TypeEnum"
    },
    "4510": {
      "op": "pushint 5 // DeleteApplication"
    },
    "4512": {
      "op": "itxn_field OnCompletion"
    },
    "4514": {
      "op": "bytec 34 // 0x068101"
    },
    "4516": {
      "op": "itxn_field ApprovalProgram"
    },
    "4518": {
      "op": "bytec 34 // 0x068101"
    },
    "4520": {
      "op": "itxn_field ClearStateProgram"
    },
    "4522": {
      "op": "frame_dig -1"
    },
    "4524": {
      "op": "switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4"
    },
    "4530": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "4531": {
      "op": "b ensure_budget_while_top@1"
    },
    "4534": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "4536": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "4538": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "4541": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "4542": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "4544": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "4547": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    }
  }
}