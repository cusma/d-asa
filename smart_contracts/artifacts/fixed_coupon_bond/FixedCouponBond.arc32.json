{
    "hints": {
        "asset_transfer(address,address,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pay_coupon(address,byte[])(uint64,uint64,byte[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PaymentResult",
                    "elements": [
                        [
                            "amount",
                            "uint64"
                        ],
                        [
                            "timestamp",
                            "uint64"
                        ],
                        [
                            "context",
                            "byte[]"
                        ]
                    ]
                }
            }
        },
        "pay_principal(address,byte[])(uint64,uint64,byte[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PaymentResult",
                    "elements": [
                        [
                            "amount",
                            "uint64"
                        ],
                        [
                            "timestamp",
                            "uint64"
                        ],
                        [
                            "context",
                            "byte[]"
                        ]
                    ]
                }
            }
        },
        "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "CurrentUnitsValue",
                    "elements": [
                        [
                            "units_value",
                            "uint64"
                        ],
                        [
                            "accrued_interest",
                            "uint64"
                        ],
                        [
                            "day_count_factor",
                            "(uint64,uint64)"
                        ]
                    ]
                }
            }
        },
        "get_coupon_rates()uint16[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_payment_amount(address)(uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PaymentAmounts",
                    "elements": [
                        [
                            "interest",
                            "uint64"
                        ],
                        [
                            "principal",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "CouponsInfo",
                    "elements": [
                        [
                            "total_coupons",
                            "uint64"
                        ],
                        [
                            "due_coupons",
                            "uint64"
                        ],
                        [
                            "next_coupon_due_date",
                            "uint64"
                        ],
                        [
                            "day_count_factor",
                            "(uint64,uint64)"
                        ],
                        [
                            "all_due_coupons_paid",
                            "bool"
                        ]
                    ]
                }
            }
        },
        "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],byte[]))void": {
            "call_config": {
                "no_op": "CREATE"
            },
            "structs": {
                "metadata": {
                    "name": "AssetMetadata",
                    "elements": [
                        [
                            "contract_type",
                            "uint8"
                        ],
                        [
                            "calendar",
                            "uint8"
                        ],
                        [
                            "business_day_convention",
                            "uint8"
                        ],
                        [
                            "end_of_month_convention",
                            "uint8"
                        ],
                        [
                            "prepayment_effect",
                            "uint8"
                        ],
                        [
                            "penalty_type",
                            "uint8"
                        ],
                        [
                            "prospectus_hash",
                            "byte[32]"
                        ],
                        [
                            "prospectus_url",
                            "byte[]"
                        ]
                    ]
                }
            }
        },
        "asset_config(uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_secondary_time_events(uint64[])(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "SecondaryMarketSchedule",
                    "elements": [
                        [
                            "secondary_market_opening_date",
                            "uint64"
                        ],
                        [
                            "secondary_market_closure_date",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "assign_role(address,uint8,byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "revoke_role(address,uint8)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "open_account(address,address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "close_account(address)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "primary_distribution(address,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_asset_suspension(bool)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_account_suspension(address,bool)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_default_status(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "AssetInfo",
                    "elements": [
                        [
                            "denomination_asset_id",
                            "uint64"
                        ],
                        [
                            "settlement_asset_id",
                            "uint64"
                        ],
                        [
                            "outstanding_principal",
                            "uint64"
                        ],
                        [
                            "unit_value",
                            "uint64"
                        ],
                        [
                            "day_count_convention",
                            "uint8"
                        ],
                        [
                            "interest_rate",
                            "uint16"
                        ],
                        [
                            "total_supply",
                            "uint64"
                        ],
                        [
                            "circulating_supply",
                            "uint64"
                        ],
                        [
                            "primary_distribution_opening_date",
                            "uint64"
                        ],
                        [
                            "primary_distribution_closure_date",
                            "uint64"
                        ],
                        [
                            "issuance_date",
                            "uint64"
                        ],
                        [
                            "maturity_date",
                            "uint64"
                        ],
                        [
                            "suspended",
                            "bool"
                        ],
                        [
                            "performance",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "get_account_info(address)(address,uint64,uint64,uint64,bool)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "AccountInfo",
                    "elements": [
                        [
                            "payment_address",
                            "address"
                        ],
                        [
                            "units",
                            "uint64"
                        ],
                        [
                            "unit_value",
                            "uint64"
                        ],
                        [
                            "paid_coupons",
                            "uint64"
                        ],
                        [
                            "suspended",
                            "bool"
                        ]
                    ]
                }
            }
        },
        "get_time_events()uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_secondary_market_schedule()uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],byte[])": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "AssetMetadata",
                    "elements": [
                        [
                            "contract_type",
                            "uint8"
                        ],
                        [
                            "calendar",
                            "uint8"
                        ],
                        [
                            "business_day_convention",
                            "uint8"
                        ],
                        [
                            "end_of_month_convention",
                            "uint8"
                        ],
                        [
                            "prepayment_effect",
                            "uint8"
                        ],
                        [
                            "penalty_type",
                            "uint8"
                        ],
                        [
                            "prospectus_hash",
                            "byte[32]"
                        ],
                        [
                            "prospectus_url",
                            "byte[]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 19
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "arranger": {
                    "type": "bytes",
                    "key": "R20#"
                },
                "circulating_units": {
                    "type": "uint64",
                    "key": "circulating_units"
                },
                "day_count_convention": {
                    "type": "uint64",
                    "key": "day_count_convention"
                },
                "defaulted": {
                    "type": "uint64",
                    "key": "defaulted"
                },
                "denomination_asset_id": {
                    "type": "uint64",
                    "key": "denomination_asset_id"
                },
                "due_coupons_watermark": {
                    "type": "uint64",
                    "key": "due_coupons_watermark"
                },
                "interest_rate": {
                    "type": "uint64",
                    "key": "interest_rate"
                },
                "issuance_date": {
                    "type": "uint64",
                    "key": "issuance_date"
                },
                "maturity_date": {
                    "type": "uint64",
                    "key": "maturity_date"
                },
                "metadata": {
                    "type": "bytes",
                    "key": "metadata"
                },
                "paid_coupon_units": {
                    "type": "uint64",
                    "key": "paid_coupon_units"
                },
                "primary_distribution_closure_date": {
                    "type": "uint64",
                    "key": "primary_distribution_closure_date"
                },
                "primary_distribution_opening_date": {
                    "type": "uint64",
                    "key": "primary_distribution_opening_date"
                },
                "secondary_market_closure_date": {
                    "type": "uint64",
                    "key": "secondary_market_closure_date"
                },
                "secondary_market_opening_date": {
                    "type": "uint64",
                    "key": "secondary_market_opening_date"
                },
                "settlement_asset_id": {
                    "type": "uint64",
                    "key": "settlement_asset_id"
                },
                "status": {
                    "type": "uint64",
                    "key": "status"
                },
                "suspended": {
                    "type": "uint64",
                    "key": "suspended"
                },
                "total_coupons": {
                    "type": "uint64",
                    "key": "total_coupons"
                },
                "total_units": {
                    "type": "uint64",
                    "key": "total_units"
                },
                "unit_value": {
                    "type": "uint64",
                    "key": "unit_value"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FixedCouponBond",
        "desc": "\n    Fixed Coupon Bond, placed at nominal value, fixed coupon rates and payment time schedule, principal at maturity.\n    ",
        "methods": [
            {
                "name": "asset_transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "sender_holding_address",
                        "desc": "Sender Account Holding Address"
                    },
                    {
                        "type": "address",
                        "name": "receiver_holding_address",
                        "desc": "Receiver Account Holding Address"
                    },
                    {
                        "type": "uint64",
                        "name": "units",
                        "desc": "Amount of D-ASA units to transfer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Transferred actualized value in denomination asset"
                },
                "desc": "Transfer D-ASA units between accounts"
            },
            {
                "name": "pay_coupon",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "byte[]",
                        "name": "payment_info",
                        "desc": "Additional payment information (Optional)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,byte[])",
                    "desc": "Paid coupon amount in denomination asset, Payment timestamp, Payment context"
                },
                "desc": "Pay due coupon to an account"
            },
            {
                "name": "pay_principal",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "byte[]",
                        "name": "payment_info",
                        "desc": "Additional payment information (Optional)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,byte[])",
                    "desc": "Paid principal amount in denomination asset, Payment timestamp, Payment context"
                },
                "desc": "Pay the outstanding principal to an account"
            },
            {
                "name": "get_account_units_current_value",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "uint64",
                        "name": "units",
                        "desc": "Account's units for the current value calculation"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,(uint64,uint64))",
                    "desc": "Units current value in denomination asset, Accrued interest in denomination asset"
                },
                "desc": "Get account's units current value and accrued interest"
            },
            {
                "name": "get_coupon_rates",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint16[]",
                    "desc": "Coupon rates"
                },
                "desc": "Get D-ASA coupon rates"
            },
            {
                "name": "get_payment_amount",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Interest amount in denomination asset, Principal amount in denomination asset"
                },
                "desc": "Get the next payment amount"
            },
            {
                "name": "get_coupons_status",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,(uint64,uint64),bool)",
                    "desc": "Total coupons, Due coupons, Next coupon due date, (Day count factor numerator, Day count factor denominator), All due coupons paid"
                },
                "desc": "Get D-ASA coupons status"
            },
            {
                "name": "asset_create",
                "args": [
                    {
                        "type": "address",
                        "name": "arranger",
                        "desc": "D-ASA Arranger Address"
                    },
                    {
                        "type": "(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],byte[])",
                        "name": "metadata",
                        "desc": "D-ASA metadata"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create a new D-ASA"
            },
            {
                "name": "asset_config",
                "args": [
                    {
                        "type": "uint64",
                        "name": "denomination_asset_id",
                        "desc": "Denomination asset identifier"
                    },
                    {
                        "type": "uint64",
                        "name": "settlement_asset_id",
                        "desc": "Settlement asset identifier"
                    },
                    {
                        "type": "uint64",
                        "name": "principal",
                        "desc": "Principal, expressed in denomination asset"
                    },
                    {
                        "type": "uint64",
                        "name": "minimum_denomination",
                        "desc": "Minimum denomination, expressed in denomination asset"
                    },
                    {
                        "type": "uint8",
                        "name": "day_count_convention",
                        "desc": "Day-count convention for interests calculation"
                    },
                    {
                        "type": "uint16",
                        "name": "interest_rate",
                        "desc": "Interest rate in bps"
                    },
                    {
                        "type": "uint16[]",
                        "name": "coupon_rates",
                        "desc": "Coupon interest rates in bps"
                    },
                    {
                        "type": "uint64[]",
                        "name": "time_events",
                        "desc": "Time events (strictly ascending order)"
                    },
                    {
                        "type": "(uint64,uint64)[]",
                        "name": "time_periods",
                        "desc": "Time periods of recurring time events"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Configure the Debt Algorand Standard Application"
            },
            {
                "name": "set_secondary_time_events",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "secondary_market_time_events",
                        "desc": "Secondary market time events (strictly ascending order)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Secondary Market Opening Date, Secondary Market Closure Date"
                },
                "desc": "Set secondary market time schedule"
            },
            {
                "name": "assign_role",
                "args": [
                    {
                        "type": "address",
                        "name": "role_address",
                        "desc": "Account Role Address"
                    },
                    {
                        "type": "uint8",
                        "name": "role",
                        "desc": "Role identifier"
                    },
                    {
                        "type": "byte[]",
                        "name": "config",
                        "desc": "Role configuration (Optional)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the role assignment"
                },
                "desc": "Assign a role to an address"
            },
            {
                "name": "revoke_role",
                "args": [
                    {
                        "type": "address",
                        "name": "role_address",
                        "desc": "Account Role Address"
                    },
                    {
                        "type": "uint8",
                        "name": "role",
                        "desc": "Role identifier"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the role revocation"
                },
                "desc": "Revoke a role from an address"
            },
            {
                "name": "open_account",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "address",
                        "name": "payment_address",
                        "desc": "Account Payment Address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the account opening"
                },
                "desc": "Open D-ASA account"
            },
            {
                "name": "close_account",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Closed units, Timestamp of the account closing"
                },
                "desc": "Close D-ASA account"
            },
            {
                "name": "primary_distribution",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "uint64",
                        "name": "units",
                        "desc": "Amount of D-ASA units to distribute"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Remaining D-ASA units to be distributed"
                },
                "desc": "Distribute D-ASA units to accounts according the primary market"
            },
            {
                "name": "set_asset_suspension",
                "args": [
                    {
                        "type": "bool",
                        "name": "suspended",
                        "desc": "Suspension status"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the set asset suspension status"
                },
                "desc": "Set asset suspension status"
            },
            {
                "name": "set_account_suspension",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "bool",
                        "name": "suspended",
                        "desc": "Suspension status"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the set account suspension status"
                },
                "desc": "Set account suspension status"
            },
            {
                "name": "set_default_status",
                "args": [
                    {
                        "type": "bool",
                        "name": "defaulted",
                        "desc": "Default status"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set D-ASA default status"
            },
            {
                "name": "get_asset_info",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)",
                    "desc": "Denomination asset ID, Settlement asset ID, Outstanding principal, Unit nominal value, Day-count convention, Interest rate, Total supply, Circulating supply, Primary distribution opening date, Primary distribution closure date, Issuance date, Maturity date, Suspended, Performance"
                },
                "desc": "Get D-ASA info"
            },
            {
                "name": "get_account_info",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(address,uint64,uint64,uint64,bool)",
                    "desc": "Payment Address, D-ASA units, Unit nominal value in denomination asset, Paid coupons, Suspended"
                },
                "desc": "Get account info"
            },
            {
                "name": "get_time_events",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64[]",
                    "desc": "Time events"
                },
                "desc": "Get D-ASA time events"
            },
            {
                "name": "get_secondary_market_schedule",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64[]",
                    "desc": "Secondary market schedule"
                },
                "desc": "Get secondary market schedule"
            },
            {
                "name": "get_asset_metadata",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],byte[])",
                    "desc": "Contract type, Calendar, Business day convention, End of month convention, Early repayment effect, Early repayment penalty type, Prospectus hash, Prospectus URL"
                },
                "desc": "Get D-ASA metadata"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL"
    }
}