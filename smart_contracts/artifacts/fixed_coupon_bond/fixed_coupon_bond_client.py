# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Sender Account Holding Address", "name": "sender_holding_address"}, {"type": "address", "desc": "Receiver Account Holding Address", "name": "receiver_holding_address"}, {"type": "uint64", "desc": "Amount of D-ASA units to transfer", "name": "units"}], "name": "asset_transfer", "returns": {"type": "uint64", "desc": "Transferred actualized value in denomination asset"}, "desc": "Transfer D-ASA units between accounts", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}, {"type": "byte[]", "desc": "Additional payment information (Optional)", "name": "payment_info"}], "name": "pay_coupon", "returns": {"type": "(uint64,uint64,byte[])", "desc": "Paid coupon amount in denomination asset, Payment timestamp, Payment context", "struct": "PaymentResult"}, "desc": "Pay due coupon to an account", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}, {"type": "byte[]", "desc": "Additional payment information (Optional)", "name": "payment_info"}], "name": "pay_principal", "returns": {"type": "(uint64,uint64,byte[])", "desc": "Paid principal amount in denomination asset, Payment timestamp, Payment context", "struct": "PaymentResult"}, "desc": "Pay the outstanding principal to an account", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}, {"type": "uint64", "desc": "Account's units for the current value calculation", "name": "units"}], "name": "get_account_units_current_value", "returns": {"type": "(uint64,uint64,(uint64,uint64))", "desc": "Units current value in denomination asset, Accrued interest in denomination asset", "struct": "CurrentUnitsValue"}, "desc": "Get account's units current value and accrued interest", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_coupon_rates", "returns": {"type": "uint16[]", "desc": "Coupon rates"}, "desc": "Get D-ASA coupon rates", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}], "name": "get_payment_amount", "returns": {"type": "(uint64,uint64)", "desc": "Interest amount in denomination asset, Principal amount in denomination asset", "struct": "PaymentAmounts"}, "desc": "Get the next payment amount", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_coupons_status", "returns": {"type": "(uint64,uint64,uint64,(uint64,uint64),bool)", "desc": "Total coupons, Due coupons, Next coupon due date, (Day count factor numerator, Day count factor denominator), All due coupons paid", "struct": "CouponsInfo"}, "desc": "Get D-ASA coupons status", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "address", "desc": "D-ASA Arranger Address", "name": "arranger"}, {"type": "(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)", "desc": "D-ASA metadata", "name": "metadata", "struct": "AssetMetadata"}], "name": "asset_create", "returns": {"type": "void"}, "desc": "Create a new D-ASA", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["UpdateApplication"], "create": []}, "args": [{"type": "(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)", "name": "metadata", "struct": "AssetMetadata"}], "name": "asset_update", "returns": {"type": "void"}, "desc": "Update D-ASA application.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "Denomination asset identifier", "name": "denomination_asset_id"}, {"type": "uint64", "desc": "Settlement asset identifier", "name": "settlement_asset_id"}, {"type": "uint64", "desc": "Principal, expressed in denomination asset", "name": "principal"}, {"type": "uint64", "desc": "Principal discount in bps", "name": "principal_discount"}, {"type": "uint64", "desc": "Minimum denomination, expressed in denomination asset", "name": "minimum_denomination"}, {"type": "uint8", "desc": "Day-count convention for interests calculation", "name": "day_count_convention"}, {"type": "uint16", "desc": "Interest rate in bps", "name": "interest_rate"}, {"type": "uint16[]", "desc": "Coupon interest rates in bps", "name": "coupon_rates"}, {"type": "uint64[]", "desc": "Time events (strictly ascending order)", "name": "time_events"}, {"type": "(uint64,uint64)[]", "desc": "Time periods of recurring time events", "name": "time_periods"}], "name": "asset_config", "returns": {"type": "void"}, "desc": "Configure the Debt Algorand Standard Application", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64[]", "desc": "Secondary market time events (strictly ascending order)", "name": "secondary_market_time_events"}], "name": "set_secondary_time_events", "returns": {"type": "(uint64,uint64)", "desc": "Secondary Market Opening Date, Secondary Market Closure Date", "struct": "SecondaryMarketSchedule"}, "desc": "Set secondary market time schedule", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Role Address", "name": "role_address"}, {"type": "uint8", "desc": "Role identifier", "name": "role"}, {"type": "byte[]", "desc": "Role configuration (Optional)", "name": "config"}], "name": "assign_role", "returns": {"type": "uint64", "desc": "Timestamp of the role assignment"}, "desc": "Assign a role to an address", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Role Address", "name": "role_address"}, {"type": "uint8", "desc": "Role identifier", "name": "role"}], "name": "revoke_role", "returns": {"type": "uint64", "desc": "Timestamp of the role revocation"}, "desc": "Revoke a role from an address", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}, {"type": "address", "desc": "Account Payment Address", "name": "payment_address"}], "name": "open_account", "returns": {"type": "uint64", "desc": "Timestamp of the account opening"}, "desc": "Open D-ASA account", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}], "name": "close_account", "returns": {"type": "(uint64,uint64)", "desc": "Closed units, Timestamp of the account closing"}, "desc": "Close D-ASA account", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}, {"type": "uint64", "desc": "Amount of D-ASA units to distribute", "name": "units"}], "name": "primary_distribution", "returns": {"type": "uint64", "desc": "Remaining D-ASA units to be distributed"}, "desc": "Distribute D-ASA units to accounts according the primary market", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "bool", "desc": "Suspension status", "name": "suspended"}], "name": "set_asset_suspension", "returns": {"type": "uint64", "desc": "Timestamp of the set asset suspension status"}, "desc": "Set asset suspension status", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}, {"type": "bool", "desc": "Suspension status", "name": "suspended"}], "name": "set_account_suspension", "returns": {"type": "uint64", "desc": "Timestamp of the set account suspension status"}, "desc": "Set account suspension status", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "bool", "desc": "Default status", "name": "defaulted"}], "name": "set_default_status", "returns": {"type": "void"}, "desc": "Set D-ASA default status", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_asset_info", "returns": {"type": "(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)", "desc": "Denomination asset ID, Settlement asset ID, Outstanding principal, Unit nominal value, Day-count convention, Interest rate, Total supply, Circulating supply, Primary distribution opening date, Primary distribution closure date, Issuance date, Maturity date, Suspended, Performance", "struct": "AssetInfo"}, "desc": "Get D-ASA info", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Account Holding Address", "name": "holding_address"}], "name": "get_account_info", "returns": {"type": "(address,uint64,uint64,uint64,bool)", "desc": "Payment Address, D-ASA units, Unit nominal value in denomination asset, Paid coupons, Suspended", "struct": "AccountInfo"}, "desc": "Get account info", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_time_events", "returns": {"type": "uint64[]", "desc": "Time events"}, "desc": "Get D-ASA time events", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_secondary_market_schedule", "returns": {"type": "uint64[]", "desc": "Secondary market schedule"}, "desc": "Get secondary market schedule", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_asset_metadata", "returns": {"type": "(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)", "desc": "Contract type, Calendar, Business day convention, End of month convention, Early repayment effect, Early repayment penalty type, Prospectus hash, Prospectus URL", "struct": "AssetMetadata"}, "desc": "Get D-ASA metadata", "events": [], "readonly": true, "recommendations": {}}], "name": "FixedCouponBond", "state": {"keys": {"box": {"coupon_rates": {"key": "Y291cG9uUmF0ZXM=", "keyType": "AVMBytes", "valueType": "uint16[]"}, "time_events": {"key": "dGltZUV2ZW50cw==", "keyType": "AVMBytes", "valueType": "uint64[]"}, "time_periods": {"key": "dGltZVBlcmlvZHM=", "keyType": "AVMBytes", "valueType": "(uint64,uint64)[]"}}, "global": {"arranger": {"key": "UjIwIw==", "keyType": "AVMBytes", "valueType": "AVMBytes"}, "denomination_asset_id": {"key": "ZGVub21pbmF0aW9uX2Fzc2V0X2lk", "keyType": "AVMString", "valueType": "AVMUint64"}, "settlement_asset_id": {"key": "c2V0dGxlbWVudF9hc3NldF9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "unit_value": {"key": "dW5pdF92YWx1ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "day_count_convention": {"key": "ZGF5X2NvdW50X2NvbnZlbnRpb24=", "keyType": "AVMString", "valueType": "AVMUint64"}, "metadata": {"key": "bWV0YWRhdGE=", "keyType": "AVMString", "valueType": "AVMBytes"}, "total_units": {"key": "dG90YWxfdW5pdHM=", "keyType": "AVMString", "valueType": "AVMUint64"}, "circulating_units": {"key": "Y2lyY3VsYXRpbmdfdW5pdHM=", "keyType": "AVMString", "valueType": "AVMUint64"}, "principal_discount": {"key": "cHJpbmNpcGFsX2Rpc2NvdW50", "keyType": "AVMString", "valueType": "AVMUint64"}, "interest_rate": {"key": "aW50ZXJlc3RfcmF0ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "total_coupons": {"key": "dG90YWxfY291cG9ucw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "primary_distribution_opening_date": {"key": "cHJpbWFyeV9kaXN0cmlidXRpb25fb3BlbmluZ19kYXRl", "keyType": "AVMString", "valueType": "AVMUint64"}, "primary_distribution_closure_date": {"key": "cHJpbWFyeV9kaXN0cmlidXRpb25fY2xvc3VyZV9kYXRl", "keyType": "AVMString", "valueType": "AVMUint64"}, "issuance_date": {"key": "aXNzdWFuY2VfZGF0ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "secondary_market_opening_date": {"key": "c2Vjb25kYXJ5X21hcmtldF9vcGVuaW5nX2RhdGU=", "keyType": "AVMString", "valueType": "AVMUint64"}, "secondary_market_closure_date": {"key": "c2Vjb25kYXJ5X21hcmtldF9jbG9zdXJlX2RhdGU=", "keyType": "AVMString", "valueType": "AVMUint64"}, "maturity_date": {"key": "bWF0dXJpdHlfZGF0ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "status": {"key": "c3RhdHVz", "keyType": "AVMString", "valueType": "AVMUint64"}, "suspended": {"key": "c3VzcGVuZGVk", "keyType": "AVMString", "valueType": "AVMUint64"}, "defaulted": {"key": "ZGVmYXVsdGVk", "keyType": "AVMString", "valueType": "AVMUint64"}, "due_coupons_watermark": {"key": "ZHVlX2NvdXBvbnNfd2F0ZXJtYXJr", "keyType": "AVMString", "valueType": "AVMUint64"}, "paid_coupon_units": {"key": "cGFpZF9jb3Vwb25fdW5pdHM=", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"account_manager": {"keyType": "address", "valueType": "RoleConfig", "prefix": "UjQwIw=="}, "primary_dealer": {"keyType": "address", "valueType": "RoleConfig", "prefix": "UjUwIw=="}, "trustee": {"keyType": "address", "valueType": "RoleConfig", "prefix": "UjYwIw=="}, "authority": {"keyType": "address", "valueType": "RoleConfig", "prefix": "UjcwIw=="}, "interest_oracle": {"keyType": "address", "valueType": "RoleConfig", "prefix": "UjgwIw=="}, "account": {"keyType": "address", "valueType": "AccountInfo", "prefix": "UjMwIw=="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 2, "ints": 20}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"AccountInfo": [{"name": "payment_address", "type": "address"}, {"name": "units", "type": "uint64"}, {"name": "unit_value", "type": "uint64"}, {"name": "paid_coupons", "type": "uint64"}, {"name": "suspended", "type": "bool"}], "AssetInfo": [{"name": "denomination_asset_id", "type": "uint64"}, {"name": "settlement_asset_id", "type": "uint64"}, {"name": "outstanding_principal", "type": "uint64"}, {"name": "unit_value", "type": "uint64"}, {"name": "day_count_convention", "type": "uint8"}, {"name": "principal_discount", "type": "uint16"}, {"name": "interest_rate", "type": "uint16"}, {"name": "total_supply", "type": "uint64"}, {"name": "circulating_supply", "type": "uint64"}, {"name": "primary_distribution_opening_date", "type": "uint64"}, {"name": "primary_distribution_closure_date", "type": "uint64"}, {"name": "issuance_date", "type": "uint64"}, {"name": "maturity_date", "type": "uint64"}, {"name": "suspended", "type": "bool"}, {"name": "performance", "type": "uint8"}], "AssetMetadata": [{"name": "contract_type", "type": "uint8"}, {"name": "calendar", "type": "uint8"}, {"name": "business_day_convention", "type": "uint8"}, {"name": "end_of_month_convention", "type": "uint8"}, {"name": "prepayment_effect", "type": "uint8"}, {"name": "penalty_type", "type": "uint8"}, {"name": "prospectus_hash", "type": "byte[32]"}, {"name": "prospectus_url", "type": "string"}], "CouponsInfo": [{"name": "total_coupons", "type": "uint64"}, {"name": "due_coupons", "type": "uint64"}, {"name": "next_coupon_due_date", "type": "uint64"}, {"name": "day_count_factor", "type": "DayCountFactor"}, {"name": "all_due_coupons_paid", "type": "bool"}], "CurrentUnitsValue": [{"name": "units_value", "type": "uint64"}, {"name": "accrued_interest", "type": "uint64"}, {"name": "day_count_factor", "type": "DayCountFactor"}], "DayCountFactor": [{"name": "numerator", "type": "uint64"}, {"name": "denominator", "type": "uint64"}], "PaymentAmounts": [{"name": "interest", "type": "uint64"}, {"name": "principal", "type": "uint64"}], "PaymentResult": [{"name": "amount", "type": "uint64"}, {"name": "timestamp", "type": "uint64"}, {"name": "context", "type": "byte[]"}], "RoleConfig": [{"name": "role_validity_start", "type": "uint64"}, {"name": "role_validity_end", "type": "uint64"}], "SecondaryMarketSchedule": [{"name": "secondary_market_opening_date", "type": "uint64"}, {"name": "secondary_market_closure_date", "type": "uint64"}]}, "byteCode": {"approval": "CiAIAAEgCMAD/wGAowXIASYkBBUffHUEUjMwIxFjaXJjdWxhdGluZ191bml0cwZzdGF0dXMNdG90YWxfY291cG9ucw1pc3N1YW5jZV9kYXRlDW1hdHVyaXR5X2RhdGUTc2V0dGxlbWVudF9hc3NldF9pZAgAAAAAAAAAACFwcmltYXJ5X2Rpc3RyaWJ1dGlvbl9vcGVuaW5nX2RhdGUKdGltZUV2ZW50cwEACnVuaXRfdmFsdWUUZGF5X2NvdW50X2NvbnZlbnRpb24LdG90YWxfdW5pdHMdc2Vjb25kYXJ5X21hcmtldF9vcGVuaW5nX2RhdGUdc2Vjb25kYXJ5X21hcmtldF9jbG9zdXJlX2RhdGULY291cG9uUmF0ZXMEUjIwIxVkZW5vbWluYXRpb25fYXNzZXRfaWQIbWV0YWRhdGEScHJpbmNpcGFsX2Rpc2NvdW50IXByaW1hcnlfZGlzdHJpYnV0aW9uX2Nsb3N1cmVfZGF0ZQlzdXNwZW5kZWQJZGVmYXVsdGVkFWR1ZV9jb3Vwb25zX3dhdGVybWFyaxFwYWlkX2NvdXBvbl91bml0cw1pbnRlcmVzdF9yYXRlBFI0MCMEUjcwIwRSNjAjBFI1MCMDBoEBAgASAgAABFI4MCMxGEAAbCcSMgNnJxMiZycHImcnDCJnJw0iZycUgABnJw4iZyoiZycVImcnGyJnJwQiZycJImcnFiJnJwUiZycPImcnECJnJwYiZysiZycXImcnGCJnMTWBAhJEMTSBFBJEMTcURDE2FEQnGSJnJxoiZzEbQQCvghgET9ajzASM8UtRBJx2tqMERDY9SQRTvvBFBGfbTyAE9qlsjQQ/DvxsBCXbqVsEiUdBNAQdb8JVBP73RWcEuPwTkAQ9Q9HwBOvZay8EbIXj7gT2Os6NBLvMoYoEGnurtARALbpHBO0CdZ8E+tIXPgQI7+o1BOSlq1Q2GgCOGAHRAbsBpQGPAX8BbAFcAUkBOAEOAPsA4gDMALYAowCNAHoAZABVAEUAMgAiABIAAiJDMRkURDEYRIgOpihMULAjQzEZFEQxGESIDoIoTFCwI0MxGRREMRhEiA5YKExQsCNDMRkURDEYRDYaAYgONihMULAjQzEZFEQxGESIDVkoTFCwI0MxGRREMRhENhoBiA0JI0MxGRREMRhENhoBNhoCiAzYKExQsCNDMRkURDEYRDYaAYgMsyhMULAjQzEZFEQxGEQ2GgE2GgKIC+AoTFCwI0MxGRREMRhENhoBiAugKExQsCNDMRkURDEYRDYaATYaAogLWChMULAjQzEZFEQxGEQ2GgE2GgKICqYoTFCwI0MxGRREMRhENhoBNhoCNhoDiAnFKExQsCNDMRkURDEYRDYaAYgJNyhMULAjQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgU2GgY2Ggc2Ggg2Ggk2GgqIB+AjQzEZgQQSRDEYRDYaAYgHwyNDMRkURDEYFEQ2GgE2GgKIB6IjQzEZFEQxGESIBc0oTFCwI0MxGRREMRhENhoBiAVfKExQsCNDMRkURDEYRIgFNShMULAjQzEZFEQxGEQ2GgE2GgKIBH8oTFCwI0MxGRREMRhENhoBNhoCiAPvKExQsCNDMRkURDEYRDYaATYaAogDTChMULAjQzEZFEQxGEQ2GgE2GgI2GgOIAeMoTFCwI0OKAgCL/oEKCIsAMgwNQQAqsYEGshCBBbIZJyCyHicgsh+L/40CAAsABLNC/9syALIBQv/1IrIBQv/viYoAAYAAMgdJIicZZUxOAkQiJwZlRA9BABMiJwRlTIwCRCcZiwJJTgJnjACJIicFZUSLAQxB/+oiJxllRIEDCEmMACcKvkRXAgBMJQtbiwEOQQAbIQUiiP9siwAjCEmMACcKvkRXAgBMJQtbQv/fiwCBAwmMAkL/qYoBAYEDi/8IIwknCr5EVwIATCULW4mKAQEiSScEZUSL/w1BAAmL/yMIiP/UjACLAEyJigEBIicaZUQiKmVEi/8LD4mKAgApi/5QvkRXMAiL/xaoRImKAgGL/yMJJxG+RFcCAEyBAgtZi/4LgZBOComKAQGAAEcEi/9AAEAiJwVlRDIHSwEJSU4CjACL/4j/hkwJSYwDIicNZURMjARMjAFAAA6LACEGCosDIQYKjASMAYsEiwEWTBZQjACJIowCi/9BAAeL/4j/N4wCiwJC/7GKAQEiJwVlREEAGDIHIicFZUQPQQANIicEZUSL/w1BAAIjiSKJigMBi/2L/4j/RIv/iP9sSSJbTCVbJxG+RFcCAIv/gQILWYv9i/6IBRMLTwILgZBOTwILComKAwEiRwOAAEmL/xciK2VEgWQSQQE2IicPZUQyB0mMBQ5BASgiJxBlRIsFDUEBHSNEMQCL/RJEiAOEiAOJKYv9UEmMAkm9RQFEKYv+UEmMA0m9RQFESwG+RCEEUycLIk8CVCJTFERJvkQhBFMnCyJPAlQiUxRESwG+RCRbiwYPREy+RFcoCIwBvkQkW0EAnosCvkRXKAiLA75EVygIqEEAiIsCvkRXMAiLA75EVzAIqEEAdiNEiP2mi/1LAYj+WosCSU4CvkyMAESL/YsGSU4ETwKI/vaMBEm+RCRbSwIJFksBvkRMXCBLAUy/iwNJvkQkW08DCBZLAb5ETFwgv75EJFtAABWLAkm+RCcIXChLAUy/Sb5EJwhcML+LAIEoW4sGC4sECBaMAIkiQv+HiwNJvkSLAVwoSwFMv4sCvkRLAb5ETFcwCFwwv0L/aSJC/uCKAgEiK2VEgWQSRIgCYIgCZSmL/lBHAr1FAURJvkQkW0lOAkSI/OdMvkSBMFtJTwJLAQ1EiP2BRIv+iAMZQQBJi/6IA4KLAiMIiP2PRwKIAzeLAL5EVwAgTIgDPosASb5EgTBbIwgWSwG+RExcML8iJxplRIsBCCcaTGcWMgcWUCchUIv/UIwAiSJC/8+KAgEiK2VEgWQSRIgB04gB2CmL/lBHAr1FAUS+RCRbRDIHIicGZUQPRIj8VYj8/ESL/ogClEEAPov+iAL9RwKIArmLAL5EVwAgTIgCwCIqZUSLAElOAr5EJFsJKkxnSb5EJwhcIL+IAuMWMgcWUCchUIv/UEyJIkL/04oCASKAAEcFIicJZURBAIwyByInCWVED0EAgSNEKYv+UEmMAL1FAUSL/ycIpUEAaIsAvkQkWxaL/6dBAFsjRIv/F0mMBov+TIgCZYwBIowCIowFIowDiPuuSYwEi/5LAYj8X4j86UEAGosESYj8gIv+iwZPA4j8/IwCSSJbjAUlW4wDiwEWiwIWiwUWiwMWUE4CUExQjACJIkL/oiJC/3yKAAEnIiIrZUSBZBJBAAcnEb5MjABEiwBMiYoBAYAAKYv/UEm9RQFEIkcEK2VEgWQSTE4CQQApiwG+RIEwW0mMACInBGVEDEEAIYv/iAHRiwAjCIj73owCiwOMBIsCjAWLBIsFFkwWUIwAiYv/iAGwjANC/+OKAAGI+uxHAoj7dUxJiPuMTCJMIkyI/CJBAA6LAIj7ukkiW4wDJVuMBCInBGVEFosAFosBFosDFosEFlAnCyKLAlRPBE8EUE8DUE8CUExQjACJIicYZUQURIkiJxdlRBREiTEAIicSZUQSRImKAAAiJxwxAFBJvUUBQQAhiwG+RFcACDIHFkmMAKZBABCLAb5EVwgIiwCnQQADI0SJIkL/+ooAACInHTEAUEm9RQFBACGLAb5EVwAIMgcWSYwApkEAEIsBvkRXCAiLAKdBAAMjRIkiQv/6igEBgABJi/9XAgCL/4ECWzIHDUSL/yJZIwkiiwSLAwxBADyBQSOI+biLBEklC4sCSU4DTFtJTgOMASMISYwEJQtbSYwADEQiJw1lRCEFE0H/yYsAiwEJIQYYFERC/7yL/4wAiYoBASmL/1BJvkRXACAiJwdlRHAARQFBABWLAL5EIQRTJwsiTwJUIlNAAAMjTIkiQv/6igEAMgoiJwdlRHAARIv/D0SJigIAsTIAIicHZUSL/7ISi/6yFLIRgQSyELIBs4mKAgEpi/5QvkSBKFuL/wuJigEBKYv/UL5EJFuL/0yI/9+JIiplREAABCshB2eJigIAJxKL/mcnFIv/Z4mKAQCI/oUnFIv/Z4mKCgAigABHAoj+dCIrZUQURIv2F0lBAQ2LBHELRDIDE0EBAiNEJxOLBGeL9xciJxNlREsBEkQnB0xnsTIAIicHZUQyCiKyErIUshGBBLIQsgGzi/gXi/oXShgURCcMSwFnCicOTGeL+RcnFUxni/sXSYwBQQAIiwEhBRJBAKMjRCcNiwFni/wXjAIiJxVlREAAA4sCRCcbiwJni/0iWUlEJwRMZyInBGVEQQAJJxG8SCcRi/2/i/4iWSInBGVEgQQIEkSL/oj+K4z+Jwq8SCcKi/6/i/5XAgCMAIv+gQJbJwlMZ4v+gQpbJxZMZ4v+gRJbJwVMZ4v+IllJjAMiJwRlRIEECBJBAA6LAyMJJQuLAExbJwZMZ4v/IlkURCuBZGeJIkL/WiJC/vuKAQEiiP1PIitlRCEHEhREiP0zi/8iWUlEIw2L/0xBAAqL/4j9pEmM/4wBiwGM/yInBWVEi/9XAgCMAIv/gQJbTEsBDkQnD0xnIicGZURBABoiJwZlRIv/IlkjCSULiwBMW0xLAQ9EJxBMZyInD2VEFiInEGVEFlCMAImKAwGI/NWI/MKL/hdJgRQSQAAoiwCBKBJAACCLAIEyEkAAGIsAgTwSQAAQiwCBRhJAAAiLAIFQEkEAiSNEgwYUKDI8RlCLAI4GAGcAUwA/ACsAFwABACcji/1QSb1FARREi/9XAgC/MgcWTIknHYv9UEm9RQEURIv/VwIAv0L/5ycei/1QSb1FARREi/9XAgC/Qv/TJx+L/VBJvUUBFESL/1cCAL9C/78nHIv9UEm9RQEURIv/VwIAv0L/qycSi/1nQv+jIkL/dIoCAYj8DYj7+ov/F0mBKBJAACCLAIEyEkAAGIsAgTwSQAAQiwCBRhJAAAiLAIFQEkEAZSNEgwUoMjxGUIsAjgUAPwAwACEAEgABACcji/5QSb1FAUS8SDIHFkyJJx2L/lBJvUUBRLxIQv/sJx6L/lBJvUUBRLxIQv/dJx+L/lBJvUUBRLxIQv/OJxyL/lBJvUUBRLxIQv+/IkL/mIoCAYj7eyIrZUQhBxIURIj7VYj7WimL/lBJvUUBFESL/ycIUCcIUCcIUCcLUL8yBxaJigEBiPtJiPssKYv/UEm9RQFESb5EJFtMvEgiKmVESwEJKkxniPx5FjIHFlCJigIBIkmAACIrZUSBZBJBAKgiJwllRDIHSYwCDkEAmiInFmVEiwINQQCPI0QnHzEAUEmMAL1FAUEAe4sAvkRXAAgyBxZJjAGmQQBqiwC+RFcICIsBp0EAXSNEKYv+UEm9RQFEiPqiiPqni/8XSUQiKmVESwEIIicOZUQORCIqZURLAQgqTGdLAb5EJFsIFksBvkRMXCBLAUy/IicMZUQWSwG+RExcKL8iJw5lRCIqZUQJFowAiSJC/6AiQv9uigEBiPqUi/8iUycXTGcyBxaJigIBiPqCKYv+UEm9RQFESb5Ei/8iUyEETFS/MgcWiYoBACInHjEAUEm9RQFBACmLAb5EVwAIMgcWSYwApkEAGIsBvkRXCAiLAKdBAAsjRIv/IlMnGExniSJC//KKAAEiSTIHIicGZUxJTgJOBEQNQQANiwCMAosBQQAEgQSMAosCjAAiJxhlREEABIEDjAAiJxNlRBYiJwdlRBYiKmVEIicMZUQLFiInDGVEFiInDWVEFlcHASInFWVEFlcGAiInG2VEFlcGAiInDmVEFiIqZUQWIicJZUQWIicWZUQWIicFZUQWIicGZUQWIicXZUQnCyJPAlSLABZXBwFPDk8OUE8NUE8MUE8LUE8KUE8JUE8IUE8HUE8GUE8FUE8EUE8DUE8CUExQjACJigEBKYv/UEm9RQFEvkSJigABJyIiK2VEgWQSQQAHJwq+TIwARIsATIkiJw9lRBYiJxBlRBZQgAIAAkxQiSInFGVEiQ==", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 4, "patch": 2}}, "desc": "\n    Fixed Coupon Bond, placed at nominal value, fixed coupon rates and payment time schedule, principal at maturity.\n    ", "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [4084], "errorMessage": "Can not distribute zero units"}, {"pc": [3263], "errorMessage": "Coupon rates are not properly defined"}, {"pc": [3120], "errorMessage": "D-ASA already configured"}, {"pc": [2709], "errorMessage": "Defaulted"}, {"pc": [3140], "errorMessage": "Denomination asset is not properly set"}, {"pc": [3157], "errorMessage": "Different settlement asset not supported, must be equal to denomination asset"}, {"pc": [1523, 1876, 1892, 1899, 1910, 1917, 2068, 2166, 2292, 2749, 2766, 2802, 2819, 2945, 4037, 4054, 4233, 4250], "errorMessage": "Index access is out of bounds"}, {"pc": [4098], "errorMessage": "Insufficient remaining D-ASA units"}, {"pc": [1872], "errorMessage": "Insufficient sender units to transfer"}, {"pc": [3252], "errorMessage": "Interest rate is not properly defined"}, {"pc": [1817, 1829, 2107, 2248, 2383, 2543, 3910, 3947, 4073, 4196, 4490], "errorMessage": "Invalid account holding address"}, {"pc": [3620, 3642, 3662, 3682, 3702, 3808, 3825, 3840, 3855, 3870], "errorMessage": "Invalid account role address"}, {"pc": [2406], "errorMessage": "Invalid amount of units for the account"}, {"pc": [3231], "errorMessage": "Invalid day-count convention ID"}, {"pc": [3584, 3776], "errorMessage": "Invalid role identifier"}, {"pc": [3503], "errorMessage": "Invalid secondary market closure date"}, {"pc": [3469], "errorMessage": "Invalid secondary market opening date"}, {"pc": [3195], "errorMessage": "Minimum denomination is not a divisor of principal"}, {"pc": [2116, 2253], "errorMessage": "No D-ASA units"}, {"pc": [2132], "errorMessage": "No due coupon to pay"}, {"pc": [1799, 2091, 2232, 2727, 2776, 2829, 3416, 3894, 4064, 4260], "errorMessage": "Not authorized"}, {"pc": [3001], "errorMessage": "Not enough funds for the payment"}, {"pc": [2262], "errorMessage": "Not mature"}, {"pc": [783, 799, 815, 831, 850, 866, 881, 903, 922, 944, 963, 985, 1007, 1032, 1051, 1110, 1129, 1145, 1164, 1180, 1202, 1224, 1246], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [1095], "errorMessage": "OnCompletion is not UpdateApplication"}, {"pc": [1530, 2136, 2269], "errorMessage": "Pending due coupon payment"}, {"pc": [4018], "errorMessage": "Primary distribution is closed"}, {"pc": [2372], "errorMessage": "Primary distribution not yet executed"}, {"pc": [1793], "errorMessage": "Secondary market is closed"}, {"pc": [1925], "errorMessage": "Sender and receiver units are not fungible"}, {"pc": [1846, 1862, 2717], "errorMessage": "Suspended operations"}, {"pc": [3298, 3425], "errorMessage": "Time events length is invalid"}, {"pc": [2854], "errorMessage": "Time events must be set in the future"}, {"pc": [2905], "errorMessage": "Time events must be sorted in strictly ascending order"}, {"pc": [3387], "errorMessage": "Time periods are not properly defined"}, {"pc": [2926], "errorMessage": "Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)"}, {"pc": [575], "errorMessage": "Wrong Global Bytes allocation"}, {"pc": [581], "errorMessage": "Wrong Global UInts allocation"}, {"pc": [585], "errorMessage": "Wrong Local Bytes allocation"}, {"pc": [589], "errorMessage": "Wrong Local UInts allocation"}, {"pc": [2997], "errorMessage": "account opted into asset"}, {"pc": [3132], "errorMessage": "asset exists"}, {"pc": [1114], "errorMessage": "can only call when creating"}, {"pc": [786, 802, 818, 834, 853, 869, 884, 906, 925, 947, 966, 988, 1010, 1035, 1054, 1098, 1132, 1148, 1167, 1183, 1205, 1227, 1249], "errorMessage": "can only call when not creating"}, {"pc": [1522, 1833, 1849, 1866, 1875, 1882, 1891, 1898, 1909, 1916, 1945, 1962, 1972, 1984, 1994, 2000, 2010, 2021, 2050, 2062, 2066, 2110, 2122, 2165, 2177, 2187, 2250, 2291, 2309, 2318, 2395, 2562, 2944, 2963, 3040, 3056, 3950, 4112, 4120, 4137, 4199, 4492], "errorMessage": "check self.account entry exists"}, {"pc": [2748, 2765], "errorMessage": "check self.account_manager entry exists"}, {"pc": [2725], "errorMessage": "check self.arranger exists"}, {"pc": [2801, 2818], "errorMessage": "check self.authority entry exists"}, {"pc": [1508, 2302, 3069, 3959, 4088, 4102, 4150, 4340, 4390], "errorMessage": "check self.circulating_units exists"}, {"pc": [1542, 1716, 2525], "errorMessage": "check self.coupon_rates exists"}, {"pc": [1600, 2910, 4358], "errorMessage": "check self.day_count_convention exists"}, {"pc": [2707, 4317], "errorMessage": "check self.defaulted exists"}, {"pc": [3153, 4329], "errorMessage": "check self.denomination_asset_id exists"}, {"pc": [1342, 1386], "errorMessage": "check self.due_coupons_watermark exists"}, {"pc": [4376], "errorMessage": "check self.interest_rate exists"}, {"pc": [1375, 1575, 1662, 1672, 3452, 4408], "errorMessage": "check self.issuance_date exists"}, {"pc": [1347, 2260, 3478, 3486, 4291, 4414], "errorMessage": "check self.maturity_date exists"}, {"pc": [4544], "errorMessage": "check self.metadata exists"}, {"pc": [1504, 2196], "errorMessage": "check self.paid_coupon_units exists"}, {"pc": [4036, 4053], "errorMessage": "check self.primary_dealer entry exists"}, {"pc": [4010, 4402], "errorMessage": "check self.primary_distribution_closure_date exists"}, {"pc": [2356, 2366, 3996, 4396], "errorMessage": "check self.primary_distribution_opening_date exists"}, {"pc": [3246, 4367], "errorMessage": "check self.principal_discount exists"}, {"pc": [1785, 3518, 4530], "errorMessage": "check self.secondary_market_closure_date exists"}, {"pc": [1771, 3512, 4524], "errorMessage": "check self.secondary_market_opening_date exists"}, {"pc": [2952, 2994, 3013, 3169, 4335], "errorMessage": "check self.settlement_asset_id exists"}, {"pc": [1760, 2087, 2228, 2512, 2549, 3118, 3411, 3889, 3985, 4502], "errorMessage": "check self.status exists"}, {"pc": [2715, 4420], "errorMessage": "check self.suspended exists"}, {"pc": [1396, 1426, 1460, 4515], "errorMessage": "check self.time_events exists"}, {"pc": [1359, 1477, 1681, 2573, 2666, 3272, 3293, 3360], "errorMessage": "check self.total_coupons exists"}, {"pc": [4096, 4146, 4385], "errorMessage": "check self.total_units exists"}, {"pc": [4232, 4249], "errorMessage": "check self.trustee entry exists"}, {"pc": [4132, 4345, 4352], "errorMessage": "check self.unit_value exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class AccountInfo:
    """Struct for AccountInfo"""
    payment_address: str
    units: int
    unit_value: int
    paid_coupons: int
    suspended: bool

@dataclasses.dataclass(frozen=True)
class AssetInfo:
    """Struct for AssetInfo"""
    denomination_asset_id: int
    settlement_asset_id: int
    outstanding_principal: int
    unit_value: int
    day_count_convention: int
    principal_discount: int
    interest_rate: int
    total_supply: int
    circulating_supply: int
    primary_distribution_opening_date: int
    primary_distribution_closure_date: int
    issuance_date: int
    maturity_date: int
    suspended: bool
    performance: int

@dataclasses.dataclass(frozen=True)
class AssetMetadata:
    """Struct for AssetMetadata"""
    contract_type: int
    calendar: int
    business_day_convention: int
    end_of_month_convention: int
    prepayment_effect: int
    penalty_type: int
    prospectus_hash: bytes
    prospectus_url: str

@dataclasses.dataclass(frozen=True)
class DayCountFactor:
    """Struct for DayCountFactor"""
    numerator: int
    denominator: int

@dataclasses.dataclass(frozen=True)
class CouponsInfo:
    """Struct for CouponsInfo"""
    total_coupons: int
    due_coupons: int
    next_coupon_due_date: int
    day_count_factor: DayCountFactor
    all_due_coupons_paid: bool

@dataclasses.dataclass(frozen=True)
class CurrentUnitsValue:
    """Struct for CurrentUnitsValue"""
    units_value: int
    accrued_interest: int
    day_count_factor: DayCountFactor

@dataclasses.dataclass(frozen=True)
class PaymentAmounts:
    """Struct for PaymentAmounts"""
    interest: int
    principal: int

@dataclasses.dataclass(frozen=True)
class PaymentResult:
    """Struct for PaymentResult"""
    amount: int
    timestamp: int
    context: bytes

@dataclasses.dataclass(frozen=True)
class RoleConfig:
    """Struct for RoleConfig"""
    role_validity_start: int
    role_validity_end: int

@dataclasses.dataclass(frozen=True)
class SecondaryMarketSchedule:
    """Struct for SecondaryMarketSchedule"""
    secondary_market_opening_date: int
    secondary_market_closure_date: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class AssetTransferArgs:
    """Dataclass for asset_transfer arguments"""
    sender_holding_address: str
    receiver_holding_address: str
    units: int

    @property
    def abi_method_signature(self) -> str:
        return "asset_transfer(address,address,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PayCouponArgs:
    """Dataclass for pay_coupon arguments"""
    holding_address: str
    payment_info: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "pay_coupon(address,byte[])(uint64,uint64,byte[])"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PayPrincipalArgs:
    """Dataclass for pay_principal arguments"""
    holding_address: str
    payment_info: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "pay_principal(address,byte[])(uint64,uint64,byte[])"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetAccountUnitsCurrentValueArgs:
    """Dataclass for get_account_units_current_value arguments"""
    holding_address: str
    units: int

    @property
    def abi_method_signature(self) -> str:
        return "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetPaymentAmountArgs:
    """Dataclass for get_payment_amount arguments"""
    holding_address: str

    @property
    def abi_method_signature(self) -> str:
        return "get_payment_amount(address)(uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AssetConfigArgs:
    """Dataclass for asset_config arguments"""
    denomination_asset_id: int
    settlement_asset_id: int
    principal: int
    principal_discount: int
    minimum_denomination: int
    day_count_convention: int
    interest_rate: int
    coupon_rates: list[int]
    time_events: list[int]
    time_periods: list[tuple[int, int]]

    @property
    def abi_method_signature(self) -> str:
        return "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetSecondaryTimeEventsArgs:
    """Dataclass for set_secondary_time_events arguments"""
    secondary_market_time_events: list[int]

    @property
    def abi_method_signature(self) -> str:
        return "set_secondary_time_events(uint64[])(uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AssignRoleArgs:
    """Dataclass for assign_role arguments"""
    role_address: str
    role: int
    config: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "assign_role(address,uint8,byte[])uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RevokeRoleArgs:
    """Dataclass for revoke_role arguments"""
    role_address: str
    role: int

    @property
    def abi_method_signature(self) -> str:
        return "revoke_role(address,uint8)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class OpenAccountArgs:
    """Dataclass for open_account arguments"""
    holding_address: str
    payment_address: str

    @property
    def abi_method_signature(self) -> str:
        return "open_account(address,address)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CloseAccountArgs:
    """Dataclass for close_account arguments"""
    holding_address: str

    @property
    def abi_method_signature(self) -> str:
        return "close_account(address)(uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PrimaryDistributionArgs:
    """Dataclass for primary_distribution arguments"""
    holding_address: str
    units: int

    @property
    def abi_method_signature(self) -> str:
        return "primary_distribution(address,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetAssetSuspensionArgs:
    """Dataclass for set_asset_suspension arguments"""
    suspended: bool

    @property
    def abi_method_signature(self) -> str:
        return "set_asset_suspension(bool)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetAccountSuspensionArgs:
    """Dataclass for set_account_suspension arguments"""
    holding_address: str
    suspended: bool

    @property
    def abi_method_signature(self) -> str:
        return "set_account_suspension(address,bool)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetDefaultStatusArgs:
    """Dataclass for set_default_status arguments"""
    defaulted: bool

    @property
    def abi_method_signature(self) -> str:
        return "set_default_status(bool)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetAccountInfoArgs:
    """Dataclass for get_account_info arguments"""
    holding_address: str

    @property
    def abi_method_signature(self) -> str:
        return "get_account_info(address)(address,uint64,uint64,uint64,bool)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AssetCreateArgs:
    """Dataclass for asset_create arguments"""
    arranger: str
    metadata: AssetMetadata

    @property
    def abi_method_signature(self) -> str:
        return "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AssetUpdateArgs:
    """Dataclass for asset_update arguments"""
    metadata: AssetMetadata

    @property
    def abi_method_signature(self) -> str:
        return "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void"


class _FixedCouponBondUpdate:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def asset_update(
        self,
        args: tuple[AssetMetadata] | AssetUpdateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppUpdateMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.params.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }))


class FixedCouponBondParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_FixedCouponBondUpdate":
        return _FixedCouponBondUpdate(self.app_client)

    def asset_transfer(
        self,
        args: tuple[str, str, int] | AssetTransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_transfer(address,address,uint64)uint64",
            "args": method_args,
        }))

    def pay_coupon(
        self,
        args: tuple[str, bytes | str] | PayCouponArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_coupon(address,byte[])(uint64,uint64,byte[])",
            "args": method_args,
        }))

    def pay_principal(
        self,
        args: tuple[str, bytes | str] | PayPrincipalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_principal(address,byte[])(uint64,uint64,byte[])",
            "args": method_args,
        }))

    def get_account_units_current_value(
        self,
        args: tuple[str, int] | GetAccountUnitsCurrentValueArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))",
            "args": method_args,
        }))

    def get_coupon_rates(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_coupon_rates()uint16[]",
        }))

    def get_payment_amount(
        self,
        args: tuple[str] | GetPaymentAmountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_payment_amount(address)(uint64,uint64)",
            "args": method_args,
        }))

    def get_coupons_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)",
        }))

    def asset_config(
        self,
        args: tuple[int, int, int, int, int, int, int, list[int], list[int], list[tuple[int, int]]] | AssetConfigArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void",
            "args": method_args,
        }))

    def set_secondary_time_events(
        self,
        args: tuple[list[int]] | SetSecondaryTimeEventsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_secondary_time_events(uint64[])(uint64,uint64)",
            "args": method_args,
        }))

    def assign_role(
        self,
        args: tuple[str, int, bytes | str] | AssignRoleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "assign_role(address,uint8,byte[])uint64",
            "args": method_args,
        }))

    def revoke_role(
        self,
        args: tuple[str, int] | RevokeRoleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "revoke_role(address,uint8)uint64",
            "args": method_args,
        }))

    def open_account(
        self,
        args: tuple[str, str] | OpenAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_account(address,address)uint64",
            "args": method_args,
        }))

    def close_account(
        self,
        args: tuple[str] | CloseAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_account(address)(uint64,uint64)",
            "args": method_args,
        }))

    def primary_distribution(
        self,
        args: tuple[str, int] | PrimaryDistributionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "primary_distribution(address,uint64)uint64",
            "args": method_args,
        }))

    def set_asset_suspension(
        self,
        args: tuple[bool] | SetAssetSuspensionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_asset_suspension(bool)uint64",
            "args": method_args,
        }))

    def set_account_suspension(
        self,
        args: tuple[str, bool] | SetAccountSuspensionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_account_suspension(address,bool)uint64",
            "args": method_args,
        }))

    def set_default_status(
        self,
        args: tuple[bool] | SetDefaultStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_default_status(bool)void",
            "args": method_args,
        }))

    def get_asset_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)",
        }))

    def get_account_info(
        self,
        args: tuple[str] | GetAccountInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_info(address)(address,uint64,uint64,uint64,bool)",
            "args": method_args,
        }))

    def get_time_events(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_time_events()uint64[]",
        }))

    def get_secondary_market_schedule(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_secondary_market_schedule()uint64[]",
        }))

    def get_asset_metadata(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)",
        }))

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _FixedCouponBondUpdateTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def asset_update(
        self,
        args: tuple[AssetMetadata] | AssetUpdateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.create_transaction.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }))


class FixedCouponBondCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_FixedCouponBondUpdateTransaction":
        return _FixedCouponBondUpdateTransaction(self.app_client)

    def asset_transfer(
        self,
        args: tuple[str, str, int] | AssetTransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_transfer(address,address,uint64)uint64",
            "args": method_args,
        }))

    def pay_coupon(
        self,
        args: tuple[str, bytes | str] | PayCouponArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_coupon(address,byte[])(uint64,uint64,byte[])",
            "args": method_args,
        }))

    def pay_principal(
        self,
        args: tuple[str, bytes | str] | PayPrincipalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_principal(address,byte[])(uint64,uint64,byte[])",
            "args": method_args,
        }))

    def get_account_units_current_value(
        self,
        args: tuple[str, int] | GetAccountUnitsCurrentValueArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))",
            "args": method_args,
        }))

    def get_coupon_rates(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_coupon_rates()uint16[]",
        }))

    def get_payment_amount(
        self,
        args: tuple[str] | GetPaymentAmountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_payment_amount(address)(uint64,uint64)",
            "args": method_args,
        }))

    def get_coupons_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)",
        }))

    def asset_config(
        self,
        args: tuple[int, int, int, int, int, int, int, list[int], list[int], list[tuple[int, int]]] | AssetConfigArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void",
            "args": method_args,
        }))

    def set_secondary_time_events(
        self,
        args: tuple[list[int]] | SetSecondaryTimeEventsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_secondary_time_events(uint64[])(uint64,uint64)",
            "args": method_args,
        }))

    def assign_role(
        self,
        args: tuple[str, int, bytes | str] | AssignRoleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "assign_role(address,uint8,byte[])uint64",
            "args": method_args,
        }))

    def revoke_role(
        self,
        args: tuple[str, int] | RevokeRoleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "revoke_role(address,uint8)uint64",
            "args": method_args,
        }))

    def open_account(
        self,
        args: tuple[str, str] | OpenAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_account(address,address)uint64",
            "args": method_args,
        }))

    def close_account(
        self,
        args: tuple[str] | CloseAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_account(address)(uint64,uint64)",
            "args": method_args,
        }))

    def primary_distribution(
        self,
        args: tuple[str, int] | PrimaryDistributionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "primary_distribution(address,uint64)uint64",
            "args": method_args,
        }))

    def set_asset_suspension(
        self,
        args: tuple[bool] | SetAssetSuspensionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_asset_suspension(bool)uint64",
            "args": method_args,
        }))

    def set_account_suspension(
        self,
        args: tuple[str, bool] | SetAccountSuspensionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_account_suspension(address,bool)uint64",
            "args": method_args,
        }))

    def set_default_status(
        self,
        args: tuple[bool] | SetDefaultStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_default_status(bool)void",
            "args": method_args,
        }))

    def get_asset_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)",
        }))

    def get_account_info(
        self,
        args: tuple[str] | GetAccountInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_info(address)(address,uint64,uint64,uint64,bool)",
            "args": method_args,
        }))

    def get_time_events(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_time_events()uint64[]",
        }))

    def get_secondary_market_schedule(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_secondary_market_schedule()uint64[]",
        }))

    def get_asset_metadata(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)",
        }))

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _FixedCouponBondUpdateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def asset_update(
        self,
        args: tuple[AssetMetadata] | AssetUpdateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        response = self.app_client.send.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }), send_params=send_params, compilation_params=compilation_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppUpdateTransactionResult[None], parsed_response)


class FixedCouponBondSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_FixedCouponBondUpdateSend":
        return _FixedCouponBondUpdateSend(self.app_client)

    def asset_transfer(
        self,
        args: tuple[str, str, int] | AssetTransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_transfer(address,address,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def pay_coupon(
        self,
        args: tuple[str, bytes | str] | PayCouponArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[PaymentResult]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_coupon(address,byte[])(uint64,uint64,byte[])",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(PaymentResult, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[PaymentResult], parsed_response)

    def pay_principal(
        self,
        args: tuple[str, bytes | str] | PayPrincipalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[PaymentResult]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_principal(address,byte[])(uint64,uint64,byte[])",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(PaymentResult, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[PaymentResult], parsed_response)

    def get_account_units_current_value(
        self,
        args: tuple[str, int] | GetAccountUnitsCurrentValueArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[CurrentUnitsValue]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(CurrentUnitsValue, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[CurrentUnitsValue], parsed_response)

    def get_coupon_rates(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_coupon_rates()uint16[]",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def get_payment_amount(
        self,
        args: tuple[str] | GetPaymentAmountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[PaymentAmounts]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_payment_amount(address)(uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(PaymentAmounts, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[PaymentAmounts], parsed_response)

    def get_coupons_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[CouponsInfo]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)",
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(CouponsInfo, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[CouponsInfo], parsed_response)

    def asset_config(
        self,
        args: tuple[int, int, int, int, int, int, int, list[int], list[int], list[tuple[int, int]]] | AssetConfigArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_secondary_time_events(
        self,
        args: tuple[list[int]] | SetSecondaryTimeEventsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[SecondaryMarketSchedule]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_secondary_time_events(uint64[])(uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(SecondaryMarketSchedule, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[SecondaryMarketSchedule], parsed_response)

    def assign_role(
        self,
        args: tuple[str, int, bytes | str] | AssignRoleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "assign_role(address,uint8,byte[])uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def revoke_role(
        self,
        args: tuple[str, int] | RevokeRoleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "revoke_role(address,uint8)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def open_account(
        self,
        args: tuple[str, str] | OpenAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_account(address,address)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def close_account(
        self,
        args: tuple[str] | CloseAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_account(address)(uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int]], parsed_response)

    def primary_distribution(
        self,
        args: tuple[str, int] | PrimaryDistributionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "primary_distribution(address,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_asset_suspension(
        self,
        args: tuple[bool] | SetAssetSuspensionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_asset_suspension(bool)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_account_suspension(
        self,
        args: tuple[str, bool] | SetAccountSuspensionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_account_suspension(address,bool)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_default_status(
        self,
        args: tuple[bool] | SetDefaultStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_default_status(bool)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_asset_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[AssetInfo]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)",
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(AssetInfo, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[AssetInfo], parsed_response)

    def get_account_info(
        self,
        args: tuple[str] | GetAccountInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[AccountInfo]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_account_info(address)(address,uint64,uint64,uint64,bool)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(AccountInfo, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[AccountInfo], parsed_response)

    def get_time_events(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_time_events()uint64[]",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def get_secondary_market_schedule(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[int]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_secondary_market_schedule()uint64[]",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[int]], parsed_response)

    def get_asset_metadata(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[AssetMetadata]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)",
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(AssetMetadata, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[AssetMetadata], parsed_response)

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    arranger: bytes
    denomination_asset_id: int
    settlement_asset_id: int
    unit_value: int
    day_count_convention: int
    metadata: bytes
    total_units: int
    circulating_units: int
    principal_discount: int
    interest_rate: int
    total_coupons: int
    primary_distribution_opening_date: int
    primary_distribution_closure_date: int
    issuance_date: int
    secondary_market_opening_date: int
    secondary_market_closure_date: int
    maturity_date: int
    status: int
    suspended: int
    defaulted: int
    due_coupons_watermark: int
    paid_coupon_units: int

class BoxStateValue(typing.TypedDict):
    """Shape of box state key values"""
    coupon_rates: list[int]
    time_events: list[int]
    time_periods: list[tuple[int, int]]

class FixedCouponBondState:
    """Methods to access state for the current FixedCouponBond app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def arranger(self) -> bytes:
        """Get the current value of the arranger key in global_state state"""
        value = self.app_client.state.global_state.get_value("arranger")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def denomination_asset_id(self) -> int:
        """Get the current value of the denomination_asset_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("denomination_asset_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def settlement_asset_id(self) -> int:
        """Get the current value of the settlement_asset_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("settlement_asset_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def unit_value(self) -> int:
        """Get the current value of the unit_value key in global_state state"""
        value = self.app_client.state.global_state.get_value("unit_value")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def day_count_convention(self) -> int:
        """Get the current value of the day_count_convention key in global_state state"""
        value = self.app_client.state.global_state.get_value("day_count_convention")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def metadata(self) -> bytes:
        """Get the current value of the metadata key in global_state state"""
        value = self.app_client.state.global_state.get_value("metadata")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def total_units(self) -> int:
        """Get the current value of the total_units key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_units")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def circulating_units(self) -> int:
        """Get the current value of the circulating_units key in global_state state"""
        value = self.app_client.state.global_state.get_value("circulating_units")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def principal_discount(self) -> int:
        """Get the current value of the principal_discount key in global_state state"""
        value = self.app_client.state.global_state.get_value("principal_discount")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def interest_rate(self) -> int:
        """Get the current value of the interest_rate key in global_state state"""
        value = self.app_client.state.global_state.get_value("interest_rate")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_coupons(self) -> int:
        """Get the current value of the total_coupons key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_coupons")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def primary_distribution_opening_date(self) -> int:
        """Get the current value of the primary_distribution_opening_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("primary_distribution_opening_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def primary_distribution_closure_date(self) -> int:
        """Get the current value of the primary_distribution_closure_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("primary_distribution_closure_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def issuance_date(self) -> int:
        """Get the current value of the issuance_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("issuance_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def secondary_market_opening_date(self) -> int:
        """Get the current value of the secondary_market_opening_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("secondary_market_opening_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def secondary_market_closure_date(self) -> int:
        """Get the current value of the secondary_market_closure_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("secondary_market_closure_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def maturity_date(self) -> int:
        """Get the current value of the maturity_date key in global_state state"""
        value = self.app_client.state.global_state.get_value("maturity_date")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def status(self) -> int:
        """Get the current value of the status key in global_state state"""
        value = self.app_client.state.global_state.get_value("status")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def suspended(self) -> int:
        """Get the current value of the suspended key in global_state state"""
        value = self.app_client.state.global_state.get_value("suspended")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def defaulted(self) -> int:
        """Get the current value of the defaulted key in global_state state"""
        value = self.app_client.state.global_state.get_value("defaulted")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def due_coupons_watermark(self) -> int:
        """Get the current value of the due_coupons_watermark key in global_state state"""
        value = self.app_client.state.global_state.get_value("due_coupons_watermark")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def paid_coupon_units(self) -> int:
        """Get the current value of the paid_coupon_units key in global_state state"""
        value = self.app_client.state.global_state.get_value("paid_coupon_units")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "RoleConfig": RoleConfig,
            "AccountInfo": AccountInfo
        }

    def get_all(self) -> BoxStateValue:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return typing.cast(BoxStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(BoxStateValue, converted)

    @property
    def coupon_rates(self) -> list[int]:
        """Get the current value of the coupon_rates key in box state"""
        value = self.app_client.state.box.get_value("coupon_rates")
        if isinstance(value, dict) and "uint16[]" in self._struct_classes:
            return _init_dataclass(self._struct_classes["uint16[]"], value)  # type: ignore
        return typing.cast(list[int], value)

    @property
    def time_events(self) -> list[int]:
        """Get the current value of the time_events key in box state"""
        value = self.app_client.state.box.get_value("time_events")
        if isinstance(value, dict) and "uint64[]" in self._struct_classes:
            return _init_dataclass(self._struct_classes["uint64[]"], value)  # type: ignore
        return typing.cast(list[int], value)

    @property
    def time_periods(self) -> list[tuple[int, int]]:
        """Get the current value of the time_periods key in box state"""
        value = self.app_client.state.box.get_value("time_periods")
        if isinstance(value, dict) and "(uint64,uint64)[]" in self._struct_classes:
            return _init_dataclass(self._struct_classes["(uint64,uint64)[]"], value)  # type: ignore
        return typing.cast(list[tuple[int, int]], value)

    @property
    def account_manager(self) -> "_MapState[str, RoleConfig]":
        """Get values from the account_manager map in box state"""
        return _MapState(
            self.app_client.state.box,
            "account_manager",
            self._struct_classes.get("RoleConfig")
        )

    @property
    def primary_dealer(self) -> "_MapState[str, RoleConfig]":
        """Get values from the primary_dealer map in box state"""
        return _MapState(
            self.app_client.state.box,
            "primary_dealer",
            self._struct_classes.get("RoleConfig")
        )

    @property
    def trustee(self) -> "_MapState[str, RoleConfig]":
        """Get values from the trustee map in box state"""
        return _MapState(
            self.app_client.state.box,
            "trustee",
            self._struct_classes.get("RoleConfig")
        )

    @property
    def authority(self) -> "_MapState[str, RoleConfig]":
        """Get values from the authority map in box state"""
        return _MapState(
            self.app_client.state.box,
            "authority",
            self._struct_classes.get("RoleConfig")
        )

    @property
    def interest_oracle(self) -> "_MapState[str, RoleConfig]":
        """Get values from the interest_oracle map in box state"""
        return _MapState(
            self.app_client.state.box,
            "interest_oracle",
            self._struct_classes.get("RoleConfig")
        )

    @property
    def account(self) -> "_MapState[str, AccountInfo]":
        """Get values from the account map in box state"""
        return _MapState(
            self.app_client.state.box,
            "account",
            self._struct_classes.get("AccountInfo")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class FixedCouponBondClient:
    """Client for interacting with FixedCouponBond smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = FixedCouponBondParams(self.app_client)
        self.create_transaction = FixedCouponBondCreateTransactionParams(self.app_client)
        self.send = FixedCouponBondSend(self.app_client)
        self.state = FixedCouponBondState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "FixedCouponBondClient":
        return FixedCouponBondClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "FixedCouponBondClient":
        return FixedCouponBondClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "FixedCouponBondClient":
        return FixedCouponBondClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "FixedCouponBondComposer":
        return FixedCouponBondComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["asset_transfer(address,address,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["pay_coupon(address,byte[])(uint64,uint64,byte[])"],
        return_value: algokit_utils.ABIReturn | None
    ) -> PaymentResult | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["pay_principal(address,byte[])(uint64,uint64,byte[])"],
        return_value: algokit_utils.ABIReturn | None
    ) -> PaymentResult | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))"],
        return_value: algokit_utils.ABIReturn | None
    ) -> CurrentUnitsValue | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_coupon_rates()uint16[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_payment_amount(address)(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> PaymentAmounts | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> CouponsInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_secondary_time_events(uint64[])(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> SecondaryMarketSchedule | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["assign_role(address,uint8,byte[])uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["revoke_role(address,uint8)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["open_account(address,address)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["close_account(address)(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["primary_distribution(address,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_asset_suspension(bool)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_account_suspension(address,bool)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_default_status(bool)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> AssetInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_account_info(address)(address,uint64,uint64,uint64,bool)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> AccountInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_time_events()uint64[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_secondary_market_schedule()uint64[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> AssetMetadata | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | AccountInfo | AssetInfo | AssetMetadata | CouponsInfo | CurrentUnitsValue | None | PaymentAmounts | PaymentResult | SecondaryMarketSchedule | int | list[int] | tuple[int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class FixedCouponBondMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        AssetCreateArgs,
        str | None,
    ]
):
    """Parameters for creating FixedCouponBond contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class FixedCouponBondMethodCallUpdateParams(
    algokit_utils.BaseAppClientMethodCallParams[
        AssetUpdateArgs,
        str | None,
    ]
):
    """Parameters for calling FixedCouponBond contract using ABI"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class FixedCouponBondFactory(algokit_utils.TypedAppFactoryProtocol[FixedCouponBondMethodCallCreateParams, FixedCouponBondMethodCallUpdateParams, None]):
    """Factory for deploying and managing FixedCouponBondClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = FixedCouponBondFactoryParams(self.app_factory)
        self.create_transaction = FixedCouponBondFactoryCreateTransaction(self.app_factory)
        self.send = FixedCouponBondFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: FixedCouponBondMethodCallCreateParams | None = None,
        update_params: FixedCouponBondMethodCallUpdateParams | None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[FixedCouponBondClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return FixedCouponBondClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> FixedCouponBondClient:
        """Get an app client by creator address and name"""
        return FixedCouponBondClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> FixedCouponBondClient:
        """Get an app client by app ID"""
        return FixedCouponBondClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class FixedCouponBondFactoryParams:
    """Parameters for creating transactions for FixedCouponBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = FixedCouponBondFactoryCreateParams(app_factory)
        self.update = FixedCouponBondFactoryUpdateParams(app_factory)
        self.delete = FixedCouponBondFactoryDeleteParams(app_factory)

class FixedCouponBondFactoryCreateParams:
    """Parameters for 'create' operations of FixedCouponBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def asset_transfer(
        self,
        args: tuple[str, str, int] | AssetTransferArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the asset_transfer(address,address,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "asset_transfer(address,address,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def pay_coupon(
        self,
        args: tuple[str, bytes | str] | PayCouponArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the pay_coupon(address,byte[])(uint64,uint64,byte[]) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "pay_coupon(address,byte[])(uint64,uint64,byte[])",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def pay_principal(
        self,
        args: tuple[str, bytes | str] | PayPrincipalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the pay_principal(address,byte[])(uint64,uint64,byte[]) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "pay_principal(address,byte[])(uint64,uint64,byte[])",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_account_units_current_value(
        self,
        args: tuple[str, int] | GetAccountUnitsCurrentValueArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64)) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_coupon_rates(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_coupon_rates()uint16[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_coupon_rates()uint16[]",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_payment_amount(
        self,
        args: tuple[str] | GetPaymentAmountArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_payment_amount(address)(uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_payment_amount(address)(uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_coupons_status(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def asset_config(
        self,
        args: tuple[int, int, int, int, int, int, int, list[int], list[int], list[tuple[int, int]]] | AssetConfigArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_secondary_time_events(
        self,
        args: tuple[list[int]] | SetSecondaryTimeEventsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_secondary_time_events(uint64[])(uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_secondary_time_events(uint64[])(uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def assign_role(
        self,
        args: tuple[str, int, bytes | str] | AssignRoleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the assign_role(address,uint8,byte[])uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "assign_role(address,uint8,byte[])uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def revoke_role(
        self,
        args: tuple[str, int] | RevokeRoleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the revoke_role(address,uint8)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "revoke_role(address,uint8)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def open_account(
        self,
        args: tuple[str, str] | OpenAccountArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the open_account(address,address)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "open_account(address,address)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def close_account(
        self,
        args: tuple[str] | CloseAccountArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the close_account(address)(uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "close_account(address)(uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def primary_distribution(
        self,
        args: tuple[str, int] | PrimaryDistributionArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the primary_distribution(address,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "primary_distribution(address,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_asset_suspension(
        self,
        args: tuple[bool] | SetAssetSuspensionArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_asset_suspension(bool)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_asset_suspension(bool)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_account_suspension(
        self,
        args: tuple[str, bool] | SetAccountSuspensionArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_account_suspension(address,bool)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_account_suspension(address,bool)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_default_status(
        self,
        args: tuple[bool] | SetDefaultStatusArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_default_status(bool)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_default_status(bool)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_asset_info(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_account_info(
        self,
        args: tuple[str] | GetAccountInfoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_account_info(address)(address,uint64,uint64,uint64,bool) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_account_info(address)(address,uint64,uint64,uint64,bool)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_time_events(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_time_events()uint64[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_time_events()uint64[]",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_secondary_market_schedule(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_secondary_market_schedule()uint64[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_secondary_market_schedule()uint64[]",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_asset_metadata(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def asset_update(
        self,
        args: tuple[AssetMetadata] | AssetUpdateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class FixedCouponBondFactoryUpdateParams:
    """Parameters for 'update' operations of FixedCouponBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class FixedCouponBondFactoryDeleteParams:
    """Parameters for 'delete' operations of FixedCouponBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class FixedCouponBondFactoryCreateTransaction:
    """Create transactions for FixedCouponBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = FixedCouponBondFactoryCreateTransactionCreate(app_factory)


class FixedCouponBondFactoryCreateTransactionCreate:
    """Create new instances of FixedCouponBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class FixedCouponBondFactorySend:
    """Send calls to FixedCouponBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = FixedCouponBondFactorySendCreate(app_factory)


class FixedCouponBondFactorySendCreate:
    """Send create calls to FixedCouponBond contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[FixedCouponBondClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return FixedCouponBondClient(result[0]), result[1]

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[FixedCouponBondClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return FixedCouponBondClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _FixedCouponBondUpdateComposer:
    def __init__(self, composer: "FixedCouponBondComposer"):
        self.composer = composer
    def asset_update(
        self,
        args: tuple[AssetMetadata] | AssetUpdateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self.composer._composer.add_app_update_method_call(
            self.composer.client.params.update.asset_update(
                args=args,
                params=params,
                compilation_params=compilation_params
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void", v
            )
        )
        return self.composer


class FixedCouponBondComposer:
    """Composer for creating transaction groups for FixedCouponBond contract calls"""

    def __init__(self, client: "FixedCouponBondClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def update(self) -> "_FixedCouponBondUpdateComposer":
        return _FixedCouponBondUpdateComposer(self)

    def asset_transfer(
        self,
        args: tuple[str, str, int] | AssetTransferArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.asset_transfer(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "asset_transfer(address,address,uint64)uint64", v
            )
        )
        return self

    def pay_coupon(
        self,
        args: tuple[str, bytes | str] | PayCouponArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.pay_coupon(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "pay_coupon(address,byte[])(uint64,uint64,byte[])", v
            )
        )
        return self

    def pay_principal(
        self,
        args: tuple[str, bytes | str] | PayPrincipalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.pay_principal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "pay_principal(address,byte[])(uint64,uint64,byte[])", v
            )
        )
        return self

    def get_account_units_current_value(
        self,
        args: tuple[str, int] | GetAccountUnitsCurrentValueArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_account_units_current_value(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))", v
            )
        )
        return self

    def get_coupon_rates(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_coupon_rates(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_coupon_rates()uint16[]", v
            )
        )
        return self

    def get_payment_amount(
        self,
        args: tuple[str] | GetPaymentAmountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_payment_amount(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_payment_amount(address)(uint64,uint64)", v
            )
        )
        return self

    def get_coupons_status(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_coupons_status(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_coupons_status()(uint64,uint64,uint64,(uint64,uint64),bool)", v
            )
        )
        return self

    def asset_config(
        self,
        args: tuple[int, int, int, int, int, int, int, list[int], list[int], list[tuple[int, int]]] | AssetConfigArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.asset_config(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void", v
            )
        )
        return self

    def set_secondary_time_events(
        self,
        args: tuple[list[int]] | SetSecondaryTimeEventsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_secondary_time_events(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_secondary_time_events(uint64[])(uint64,uint64)", v
            )
        )
        return self

    def assign_role(
        self,
        args: tuple[str, int, bytes | str] | AssignRoleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.assign_role(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "assign_role(address,uint8,byte[])uint64", v
            )
        )
        return self

    def revoke_role(
        self,
        args: tuple[str, int] | RevokeRoleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.revoke_role(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "revoke_role(address,uint8)uint64", v
            )
        )
        return self

    def open_account(
        self,
        args: tuple[str, str] | OpenAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.open_account(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "open_account(address,address)uint64", v
            )
        )
        return self

    def close_account(
        self,
        args: tuple[str] | CloseAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.close_account(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "close_account(address)(uint64,uint64)", v
            )
        )
        return self

    def primary_distribution(
        self,
        args: tuple[str, int] | PrimaryDistributionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.primary_distribution(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "primary_distribution(address,uint64)uint64", v
            )
        )
        return self

    def set_asset_suspension(
        self,
        args: tuple[bool] | SetAssetSuspensionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_asset_suspension(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_asset_suspension(bool)uint64", v
            )
        )
        return self

    def set_account_suspension(
        self,
        args: tuple[str, bool] | SetAccountSuspensionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_account_suspension(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_account_suspension(address,bool)uint64", v
            )
        )
        return self

    def set_default_status(
        self,
        args: tuple[bool] | SetDefaultStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_default_status(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_default_status(bool)void", v
            )
        )
        return self

    def get_asset_info(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_asset_info(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)", v
            )
        )
        return self

    def get_account_info(
        self,
        args: tuple[str] | GetAccountInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_account_info(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_account_info(address)(address,uint64,uint64,uint64,bool)", v
            )
        )
        return self

    def get_time_events(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_time_events(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_time_events()uint64[]", v
            )
        )
        return self

    def get_secondary_market_schedule(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_secondary_market_schedule(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_secondary_market_schedule()uint64[]", v
            )
        )
        return self

    def get_asset_metadata(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_asset_metadata(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)", v
            )
        )
        return self

    def asset_create(
        self,
        args: tuple[str, AssetMetadata] | AssetCreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_app_call_method_call(
            self.client.params.asset_create(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "FixedCouponBondComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "FixedCouponBondComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
