{
    "hints": {
        "assign_role(address,uint8,byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "revoke_role(address,uint8)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMucmJhYy5jb250cmFjdC5Sb2xlQmFzZWRBY2Nlc3NDb250cm9sLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "arranger": {
                    "type": "bytes",
                    "key": "R20#"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "RoleBasedAccessControl",
        "methods": [
            {
                "name": "assign_role",
                "args": [
                    {
                        "type": "address",
                        "name": "role_address",
                        "desc": "Account Role Address"
                    },
                    {
                        "type": "uint8",
                        "name": "role",
                        "desc": "Role identifier"
                    },
                    {
                        "type": "byte[]",
                        "name": "config",
                        "desc": "Role configuration (Optional)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the role assignment"
                },
                "desc": "Assign a role to an address"
            },
            {
                "name": "revoke_role",
                "args": [
                    {
                        "type": "address",
                        "name": "role_address",
                        "desc": "Account Role Address"
                    },
                    {
                        "type": "uint8",
                        "name": "role",
                        "desc": "Role identifier"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the role revocation"
                },
                "desc": "Revoke a role from an address"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}