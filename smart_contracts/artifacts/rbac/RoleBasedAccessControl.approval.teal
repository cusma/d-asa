#pragma version 10

smart_contracts.rbac.contract.RoleBasedAccessControl.approval_program:
    intcblock 0 1 40 50
    bytecblock 0x52323023 0x151f7c75 0x52343023 0x52353023 0x52363023 0x52373023 0x52383023
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.rbac.contract.RoleBasedAccessControl.__init__() -> void:
__init__:
    // smart_contracts/rbac/contract.py:21
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/rbac/contract.py:22-23
    // # Role Based Access Control
    // self.arranger = GlobalState(Account(), key=cst.PREFIX_ID_ARRANGER)
    bytec_0 // 0x52323023
    global ZeroAddress
    app_global_put
    retsub


// smart_contracts.rbac.contract.RoleBasedAccessControl.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/rbac/contract.py:20
    // class RoleBasedAccessControl(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@6
    pushbytess 0xfef74567 0xb8fc1390 // method "assign_role(address,uint8,byte[])uint64", method "revoke_role(address,uint8)uint64"
    txna ApplicationArgs 0
    match __puya_arc4_router___assign_role_route@2 __puya_arc4_router___revoke_role_route@3
    intc_0 // 0
    retsub

__puya_arc4_router___assign_role_route@2:
    // smart_contracts/rbac/contract.py:94
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/rbac/contract.py:20
    // class RoleBasedAccessControl(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/rbac/contract.py:94
    // @arc4.abimethod
    callsub assign_role
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___revoke_role_route@3:
    // smart_contracts/rbac/contract.py:156
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/rbac/contract.py:20
    // class RoleBasedAccessControl(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/rbac/contract.py:156
    // @arc4.abimethod
    callsub revoke_role
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@6:
    // smart_contracts/rbac/contract.py:20
    // class RoleBasedAccessControl(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@10:
    // smart_contracts/rbac/contract.py:20
    // class RoleBasedAccessControl(ARC4Contract):
    intc_0 // 0
    retsub


// smart_contracts.rbac.contract.RoleBasedAccessControl.assign_role(role_address: bytes, role: bytes, config: bytes) -> bytes:
assign_role:
    // smart_contracts/rbac/contract.py:94-97
    // @arc4.abimethod
    // def assign_role(
    //     self, role_address: arc4.Address, role: arc4.UInt8, config: arc4.DynamicBytes
    // ) -> arc4.UInt64:
    proto 3 1
    // smart_contracts/rbac/contract.py:115
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    // smart_contracts/rbac/contract.py:116
    // assert role.native in (
    frame_dig -2
    btoi
    dup
    // smart_contracts/rbac/contract.py:117
    // UInt64(cst.ROLE_ARRANGER),
    pushint 20 // 20
    // smart_contracts/rbac/contract.py:116-123
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@6
    frame_dig 0
    // smart_contracts/rbac/contract.py:118
    // UInt64(cst.ROLE_ACCOUNT_MANAGER),
    intc_2 // 40
    // smart_contracts/rbac/contract.py:116-123
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@6
    frame_dig 0
    // smart_contracts/rbac/contract.py:119
    // UInt64(cst.ROLE_PRIMARY_DEALER),
    intc_3 // 50
    // smart_contracts/rbac/contract.py:116-123
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@6
    frame_dig 0
    // smart_contracts/rbac/contract.py:120
    // UInt64(cst.ROLE_TRUSTEE),
    pushint 60 // 60
    // smart_contracts/rbac/contract.py:116-123
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@6
    frame_dig 0
    // smart_contracts/rbac/contract.py:121
    // UInt64(cst.ROLE_AUTHORITY),
    pushint 70 // 70
    // smart_contracts/rbac/contract.py:116-123
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@6
    frame_dig 0
    // smart_contracts/rbac/contract.py:122
    // UInt64(cst.ROLE_INTEREST_ORACLE),
    pushint 80 // 80
    // smart_contracts/rbac/contract.py:116-123
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bz assign_role_bool_false@7

assign_role_bool_true@6:
    intc_1 // 1
    b assign_role_bool_merge@8

assign_role_bool_false@7:
    intc_0 // 0

assign_role_bool_merge@8:
    // smart_contracts/rbac/contract.py:116-123
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    assert // Invalid role identifier
    // smart_contracts/rbac/contract.py:125
    // case UInt64(cst.ROLE_ARRANGER):
    pushint 20 // 20
    // smart_contracts/rbac/contract.py:127
    // case UInt64(cst.ROLE_ACCOUNT_MANAGER):
    intc_2 // 40
    // smart_contracts/rbac/contract.py:134
    // case UInt64(cst.ROLE_PRIMARY_DEALER):
    intc_3 // 50
    // smart_contracts/rbac/contract.py:139
    // case UInt64(cst.ROLE_TRUSTEE):
    pushints 60 70 80 // 60, 70, 80
    // smart_contracts/rbac/contract.py:124-153
    // match role.native:
    //     case UInt64(cst.ROLE_ARRANGER):
    //         self.arranger.value = role_address.native
    //     case UInt64(cst.ROLE_ACCOUNT_MANAGER):
    //         assert (
    //             role_address not in self.account_manager
    //         ), err.INVALID_ROLE_ADDRESS
    //         self.account_manager[role_address] = typ.RoleConfig.from_bytes(
    //             config.native
    //         )
    //     case UInt64(cst.ROLE_PRIMARY_DEALER):
    //         assert role_address not in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    //         self.primary_dealer[role_address] = typ.RoleConfig.from_bytes(
    //             config.native
    //         )
    //     case UInt64(cst.ROLE_TRUSTEE):
    //         assert role_address not in self.trustee, err.INVALID_ROLE_ADDRESS
    //         self.trustee[role_address] = typ.RoleConfig.from_bytes(config.native)
    //     case UInt64(cst.ROLE_AUTHORITY):
    //         assert role_address not in self.authority, err.INVALID_ROLE_ADDRESS
    //         self.authority[role_address] = typ.RoleConfig.from_bytes(config.native)
    //     case UInt64(cst.ROLE_INTEREST_ORACLE):
    //         assert (
    //             role_address not in self.interest_oracle
    //         ), err.INVALID_ROLE_ADDRESS
    //         self.interest_oracle[role_address] = typ.RoleConfig.from_bytes(
    //             config.native
    //         )
    //     case _:
    //         op.err()
    frame_dig 0
    match assign_role_switch_case_0@9 assign_role_switch_case_1@10 assign_role_switch_case_2@11 assign_role_switch_case_3@12 assign_role_switch_case_4@13 assign_role_switch_case_5@14
    // smart_contracts/rbac/contract.py:153
    // op.err()
    err

assign_role_switch_case_0@9:
    // smart_contracts/rbac/contract.py:126
    // self.arranger.value = role_address.native
    bytec_0 // 0x52323023
    frame_dig -3
    app_global_put
    b assign_role_switch_case_next@16

assign_role_switch_case_1@10:
    // smart_contracts/rbac/contract.py:129
    // role_address not in self.account_manager
    bytec_2 // 0x52343023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    // smart_contracts/rbac/contract.py:128-130
    // assert (
    //     role_address not in self.account_manager
    // ), err.INVALID_ROLE_ADDRESS
    assert // Invalid account role address
    // smart_contracts/rbac/contract.py:132
    // config.native
    frame_dig -1
    extract 2 0
    // smart_contracts/rbac/contract.py:131-133
    // self.account_manager[role_address] = typ.RoleConfig.from_bytes(
    //     config.native
    // )
    box_put
    b assign_role_switch_case_next@16

assign_role_switch_case_2@11:
    // smart_contracts/rbac/contract.py:135
    // assert role_address not in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    bytec_3 // 0x52353023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    assert // Invalid account role address
    // smart_contracts/rbac/contract.py:137
    // config.native
    frame_dig -1
    extract 2 0
    // smart_contracts/rbac/contract.py:136-138
    // self.primary_dealer[role_address] = typ.RoleConfig.from_bytes(
    //     config.native
    // )
    box_put
    b assign_role_switch_case_next@16

assign_role_switch_case_3@12:
    // smart_contracts/rbac/contract.py:140
    // assert role_address not in self.trustee, err.INVALID_ROLE_ADDRESS
    bytec 4 // 0x52363023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    assert // Invalid account role address
    // smart_contracts/rbac/contract.py:141
    // self.trustee[role_address] = typ.RoleConfig.from_bytes(config.native)
    frame_dig -1
    extract 2 0
    box_put
    b assign_role_switch_case_next@16

assign_role_switch_case_4@13:
    // smart_contracts/rbac/contract.py:143
    // assert role_address not in self.authority, err.INVALID_ROLE_ADDRESS
    bytec 5 // 0x52373023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    assert // Invalid account role address
    // smart_contracts/rbac/contract.py:144
    // self.authority[role_address] = typ.RoleConfig.from_bytes(config.native)
    frame_dig -1
    extract 2 0
    box_put
    b assign_role_switch_case_next@16

assign_role_switch_case_5@14:
    // smart_contracts/rbac/contract.py:147
    // role_address not in self.interest_oracle
    bytec 6 // 0x52383023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    // smart_contracts/rbac/contract.py:146-148
    // assert (
    //     role_address not in self.interest_oracle
    // ), err.INVALID_ROLE_ADDRESS
    assert // Invalid account role address
    // smart_contracts/rbac/contract.py:150
    // config.native
    frame_dig -1
    extract 2 0
    // smart_contracts/rbac/contract.py:149-151
    // self.interest_oracle[role_address] = typ.RoleConfig.from_bytes(
    //     config.native
    // )
    box_put

assign_role_switch_case_next@16:
    // smart_contracts/rbac/contract.py:154
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    swap
    retsub


// smart_contracts.rbac.contract.RoleBasedAccessControl.assert_caller_is_arranger() -> void:
assert_caller_is_arranger:
    // smart_contracts/rbac/contract.py:40-41
    // @subroutine
    // def assert_caller_is_arranger(self) -> None:
    proto 0 0
    // smart_contracts/rbac/contract.py:42
    // assert Txn.sender == self.arranger.value, err.UNAUTHORIZED
    txn Sender
    intc_0 // 0
    bytec_0 // 0x52323023
    app_global_get_ex
    assert // check self.arranger exists
    ==
    assert // Not authorized
    retsub


// smart_contracts.rbac.contract.RoleBasedAccessControl.revoke_role(role_address: bytes, role: bytes) -> bytes:
revoke_role:
    // smart_contracts/rbac/contract.py:156-157
    // @arc4.abimethod
    // def revoke_role(self, role_address: arc4.Address, role: arc4.UInt8) -> arc4.UInt64:
    proto 2 1
    // smart_contracts/rbac/contract.py:174
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    // smart_contracts/rbac/contract.py:175
    // assert role.native in (
    frame_dig -1
    btoi
    dup
    // smart_contracts/rbac/contract.py:176
    // UInt64(cst.ROLE_ACCOUNT_MANAGER),
    intc_2 // 40
    // smart_contracts/rbac/contract.py:175-181
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz revoke_role_bool_true@5
    frame_dig 0
    // smart_contracts/rbac/contract.py:177
    // UInt64(cst.ROLE_PRIMARY_DEALER),
    intc_3 // 50
    // smart_contracts/rbac/contract.py:175-181
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz revoke_role_bool_true@5
    frame_dig 0
    // smart_contracts/rbac/contract.py:178
    // UInt64(cst.ROLE_TRUSTEE),
    pushint 60 // 60
    // smart_contracts/rbac/contract.py:175-181
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz revoke_role_bool_true@5
    frame_dig 0
    // smart_contracts/rbac/contract.py:179
    // UInt64(cst.ROLE_AUTHORITY),
    pushint 70 // 70
    // smart_contracts/rbac/contract.py:175-181
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz revoke_role_bool_true@5
    frame_dig 0
    // smart_contracts/rbac/contract.py:180
    // UInt64(cst.ROLE_INTEREST_ORACLE),
    pushint 80 // 80
    // smart_contracts/rbac/contract.py:175-181
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bz revoke_role_bool_false@6

revoke_role_bool_true@5:
    intc_1 // 1
    b revoke_role_bool_merge@7

revoke_role_bool_false@6:
    intc_0 // 0

revoke_role_bool_merge@7:
    // smart_contracts/rbac/contract.py:175-181
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    assert // Invalid role identifier
    // smart_contracts/rbac/contract.py:183-184
    // # Arranger role can not be revoked (just rotated)
    // case UInt64(cst.ROLE_ACCOUNT_MANAGER):
    intc_2 // 40
    // smart_contracts/rbac/contract.py:187
    // case UInt64(cst.ROLE_PRIMARY_DEALER):
    intc_3 // 50
    // smart_contracts/rbac/contract.py:190
    // case UInt64(cst.ROLE_TRUSTEE):
    pushints 60 70 80 // 60, 70, 80
    // smart_contracts/rbac/contract.py:182-200
    // match role.native:
    //     # Arranger role can not be revoked (just rotated)
    //     case UInt64(cst.ROLE_ACCOUNT_MANAGER):
    //         assert role_address in self.account_manager, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_ID_ACCOUNT_MANAGER + role_address.bytes)
    //     case UInt64(cst.ROLE_PRIMARY_DEALER):
    //         assert role_address in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_ID_PRIMARY_DEALER + role_address.bytes)
    //     case UInt64(cst.ROLE_TRUSTEE):
    //         assert role_address in self.trustee, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_ID_TRUSTEE + role_address.bytes)
    //     case UInt64(cst.ROLE_AUTHORITY):
    //         assert role_address in self.authority, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_ID_AUTHORITY + role_address.bytes)
    //     case UInt64(cst.ROLE_INTEREST_ORACLE):
    //         assert role_address in self.interest_oracle, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_ID_INTEREST_ORACLE + role_address.bytes)
    //     case _:
    //         op.err()
    frame_dig 0
    match revoke_role_switch_case_0@8 revoke_role_switch_case_1@9 revoke_role_switch_case_2@10 revoke_role_switch_case_3@11 revoke_role_switch_case_4@12
    // smart_contracts/rbac/contract.py:200
    // op.err()
    err

revoke_role_switch_case_0@8:
    // smart_contracts/rbac/contract.py:185
    // assert role_address in self.account_manager, err.INVALID_ROLE_ADDRESS
    bytec_2 // 0x52343023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/rbac/contract.py:186
    // op.Box.delete(cst.PREFIX_ID_ACCOUNT_MANAGER + role_address.bytes)
    box_del
    pop
    b revoke_role_switch_case_next@14

revoke_role_switch_case_1@9:
    // smart_contracts/rbac/contract.py:188
    // assert role_address in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    bytec_3 // 0x52353023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/rbac/contract.py:189
    // op.Box.delete(cst.PREFIX_ID_PRIMARY_DEALER + role_address.bytes)
    box_del
    pop
    b revoke_role_switch_case_next@14

revoke_role_switch_case_2@10:
    // smart_contracts/rbac/contract.py:191
    // assert role_address in self.trustee, err.INVALID_ROLE_ADDRESS
    bytec 4 // 0x52363023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/rbac/contract.py:192
    // op.Box.delete(cst.PREFIX_ID_TRUSTEE + role_address.bytes)
    box_del
    pop
    b revoke_role_switch_case_next@14

revoke_role_switch_case_3@11:
    // smart_contracts/rbac/contract.py:194
    // assert role_address in self.authority, err.INVALID_ROLE_ADDRESS
    bytec 5 // 0x52373023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/rbac/contract.py:195
    // op.Box.delete(cst.PREFIX_ID_AUTHORITY + role_address.bytes)
    box_del
    pop
    b revoke_role_switch_case_next@14

revoke_role_switch_case_4@12:
    // smart_contracts/rbac/contract.py:197
    // assert role_address in self.interest_oracle, err.INVALID_ROLE_ADDRESS
    bytec 6 // 0x52383023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/rbac/contract.py:198
    // op.Box.delete(cst.PREFIX_ID_INTEREST_ORACLE + role_address.bytes)
    box_del
    pop

revoke_role_switch_case_next@14:
    // smart_contracts/rbac/contract.py:201
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    swap
    retsub
