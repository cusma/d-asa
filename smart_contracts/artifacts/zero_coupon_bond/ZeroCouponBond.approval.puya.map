{
  "version": 3,
  "sources": [
    "../../base_d_asa/contract.py",
    "../../zero_coupon_bond/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+BA;;;AACQ;;;AAGO;;AAA6B;;AAA7B;AAAP;AACO;;AAAuB;;AAAvB;AAAP;AACO;;AAAA;AAAP;AACO;;AAAA;AAAP;;ADFR;;;AAEQ;;AAAgB;;AAAhB;AAeA;;AAA6B;AAA7B;AACA;;AAAkB;AAAlB;AACA;;AAA4B;AAA5B;AAGA;;AAAgB;;AAAhB;AAGA;;AAAmB;AAAnB;AACA;AAAyB;AAAzB;AAGA;;AAAqB;AAArB;AAIA;;AAAqB;AAArB;AAIA;;AAAyC;AAAzC;AACA;;AAAyC;AAAzC;AACA;;AAAqB;AAArB;AACA;;AAAqC;AAArC;AACA;;AAAqC;AAArC;AACA;AAAqB;AAArB;AAGA;;AAAc;AAAd;AACA;;AAAiB;AAAjB;AACA;;AAAiB;AAAjB;;ACjER;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAmDK;;AAAA;AAAA;AAAA;;AAAA;AAnDL;;;AAAA;;;AAAA;;;AAmDK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CA;;AAAA;AAAA;AAAA;;AAAA;AA/FL;;;AAAA;;;AA+FK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCA;;AAAA;AAAA;AAAA;;AAAA;AAvIL;;;AAAA;;;AAuIK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmEA;;AAAA;AAAA;AAAA;;AAAA;AA1ML;;;AAAA;;;AA0MK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ADuIA;;AAAA;AAAA;AAAA;;AAAA;AAAA;ACjVL;;;AAAA;;;ADiVK;;;AAAA;AAAA;AAsBA;;AAAA;AAAA;AAAA;;AAAA;ACvWL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;ADuWK;;;AAAA;AAAA;AA8EA;;AAAA;AAAA;AAAA;;AAAA;ACrbL;;;ADqbK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyDA;;AAAA;AAAA;AAAA;;AAAA;AC9eL;;;AAAA;;;AAAA;;;AD8eK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuDA;;AAAA;AAAA;AAAA;;AAAA;ACriBL;;;AAAA;;;ADqiBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CA;;AAAA;AAAA;AAAA;;AAAA;ACjlBL;;;AAAA;;;ADilBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCA;;AAAA;AAAA;AAAA;;AAAA;ACpnBL;;;ADonBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA;;AAAA;AAAA;AAAA;;AAAA;AClpBL;;;AAAA;;;ADkpBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CA;;AAAA;AAAA;AAAA;;AAAA;AC5rBL;;;AD4rBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;;AAAA;AAAA;AAAA;;AAAA;AC9sBL;;;AAAA;;;AD8sBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;;AAAA;AAAA;AAAA;;AAAA;ACruBL;;;ADquBK;;;AAAA;AAAA;AAcA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA;;AAAA;AAAA;AAAA;;AAAA;ACjxBL;;;ADixBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACtzBL;AAAA;;AAAA;;;;AAAA;AAAA;AD6VK;;AAAA;AAAL;;;AAAA;AAAA;AC1SA;;;AA8BY;;AAAA;AAHJ;;AAAA;;AAAA;;AAAA;;;AAOoB;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AACpB;;AAAA;;AAAmB;;;AAInB;;AAAA;;AAAA;;AAAA;;;AAGkC;AAAA;AAAf;;AAAA;AAAA;AAAZ;AAAP;AD+LR;;;AAOQ;;;AACA;;AAAA;;AAAA;;AAAA;;;AAKA;;AAAA;;AAAA;;;;AAxIR;;;;;AAGY;;;AAAA;;;AACI;AAAA;;AAAA;AAAA;AACD;;AAAA;AAAA;;AADC;AAAA;;;AAEF;AAAA;;AAAA;AAAA;AADC;;AAAA;AADC;;;;;;;;AAFR;;AA3FR;;;AAEe;AAAA;;AAAA;AAAA;AAAe;;AAAf;AAAP;AA2KR;;;AASe;;AAAA;;AAAA;AAAP;AACA;;;AACA;;;AACA;;AAAA;;;AACA;;AAAA;;;AACW;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AACW;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AAIa;AAAA;AAAA;;;AAAA;AAAT;;AAAA;AADJ;;AAvLR;;;AAEmB;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AAER;;;AAEmB;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AA8CR;;;AAEkC;AAAnB;;AAAA;AAAA;AAAA;;AAAP;;AAqIR;;;AAM4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAX;;;AACY;;AAAA;;AAAA;;;;;;AAIA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACsD;;AAAA;AAAA;AAAtD;;AAAA;AAAA;AAAA;AAAsD;;;AAAtD;;AAAA;;AA9GZ;;;AAKY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAmC;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAnC;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AAAqC;;AAAA;AAAA;AAAA;;;AAArC;AADJ;;;;;;;;AADJ;;AC3IR;;;AAI2B;;;AACF;AAAA;;;AAAA;AACE;AAAA;;;AAAA;AAEf;;AAAA;;AAAA;;;AACE;AAAA;;AAAA;AAAA;AADF;AAAA;;AAAA;AAII;;AAAA;;AAAA;AAJJ;AADJ;AApBR;;;AAGyB;;AAA0B;AAAA;;AAAA;AAAA;AAA1B;AAAjB;AACmB;AAAA;AAAA;AAAA;AAAqB;AAAA;;AAAA;AAAA;AAArB;AAAnB;AAAA;;AACG;AAAA;;AAAA;AAAA;AAA6B;;AAA7B;;;;AAAX;;;AACY;;AAAiB;;;AACjB;;AAAmB;;;;;;;;;;;AAET;AACE;AAAA;AAFT;AAAP;;AAAA;ADwMR;;;AAEe;;AAAe;;AAAf;AAAP;AA1BR;;;AAIuB;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAR;;AAAA;AAAP;AA4FR;;;AAQY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AADyC;AAA7C;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAII;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAD2C;AAA/C;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAGA;;AAAA;;;;AAjFR;;;AAEW;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAX;;;AACY;;AAAA;AAAA;AAAA;AAA2C;;AAA3C;;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAA6C;;AAA7C;;AAAA;;AC/IZ;;;AAsBQ;;AAAA;;;AAGG;;AAAA;;;AAAX;;;AACY;;AAAiB;;;AAAjB;AAES;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAT;AAAA;;;;;;AAGiB;AAErB;;AAAA;;;AAEW;AACe;;AAAZ;AAFP;AAAA;;;;AAAA;AAAA;;AAAA;AAAP;AD4LR;;;AAGe;;;AAAP;AACA;;;AACA;;;AACA;;AAAA;;;AACQ;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AACR;AACO;;AAA2B;AAAA;AAAA;AAAA;AAA3B;AAAP;;AA1IR;;;AAGY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACU;AAAA;;AAAA;AAAA;AADV;;AAAA;;AAAA;;;AAGQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAJ;;;;;;;;AAJR;AAAA;AAsBR;;;AAG6B;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AADd;;AAAA;AAAA;;;AAAP;AAjBR;;;AAEQ;AAIQ;;AAHO;AAAA;;AAAA;AAAA;;;;;;;;;;;AADf;;;;;AAAA;;AAkIR;;;AAIQ;AAAA;AAAA;AAAA;AAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAA1B;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAsC;;AAAtC;;AAAA;AACA;;;;AA/FR;;;AAEW;AAAA;AAAA;AAAA;AAAX;;;AACY;;AAAc;;;AAAd;;AC5GZ;;;;;;;AAoBY;AAAA;;AAAA;AAAA;AAAA;;;AACI;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AADJ;;;;;;;;AADJ;AAIA;;AAAA;;;AAEI;;AAAA;;AAAA;AAAA;;;AAAa;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAT;AAAA;;AAAA;AAAJ;;;;;;;;AADJ;AAKqB;;AAAA;AAAA;AAAA;;AADrB;;AAAA;AAA8B;;;AAA9B;AAAA;;AAIkC;AAAA;;AAAA;AAAA;AAA9B;;AAAA;AAAoD;;AAApD;AAKA;AADJ;;AAKA;AAAmB;AAAnB;;AACA;AAAY;AAAZ;;AACA;AAAc;AAAd;;AAGG;AAAA;;AAAA;AAAA;AAAsB;;AAAA;AAAA;;AAAtB;;;;;;;;;;AAAA;;;AAAgD;AAAA;AAAA;AAAA;AAA1B;;AAAA;;;;;;;;;;;;;AAAtB;;;AACoB;;;AACnB;;AAAA;;AAAmB;;;AAGP;;AAAA;;;AAAA;AACE;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;AAGf;;AAA2B;AAAA;AAAA;AAAA;AAA3B;AAAX;;;;;;;AAIwB;;AAAA;AACK;;AAAA;AAEH;;AAAA;AACE;;AAAA;AAFC;AAHd;;AAAA;AAAA;AAAA;AAAP;;AAAA;AASR;;;AAkBQ;;AAAA;;;AACkB;AACC;AAChB;;;AAAX;;;AACmB;;AAAA;AAAwB;AAAxB;AAAP;AACA;;AAAmB;;;AAAnB;AAAA;;AACqC;AAAA;;AAAA;AAAA;AAAnB;AAAyC;;AAAzC;AAAlB;;AAES;;AAAA;AACC;;AAAA;AAFP;AAAP;;AAAA;AD8GR;;;AASQ;;AAAA;;AAAA;AACgB;;AAAA;;;AAAhB;;AAAA;AAAA;;AAYR;;;AAkCQ;;;AACO;AAAA;;AAAA;AAAA;AAAA;AAAP;AAE6B;;AAAA;AAA7B;;AAAA;AAAA;AAEA;;;AAGI;;AAAA;AAAmB;;AAAA;AAAnB;AAAA;AAAA;AADJ;AAGA;;AAAA;;AAAA;AACmB;AAAnB;;AAAA;AAAA;AAGO;;AAAA;AAAA;AACH;;AADG;AAAA;;;AAAA;;AAEH;;;AAFG;AAAA;;;;;;;;AAAP;AAIA;;AAAA;;AAAA;AAGqB;;AAAA;AAArB;;AAAA;AAAA;AAGqB;;AAAA;AAAA;AAArB;;AAAA;AAAA;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AAII;;AAAA;AAAA;AAAsB;AAAA;;AAAA;AAAA;AAAqB;AAArB;AAAtB;AADJ;AAII;;AAAA;;;AAAA;;;AAAA;AACE;;AADF;AADJ;AAIA;;AAAA;;;;AAAA;;AACA;;;AAAA;;AAIW;;AAAA;AAAA;AAAJ;AAAP;AAEA;;AAAc;;AAAd;;AA3VR;;;AAEe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;;AAyFR;;;AAEQ;AAIQ;;AAHO;AAAA;;AAAA;AAAA;AACI;;AACF;;;;;;;AAHjB;;;;;AAAA;;AA7CR;;;;;;AAEyB;;AAAA;AAAA;AAAqB;AAArB;AAAP;AAAA;;AAAA;;AAAA;AAAlB;;;AAEgC;;AACL;AAFf;;;AAIS;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;;AAAA;;AACqB;AAAK;AAAL;AAAA;AAAA;;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;;AACO;AAAP;AACG;AAAA;;AAAA;AAAA;AAA6B;;;AAA7B;AAAf;;;AAEwB;;AAAA;;AAAA;AAAmB;;AAApB;AAAA;AAAP;;;;;;;;;AAsEhB;;;AAEQ;;AAAA;;AAAA;;AAAA;;AAAA;AACyC;;AAAA;;;AAAA;AAAA;;;AAAA;AAAzC;;AAAA;AAAA;AAGyC;AAAA;;;AAAA;AAAzC;;AAAA;AAAA;AAGqB;AAAA;;;AAAA;AAArB;;AAAA;AAAA;AACiC;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAArB;AAAA;AAAA;;;;AAiNR;;;AAqBQ;;;AACW;;;AAAJ;AAAP;AACA;;;AAEO;;AAAA;AAAA;AAAuC;;AAAvC;AAAP;AAGA;;AAAA;;;AAAA;;AAEI;AAAA;;AAAA;AAAA;AACG;;AAAA;;;AAAA;AAAA;;;AAAA;AADH;;AAAA;;AAAA;AADJ;AAOI;AAAA;AAAA;AAAA;AAEI;;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;;AAAA;AADJ;AAOA;;AAAA;;AAAA;AAGA;;AAAA;AAAA;AAKQ;AAAA;;AAAA;AAAA;AAD0B;AAI1B;AAAA;;AAAA;AAAA;AAD0B;AAJ3B;AAAP;AAzZR;;;AAEe;AAAA;;AAAA;AAAA;AAAe;;;AAAf;AAAP;AAgaR;;;AAqBQ;;;AACA;;;AACO;;AAAA;AAAA;AACH;;AADG;AAAA;;;AAAA;;AAEH;;AAFG;AAAA;;;AAAA;;AAGH;;AAHG;AAAA;;;AAAA;;AAIH;;AAJG;AAAA;;;AAAA;;AAKH;;AALG;AAAA;;;;;;;;AAAP;AAQS;;;;;;;AADT;;AAAA;;;;;;;;;;;;AAsBQ;AApBA;;AAAA;;AAAA;;;;AAGwB;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAII;;AAAA;;;AADJ;;;;AAI2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEI;;AAAA;;;AADJ;;;;AAI2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACuD;;AAAA;;;AAAvD;;;;AAE2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACyD;;AAAA;;;AAAzD;AAGW;;AAAZ;AAAP;AAAA;AAER;;;AAkBQ;;;AACA;;;AACO;;AAAA;AAAA;AACH;;AADG;AAAA;;;AAAA;;AAEH;;AAFG;AAAA;;;AAAA;;AAGH;;AAHG;AAAA;;;AAAA;;AAIH;;AAJG;AAAA;;;;;;;;AAAP;AAQS;;;;;;AAFT;;AAAA;;;;;;;;;;AAeQ;AAZuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAEuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAEuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAEuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;AAGW;;AAAZ;AAAP;AAAA;AAER;;;AAoBQ;;;AACW;;;AAAJ;AAAP;AACA;;;AACA;;;AAC8B;AAAvB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEgC;;AAEtB;;AAFsB;AAGjB;;AAHiB;AAIf;;AAJe;AAKlB;;AALkB;AAAhC;AAOmB;;AAAZ;AAAP;AAthBR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;;;;;AAFR;;AAqhBR;;;AAkBQ;;;AACA;;;AACA;;AAAA;;;AAEe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AACf;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEK;AAAuC;;AAAZ;AADzB;AAAP;AAIR;;;AAuBQ;;;AAGA;;;AACA;;AAAA;;;AACA;;;AACA;;;AACO;;AAAA;AAAP;AAAA;AAEI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAyC;AAAA;;AAAA;AAAA;AAAzC;AADJ;AAIA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEI;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AADkC;AAAtC;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAGuD;AAAA;;AAAA;AAAA;AAAZ;AAA3C;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACmB;AAAA;;AAAA;AAAA;AAAmB;AAAA;AAAA;AAAA;AAAnB;AAAZ;AAAP;AAliBR;;;;;AAGY;;;AAAA;;;AACI;AAAA;;AAAA;AAAA;AACD;;AAAA;AAAA;;AADC;AAAA;;;AAEF;AAAA;;AAAA;AAAA;AADC;;AAAA;AADC;;;;;;;;AAFR;;AAhCR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;;;;;AAFR;;AA+jBR;;;AAcQ;;;AACiB;;;AAAO;AAAxB;;AAAA;AAAA;AACmB;;AAAZ;AAAP;AA5lBR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;;;;;AAFR;;AA2lBR;;;AAkBQ;;;AACA;;AAAA;;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACmB;;AAAZ;AAAP;AAER;;;AAWQ;;;AACiB;;;AAAO;AAAxB;;AAAA;AAAA;;AA3oBR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;;;;;AAFR;;AA0oBR;;;AAW8C;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;AAAA;AAAA;AAAyB;AAAA;;AAAA;AAAA;AAAzB;AAAZ;AACC;AAAA;;AAAA;AAAA;AAAZ;AACqB;AAAA;;AAAA;AAAA;AAAX;AAAA;;;AACK;AAAA;;AAAA;AAAA;AAAZ;AAAA;;;AACW;AAAA;;AAAA;AAAA;AAAZ;AACkB;AAAA;AAAA;AAAA;AAAZ;AAEf;AAAA;;AAAA;AAAA;AAD8B;AAI9B;AAAA;;AAAA;AAAA;AAD8B;AAGR;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;AAAA;AAAA;AAAZ;AACW;AAAA;;AAAA;AAAA;AAAf;;AAAA;AAAA;;AAAA;AACe;AAAA;;AAAA;AAAA;AAAf;;AAAA;AAAA;;AAAA;AAjBP;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAoBR;;;AAcQ;;AAAA;;;AACO;AAAA;;AAAA;AAAA;AAAA;AAAP;AAER;;;AAQsB;;;;AACX;;;AAAX;;;AAC0B;;AAAA;AAAA;AAAA;;AAAA;AAClB;;AAAA;AAAA;AAER;;;AAGwB;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AAFG;AAAA;;;;AAAA;AAAA;AAAP;AAKR;;;AAEiC;AAAA;;AAAA;AAAA;AAAlB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AA3dR;;;AAQQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.approval_program",
      "params": {},
      "block": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.approval_program",
      "stack_in": [],
      "op": "intcblock 0 1 8 4 448 10000 86400"
    },
    "14": {
      "op": "bytecblock 0x52333023 0x151f7c75 \"circulating_units\" \"maturity_date\" \"issuance_date\" 0x0000000000000000 \"denomination_asset_id\" \"interest_rate\" \"primary_distribution_opening_date\" \"status\" 0x00 \"unit_value\" \"day_count_convention\" \"total_units\" \"secondary_market_opening_date\" \"secondary_market_closure_date\" \"arranger\" \"primary_distribution_closure_date\" \"suspended\" \"defaulted\" \"metadata\" \"total_coupons\" 0x74696d654576656e7473 0x52343023 0x52353023 0x52363023 0x52373023 0x636f75706f6e5261746573 0x068101"
    },
    "397": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "399": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "402": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.__init__",
      "op": "callsub __init__"
    },
    "405": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "408": {
      "op": "return",
      "stack_out": []
    },
    "409": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "412": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.__init__",
      "op": "callsub smart_contracts.base_d_asa.contract.BaseDAsa.__init__"
    },
    "415": {
      "op": "txn GlobalNumByteSlice",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "417": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "419": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "420": {
      "error": "Wrong Global Bytes allocation",
      "op": "assert // Wrong Global Bytes allocation",
      "stack_out": []
    },
    "421": {
      "op": "txn GlobalNumUint",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "423": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "16"
      ]
    },
    "425": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "426": {
      "error": "Wrong Global UInts allocation",
      "op": "assert // Wrong Global UInts allocation",
      "stack_out": []
    },
    "427": {
      "op": "txn LocalNumByteSlice",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "429": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "430": {
      "error": "Wrong Local Bytes allocation",
      "op": "assert // Wrong Local Bytes allocation",
      "stack_out": []
    },
    "431": {
      "op": "txn LocalNumUint",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "433": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "434": {
      "error": "Wrong Local UInts allocation",
      "op": "assert // Wrong Local UInts allocation",
      "stack_out": []
    },
    "435": {
      "retsub": true,
      "op": "retsub"
    },
    "436": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.__init__",
      "params": {},
      "block": "smart_contracts.base_d_asa.contract.BaseDAsa.__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "439": {
      "op": "bytec 16 // \"arranger\""
    },
    "441": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"arranger\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"arranger\"",
        "new_state_value%0#0"
      ]
    },
    "443": {
      "op": "app_global_put",
      "stack_out": []
    },
    "444": {
      "op": "bytec 6 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\""
      ],
      "stack_out": [
        "\"denomination_asset_id\""
      ]
    },
    "446": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0"
      ],
      "stack_out": [
        "\"denomination_asset_id\"",
        "0"
      ]
    },
    "447": {
      "op": "app_global_put",
      "stack_out": []
    },
    "448": {
      "op": "bytec 11 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\""
      ],
      "stack_out": [
        "\"unit_value\""
      ]
    },
    "450": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"unit_value\"",
        "0"
      ]
    },
    "451": {
      "op": "app_global_put",
      "stack_out": []
    },
    "452": {
      "op": "bytec 12 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\""
      ],
      "stack_out": [
        "\"day_count_convention\""
      ]
    },
    "454": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"day_count_convention\"",
        "0"
      ]
    },
    "455": {
      "op": "app_global_put",
      "stack_out": []
    },
    "456": {
      "op": "bytec 20 // \"metadata\"",
      "defined_out": [
        "\"metadata\""
      ],
      "stack_out": [
        "\"metadata\""
      ]
    },
    "458": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"metadata\"",
        "0x"
      ],
      "stack_out": [
        "\"metadata\"",
        "0x"
      ]
    },
    "460": {
      "op": "app_global_put",
      "stack_out": []
    },
    "461": {
      "op": "bytec 13 // \"total_units\"",
      "defined_out": [
        "\"total_units\""
      ],
      "stack_out": [
        "\"total_units\""
      ]
    },
    "463": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_units\"",
        "0"
      ]
    },
    "464": {
      "op": "app_global_put",
      "stack_out": []
    },
    "465": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\""
      ],
      "stack_out": [
        "\"circulating_units\""
      ]
    },
    "466": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_units\"",
        "0"
      ]
    },
    "467": {
      "op": "app_global_put",
      "stack_out": []
    },
    "468": {
      "op": "bytec 7 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\""
      ],
      "stack_out": [
        "\"interest_rate\""
      ]
    },
    "470": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"interest_rate\"",
        "0"
      ]
    },
    "471": {
      "op": "app_global_put",
      "stack_out": []
    },
    "472": {
      "op": "bytec 21 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\""
      ],
      "stack_out": [
        "\"total_coupons\""
      ]
    },
    "474": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_coupons\"",
        "0"
      ]
    },
    "475": {
      "op": "app_global_put",
      "stack_out": []
    },
    "476": {
      "op": "bytec 8 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\""
      ],
      "stack_out": [
        "\"primary_distribution_opening_date\""
      ]
    },
    "478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"primary_distribution_opening_date\"",
        "0"
      ]
    },
    "479": {
      "op": "app_global_put",
      "stack_out": []
    },
    "480": {
      "op": "bytec 17 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\""
      ],
      "stack_out": [
        "\"primary_distribution_closure_date\""
      ]
    },
    "482": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"primary_distribution_closure_date\"",
        "0"
      ]
    },
    "483": {
      "op": "app_global_put",
      "stack_out": []
    },
    "484": {
      "op": "bytec 4 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\""
      ],
      "stack_out": [
        "\"issuance_date\""
      ]
    },
    "486": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"issuance_date\"",
        "0"
      ]
    },
    "487": {
      "op": "app_global_put",
      "stack_out": []
    },
    "488": {
      "op": "bytec 14 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\""
      ],
      "stack_out": [
        "\"secondary_market_opening_date\""
      ]
    },
    "490": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ]
    },
    "491": {
      "op": "app_global_put",
      "stack_out": []
    },
    "492": {
      "op": "bytec 15 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\""
      ],
      "stack_out": [
        "\"secondary_market_closure_date\""
      ]
    },
    "494": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"secondary_market_closure_date\"",
        "0"
      ]
    },
    "495": {
      "op": "app_global_put",
      "stack_out": []
    },
    "496": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\""
      ],
      "stack_out": [
        "\"maturity_date\""
      ]
    },
    "497": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"maturity_date\"",
        "0"
      ]
    },
    "498": {
      "op": "app_global_put",
      "stack_out": []
    },
    "499": {
      "op": "bytec 9 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "\"status\""
      ]
    },
    "501": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"status\"",
        "0"
      ]
    },
    "502": {
      "op": "app_global_put",
      "stack_out": []
    },
    "503": {
      "op": "bytec 18 // \"suspended\"",
      "defined_out": [
        "\"suspended\""
      ],
      "stack_out": [
        "\"suspended\""
      ]
    },
    "505": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"suspended\"",
        "0"
      ]
    },
    "506": {
      "op": "app_global_put",
      "stack_out": []
    },
    "507": {
      "op": "bytec 19 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\""
      ],
      "stack_out": [
        "\"defaulted\""
      ]
    },
    "509": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"defaulted\"",
        "0"
      ]
    },
    "510": {
      "op": "app_global_put",
      "stack_out": []
    },
    "511": {
      "retsub": true,
      "op": "retsub"
    },
    "512": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "515": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "517": {
      "op": "bz __puya_arc4_router___bare_routing@24",
      "stack_out": []
    },
    "520": {
      "op": "pushbytess 0x4fd6a3cc 0x9c76b6a3 0x44363d49 0x2e2877af 0x63f99589 0xeae05031 0x1d6fc255 0xfef74567 0xb8fc1390 0x3d43d1f0 0xebd96b2f 0x6c85e3ee 0xf63ace8d 0xbbcca18a 0x1a7babb4 0x301dd919 0xed02759f 0xfad2173e 0x08efea35 0xddcec07b // method \"asset_transfer(address,address,uint64)uint64\", method \"pay_principal(address,byte[])(uint64,uint64,byte[])\", method \"get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))\", method \"get_payment_amount(address,uint64)(uint64,uint64)\", method \"asset_create(address,byte[])void\", method \"asset_config(uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void\", method \"set_secondary_time_events(uint64[])(uint64,uint64)\", method \"assign_role(address,uint8,byte[])uint64\", method \"revoke_role(address,uint8)uint64\", method \"open_account(address,address)uint64\", method \"close_account(address)(uint64,uint64)\", method \"primary_distribution(address,uint64)uint64\", method \"set_asset_suspension(bool)uint64\", method \"set_account_suspension(address,bool)uint64\", method \"set_default_status(bool)void\", method \"get_asset_info()(uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"get_account_info(address)(address,uint64,uint64,uint64,bool)\", method \"get_time_events()uint64[]\", method \"get_secondary_market_schedule()uint64[]\", method \"get_asset_metadata()byte[]\""
    },
    "622": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(asset_config(uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void)",
        "Method(asset_create(address,byte[])void)",
        "Method(asset_transfer(address,address,uint64)uint64)",
        "Method(assign_role(address,uint8,byte[])uint64)",
        "Method(close_account(address)(uint64,uint64))",
        "Method(get_account_info(address)(address,uint64,uint64,uint64,bool))",
        "Method(get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64)))",
        "Method(get_asset_info()(uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(get_asset_metadata()byte[])",
        "Method(get_payment_amount(address,uint64)(uint64,uint64))",
        "Method(get_secondary_market_schedule()uint64[])",
        "Method(get_time_events()uint64[])",
        "Method(open_account(address,address)uint64)",
        "Method(pay_principal(address,byte[])(uint64,uint64,byte[]))",
        "Method(primary_distribution(address,uint64)uint64)",
        "Method(revoke_role(address,uint8)uint64)",
        "Method(set_account_suspension(address,bool)uint64)",
        "Method(set_asset_suspension(bool)uint64)",
        "Method(set_default_status(bool)void)",
        "Method(set_secondary_time_events(uint64[])(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(asset_transfer(address,address,uint64)uint64)",
        "Method(pay_principal(address,byte[])(uint64,uint64,byte[]))",
        "Method(get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64)))",
        "Method(get_payment_amount(address,uint64)(uint64,uint64))",
        "Method(asset_create(address,byte[])void)",
        "Method(asset_config(uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void)",
        "Method(set_secondary_time_events(uint64[])(uint64,uint64))",
        "Method(assign_role(address,uint8,byte[])uint64)",
        "Method(revoke_role(address,uint8)uint64)",
        "Method(open_account(address,address)uint64)",
        "Method(close_account(address)(uint64,uint64))",
        "Method(primary_distribution(address,uint64)uint64)",
        "Method(set_asset_suspension(bool)uint64)",
        "Method(set_account_suspension(address,bool)uint64)",
        "Method(set_default_status(bool)void)",
        "Method(get_asset_info()(uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(get_account_info(address)(address,uint64,uint64,uint64,bool))",
        "Method(get_time_events()uint64[])",
        "Method(get_secondary_market_schedule()uint64[])",
        "Method(get_asset_metadata()byte[])",
        "tmp%2#0"
      ]
    },
    "625": {
      "op": "match __puya_arc4_router___asset_transfer_route@2 __puya_arc4_router___pay_principal_route@3 __puya_arc4_router___get_account_units_current_value_route@4 __puya_arc4_router___get_payment_amount_route@5 __puya_arc4_router___asset_create_route@6 __puya_arc4_router___asset_config_route@7 __puya_arc4_router___set_secondary_time_events_route@8 __puya_arc4_router___assign_role_route@9 __puya_arc4_router___revoke_role_route@10 __puya_arc4_router___open_account_route@11 __puya_arc4_router___close_account_route@12 __puya_arc4_router___primary_distribution_route@13 __puya_arc4_router___set_asset_suspension_route@14 __puya_arc4_router___set_account_suspension_route@15 __puya_arc4_router___set_default_status_route@16 __puya_arc4_router___get_asset_info_route@17 __puya_arc4_router___get_account_info_route@18 __puya_arc4_router___get_time_events_route@19 __puya_arc4_router___get_secondary_market_schedule_route@20 __puya_arc4_router___get_asset_metadata_route@21",
      "stack_out": []
    },
    "667": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "668": {
      "retsub": true,
      "op": "retsub"
    },
    "669": {
      "block": "__puya_arc4_router___asset_transfer_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "671": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "672": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "673": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "675": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "676": {
      "op": "txna ApplicationArgs 1"
    },
    "679": {
      "op": "txna ApplicationArgs 2"
    },
    "682": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "685": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.asset_transfer",
      "op": "callsub asset_transfer",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "688": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "689": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%10#0"
      ]
    },
    "690": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "691": {
      "op": "log",
      "stack_out": []
    },
    "692": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "693": {
      "retsub": true,
      "op": "retsub"
    },
    "694": {
      "block": "__puya_arc4_router___pay_principal_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "696": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "697": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "698": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "700": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "701": {
      "op": "txna ApplicationArgs 1"
    },
    "704": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "707": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.pay_principal",
      "op": "callsub pay_principal",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "710": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "711": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "712": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "713": {
      "op": "log",
      "stack_out": []
    },
    "714": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "715": {
      "retsub": true,
      "op": "retsub"
    },
    "716": {
      "block": "__puya_arc4_router___get_account_units_current_value_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "718": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "719": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "720": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "722": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "723": {
      "op": "txna ApplicationArgs 1"
    },
    "726": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "729": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.get_account_units_current_value",
      "op": "callsub get_account_units_current_value",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "732": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0x151f7c75"
      ]
    },
    "733": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%26#0"
      ]
    },
    "734": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "735": {
      "op": "log",
      "stack_out": []
    },
    "736": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "737": {
      "retsub": true,
      "op": "retsub"
    },
    "738": {
      "block": "__puya_arc4_router___get_payment_amount_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "740": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "741": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "742": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "744": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "745": {
      "op": "txna ApplicationArgs 1"
    },
    "748": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "751": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.get_payment_amount",
      "op": "callsub get_payment_amount",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "754": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "755": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%34#0"
      ]
    },
    "756": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "757": {
      "op": "log",
      "stack_out": []
    },
    "758": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "759": {
      "retsub": true,
      "op": "retsub"
    },
    "760": {
      "block": "__puya_arc4_router___asset_create_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "762": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "763": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "764": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "766": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "767": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "768": {
      "op": "txna ApplicationArgs 1"
    },
    "771": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "774": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_create",
      "op": "callsub asset_create",
      "stack_out": []
    },
    "777": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "778": {
      "retsub": true,
      "op": "retsub"
    },
    "779": {
      "block": "__puya_arc4_router___asset_config_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "781": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "782": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "783": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "785": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "786": {
      "op": "txna ApplicationArgs 1"
    },
    "789": {
      "op": "txna ApplicationArgs 2"
    },
    "792": {
      "op": "txna ApplicationArgs 3"
    },
    "795": {
      "op": "txna ApplicationArgs 4"
    },
    "798": {
      "op": "txna ApplicationArgs 5"
    },
    "801": {
      "op": "txna ApplicationArgs 6"
    },
    "804": {
      "op": "txna ApplicationArgs 7"
    },
    "807": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "810": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_config",
      "op": "callsub asset_config",
      "stack_out": []
    },
    "813": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "814": {
      "retsub": true,
      "op": "retsub"
    },
    "815": {
      "block": "__puya_arc4_router___set_secondary_time_events_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "817": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "818": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "819": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "821": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "822": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "825": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events",
      "op": "callsub set_secondary_time_events",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "828": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "0x151f7c75"
      ]
    },
    "829": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%59#0"
      ]
    },
    "830": {
      "op": "concat",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "831": {
      "op": "log",
      "stack_out": []
    },
    "832": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "833": {
      "retsub": true,
      "op": "retsub"
    },
    "834": {
      "block": "__puya_arc4_router___assign_role_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "836": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "837": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "838": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "840": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "841": {
      "op": "txna ApplicationArgs 1"
    },
    "844": {
      "op": "txna ApplicationArgs 2"
    },
    "847": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0"
      ]
    },
    "850": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assign_role",
      "op": "callsub assign_role",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "853": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "0x151f7c75"
      ]
    },
    "854": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%68#0"
      ]
    },
    "855": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "856": {
      "op": "log",
      "stack_out": []
    },
    "857": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "858": {
      "retsub": true,
      "op": "retsub"
    },
    "859": {
      "block": "__puya_arc4_router___revoke_role_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "861": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "862": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "863": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "865": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "866": {
      "op": "txna ApplicationArgs 1"
    },
    "869": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%74#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%74#0",
        "tmp%75#0"
      ]
    },
    "872": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role",
      "op": "callsub revoke_role",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "875": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0",
        "0x151f7c75"
      ]
    },
    "876": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%76#0"
      ]
    },
    "877": {
      "op": "concat",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "878": {
      "op": "log",
      "stack_out": []
    },
    "879": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "880": {
      "retsub": true,
      "op": "retsub"
    },
    "881": {
      "block": "__puya_arc4_router___open_account_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "883": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "884": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "885": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "887": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "888": {
      "op": "txna ApplicationArgs 1"
    },
    "891": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%82#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%83#0"
      ]
    },
    "894": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.open_account",
      "op": "callsub open_account",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "897": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "0x151f7c75"
      ]
    },
    "898": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%84#0"
      ]
    },
    "899": {
      "op": "concat",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "900": {
      "op": "log",
      "stack_out": []
    },
    "901": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "902": {
      "retsub": true,
      "op": "retsub"
    },
    "903": {
      "block": "__puya_arc4_router___close_account_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "905": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "906": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "907": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "909": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "910": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "913": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.close_account",
      "op": "callsub close_account",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "916": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0",
        "0x151f7c75"
      ]
    },
    "917": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%91#0"
      ]
    },
    "918": {
      "op": "concat",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "919": {
      "op": "log",
      "stack_out": []
    },
    "920": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "921": {
      "retsub": true,
      "op": "retsub"
    },
    "922": {
      "block": "__puya_arc4_router___primary_distribution_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "924": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "925": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "926": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "928": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "929": {
      "op": "txna ApplicationArgs 1"
    },
    "932": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%97#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%97#0",
        "tmp%98#0"
      ]
    },
    "935": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution",
      "op": "callsub primary_distribution",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "938": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "0x151f7c75"
      ]
    },
    "939": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%99#0"
      ]
    },
    "940": {
      "op": "concat",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "941": {
      "op": "log",
      "stack_out": []
    },
    "942": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "943": {
      "retsub": true,
      "op": "retsub"
    },
    "944": {
      "block": "__puya_arc4_router___set_asset_suspension_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "946": {
      "op": "!",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "947": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "948": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "950": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "951": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "954": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension",
      "op": "callsub set_asset_suspension",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "957": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0",
        "0x151f7c75"
      ]
    },
    "958": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%106#0"
      ]
    },
    "959": {
      "op": "concat",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "960": {
      "op": "log",
      "stack_out": []
    },
    "961": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "962": {
      "retsub": true,
      "op": "retsub"
    },
    "963": {
      "block": "__puya_arc4_router___set_account_suspension_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "965": {
      "op": "!",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "966": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "967": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "969": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "970": {
      "op": "txna ApplicationArgs 1"
    },
    "973": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%112#0",
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%112#0",
        "tmp%113#0"
      ]
    },
    "976": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension",
      "op": "callsub set_account_suspension",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "979": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0",
        "0x151f7c75"
      ]
    },
    "980": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%114#0"
      ]
    },
    "981": {
      "op": "concat",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "982": {
      "op": "log",
      "stack_out": []
    },
    "983": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "984": {
      "retsub": true,
      "op": "retsub"
    },
    "985": {
      "block": "__puya_arc4_router___set_default_status_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "987": {
      "op": "!",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "988": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "989": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "991": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "992": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "995": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status",
      "op": "callsub set_default_status",
      "stack_out": []
    },
    "998": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "999": {
      "retsub": true,
      "op": "retsub"
    },
    "1000": {
      "block": "__puya_arc4_router___get_asset_info_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "1002": {
      "op": "!",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "1003": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1004": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "1006": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1007": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info",
      "op": "callsub get_asset_info",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1010": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0",
        "0x151f7c75"
      ]
    },
    "1011": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%125#0"
      ]
    },
    "1012": {
      "op": "concat",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "1013": {
      "op": "log",
      "stack_out": []
    },
    "1014": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1015": {
      "retsub": true,
      "op": "retsub"
    },
    "1016": {
      "block": "__puya_arc4_router___get_account_info_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1018": {
      "op": "!",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "1019": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1020": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "1022": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1023": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1026": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info",
      "op": "callsub get_account_info",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "1029": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0",
        "0x151f7c75"
      ]
    },
    "1030": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%132#0"
      ]
    },
    "1031": {
      "op": "concat",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1032": {
      "op": "log",
      "stack_out": []
    },
    "1033": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1034": {
      "retsub": true,
      "op": "retsub"
    },
    "1035": {
      "block": "__puya_arc4_router___get_time_events_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "1037": {
      "op": "!",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "1038": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1039": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "1041": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1042": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events",
      "op": "callsub get_time_events",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "1045": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0",
        "0x151f7c75"
      ]
    },
    "1046": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%138#0"
      ]
    },
    "1047": {
      "op": "concat",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "1048": {
      "op": "log",
      "stack_out": []
    },
    "1049": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1050": {
      "retsub": true,
      "op": "retsub"
    },
    "1051": {
      "block": "__puya_arc4_router___get_secondary_market_schedule_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1053": {
      "op": "!",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "1054": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1055": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1057": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1058": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule",
      "op": "callsub get_secondary_market_schedule",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "1061": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "0x151f7c75"
      ]
    },
    "1062": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%144#0"
      ]
    },
    "1063": {
      "op": "concat",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "1064": {
      "op": "log",
      "stack_out": []
    },
    "1065": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1066": {
      "retsub": true,
      "op": "retsub"
    },
    "1067": {
      "block": "__puya_arc4_router___get_asset_metadata_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1069": {
      "op": "!",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1070": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1071": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1073": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1074": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata",
      "op": "callsub get_asset_metadata",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "1077": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "0x151f7c75"
      ]
    },
    "1078": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%150#0"
      ]
    },
    "1079": {
      "op": "concat",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "1080": {
      "op": "log",
      "stack_out": []
    },
    "1081": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1082": {
      "retsub": true,
      "op": "retsub"
    },
    "1083": {
      "block": "__puya_arc4_router___bare_routing@24",
      "stack_in": [],
      "op": "intc_3 // 4"
    },
    "1084": {
      "op": "txn OnCompletion",
      "defined_out": [
        "4",
        "tmp%152#0"
      ],
      "stack_out": [
        "4",
        "tmp%152#0"
      ]
    },
    "1086": {
      "op": "match __puya_arc4_router___asset_update@25",
      "stack_out": []
    },
    "1090": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1091": {
      "retsub": true,
      "op": "retsub"
    },
    "1092": {
      "block": "__puya_arc4_router___asset_update@25",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "1094": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1095": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_update",
      "op": "callsub asset_update"
    },
    "1098": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1099": {
      "retsub": true,
      "op": "retsub"
    },
    "1100": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.asset_transfer",
      "params": {
        "sender_holding_address#0": "bytes",
        "receiver_holding_address#0": "bytes",
        "units#0": "bytes"
      },
      "block": "asset_transfer",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1103": {
      "op": "frame_dig -1",
      "defined_out": [
        "units#0 (copy)"
      ],
      "stack_out": [
        "units#0 (copy)"
      ]
    },
    "1105": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1106": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender_holding_address#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1108": {
      "op": "frame_dig -2",
      "defined_out": [
        "receiver_holding_address#0 (copy)",
        "sender_holding_address#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_holding_address#0 (copy)",
        "receiver_holding_address#0 (copy)"
      ]
    },
    "1110": {
      "op": "dig 2",
      "defined_out": [
        "receiver_holding_address#0 (copy)",
        "sender_holding_address#0 (copy)",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_holding_address#0 (copy)",
        "receiver_holding_address#0 (copy)",
        "tmp%0#0 (copy)"
      ]
    },
    "1112": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_asset_transfer_preconditions",
      "op": "callsub assert_asset_transfer_preconditions",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1115": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x52333023"
      ]
    },
    "1116": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#0",
        "0x52333023",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1118": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1119": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1120": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1121": {
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0"
      ]
    },
    "1124": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1126": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "sender_holding_address#0 (copy)",
        "tmp%0#0 (copy)"
      ]
    },
    "1128": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.accrued_interest_amount",
      "op": "callsub accrued_interest_amount",
      "defined_out": [
        "accrued_interest#0",
        "sender_unit_value#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "accrued_interest#0"
      ]
    },
    "1131": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "accrued_interest#0",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1133": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "accrued_interest#0",
        "sender_holding_address#0 (copy)",
        "receiver_holding_address#0 (copy)"
      ]
    },
    "1135": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "accrued_interest#0",
        "sender_holding_address#0 (copy)",
        "receiver_holding_address#0 (copy)",
        "tmp%0#0 (copy)"
      ]
    },
    "1137": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.transfer_units",
      "op": "callsub transfer_units",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "accrued_interest#0"
      ]
    },
    "1140": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "accrued_interest#0",
        "sender_unit_value#0"
      ]
    },
    "1141": {
      "op": "btoi",
      "defined_out": [
        "accrued_interest#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "accrued_interest#0",
        "tmp%5#0"
      ]
    },
    "1142": {
      "op": "uncover 2",
      "stack_out": [
        "accrued_interest#0",
        "tmp%5#0",
        "tmp%0#0"
      ]
    },
    "1144": {
      "op": "*",
      "defined_out": [
        "accrued_interest#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "accrued_interest#0",
        "tmp%6#0"
      ]
    },
    "1145": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1146": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1147": {
      "retsub": true,
      "op": "retsub"
    },
    "1148": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_asset_transfer_preconditions",
      "params": {
        "sender_holding_address#0": "bytes",
        "receiver_holding_address#0": "bytes",
        "units#0": "uint64"
      },
      "block": "assert_asset_transfer_preconditions",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1151": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_secondary_market_open",
      "op": "callsub assert_is_secondary_market_open"
    },
    "1154": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender_holding_address#0 (copy)"
      ],
      "stack_out": [
        "sender_holding_address#0 (copy)"
      ]
    },
    "1156": {
      "op": "frame_dig -2",
      "defined_out": [
        "receiver_holding_address#0 (copy)",
        "sender_holding_address#0 (copy)"
      ],
      "stack_out": [
        "sender_holding_address#0 (copy)",
        "receiver_holding_address#0 (copy)"
      ]
    },
    "1158": {
      "op": "frame_dig -1",
      "defined_out": [
        "receiver_holding_address#0 (copy)",
        "sender_holding_address#0 (copy)",
        "units#0 (copy)"
      ],
      "stack_out": [
        "sender_holding_address#0 (copy)",
        "receiver_holding_address#0 (copy)",
        "units#0 (copy)"
      ]
    },
    "1160": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_asset_transfer_authorization",
      "op": "callsub assert_asset_transfer_authorization",
      "stack_out": []
    },
    "1163": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_holding_address#0 (copy)"
      ]
    },
    "1165": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_holding_address#0 (copy)",
        "receiver_holding_address#0 (copy)"
      ]
    },
    "1167": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_transferred_units_fungibility",
      "op": "callsub assert_transferred_units_fungibility",
      "stack_out": []
    },
    "1170": {
      "retsub": true,
      "op": "retsub"
    },
    "1171": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_secondary_market_open",
      "params": {},
      "block": "assert_is_secondary_market_open",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1174": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1176": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_active",
      "op": "callsub status_is_active",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1179": {
      "op": "bz assert_is_secondary_market_open_bool_false@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1182": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0"
      ]
    },
    "1183": {
      "op": "bytec 14 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0",
        "\"secondary_market_opening_date\""
      ]
    },
    "1185": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1186": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1187": {
      "op": "global LatestTimestamp"
    },
    "1189": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1190": {
      "op": "frame_bury 0",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1192": {
      "op": "<=",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1193": {
      "op": "bz assert_is_secondary_market_open_bool_false@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1196": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "0"
      ]
    },
    "1197": {
      "op": "bytec 15 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0",
        "\"secondary_market_closure_date\""
      ]
    },
    "1199": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1200": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1201": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0"
      ]
    },
    "1203": {
      "op": ">",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1204": {
      "op": "bz assert_is_secondary_market_open_bool_false@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1207": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "1208": {
      "op": "b assert_is_secondary_market_open_bool_merge@5"
    },
    "1211": {
      "block": "assert_is_secondary_market_open_bool_false@4",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "1212": {
      "block": "assert_is_secondary_market_open_bool_merge@5",
      "stack_in": [
        "awst_tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Secondary market is closed",
      "op": "assert // Secondary market is closed",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1213": {
      "retsub": true,
      "op": "retsub"
    },
    "1214": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_active",
      "params": {},
      "block": "status_is_active",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1217": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1218": {
      "op": "bytec 9 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "1220": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1221": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1222": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "100"
      ]
    },
    "1224": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1225": {
      "retsub": true,
      "op": "retsub"
    },
    "1226": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_asset_transfer_authorization",
      "params": {
        "sender_holding_address#0": "bytes",
        "receiver_holding_address#0": "bytes",
        "units#0": "uint64"
      },
      "block": "assert_asset_transfer_authorization",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1229": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1231": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender_holding_address#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1233": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1234": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "1235": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1238": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "1241": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_holding_address#0 (copy)"
      ]
    },
    "1243": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "1246": {
      "op": "frame_dig -2",
      "defined_out": [
        "receiver_holding_address#0 (copy)"
      ],
      "stack_out": [
        "receiver_holding_address#0 (copy)"
      ]
    },
    "1248": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "1251": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1252": {
      "op": "frame_dig -3",
      "stack_out": [
        "0x52333023",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1254": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1255": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1256": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1257": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "1258": {
      "op": "intc 4 // 448",
      "defined_out": [
        "448",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "448"
      ]
    },
    "1260": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "is_true%0#0"
      ]
    },
    "1261": {
      "op": "bytec 10 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1263": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "is_true%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1264": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1266": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_bool%0#0"
      ]
    },
    "1267": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1268": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1269": {
      "op": "!",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "1270": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1271": {
      "op": "bytec_0 // 0x52333023",
      "stack_out": [
        "tmp%2#0",
        "0x52333023"
      ]
    },
    "1272": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "0x52333023",
        "receiver_holding_address#0 (copy)"
      ]
    },
    "1274": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "1275": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1276": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "1277": {
      "op": "intc 4 // 448",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "448"
      ]
    },
    "1279": {
      "op": "getbit",
      "defined_out": [
        "is_true%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "is_true%1#0"
      ]
    },
    "1280": {
      "op": "bytec 10 // 0x00",
      "stack_out": [
        "tmp%2#0",
        "is_true%1#0",
        "0x00"
      ]
    },
    "1282": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "1283": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "1285": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_bool%1#0"
      ]
    },
    "1286": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1287": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0"
      ]
    },
    "1288": {
      "op": "!",
      "defined_out": [
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0"
      ]
    },
    "1289": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1290": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1291": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1292": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1295": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1296": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%10#0",
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "units#0 (copy)"
      ]
    },
    "1298": {
      "op": ">=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1299": {
      "error": "Insufficient sender units to transfer",
      "op": "assert // Insufficient sender units to transfer",
      "stack_out": []
    },
    "1300": {
      "retsub": true,
      "op": "retsub"
    },
    "1301": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "params": {},
      "block": "assert_is_not_defaulted",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1304": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1305": {
      "op": "bytec 19 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"defaulted\""
      ]
    },
    "1307": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1308": {
      "error": "check self.defaulted exists",
      "op": "assert // check self.defaulted exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1309": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1310": {
      "error": "Defaulted",
      "op": "assert // Defaulted",
      "stack_out": []
    },
    "1311": {
      "retsub": true,
      "op": "retsub"
    },
    "1312": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "params": {},
      "block": "assert_is_not_suspended",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1315": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1316": {
      "op": "bytec 18 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"suspended\""
      ]
    },
    "1318": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1319": {
      "error": "check self.suspended exists",
      "op": "assert // check self.suspended exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1320": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1321": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": []
    },
    "1322": {
      "retsub": true,
      "op": "retsub"
    },
    "1323": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "assert_valid_holding_address",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1326": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1327": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1329": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1330": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1331": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1333": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": []
    },
    "1334": {
      "retsub": true,
      "op": "retsub"
    },
    "1335": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_transferred_units_fungibility",
      "params": {
        "sender_holding_address#0": "bytes",
        "receiver_holding_address#0": "bytes"
      },
      "block": "assert_transferred_units_fungibility",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1338": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1339": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "sender_holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1341": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1342": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1343": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1344": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1345": {
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0"
      ]
    },
    "1348": {
      "op": "bytec_0 // 0x52333023",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "0x52333023"
      ]
    },
    "1349": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "receiver_holding_address#0 (copy)",
        "sender_unit_value#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "0x52333023",
        "receiver_holding_address#0 (copy)"
      ]
    },
    "1351": {
      "op": "concat",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0"
      ]
    },
    "1352": {
      "op": "dup",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1353": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender_unit_value#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1354": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1355": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1358": {
      "op": "btoi",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1359": {
      "op": "bz assert_transferred_units_fungibility_else_body@2",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0"
      ]
    },
    "1362": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1364": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "sender_holding_address#0 (copy)",
        "receiver_holding_address#0 (copy)"
      ]
    },
    "1366": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_are_units_fungible",
      "op": "callsub assert_are_units_fungible",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0"
      ]
    },
    "1369": {
      "op": "b assert_transferred_units_fungibility_after_if_else@3"
    },
    "1372": {
      "block": "assert_transferred_units_fungibility_else_body@2",
      "stack_in": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1374": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1375": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1376": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "1377": {
      "op": "frame_dig 1",
      "defined_out": [
        "maybe_value%2#0",
        "sender_unit_value#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "sender_unit_value#0"
      ]
    },
    "1379": {
      "op": "replace2 40",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%1#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "updated_data%0#0"
      ]
    },
    "1381": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "updated_data%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1383": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "updated_data%0#0"
      ]
    },
    "1384": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1385": {
      "op": "frame_dig 0",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1387": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "sender_unit_value#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1388": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%3#0"
      ]
    },
    "1389": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1391": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "sender_unit_value#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1392": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "1393": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%4#0",
        "maybe_value%3#0"
      ]
    },
    "1394": {
      "op": "extract 48 8 // on error: Index access is out of bounds",
      "defined_out": [
        "assigned_value%1#0",
        "maybe_value%4#0",
        "sender_unit_value#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%4#0",
        "assigned_value%1#0"
      ]
    },
    "1397": {
      "op": "replace2 48",
      "defined_out": [
        "sender_unit_value#0",
        "tmp%0#0",
        "tmp%1#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0",
        "tmp%1#0",
        "updated_data%1#0"
      ]
    },
    "1399": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0"
      ]
    },
    "1400": {
      "block": "assert_transferred_units_fungibility_after_if_else@3",
      "stack_in": [
        "tmp%0#0",
        "sender_unit_value#0",
        "tmp%1#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1401": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_are_units_fungible",
      "params": {
        "sender#0": "bytes",
        "receiver#0": "bytes"
      },
      "block": "assert_are_units_fungible",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1404": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1405": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "sender#0 (copy)"
      ]
    },
    "1407": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1408": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1409": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1410": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1411": {
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "1414": {
      "op": "bytec_0 // 0x52333023",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "0x52333023"
      ]
    },
    "1415": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "receiver#0 (copy)",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "0x52333023",
        "receiver#0 (copy)"
      ]
    },
    "1417": {
      "op": "concat",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ]
    },
    "1418": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1419": {
      "op": "cover 2",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_biguint%0#0",
        "tmp%1#0"
      ]
    },
    "1421": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_biguint%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1422": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_biguint%0#0",
        "maybe_value%1#0"
      ]
    },
    "1423": {
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "1426": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1427": {
      "op": "bz assert_are_units_fungible_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1430": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1432": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1433": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "1434": {
      "op": "extract 48 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1437": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_biguint%2#0",
        "tmp%1#0"
      ]
    },
    "1439": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "reinterpret_biguint%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_biguint%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1440": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_biguint%2#0",
        "maybe_value%3#0"
      ]
    },
    "1441": {
      "op": "extract 48 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1444": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1445": {
      "op": "bz assert_are_units_fungible_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1448": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "and_result%0#0"
      ]
    },
    "1449": {
      "op": "b assert_are_units_fungible_bool_merge@4"
    },
    "1452": {
      "block": "assert_are_units_fungible_bool_false@3",
      "stack_in": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "and_result%0#0"
      ]
    },
    "1453": {
      "block": "assert_are_units_fungible_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "tmp%1#0",
        "and_result%0#0"
      ],
      "error": "Sender and receiver units are not fungible",
      "op": "assert // Sender and receiver units are not fungible",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1454": {
      "retsub": true,
      "op": "retsub"
    },
    "1455": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.accrued_interest_amount",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "uint64"
      },
      "block": "accrued_interest_amount",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1458": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.day_count_factor",
      "op": "callsub day_count_factor",
      "defined_out": [
        "day_count_factor#0"
      ],
      "stack_out": [
        "day_count_factor#0"
      ]
    },
    "1461": {
      "op": "dup",
      "defined_out": [
        "day_count_factor#0",
        "day_count_factor#0 (copy)"
      ],
      "stack_out": [
        "day_count_factor#0",
        "day_count_factor#0 (copy)"
      ]
    },
    "1462": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "day_count_factor#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "day_count_factor#0",
        "tmp%0#0"
      ]
    },
    "1465": {
      "op": "btoi",
      "defined_out": [
        "accrued_period#0",
        "day_count_factor#0"
      ],
      "stack_out": [
        "day_count_factor#0",
        "accrued_period#0"
      ]
    },
    "1466": {
      "op": "swap",
      "stack_out": [
        "accrued_period#0",
        "day_count_factor#0"
      ]
    },
    "1467": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "accrued_period#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "tmp%1#0"
      ]
    },
    "1470": {
      "op": "btoi",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0"
      ]
    },
    "1471": {
      "op": "frame_dig -2",
      "defined_out": [
        "accrued_period#0",
        "holding_address#0 (copy)",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "holding_address#0 (copy)"
      ]
    },
    "1473": {
      "op": "frame_dig -1",
      "defined_out": [
        "accrued_period#0",
        "holding_address#0 (copy)",
        "principal_period#0",
        "units#0 (copy)"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "holding_address#0 (copy)",
        "units#0 (copy)"
      ]
    },
    "1475": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "op": "callsub account_units_value",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0"
      ]
    },
    "1478": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0",
        "0"
      ]
    },
    "1479": {
      "op": "bytec 7 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "0",
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0",
        "0",
        "\"interest_rate\""
      ]
    },
    "1481": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accrued_period#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "principal_period#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1482": {
      "error": "check self.interest_rate exists",
      "op": "assert // check self.interest_rate exists",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "1483": {
      "op": "*",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%3#0"
      ]
    },
    "1484": {
      "op": "uncover 2",
      "stack_out": [
        "principal_period#0",
        "tmp%3#0",
        "accrued_period#0"
      ]
    },
    "1486": {
      "op": "*",
      "defined_out": [
        "principal_period#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "principal_period#0",
        "tmp%4#0"
      ]
    },
    "1487": {
      "op": "intc 5 // 10000",
      "defined_out": [
        "10000",
        "principal_period#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "principal_period#0",
        "tmp%4#0",
        "10000"
      ]
    },
    "1489": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "10000",
        "principal_period#0"
      ]
    },
    "1491": {
      "op": "*",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1492": {
      "op": "/",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1493": {
      "retsub": true,
      "op": "retsub"
    },
    "1494": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.day_count_factor",
      "params": {},
      "block": "day_count_factor",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1497": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1499": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1500": {
      "op": "bytec 4 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "1502": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1503": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1504": {
      "op": "-",
      "defined_out": [
        "accrued_period#0"
      ],
      "stack_out": [
        "accrued_period#0"
      ]
    },
    "1505": {
      "op": "dup",
      "defined_out": [
        "accrued_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0"
      ]
    },
    "1506": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "0"
      ]
    },
    "1507": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "accrued_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "1508": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accrued_period#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1509": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0"
      ]
    },
    "1510": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1511": {
      "op": "bytec 4 // \"issuance_date\"",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "1513": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accrued_period#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1514": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1515": {
      "op": "-",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "principal_period#0"
      ]
    },
    "1516": {
      "op": "dup",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "principal_period#0",
        "principal_period#0"
      ]
    },
    "1517": {
      "op": "cover 2",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0"
      ]
    },
    "1519": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0",
        "0"
      ]
    },
    "1520": {
      "op": "bytec 12 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "accrued_period#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "1522": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accrued_period#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1523": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0",
        "maybe_value%3#0"
      ]
    },
    "1524": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "accrued_period#0",
        "maybe_value%3#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0",
        "maybe_value%3#0",
        "100"
      ]
    },
    "1526": {
      "op": "==",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0",
        "tmp%1#0"
      ]
    },
    "1527": {
      "op": "swap",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "tmp%1#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "tmp%1#0",
        "principal_period#5"
      ]
    },
    "1528": {
      "op": "cover 2",
      "defined_out": [
        "accrued_period#0",
        "accrued_period#5",
        "principal_period#0",
        "principal_period#5",
        "tmp%1#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "tmp%1#0"
      ]
    },
    "1530": {
      "op": "bz day_count_factor_after_if_else@2",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5"
      ]
    },
    "1533": {
      "op": "frame_dig 0",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "accrued_period#0"
      ]
    },
    "1535": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.days_in",
      "op": "callsub days_in"
    },
    "1538": {
      "op": "frame_dig 1",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "accrued_period#0",
        "principal_period#0"
      ]
    },
    "1540": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.days_in",
      "op": "callsub days_in",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "accrued_period#0",
        "principal_period#5"
      ]
    },
    "1543": {
      "op": "frame_bury 2",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "accrued_period#5"
      ]
    },
    "1545": {
      "op": "frame_bury 3",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5"
      ]
    },
    "1547": {
      "block": "day_count_factor_after_if_else@2",
      "stack_in": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "principal_period#0"
      ]
    },
    "1549": {
      "op": "frame_dig 3",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "principal_period#0",
        "accrued_period#0"
      ]
    },
    "1551": {
      "op": "itob",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "principal_period#0",
        "val_as_bytes%0#0"
      ]
    },
    "1552": {
      "op": "swap",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "val_as_bytes%0#0",
        "principal_period#0"
      ]
    },
    "1553": {
      "op": "itob",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1554": {
      "op": "concat",
      "defined_out": [
        "accrued_period#0",
        "encoded_tuple_buffer%2#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1555": {
      "op": "frame_bury 0"
    },
    "1557": {
      "retsub": true,
      "op": "retsub"
    },
    "1558": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.days_in",
      "params": {
        "time_period#0": "uint64"
      },
      "block": "days_in",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1561": {
      "op": "frame_dig -1",
      "defined_out": [
        "time_period#0 (copy)"
      ],
      "stack_out": [
        "time_period#0 (copy)"
      ]
    },
    "1563": {
      "op": "intc 6 // 86400",
      "defined_out": [
        "86400",
        "time_period#0 (copy)"
      ],
      "stack_out": [
        "time_period#0 (copy)",
        "86400"
      ]
    },
    "1565": {
      "op": "/",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1566": {
      "retsub": true,
      "op": "retsub"
    },
    "1567": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "uint64"
      },
      "block": "account_units_value",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1570": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1571": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1573": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1574": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1575": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1576": {
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1579": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1580": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%2#0",
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "units#0 (copy)"
      ]
    },
    "1582": {
      "op": "*",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1583": {
      "retsub": true,
      "op": "retsub"
    },
    "1584": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.transfer_units",
      "params": {
        "sender_holding_address#0": "bytes",
        "receiver_holding_address#0": "bytes",
        "units#0": "uint64"
      },
      "block": "transfer_units",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1587": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1588": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52333023",
        "sender_holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1590": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1591": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1592": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1593": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1594": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1597": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1598": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "units#0 (copy)"
      ]
    },
    "1600": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "1601": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1602": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1604": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1605": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1606": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1607": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%0#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%0#0"
      ]
    },
    "1609": {
      "op": "box_put",
      "stack_out": []
    },
    "1610": {
      "op": "bytec_0 // 0x52333023",
      "stack_out": [
        "0x52333023"
      ]
    },
    "1611": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "receiver_holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "receiver_holding_address#0 (copy)"
      ]
    },
    "1613": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1614": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1615": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1616": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0"
      ]
    },
    "1617": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1620": {
      "op": "btoi",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "1621": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0",
        "units#0 (copy)"
      ]
    },
    "1623": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%1#0"
      ]
    },
    "1624": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "val_as_bytes%1#0"
      ]
    },
    "1625": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "val_as_bytes%1#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1627": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%4#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "val_as_bytes%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1628": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%4#0",
        "val_as_bytes%1#0",
        "maybe_value%3#0"
      ]
    },
    "1629": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "1630": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%4#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "updated_data%1#0"
      ]
    },
    "1632": {
      "op": "box_put",
      "stack_out": []
    },
    "1633": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_holding_address#0 (copy)"
      ]
    },
    "1635": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.reset_account_if_zero_units",
      "op": "callsub reset_account_if_zero_units",
      "stack_out": []
    },
    "1638": {
      "retsub": true,
      "op": "retsub"
    },
    "1639": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.reset_account_if_zero_units",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "reset_account_if_zero_units",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1642": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1643": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1645": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1646": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1647": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1648": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1649": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1652": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1653": {
      "op": "bnz reset_account_if_zero_units_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1656": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1658": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1659": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1660": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1661": {
      "op": "bytec 5 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "0x0000000000000000"
      ]
    },
    "1663": {
      "op": "replace2 40",
      "defined_out": [
        "tmp%0#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "updated_data%0#0"
      ]
    },
    "1665": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "updated_data%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1667": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "updated_data%0#0"
      ]
    },
    "1668": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1669": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1670": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1671": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "1672": {
      "op": "bytec 5 // 0x0000000000000000",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "0x0000000000000000"
      ]
    },
    "1674": {
      "op": "replace2 48",
      "defined_out": [
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "updated_data%1#0"
      ]
    },
    "1676": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1677": {
      "block": "reset_account_if_zero_units_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1678": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.pay_principal",
      "params": {
        "holding_address#0": "bytes",
        "payment_info#0": "bytes"
      },
      "block": "pay_principal",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1681": {
      "op": "frame_dig -2",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "1683": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_pay_principal_authorization",
      "op": "callsub assert_pay_principal_authorization",
      "stack_out": []
    },
    "1686": {
      "op": "frame_dig -2",
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "1688": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.is_payment_executable",
      "op": "callsub is_payment_executable",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1691": {
      "op": "bz pay_principal_else_body@2",
      "stack_out": []
    },
    "1694": {
      "op": "frame_dig -2",
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "1696": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value",
      "op": "callsub account_total_units_value",
      "defined_out": [
        "payment_amount#0"
      ],
      "stack_out": [
        "payment_amount#0"
      ]
    },
    "1699": {
      "op": "dup",
      "defined_out": [
        "payment_amount#0"
      ],
      "stack_out": [
        "payment_amount#0",
        "payment_amount#0"
      ]
    },
    "1700": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023",
        "payment_amount#0"
      ],
      "stack_out": [
        "payment_amount#0",
        "payment_amount#0",
        "0x52333023"
      ]
    },
    "1701": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment_amount#0",
        "payment_amount#0",
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1703": {
      "op": "concat",
      "defined_out": [
        "payment_amount#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "payment_amount#0",
        "payment_amount#0",
        "tmp%1#0"
      ]
    },
    "1704": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "payment_amount#0"
      ],
      "stack_out": [
        "payment_amount#0",
        "payment_amount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1705": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "payment_amount#0",
        "payment_amount#0",
        "maybe_value%0#0"
      ]
    },
    "1706": {
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "payment_amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "payment_amount#0",
        "payment_amount#0",
        "tmp%2#0"
      ]
    },
    "1709": {
      "op": "swap",
      "stack_out": [
        "payment_amount#0",
        "tmp%2#0",
        "payment_amount#0"
      ]
    },
    "1710": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.pay",
      "op": "callsub pay",
      "stack_out": [
        "payment_amount#0"
      ]
    },
    "1713": {
      "op": "b pay_principal_after_if_else@3"
    },
    "1716": {
      "block": "pay_principal_else_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "payment_amount#0"
      ],
      "stack_out": [
        "payment_amount#0"
      ]
    },
    "1717": {
      "block": "pay_principal_after_if_else@3",
      "stack_in": [
        "payment_amount#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "payment_amount#0",
        "holding_address#0 (copy)"
      ]
    },
    "1719": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.update_supply_after_principal_payment",
      "op": "callsub update_supply_after_principal_payment",
      "defined_out": [
        "payment_amount#0"
      ],
      "stack_out": [
        "payment_amount#0"
      ]
    },
    "1722": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1723": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "1725": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1726": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1727": {
      "op": "pushbytes 0x0012",
      "defined_out": [
        "0x0012",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x0012"
      ]
    },
    "1731": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1732": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "payment_info#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "payment_info#0 (copy)"
      ]
    },
    "1734": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1735": {
      "retsub": true,
      "op": "retsub"
    },
    "1736": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_pay_principal_authorization",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "assert_pay_principal_authorization",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1739": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_active",
      "op": "callsub status_is_active",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1742": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "1743": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1746": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "1749": {
      "op": "frame_dig -1",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "1751": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "1754": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1755": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1757": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1758": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1759": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1760": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1763": {
      "op": "btoi",
      "defined_out": [
        "units#0"
      ],
      "stack_out": [
        "units#0"
      ]
    },
    "1764": {
      "error": "No D-ASA units",
      "op": "assert // No D-ASA units",
      "stack_out": []
    },
    "1765": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1767": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "1768": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "1769": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1770": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0"
      ]
    },
    "1771": {
      "op": ">=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1772": {
      "error": "Not mature",
      "op": "assert // Not mature",
      "stack_out": []
    },
    "1773": {
      "retsub": true,
      "op": "retsub"
    },
    "1774": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.is_payment_executable",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "is_payment_executable",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1777": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1778": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1780": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1781": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1782": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1783": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1784": {
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1787": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1788": {
      "op": "bytec 6 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0",
        "\"denomination_asset_id\""
      ]
    },
    "1790": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1791": {
      "error": "check self.denomination_asset_id exists",
      "op": "assert // check self.denomination_asset_id exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1792": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1794": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1796": {
      "op": "bz is_payment_executable_bool_false@3",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1799": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1801": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1802": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "1803": {
      "op": "intc 4 // 448",
      "defined_out": [
        "448",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "448"
      ]
    },
    "1805": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "is_true%0#0"
      ]
    },
    "1806": {
      "op": "bytec 10 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1808": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1809": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1811": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_bool%0#0"
      ]
    },
    "1812": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1813": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "1814": {
      "op": "bnz is_payment_executable_bool_false@3",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1817": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "1818": {
      "op": "b is_payment_executable_bool_merge@4"
    },
    "1821": {
      "block": "is_payment_executable_bool_false@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "1822": {
      "block": "is_payment_executable_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "and_result%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "and_result%0#0"
      ]
    },
    "1823": {
      "retsub": true,
      "op": "retsub"
    },
    "1824": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "account_total_units_value",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1827": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1828": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1830": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1831": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1832": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1833": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1836": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1837": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "holding_address#0 (copy)"
      ]
    },
    "1839": {
      "op": "swap",
      "stack_out": [
        "holding_address#0 (copy)",
        "tmp%2#0"
      ]
    },
    "1840": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "op": "callsub account_units_value",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1843": {
      "retsub": true,
      "op": "retsub"
    },
    "1844": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.pay",
      "params": {
        "receiver#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "pay",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1847": {
      "op": "itxn_begin"
    },
    "1848": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1850": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "1851": {
      "op": "bytec 6 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0",
        "\"denomination_asset_id\""
      ]
    },
    "1853": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1854": {
      "error": "check self.denomination_asset_id exists",
      "op": "assert // check self.denomination_asset_id exists",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "1855": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "1857": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "1859": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "receiver#0 (copy)"
      ]
    },
    "1861": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "1863": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1865": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "axfer"
      ]
    },
    "1866": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1868": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1870": {
      "op": "itxn_submit"
    },
    "1871": {
      "retsub": true,
      "op": "retsub"
    },
    "1872": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.update_supply_after_principal_payment",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "update_supply_after_principal_payment",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1875": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1876": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_units\""
      ]
    },
    "1877": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1878": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1879": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x52333023"
      ]
    },
    "1880": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1882": {
      "op": "concat",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "1883": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1884": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1885": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1886": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1889": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1890": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "1892": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ]
    },
    "1893": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_state_value%0#0"
      ]
    },
    "1894": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "tmp%0#0",
        "new_state_value%0#0",
        "\"circulating_units\""
      ]
    },
    "1895": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"circulating_units\"",
        "new_state_value%0#0"
      ]
    },
    "1896": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1897": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1898": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1899": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "1900": {
      "op": "bytec 5 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "0x0000000000000000"
      ]
    },
    "1902": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%0#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%0#0"
      ]
    },
    "1904": {
      "op": "box_put",
      "stack_out": []
    },
    "1905": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units",
      "op": "callsub end_if_no_circulating_units"
    },
    "1908": {
      "retsub": true,
      "op": "retsub"
    },
    "1909": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units",
      "params": {},
      "block": "end_if_no_circulating_units",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1912": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1913": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_units\""
      ]
    },
    "1914": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1915": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1916": {
      "op": "bnz end_if_no_circulating_units_after_if_else@2",
      "stack_out": []
    },
    "1919": {
      "op": "bytec 9 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "\"status\""
      ]
    },
    "1921": {
      "op": "pushint 200 // 200",
      "defined_out": [
        "\"status\"",
        "200"
      ],
      "stack_out": [
        "\"status\"",
        "200"
      ]
    },
    "1924": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1925": {
      "block": "end_if_no_circulating_units_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "1926": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.get_account_units_current_value",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "bytes"
      },
      "block": "get_account_units_current_value",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1929": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "account_units_current_value#0"
      ]
    },
    "1931": {
      "op": "dupn 9",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "1933": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "0"
      ]
    },
    "1934": {
      "op": "bytec 8 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "1936": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1937": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "maybe_value%0#0"
      ]
    },
    "1938": {
      "op": "bz get_account_units_current_value_bool_false@3",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "1941": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%1#0"
      ]
    },
    "1943": {
      "op": "intc_0 // 0",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1944": {
      "op": "bytec 8 // \"primary_distribution_opening_date\"",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%1#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "1946": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1947": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1948": {
      "op": ">=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%2#0"
      ]
    },
    "1949": {
      "op": "bz get_account_units_current_value_bool_false@3",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "1952": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "and_result%0#0"
      ]
    },
    "1953": {
      "op": "b get_account_units_current_value_bool_merge@4"
    },
    "1956": {
      "block": "get_account_units_current_value_bool_false@3",
      "stack_in": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "and_result%0#0"
      ]
    },
    "1957": {
      "block": "get_account_units_current_value_bool_merge@4",
      "stack_in": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "and_result%0#0"
      ],
      "error": "Primary distribution not yet executed",
      "op": "assert // Primary distribution not yet executed",
      "defined_out": [],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "1958": {
      "op": "frame_dig -2",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "holding_address#0 (copy)"
      ]
    },
    "1960": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "1963": {
      "op": "frame_dig -1",
      "defined_out": [
        "units#0 (copy)"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "units#0 (copy)"
      ]
    },
    "1965": {
      "op": "bytec 5 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "units#0 (copy)"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "units#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "1967": {
      "op": "b>",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%3#0"
      ]
    },
    "1968": {
      "op": "bz get_account_units_current_value_bool_false@7",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "1971": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "0x52333023"
      ]
    },
    "1972": {
      "op": "frame_dig -2",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1974": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%4#0"
      ]
    },
    "1975": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1976": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "maybe_value%2#0"
      ]
    },
    "1977": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%5#0"
      ]
    },
    "1980": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%6#0"
      ]
    },
    "1981": {
      "op": "itob",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%7#0"
      ]
    },
    "1982": {
      "op": "frame_dig -1",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%7#0",
        "units#0 (copy)"
      ]
    },
    "1984": {
      "op": "b>=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "1985": {
      "op": "bz get_account_units_current_value_bool_false@7",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "1988": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "and_result%1#0"
      ]
    },
    "1989": {
      "op": "b get_account_units_current_value_bool_merge@8"
    },
    "1992": {
      "block": "get_account_units_current_value_bool_false@7",
      "stack_in": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "and_result%1#0"
      ]
    },
    "1993": {
      "block": "get_account_units_current_value_bool_merge@8",
      "stack_in": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "and_result%1#0"
      ],
      "error": "Invalid amount of units for the account",
      "op": "assert // Invalid amount of units for the account",
      "defined_out": [],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "1994": {
      "op": "frame_dig -1",
      "defined_out": [
        "units#0 (copy)"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "units#0 (copy)"
      ]
    },
    "1996": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "1997": {
      "op": "dup",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "1998": {
      "op": "frame_bury 9",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "2000": {
      "op": "frame_dig -2",
      "defined_out": [
        "holding_address#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%9#0",
        "holding_address#0 (copy)"
      ]
    },
    "2002": {
      "op": "swap",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "holding_address#0 (copy)",
        "tmp%9#0"
      ]
    },
    "2003": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "op": "callsub account_units_value",
      "defined_out": [
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_nominal_value#0"
      ]
    },
    "2006": {
      "op": "dup",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "account_units_nominal_value#0"
      ]
    },
    "2007": {
      "op": "frame_bury 1",
      "defined_out": [
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_nominal_value#0"
      ]
    },
    "2009": {
      "op": "intc_0 // 0",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "0"
      ]
    },
    "2010": {
      "op": "bytec 7 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "0",
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "0",
        "\"interest_rate\""
      ]
    },
    "2012": {
      "op": "app_global_get_ex",
      "defined_out": [
        "account_units_nominal_value#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2013": {
      "error": "check self.interest_rate exists",
      "op": "assert // check self.interest_rate exists",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "maybe_value%3#0"
      ]
    },
    "2014": {
      "op": "dig 1",
      "defined_out": [
        "account_units_nominal_value#0",
        "account_units_nominal_value#0 (copy)",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "maybe_value%3#0",
        "account_units_nominal_value#0 (copy)"
      ]
    },
    "2016": {
      "op": "*",
      "defined_out": [
        "account_units_nominal_value#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "tmp%10#0"
      ]
    },
    "2017": {
      "op": "intc 5 // 10000",
      "defined_out": [
        "10000",
        "account_units_nominal_value#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "tmp%10#0",
        "10000"
      ]
    },
    "2019": {
      "op": "/",
      "defined_out": [
        "account_units_discount#0",
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "account_units_discount#0"
      ]
    },
    "2020": {
      "op": "-",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_current_value#0"
      ]
    },
    "2021": {
      "op": "frame_bury 0",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "2023": {
      "op": "intc_0 // 0"
    },
    "2024": {
      "op": "dup",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "accrued_interest#0"
      ]
    },
    "2025": {
      "op": "frame_bury 2",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0"
      ]
    },
    "2027": {
      "op": "intc_0 // 0"
    },
    "2028": {
      "op": "dup",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "numerator#0"
      ]
    },
    "2029": {
      "op": "frame_bury 7",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0"
      ]
    },
    "2031": {
      "op": "intc_0 // 0"
    },
    "2032": {
      "op": "dup",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "denominator#0",
        "denominator#0"
      ]
    },
    "2033": {
      "op": "frame_bury 5",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "denominator#0"
      ]
    },
    "2035": {
      "op": "intc_0 // 0",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "denominator#0",
        "0"
      ]
    },
    "2036": {
      "op": "bytec 4 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "denominator#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "2038": {
      "op": "app_global_get_ex",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "denominator#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2039": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "denominator#0",
        "maybe_value%4#0"
      ]
    },
    "2040": {
      "op": "global LatestTimestamp"
    },
    "2042": {
      "op": "dup",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "maybe_value%4#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "denominator#0",
        "maybe_value%4#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2043": {
      "op": "frame_bury 4",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "maybe_value%4#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "denominator#0",
        "maybe_value%4#0",
        "awst_tmp%0#0"
      ]
    },
    "2045": {
      "op": "<=",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "denominator#0",
        "tmp%11#0"
      ]
    },
    "2046": {
      "op": "swap",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "tmp%11#0",
        "denominator#7"
      ]
    },
    "2047": {
      "op": "frame_bury 6",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "tmp%11#0"
      ]
    },
    "2049": {
      "op": "swap",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "tmp%11#0",
        "numerator#7"
      ]
    },
    "2050": {
      "op": "frame_bury 8",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "tmp%11#0"
      ]
    },
    "2052": {
      "op": "swap",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%11#0",
        "accrued_interest#7"
      ]
    },
    "2053": {
      "op": "frame_bury 3",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "2055": {
      "op": "bz get_account_units_current_value_after_if_else@11",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "2058": {
      "op": "intc_0 // 0",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "0"
      ]
    },
    "2059": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "2060": {
      "op": "app_global_get_ex",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2061": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "maybe_value%5#0"
      ]
    },
    "2062": {
      "op": "frame_dig 4",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "maybe_value%5#0",
        "awst_tmp%0#0"
      ]
    },
    "2064": {
      "op": ">",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "2065": {
      "op": "frame_dig 5",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%12#0",
        "denominator#7"
      ]
    },
    "2067": {
      "op": "frame_bury 6",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "2069": {
      "op": "frame_dig 7",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%12#0",
        "numerator#7"
      ]
    },
    "2071": {
      "op": "frame_bury 8",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "2073": {
      "op": "frame_dig 2",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%12#0",
        "accrued_interest#7"
      ]
    },
    "2075": {
      "op": "frame_bury 3",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "2077": {
      "op": "bz get_account_units_current_value_after_if_else@11",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "2080": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.day_count_factor",
      "op": "callsub day_count_factor",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "day_count_factor#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "day_count_factor#0"
      ]
    },
    "2083": {
      "op": "frame_dig -2",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "day_count_factor#0",
        "holding_address#0 (copy)"
      ]
    },
    "2085": {
      "op": "frame_dig 9",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "day_count_factor#0",
        "holding_address#0 (copy)",
        "tmp%9#0"
      ]
    },
    "2087": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.accrued_interest_amount",
      "op": "callsub accrued_interest_amount",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "day_count_factor#0",
        "accrued_interest#0"
      ]
    },
    "2090": {
      "op": "dig 1",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "day_count_factor#0",
        "day_count_factor#0 (copy)",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "day_count_factor#0",
        "accrued_interest#0",
        "day_count_factor#0 (copy)"
      ]
    },
    "2092": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "day_count_factor#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%14#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "day_count_factor#0",
        "accrued_interest#0",
        "tmp%14#0"
      ]
    },
    "2095": {
      "op": "btoi",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "day_count_factor#0",
        "accrued_interest#0",
        "numerator#0"
      ]
    },
    "2096": {
      "op": "uncover 2",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "day_count_factor#0"
      ]
    },
    "2098": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%15#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "tmp%15#0"
      ]
    },
    "2101": {
      "op": "btoi",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#0",
        "denominator#7"
      ]
    },
    "2102": {
      "op": "frame_bury 6",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0",
        "numerator#7"
      ]
    },
    "2104": {
      "op": "frame_bury 8",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#7"
      ]
    },
    "2106": {
      "op": "frame_bury 3",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "2108": {
      "block": "get_account_units_current_value_after_if_else@11",
      "stack_in": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "denominator#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "denominator#0"
      ]
    },
    "2110": {
      "op": "frame_bury 5",
      "defined_out": [
        "denominator#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "2112": {
      "op": "frame_dig 8",
      "defined_out": [
        "denominator#0",
        "numerator#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "numerator#0"
      ]
    },
    "2114": {
      "op": "frame_bury 7",
      "defined_out": [
        "denominator#0",
        "numerator#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "2116": {
      "op": "frame_dig 3",
      "defined_out": [
        "accrued_interest#0",
        "denominator#0",
        "numerator#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "accrued_interest#0"
      ]
    },
    "2118": {
      "op": "frame_bury 2",
      "defined_out": [
        "accrued_interest#0",
        "denominator#0",
        "numerator#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "2120": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%16#0"
      ]
    },
    "2122": {
      "op": "intc_0 // 0",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%16#0",
        "0"
      ]
    },
    "2123": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%16#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "2124": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accrued_interest#0",
        "denominator#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "numerator#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%16#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2125": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%16#0",
        "maybe_value%6#0"
      ]
    },
    "2126": {
      "op": ">=",
      "defined_out": [
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "tmp%17#0"
      ]
    },
    "2127": {
      "op": "bz get_account_units_current_value_after_if_else@13",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "2130": {
      "op": "frame_dig 1",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_current_value#0"
      ]
    },
    "2132": {
      "op": "frame_bury 0",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ]
    },
    "2134": {
      "block": "get_account_units_current_value_after_if_else@13",
      "stack_in": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "account_units_current_value#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "account_units_current_value#0"
      ]
    },
    "2136": {
      "op": "itob",
      "defined_out": [
        "account_units_current_value#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "2137": {
      "op": "frame_dig 2",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "accrued_interest#0"
      ]
    },
    "2139": {
      "op": "itob",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2140": {
      "op": "frame_dig 7",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "numerator#0"
      ]
    },
    "2142": {
      "op": "itob",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "2143": {
      "op": "frame_dig 5",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "denominator#0"
      ]
    },
    "2145": {
      "op": "itob",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "2146": {
      "op": "concat",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "encoded_tuple_buffer%2#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2147": {
      "op": "cover 2",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2149": {
      "op": "concat",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "numerator#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2150": {
      "op": "swap",
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2151": {
      "op": "concat",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "encoded_tuple_buffer%6#0",
        "numerator#0"
      ],
      "stack_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "accrued_interest#7",
        "awst_tmp%0#0",
        "denominator#0",
        "denominator#7",
        "numerator#0",
        "numerator#7",
        "tmp%9#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2152": {
      "op": "frame_bury 0"
    },
    "2154": {
      "retsub": true,
      "op": "retsub"
    },
    "2155": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.get_payment_amount",
      "params": {
        "holding_address#0": "bytes",
        "payment_index#0": "bytes"
      },
      "block": "get_payment_amount",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2158": {
      "op": "frame_dig -2",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "2160": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "2163": {
      "op": "intc_0 // 0"
    },
    "2164": {
      "op": "dup",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0"
      ]
    },
    "2165": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_active",
      "op": "callsub status_is_active",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "tmp%0#0"
      ]
    },
    "2168": {
      "op": "bz get_payment_amount_after_if_else@2",
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0"
      ]
    },
    "2171": {
      "op": "frame_dig -1",
      "defined_out": [
        "interest_amount#0",
        "payment_index#0 (copy)",
        "principal_amount#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "payment_index#0 (copy)"
      ]
    },
    "2173": {
      "op": "btoi",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "tmp%1#0"
      ]
    },
    "2174": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "interest_amount#0",
        "principal_amount#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "tmp%1#0",
        "1"
      ]
    },
    "2175": {
      "op": "==",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "tmp%2#0"
      ]
    },
    "2176": {
      "error": "Invalid 1-based payment index",
      "op": "assert // Invalid 1-based payment index",
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0"
      ]
    },
    "2177": {
      "op": "frame_dig -2",
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "holding_address#0 (copy)"
      ]
    },
    "2179": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value",
      "op": "callsub account_total_units_value",
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#0"
      ]
    },
    "2182": {
      "op": "dup",
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#0",
        "principal_amount#0"
      ]
    },
    "2183": {
      "op": "frame_bury 1",
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#0"
      ]
    },
    "2185": {
      "op": "intc_0 // 0",
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#0",
        "0"
      ]
    },
    "2186": {
      "op": "bytec 7 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "0",
        "interest_amount#0",
        "principal_amount#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#0",
        "0",
        "\"interest_rate\""
      ]
    },
    "2188": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest_amount#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "principal_amount#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2189": {
      "error": "check self.interest_rate exists",
      "op": "assert // check self.interest_rate exists",
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "principal_amount#0",
        "maybe_value%0#0"
      ]
    },
    "2190": {
      "op": "*",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "tmp%3#0"
      ]
    },
    "2191": {
      "op": "intc 5 // 10000",
      "defined_out": [
        "10000",
        "interest_amount#0",
        "principal_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "tmp%3#0",
        "10000"
      ]
    },
    "2193": {
      "op": "/",
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "interest_amount#0"
      ]
    },
    "2194": {
      "op": "frame_bury 0",
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0"
      ]
    },
    "2196": {
      "block": "get_payment_amount_after_if_else@2",
      "stack_in": [
        "interest_amount#0",
        "principal_amount#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "interest_amount#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "interest_amount#0"
      ]
    },
    "2198": {
      "op": "itob",
      "defined_out": [
        "interest_amount#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "val_as_bytes%0#0"
      ]
    },
    "2199": {
      "op": "frame_dig 1",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "val_as_bytes%0#0",
        "principal_amount#0"
      ]
    },
    "2201": {
      "op": "itob",
      "defined_out": [
        "interest_amount#0",
        "principal_amount#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2202": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "interest_amount#0",
        "principal_amount#0"
      ],
      "stack_out": [
        "interest_amount#0",
        "principal_amount#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2203": {
      "op": "frame_bury 0"
    },
    "2205": {
      "retsub": true,
      "op": "retsub"
    },
    "2206": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_create",
      "params": {
        "arranger#0": "bytes",
        "metadata#0": "bytes"
      },
      "block": "asset_create",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2209": {
      "op": "bytec 16 // \"arranger\"",
      "defined_out": [
        "\"arranger\""
      ],
      "stack_out": [
        "\"arranger\""
      ]
    },
    "2211": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"arranger\"",
        "arranger#0 (copy)"
      ],
      "stack_out": [
        "\"arranger\"",
        "arranger#0 (copy)"
      ]
    },
    "2213": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2214": {
      "op": "frame_dig -1",
      "defined_out": [
        "metadata#0 (copy)"
      ],
      "stack_out": [
        "metadata#0 (copy)"
      ]
    },
    "2216": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2219": {
      "op": "bytec 20 // \"metadata\"",
      "defined_out": [
        "\"metadata\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"metadata\""
      ]
    },
    "2221": {
      "op": "swap",
      "stack_out": [
        "\"metadata\"",
        "new_state_value%0#0"
      ]
    },
    "2222": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2223": {
      "retsub": true,
      "op": "retsub"
    },
    "2224": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_config",
      "params": {
        "denomination_asset_id#0": "bytes",
        "principal#0": "bytes",
        "minimum_denomination#0": "bytes",
        "day_count_convention#0": "bytes",
        "interest_rate#0": "bytes",
        "coupon_rates#0": "bytes",
        "time_events#0": "bytes",
        "time_periods#0": "bytes"
      },
      "block": "asset_config",
      "stack_in": [],
      "op": "proto 8 0"
    },
    "2227": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "2230": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2231": {
      "op": "bytec 9 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "2233": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2234": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2235": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2236": {
      "error": "D-ASA already configured",
      "op": "assert // D-ASA already configured",
      "stack_out": []
    },
    "2237": {
      "op": "frame_dig -8",
      "defined_out": [
        "denomination_asset_id#0 (copy)"
      ],
      "stack_out": [
        "denomination_asset_id#0 (copy)"
      ]
    },
    "2239": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2240": {
      "op": "bytec 6 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"denomination_asset_id\""
      ]
    },
    "2242": {
      "op": "swap",
      "stack_out": [
        "\"denomination_asset_id\"",
        "new_state_value%0#0"
      ]
    },
    "2243": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2244": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.opt_in_denomination_asset",
      "op": "callsub opt_in_denomination_asset"
    },
    "2247": {
      "op": "frame_dig -7",
      "defined_out": [
        "principal#0 (copy)"
      ],
      "stack_out": [
        "principal#0 (copy)"
      ]
    },
    "2249": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2250": {
      "op": "frame_dig -6",
      "defined_out": [
        "minimum_denomination#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "minimum_denomination#0 (copy)"
      ]
    },
    "2252": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2253": {
      "op": "dup2",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%1#0 (copy)",
        "tmp%2#0 (copy)"
      ]
    },
    "2254": {
      "op": "%",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2255": {
      "op": "!",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "2256": {
      "error": "Minimum denomination is not a divisor of principal",
      "op": "assert // Minimum denomination is not a divisor of principal",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2257": {
      "op": "bytec 11 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "\"unit_value\""
      ]
    },
    "2259": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "\"unit_value\"",
        "tmp%2#0 (copy)"
      ]
    },
    "2261": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2262": {
      "op": "/",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "2263": {
      "op": "bytec 13 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"total_units\""
      ]
    },
    "2265": {
      "op": "swap",
      "stack_out": [
        "\"total_units\"",
        "new_state_value%2#0"
      ]
    },
    "2266": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2267": {
      "op": "frame_dig -5",
      "defined_out": [
        "day_count_convention#0 (copy)"
      ],
      "stack_out": [
        "day_count_convention#0 (copy)"
      ]
    },
    "2269": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2270": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2271": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "100"
      ]
    },
    "2273": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "2274": {
      "op": "bnz asset_config_bool_true@2",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2277": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2279": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "255"
      ]
    },
    "2282": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0"
      ]
    },
    "2283": {
      "op": "bz asset_config_bool_false@3",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2286": {
      "block": "asset_config_bool_true@2",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "2287": {
      "op": "b asset_config_bool_merge@4"
    },
    "2290": {
      "block": "asset_config_bool_false@3",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "2291": {
      "block": "asset_config_bool_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid day-count convention ID",
      "op": "assert // Invalid day-count convention ID",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2292": {
      "op": "bytec 12 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\""
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"day_count_convention\""
      ]
    },
    "2294": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"day_count_convention\"",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"day_count_convention\"",
        "awst_tmp%0#0"
      ]
    },
    "2296": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2297": {
      "op": "frame_dig -4",
      "defined_out": [
        "awst_tmp%0#0",
        "interest_rate#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "interest_rate#0 (copy)"
      ]
    },
    "2299": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "new_state_value%4#0"
      ]
    },
    "2300": {
      "op": "bytec 7 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "awst_tmp%0#0",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "new_state_value%4#0",
        "\"interest_rate\""
      ]
    },
    "2302": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "\"interest_rate\"",
        "new_state_value%4#0"
      ]
    },
    "2303": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2304": {
      "op": "frame_dig -3",
      "defined_out": [
        "awst_tmp%0#0",
        "coupon_rates#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "coupon_rates#0 (copy)"
      ]
    },
    "2306": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "coupon_rates#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "coupon_rates#0 (copy)",
        "0"
      ]
    },
    "2307": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "new_state_value%5#0"
      ]
    },
    "2308": {
      "op": "bytec 21 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\"",
        "awst_tmp%0#0",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "new_state_value%5#0",
        "\"total_coupons\""
      ]
    },
    "2310": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "\"total_coupons\"",
        "new_state_value%5#0"
      ]
    },
    "2311": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2312": {
      "op": "bytec 27 // 0x636f75706f6e5261746573",
      "defined_out": [
        "0x636f75706f6e5261746573",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x636f75706f6e5261746573"
      ]
    },
    "2314": {
      "op": "box_del",
      "defined_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "2315": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2316": {
      "op": "bytec 27 // 0x636f75706f6e5261746573",
      "stack_out": [
        "awst_tmp%0#0",
        "0x636f75706f6e5261746573"
      ]
    },
    "2318": {
      "op": "frame_dig -3",
      "stack_out": [
        "awst_tmp%0#0",
        "0x636f75706f6e5261746573",
        "coupon_rates#0 (copy)"
      ]
    },
    "2320": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2321": {
      "op": "frame_dig -2",
      "defined_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)"
      ]
    },
    "2323": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "2324": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "2325": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "0"
      ]
    },
    "2326": {
      "op": "bytec 21 // \"total_coupons\"",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "0",
        "\"total_coupons\""
      ]
    },
    "2328": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2329": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_value%1#0"
      ]
    },
    "2330": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "4"
      ]
    },
    "2331": {
      "op": "+",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "2332": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0"
      ]
    },
    "2333": {
      "error": "Time events length is invalid",
      "op": "assert // Time events length is invalid",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2334": {
      "op": "frame_dig -2",
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)"
      ]
    },
    "2336": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2339": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ]
    },
    "2342": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ]
    },
    "2343": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "2345": {
      "op": ">",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0"
      ]
    },
    "2346": {
      "error": "Time events must be set in the future",
      "op": "assert // Time events must be set in the future",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2347": {
      "op": "frame_dig -2",
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)"
      ]
    },
    "2349": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "op": "callsub assert_time_events_sorted",
      "defined_out": [
        "awst_tmp%0#0",
        "time_events#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0"
      ]
    },
    "2352": {
      "op": "dup"
    },
    "2353": {
      "op": "frame_bury -2",
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)"
      ]
    },
    "2355": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_time_events",
      "op": "callsub set_time_events",
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0"
      ]
    },
    "2358": {
      "op": "frame_bury -2",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2360": {
      "op": "frame_dig -1",
      "defined_out": [
        "awst_tmp%0#0",
        "time_periods#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "time_periods#0 (copy)"
      ]
    },
    "2362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "time_periods#0 (copy)",
        "0"
      ]
    },
    "2363": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0"
      ]
    },
    "2364": {
      "op": "!",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%17#0"
      ]
    },
    "2365": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2366": {
      "op": "bytec 9 // \"status\"",
      "defined_out": [
        "\"status\"",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"status\""
      ]
    },
    "2368": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "\"status\"",
        "100",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"status\"",
        "100"
      ]
    },
    "2370": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2371": {
      "retsub": true,
      "op": "retsub"
    },
    "2372": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "params": {},
      "block": "assert_caller_is_arranger",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2375": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2377": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2378": {
      "op": "bytec 16 // \"arranger\"",
      "defined_out": [
        "\"arranger\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arranger\""
      ]
    },
    "2380": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2381": {
      "error": "check self.arranger exists",
      "op": "assert // check self.arranger exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2382": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2383": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "2384": {
      "retsub": true,
      "op": "retsub"
    },
    "2385": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.opt_in_denomination_asset",
      "params": {},
      "block": "opt_in_denomination_asset",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2388": {
      "op": "itxn_begin"
    },
    "2389": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2391": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "2392": {
      "op": "bytec 6 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0",
        "\"denomination_asset_id\""
      ]
    },
    "2394": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2395": {
      "error": "check self.denomination_asset_id exists",
      "op": "assert // check self.denomination_asset_id exists",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "2396": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2398": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2399": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2401": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "2403": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2405": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "axfer"
      ]
    },
    "2406": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2408": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2410": {
      "op": "itxn_submit"
    },
    "2411": {
      "retsub": true,
      "op": "retsub"
    },
    "2412": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "params": {
        "time_events#0": "bytes"
      },
      "block": "assert_time_events_sorted",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2415": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "time_f#0"
      ]
    },
    "2417": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0"
      ]
    },
    "2418": {
      "op": "frame_dig -1",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "time_events#0 (copy)"
      ]
    },
    "2420": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "2421": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%0#0"
      ]
    },
    "2422": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%0#0",
        "1"
      ]
    },
    "2423": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ]
    },
    "2424": {
      "op": "intc_0 // 0",
      "defined_out": [
        "_t#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "2425": {
      "block": "assert_time_events_sorted_for_header@1",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "_t#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0"
      ]
    },
    "2427": {
      "op": "frame_dig 2",
      "defined_out": [
        "_t#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "tmp%1#0"
      ]
    },
    "2429": {
      "op": "<",
      "defined_out": [
        "_t#0",
        "continue_looping%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "continue_looping%0#0"
      ]
    },
    "2430": {
      "op": "bz assert_time_events_sorted_after_for@6",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "2433": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "_t#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "65"
      ]
    },
    "2435": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "65",
        "_t#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "65",
        "1"
      ]
    },
    "2436": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "2439": {
      "op": "frame_dig -1",
      "defined_out": [
        "_t#0",
        "time_events#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_events#0 (copy)"
      ]
    },
    "2441": {
      "op": "extract 2 0",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2444": {
      "op": "frame_dig 3",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "2446": {
      "op": "dup",
      "defined_out": [
        "_t#0",
        "_t#0 (copy)",
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0 (copy)",
        "_t#0 (copy)"
      ]
    },
    "2447": {
      "op": "cover 2",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0 (copy)"
      ]
    },
    "2449": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "_t#0",
        "_t#0 (copy)",
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0 (copy)",
        "8"
      ]
    },
    "2450": {
      "op": "*",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "2451": {
      "op": "dig 1",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "2453": {
      "op": "swap",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%0#0"
      ]
    },
    "2454": {
      "op": "intc_2 // 8",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%0#0",
        "8"
      ]
    },
    "2455": {
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ]
    },
    "2456": {
      "op": "btoi",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0"
      ]
    },
    "2457": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0",
        "time_i#0 (copy)"
      ]
    },
    "2458": {
      "op": "cover 3",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0"
      ]
    },
    "2460": {
      "op": "frame_bury 1",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "_t#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2462": {
      "op": "swap",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "2463": {
      "op": "intc_1 // 1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "1"
      ]
    },
    "2464": {
      "op": "+",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "2465": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "_t#0"
      ]
    },
    "2466": {
      "op": "frame_bury 3",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "2468": {
      "op": "intc_2 // 8",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "8"
      ]
    },
    "2469": {
      "op": "*",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0"
      ]
    },
    "2470": {
      "op": "intc_2 // 8",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0",
        "8"
      ]
    },
    "2471": {
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "_t#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "tmp%4#0"
      ]
    },
    "2472": {
      "op": "btoi",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "time_f#0"
      ]
    },
    "2473": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "time_f#0",
        "time_f#0"
      ]
    },
    "2474": {
      "op": "frame_bury 0",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "time_f#0"
      ]
    },
    "2476": {
      "op": "<",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%5#0"
      ]
    },
    "2477": {
      "error": "Time events must be sorted in strictly ascending order",
      "op": "assert // Time events must be sorted in strictly ascending order",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "2478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "0"
      ]
    },
    "2479": {
      "op": "bytec 12 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "2481": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_t#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2482": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "maybe_value%0#0"
      ]
    },
    "2483": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "_t#0",
        "maybe_value%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "maybe_value%0#0",
        "255"
      ]
    },
    "2486": {
      "op": "!=",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%6#0"
      ]
    },
    "2487": {
      "op": "bz assert_time_events_sorted_for_header@1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "2490": {
      "op": "frame_dig 0",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_f#0"
      ]
    },
    "2492": {
      "op": "frame_dig 1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_f#0",
        "time_i#0"
      ]
    },
    "2494": {
      "op": "-",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%7#0"
      ]
    },
    "2495": {
      "op": "intc 6 // 86400",
      "defined_out": [
        "86400",
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%7#0",
        "86400"
      ]
    },
    "2497": {
      "op": "%",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%8#0"
      ]
    },
    "2498": {
      "op": "!",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%9#0"
      ]
    },
    "2499": {
      "error": "Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)",
      "op": "assert // Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "2500": {
      "op": "b assert_time_events_sorted_for_header@1"
    },
    "2503": {
      "block": "assert_time_events_sorted_after_for@6",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_events#0 (copy)"
      ]
    },
    "2505": {
      "op": "frame_bury 0"
    },
    "2507": {
      "retsub": true,
      "op": "retsub"
    },
    "2508": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_time_events",
      "params": {
        "time_events#0": "bytes"
      },
      "block": "set_time_events",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2511": {
      "op": "bytec 22 // 0x74696d654576656e7473",
      "defined_out": [
        "0x74696d654576656e7473"
      ],
      "stack_out": [
        "0x74696d654576656e7473"
      ]
    },
    "2513": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2514": {
      "op": "pop",
      "stack_out": []
    },
    "2515": {
      "op": "bytec 22 // 0x74696d654576656e7473",
      "stack_out": [
        "0x74696d654576656e7473"
      ]
    },
    "2517": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x74696d654576656e7473",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "0x74696d654576656e7473",
        "time_events#0 (copy)"
      ]
    },
    "2519": {
      "op": "box_put",
      "stack_out": []
    },
    "2520": {
      "op": "frame_dig -1",
      "stack_out": [
        "time_events#0 (copy)"
      ]
    },
    "2522": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "2525": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "2526": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%0#0"
      ]
    },
    "2529": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%0#0"
      ]
    },
    "2530": {
      "op": "bytec 8 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%0#0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "2532": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "\"primary_distribution_opening_date\"",
        "new_state_value%0#0"
      ]
    },
    "2533": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "2534": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "2535": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ]
    },
    "2538": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%1#0"
      ]
    },
    "2539": {
      "op": "bytec 17 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%1#0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "2541": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "\"primary_distribution_closure_date\"",
        "new_state_value%1#0"
      ]
    },
    "2542": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "2543": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "2544": {
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ]
    },
    "2547": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%2#0"
      ]
    },
    "2548": {
      "op": "bytec 4 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%2#0",
        "\"issuance_date\""
      ]
    },
    "2550": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "\"issuance_date\"",
        "new_state_value%2#0"
      ]
    },
    "2551": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "2552": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ]
    },
    "2554": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "2555": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ]
    },
    "2556": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%3#0",
        "1"
      ]
    },
    "2557": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ]
    },
    "2558": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%4#0",
        "8"
      ]
    },
    "2559": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%3#0"
      ]
    },
    "2560": {
      "op": "intc_2 // 8",
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%3#0",
        "8"
      ]
    },
    "2561": {
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2562": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "2563": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "\"maturity_date\""
      ]
    },
    "2564": {
      "op": "swap",
      "stack_out": [
        "\"maturity_date\"",
        "new_state_value%3#0"
      ]
    },
    "2565": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2566": {
      "op": "frame_dig -1",
      "stack_out": [
        "time_events#0 (copy)"
      ]
    },
    "2568": {
      "retsub": true,
      "op": "retsub"
    },
    "2569": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events",
      "params": {
        "secondary_market_time_events#0": "bytes"
      },
      "block": "set_secondary_time_events",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2572": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "2575": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_ended",
      "op": "callsub status_is_ended",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2578": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2579": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "2580": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "2583": {
      "op": "frame_dig -1",
      "defined_out": [
        "secondary_market_time_events#0 (copy)"
      ],
      "stack_out": [
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "2585": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "secondary_market_time_events#0 (copy)"
      ],
      "stack_out": [
        "secondary_market_time_events#0 (copy)",
        "0"
      ]
    },
    "2586": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2587": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "2"
      ]
    },
    "2589": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2590": {
      "error": "Time events length is invalid",
      "op": "assert // Time events length is invalid",
      "stack_out": []
    },
    "2591": {
      "op": "frame_dig -1",
      "stack_out": [
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "2593": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "op": "callsub assert_time_events_sorted",
      "defined_out": [
        "secondary_market_time_events#0"
      ],
      "stack_out": [
        "secondary_market_time_events#0"
      ]
    },
    "2596": {
      "op": "frame_bury -1",
      "stack_out": []
    },
    "2598": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2599": {
      "op": "bytec 4 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"issuance_date\""
      ]
    },
    "2601": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2602": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2603": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "2605": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2608": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "2609": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ]
    },
    "2612": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ]
    },
    "2613": {
      "op": "uncover 2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%0#0"
      ]
    },
    "2615": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "tmp%5#0 (copy)"
      ]
    },
    "2617": {
      "op": "<=",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2618": {
      "error": "Invalid secondary market opening date",
      "op": "assert // Invalid secondary market opening date",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ]
    },
    "2619": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "0"
      ]
    },
    "2620": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "2621": {
      "op": "app_global_get_ex",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2622": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "2623": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "2625": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "secondary_market_time_events#0 (copy)",
        "0"
      ]
    },
    "2626": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%1#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ]
    },
    "2627": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail%0#0",
        "maybe_value%1#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%7#0",
        "1"
      ]
    },
    "2628": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%1#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%8#0"
      ]
    },
    "2629": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "maybe_value%1#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%8#0",
        "8"
      ]
    },
    "2630": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "item_offset%1#0"
      ]
    },
    "2631": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "item_offset%1#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2633": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0"
      ]
    },
    "2634": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0",
        "8"
      ]
    },
    "2635": {
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%9#0"
      ]
    },
    "2636": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%10#0"
      ]
    },
    "2637": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "tmp%10#0",
        "maybe_value%1#0"
      ]
    },
    "2638": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%10#0",
        "maybe_value%1#0",
        "tmp%10#0 (copy)"
      ]
    },
    "2640": {
      "op": ">=",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2641": {
      "error": "Invalid secondary market closure date",
      "op": "assert // Invalid secondary market closure date",
      "stack_out": [
        "tmp%5#0",
        "tmp%10#0"
      ]
    },
    "2642": {
      "op": "bytec 14 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%10#0",
        "\"secondary_market_opening_date\""
      ]
    },
    "2644": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%10#0",
        "\"secondary_market_opening_date\"",
        "tmp%5#0"
      ]
    },
    "2646": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2647": {
      "op": "bytec 15 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "\"secondary_market_closure_date\""
      ]
    },
    "2649": {
      "op": "swap",
      "stack_out": [
        "\"secondary_market_closure_date\"",
        "tmp%10#0"
      ]
    },
    "2650": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2651": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2652": {
      "op": "bytec 14 // \"secondary_market_opening_date\"",
      "stack_out": [
        "0",
        "\"secondary_market_opening_date\""
      ]
    },
    "2654": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2655": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2656": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2657": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "2658": {
      "op": "bytec 15 // \"secondary_market_closure_date\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"secondary_market_closure_date\""
      ]
    },
    "2660": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2661": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%3#0"
      ]
    },
    "2662": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2663": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2664": {
      "retsub": true,
      "op": "retsub"
    },
    "2665": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_ended",
      "params": {},
      "block": "status_is_ended",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2668": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2669": {
      "op": "bytec 9 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "2671": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2672": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2673": {
      "op": "pushint 200 // 200",
      "defined_out": [
        "200",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "200"
      ]
    },
    "2676": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2677": {
      "retsub": true,
      "op": "retsub"
    },
    "2678": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assign_role",
      "params": {
        "role_address#0": "bytes",
        "role#0": "bytes",
        "config#0": "bytes"
      },
      "block": "assign_role",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2681": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "2684": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "2687": {
      "op": "frame_dig -2",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "2689": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2690": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2691": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "20"
      ]
    },
    "2693": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2694": {
      "op": "bnz assign_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2697": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2699": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "40"
      ]
    },
    "2701": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2702": {
      "op": "bnz assign_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2705": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2707": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "50"
      ]
    },
    "2709": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2710": {
      "op": "bnz assign_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2713": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2715": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "60"
      ]
    },
    "2717": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2718": {
      "op": "bnz assign_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2721": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2723": {
      "op": "pushint 70 // 70",
      "defined_out": [
        "70",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "70"
      ]
    },
    "2725": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "2726": {
      "op": "bz assign_role_bool_false@6",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2729": {
      "block": "assign_role_bool_true@5",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "2730": {
      "op": "b assign_role_bool_merge@7"
    },
    "2733": {
      "block": "assign_role_bool_false@6",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "2734": {
      "block": "assign_role_bool_merge@7",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid role identifier",
      "op": "assert // Invalid role identifier",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2735": {
      "op": "pushints 20 40 50 60 70 // 20, 40, 50, 60, 70",
      "defined_out": [
        "20",
        "40",
        "50",
        "60",
        "70"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20",
        "40",
        "50",
        "60",
        "70"
      ]
    },
    "2742": {
      "op": "frame_dig 0",
      "defined_out": [
        "20",
        "40",
        "50",
        "60",
        "70",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20",
        "40",
        "50",
        "60",
        "70",
        "awst_tmp%0#0"
      ]
    },
    "2744": {
      "op": "match assign_role_switch_case_0@8 assign_role_switch_case_1@9 assign_role_switch_case_2@10 assign_role_switch_case_3@11 assign_role_switch_case_4@12",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2756": {
      "op": "err"
    },
    "2757": {
      "block": "assign_role_switch_case_0@8",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 16 // \"arranger\"",
      "defined_out": [
        "\"arranger\""
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"arranger\""
      ]
    },
    "2759": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"arranger\"",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"arranger\"",
        "role_address#0 (copy)"
      ]
    },
    "2761": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2762": {
      "op": "b assign_role_switch_case_next@14"
    },
    "2765": {
      "block": "assign_role_switch_case_1@9",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 23 // 0x52343023",
      "defined_out": [
        "0x52343023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023"
      ]
    },
    "2767": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52343023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023",
        "role_address#0 (copy)"
      ]
    },
    "2769": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "2770": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "2771": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2772": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "maybe_exists%0#0"
      ]
    },
    "2774": {
      "op": "!",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2775": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "2776": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "config#0 (copy)"
      ]
    },
    "2778": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "new_box_value%0#0"
      ]
    },
    "2781": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2782": {
      "op": "b assign_role_switch_case_next@14"
    },
    "2785": {
      "block": "assign_role_switch_case_2@10",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 24 // 0x52353023",
      "defined_out": [
        "0x52353023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023"
      ]
    },
    "2787": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52353023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023",
        "role_address#0 (copy)"
      ]
    },
    "2789": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "2790": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "2791": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2792": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_exists%1#0"
      ]
    },
    "2794": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "2795": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "2796": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "config#0 (copy)"
      ]
    },
    "2798": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "new_box_value%1#0"
      ]
    },
    "2801": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2802": {
      "op": "b assign_role_switch_case_next@14"
    },
    "2805": {
      "block": "assign_role_switch_case_3@11",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 25 // 0x52363023",
      "defined_out": [
        "0x52363023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023"
      ]
    },
    "2807": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52363023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023",
        "role_address#0 (copy)"
      ]
    },
    "2809": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ]
    },
    "2810": {
      "op": "dup",
      "defined_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "2811": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2812": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "maybe_exists%2#0"
      ]
    },
    "2814": {
      "op": "!",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "2815": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ]
    },
    "2816": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "config#0 (copy)"
      ]
    },
    "2818": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "new_box_value%2#0"
      ]
    },
    "2821": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2822": {
      "op": "b assign_role_switch_case_next@14"
    },
    "2825": {
      "block": "assign_role_switch_case_4@12",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 26 // 0x52373023",
      "defined_out": [
        "0x52373023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023"
      ]
    },
    "2827": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52373023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023",
        "role_address#0 (copy)"
      ]
    },
    "2829": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0"
      ]
    },
    "2830": {
      "op": "dup",
      "defined_out": [
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ]
    },
    "2831": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2832": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "maybe_exists%3#0"
      ]
    },
    "2834": {
      "op": "!",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "2835": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0"
      ]
    },
    "2836": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "config#0 (copy)"
      ]
    },
    "2838": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "new_box_value%3#0"
      ]
    },
    "2841": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2842": {
      "block": "assign_role_switch_case_next@14",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "2844": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "2845": {
      "op": "swap"
    },
    "2846": {
      "retsub": true,
      "op": "retsub"
    },
    "2847": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role",
      "params": {
        "role_address#0": "bytes",
        "role#0": "bytes"
      },
      "block": "revoke_role",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2850": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "2853": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "2856": {
      "op": "frame_dig -1",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "2858": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2859": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2860": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "40"
      ]
    },
    "2862": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2863": {
      "op": "bnz revoke_role_bool_true@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2866": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2868": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "50"
      ]
    },
    "2870": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2871": {
      "op": "bnz revoke_role_bool_true@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2874": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2876": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "60"
      ]
    },
    "2878": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2879": {
      "op": "bnz revoke_role_bool_true@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2882": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2884": {
      "op": "pushint 70 // 70",
      "defined_out": [
        "70",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "70"
      ]
    },
    "2886": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2887": {
      "op": "bz revoke_role_bool_false@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2890": {
      "block": "revoke_role_bool_true@4",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "2891": {
      "op": "b revoke_role_bool_merge@6"
    },
    "2894": {
      "block": "revoke_role_bool_false@5",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "2895": {
      "block": "revoke_role_bool_merge@6",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid role identifier",
      "op": "assert // Invalid role identifier",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2896": {
      "op": "pushints 40 50 60 70 // 40, 50, 60, 70",
      "defined_out": [
        "40",
        "50",
        "60",
        "70"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "40",
        "50",
        "60",
        "70"
      ]
    },
    "2902": {
      "op": "frame_dig 0",
      "defined_out": [
        "40",
        "50",
        "60",
        "70",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "40",
        "50",
        "60",
        "70",
        "awst_tmp%0#0"
      ]
    },
    "2904": {
      "op": "match revoke_role_switch_case_0@7 revoke_role_switch_case_1@8 revoke_role_switch_case_2@9 revoke_role_switch_case_3@10",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2914": {
      "op": "err"
    },
    "2915": {
      "block": "revoke_role_switch_case_0@7",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 23 // 0x52343023",
      "defined_out": [
        "0x52343023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023"
      ]
    },
    "2917": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52343023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023",
        "role_address#0 (copy)"
      ]
    },
    "2919": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "2920": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "2921": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2922": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0",
        "maybe_exists%0#0"
      ]
    },
    "2924": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "2925": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "2926": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2927": {
      "op": "b revoke_role_switch_case_next@12"
    },
    "2930": {
      "block": "revoke_role_switch_case_1@8",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 24 // 0x52353023",
      "defined_out": [
        "0x52353023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023"
      ]
    },
    "2932": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52353023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023",
        "role_address#0 (copy)"
      ]
    },
    "2934": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "2935": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2936": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2937": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "maybe_exists%1#0"
      ]
    },
    "2939": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "2940": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "2941": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2942": {
      "op": "b revoke_role_switch_case_next@12"
    },
    "2945": {
      "block": "revoke_role_switch_case_2@9",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 25 // 0x52363023",
      "defined_out": [
        "0x52363023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023"
      ]
    },
    "2947": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52363023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023",
        "role_address#0 (copy)"
      ]
    },
    "2949": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "2950": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "2951": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2952": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_exists%2#0"
      ]
    },
    "2954": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "2955": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "2956": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2957": {
      "op": "b revoke_role_switch_case_next@12"
    },
    "2960": {
      "block": "revoke_role_switch_case_3@10",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 26 // 0x52373023",
      "defined_out": [
        "0x52373023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023"
      ]
    },
    "2962": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52373023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023",
        "role_address#0 (copy)"
      ]
    },
    "2964": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0"
      ]
    },
    "2965": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "2966": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2967": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0",
        "maybe_exists%3#0"
      ]
    },
    "2969": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0"
      ]
    },
    "2970": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "2971": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2972": {
      "block": "revoke_role_switch_case_next@12",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "2974": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "2975": {
      "op": "swap"
    },
    "2976": {
      "retsub": true,
      "op": "retsub"
    },
    "2977": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.open_account",
      "params": {
        "holding_address#0": "bytes",
        "payment_address#0": "bytes"
      },
      "block": "open_account",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2980": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "op": "callsub assert_caller_is_account_manager"
    },
    "2983": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_ended",
      "op": "callsub status_is_ended",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2986": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2987": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "2988": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "2991": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "2994": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2995": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2997": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2998": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2999": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3000": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "3002": {
      "op": "!",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3003": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3004": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment_address#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "payment_address#0 (copy)"
      ]
    },
    "3006": {
      "op": "bytec 5 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "payment_address#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "payment_address#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "3008": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3009": {
      "op": "bytec 5 // 0x0000000000000000",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "3011": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3012": {
      "op": "bytec 5 // 0x0000000000000000",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "3014": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3015": {
      "op": "bytec 10 // 0x00",
      "defined_out": [
        "0x00",
        "encoded_tuple_buffer%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "0x00"
      ]
    },
    "3017": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3018": {
      "op": "box_put",
      "stack_out": []
    },
    "3019": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3021": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3022": {
      "retsub": true,
      "op": "retsub"
    },
    "3023": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "params": {},
      "block": "assert_caller_is_account_manager",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "3026": {
      "op": "intc_0 // 0"
    },
    "3027": {
      "op": "bytec 23 // 0x52343023"
    },
    "3029": {
      "op": "txn Sender",
      "defined_out": [
        "0x52343023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52343023",
        "caller#0"
      ]
    },
    "3031": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3032": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3033": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3034": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3036": {
      "op": "bz assert_caller_is_account_manager_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3039": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3041": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3042": {
      "error": "check self.account_manager entry exists",
      "op": "assert // check self.account_manager entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3043": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "3046": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3048": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "3049": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "3050": {
      "op": "frame_bury 0",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "3052": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "3053": {
      "op": "bz assert_caller_is_account_manager_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3056": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3058": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3059": {
      "error": "check self.account_manager entry exists",
      "op": "assert // check self.account_manager entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "3060": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "3063": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0",
        "tmp%2#0"
      ]
    },
    "3065": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "3066": {
      "op": "bz assert_caller_is_account_manager_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3069": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3070": {
      "op": "b assert_caller_is_account_manager_bool_merge@5"
    },
    "3073": {
      "block": "assert_caller_is_account_manager_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3074": {
      "block": "assert_caller_is_account_manager_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3075": {
      "retsub": true,
      "op": "retsub"
    },
    "3076": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.close_account",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "close_account",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3079": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "op": "callsub assert_caller_is_account_manager"
    },
    "3082": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "3085": {
      "op": "frame_dig -1",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "3087": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "3090": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "3091": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3093": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3094": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3095": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3096": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3097": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3100": {
      "op": "btoi",
      "defined_out": [
        "closed_units#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "closed_units#0"
      ]
    },
    "3101": {
      "op": "swap",
      "stack_out": [
        "closed_units#0",
        "tmp%0#0"
      ]
    },
    "3102": {
      "op": "box_del",
      "defined_out": [
        "closed_units#0",
        "{box_del}"
      ],
      "stack_out": [
        "closed_units#0",
        "{box_del}"
      ]
    },
    "3103": {
      "op": "pop",
      "stack_out": [
        "closed_units#0"
      ]
    },
    "3104": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "0"
      ]
    },
    "3105": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3106": {
      "op": "app_global_get_ex",
      "defined_out": [
        "closed_units#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3107": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0"
      ]
    },
    "3108": {
      "op": "dig 1",
      "defined_out": [
        "closed_units#0",
        "closed_units#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0",
        "closed_units#0 (copy)"
      ]
    },
    "3110": {
      "op": "-",
      "defined_out": [
        "closed_units#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "closed_units#0",
        "new_state_value%0#0"
      ]
    },
    "3111": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "closed_units#0",
        "new_state_value%0#0",
        "\"circulating_units\""
      ]
    },
    "3112": {
      "op": "swap",
      "stack_out": [
        "closed_units#0",
        "\"circulating_units\"",
        "new_state_value%0#0"
      ]
    },
    "3113": {
      "op": "app_global_put",
      "stack_out": [
        "closed_units#0"
      ]
    },
    "3114": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units",
      "op": "callsub end_if_no_circulating_units"
    },
    "3117": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3118": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "3120": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3121": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3122": {
      "retsub": true,
      "op": "retsub"
    },
    "3123": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "bytes"
      },
      "block": "primary_distribution",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3126": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_primary_distribution_open",
      "op": "callsub assert_is_primary_distribution_open"
    },
    "3129": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_primary_dealer",
      "op": "callsub assert_caller_is_primary_dealer"
    },
    "3132": {
      "op": "frame_dig -2",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "3134": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "3137": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "3140": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "3143": {
      "op": "frame_dig -1",
      "defined_out": [
        "units#0 (copy)"
      ],
      "stack_out": [
        "units#0 (copy)"
      ]
    },
    "3145": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3146": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3147": {
      "error": "Can not distribute zero units",
      "op": "assert // Can not distribute zero units",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3148": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3149": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3150": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3151": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3152": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3154": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "3155": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "0"
      ]
    },
    "3156": {
      "op": "bytec 13 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "0",
        "\"total_units\""
      ]
    },
    "3158": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3159": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "3160": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "3161": {
      "error": "Insufficient remaining D-ASA units",
      "op": "assert // Insufficient remaining D-ASA units",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3162": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3163": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3164": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3165": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "3166": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3168": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_state_value%0#0"
      ]
    },
    "3169": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "tmp%0#0",
        "new_state_value%0#0",
        "\"circulating_units\""
      ]
    },
    "3170": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"circulating_units\"",
        "new_state_value%0#0"
      ]
    },
    "3171": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3172": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x52333023"
      ]
    },
    "3173": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3175": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "3176": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3177": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3178": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "3179": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "3182": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "3183": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0",
        "tmp%0#0"
      ]
    },
    "3185": {
      "op": "+",
      "defined_out": [
        "tmp%6#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "to_encode%0#0"
      ]
    },
    "3186": {
      "op": "itob",
      "defined_out": [
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3187": {
      "op": "dig 1",
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3189": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3190": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "maybe_value%4#0"
      ]
    },
    "3191": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "3192": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%6#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "updated_data%0#0"
      ]
    },
    "3194": {
      "op": "dig 1",
      "stack_out": [
        "tmp%6#0",
        "updated_data%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3196": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "updated_data%0#0"
      ]
    },
    "3197": {
      "op": "box_put",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "3198": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "3199": {
      "op": "bytec 11 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"unit_value\""
      ]
    },
    "3201": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3202": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%5#0"
      ]
    },
    "3203": {
      "op": "itob",
      "defined_out": [
        "tmp%6#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "3204": {
      "op": "dig 1",
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%1#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3206": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%6#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%1#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3207": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%1#0",
        "maybe_value%6#0"
      ]
    },
    "3208": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "3209": {
      "op": "replace2 40",
      "defined_out": [
        "tmp%6#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "updated_data%1#0"
      ]
    },
    "3211": {
      "op": "box_put",
      "stack_out": []
    },
    "3212": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3213": {
      "op": "bytec 13 // \"total_units\"",
      "stack_out": [
        "0",
        "\"total_units\""
      ]
    },
    "3215": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3216": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "maybe_value%7#0"
      ]
    },
    "3217": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%7#0",
        "0"
      ]
    },
    "3218": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "maybe_value%7#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3219": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "3220": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "3221": {
      "op": "-",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "3222": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "3223": {
      "retsub": true,
      "op": "retsub"
    },
    "3224": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_primary_distribution_open",
      "params": {},
      "block": "assert_is_primary_distribution_open",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "3227": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3229": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_active",
      "op": "callsub status_is_active",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3232": {
      "op": "bz assert_is_primary_distribution_open_bool_false@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3235": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0"
      ]
    },
    "3236": {
      "op": "bytec 8 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "3238": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3239": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3240": {
      "op": "global LatestTimestamp"
    },
    "3242": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3243": {
      "op": "frame_bury 0",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3245": {
      "op": "<=",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3246": {
      "op": "bz assert_is_primary_distribution_open_bool_false@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3249": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "0"
      ]
    },
    "3250": {
      "op": "bytec 17 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "3252": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3253": {
      "error": "check self.primary_distribution_closure_date exists",
      "op": "assert // check self.primary_distribution_closure_date exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3254": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0"
      ]
    },
    "3256": {
      "op": ">",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3257": {
      "op": "bz assert_is_primary_distribution_open_bool_false@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3260": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3261": {
      "op": "b assert_is_primary_distribution_open_bool_merge@5"
    },
    "3264": {
      "block": "assert_is_primary_distribution_open_bool_false@4",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3265": {
      "block": "assert_is_primary_distribution_open_bool_merge@5",
      "stack_in": [
        "awst_tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Primary distribution is closed",
      "op": "assert // Primary distribution is closed",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3266": {
      "retsub": true,
      "op": "retsub"
    },
    "3267": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_primary_dealer",
      "params": {},
      "block": "assert_caller_is_primary_dealer",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "3270": {
      "op": "intc_0 // 0"
    },
    "3271": {
      "op": "bytec 24 // 0x52353023"
    },
    "3273": {
      "op": "txn Sender",
      "defined_out": [
        "0x52353023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52353023",
        "caller#0"
      ]
    },
    "3275": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3276": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3277": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3278": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3280": {
      "op": "bz assert_caller_is_primary_dealer_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3283": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3285": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3286": {
      "error": "check self.primary_dealer entry exists",
      "op": "assert // check self.primary_dealer entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3287": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "3290": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3292": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "3293": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "3294": {
      "op": "frame_bury 0",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "3296": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "3297": {
      "op": "bz assert_caller_is_primary_dealer_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3300": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3302": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3303": {
      "error": "check self.primary_dealer entry exists",
      "op": "assert // check self.primary_dealer entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "3304": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "3307": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0",
        "tmp%2#0"
      ]
    },
    "3309": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "3310": {
      "op": "bz assert_caller_is_primary_dealer_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3313": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3314": {
      "op": "b assert_caller_is_primary_dealer_bool_merge@5"
    },
    "3317": {
      "block": "assert_caller_is_primary_dealer_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3318": {
      "block": "assert_caller_is_primary_dealer_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3319": {
      "retsub": true,
      "op": "retsub"
    },
    "3320": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension",
      "params": {
        "suspended#0": "bytes"
      },
      "block": "set_asset_suspension",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3323": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "op": "callsub assert_caller_is_authority"
    },
    "3326": {
      "op": "frame_dig -1",
      "defined_out": [
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "suspended#0 (copy)"
      ]
    },
    "3328": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "suspended#0 (copy)",
        "0"
      ]
    },
    "3329": {
      "op": "getbit",
      "defined_out": [
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0"
      ]
    },
    "3330": {
      "op": "bytec 18 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0",
        "\"suspended\""
      ]
    },
    "3332": {
      "op": "swap",
      "stack_out": [
        "\"suspended\"",
        "reinterpret_uint64%0#0"
      ]
    },
    "3333": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3334": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3336": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3337": {
      "retsub": true,
      "op": "retsub"
    },
    "3338": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "params": {},
      "block": "assert_caller_is_authority",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "3341": {
      "op": "intc_0 // 0"
    },
    "3342": {
      "op": "bytec 26 // 0x52373023"
    },
    "3344": {
      "op": "txn Sender",
      "defined_out": [
        "0x52373023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52373023",
        "caller#0"
      ]
    },
    "3346": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3347": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3348": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3349": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3351": {
      "op": "bz assert_caller_is_authority_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3354": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3356": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3357": {
      "error": "check self.authority entry exists",
      "op": "assert // check self.authority entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3358": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "3361": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3363": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "3364": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "3365": {
      "op": "frame_bury 0",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "3367": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "3368": {
      "op": "bz assert_caller_is_authority_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3371": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3373": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3374": {
      "error": "check self.authority entry exists",
      "op": "assert // check self.authority entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "3375": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "3378": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0",
        "tmp%2#0"
      ]
    },
    "3380": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "3381": {
      "op": "bz assert_caller_is_authority_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3384": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3385": {
      "op": "b assert_caller_is_authority_bool_merge@5"
    },
    "3388": {
      "block": "assert_caller_is_authority_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3389": {
      "block": "assert_caller_is_authority_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3390": {
      "retsub": true,
      "op": "retsub"
    },
    "3391": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension",
      "params": {
        "holding_address#0": "bytes",
        "suspended#0": "bytes"
      },
      "block": "set_account_suspension",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3394": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "op": "callsub assert_caller_is_authority"
    },
    "3397": {
      "op": "frame_dig -2",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "3399": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "3402": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "3403": {
      "op": "frame_dig -2",
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3405": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3406": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3407": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3408": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3409": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "suspended#0 (copy)"
      ]
    },
    "3411": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "0"
      ]
    },
    "3412": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "is_true%0#0"
      ]
    },
    "3413": {
      "op": "intc 4 // 448"
    },
    "3415": {
      "op": "swap",
      "defined_out": [
        "448",
        "is_true%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "448",
        "is_true%0#0"
      ]
    },
    "3416": {
      "op": "setbit",
      "defined_out": [
        "tmp%0#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%0#0"
      ]
    },
    "3417": {
      "op": "box_put",
      "stack_out": []
    },
    "3418": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3420": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3421": {
      "retsub": true,
      "op": "retsub"
    },
    "3422": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status",
      "params": {
        "defaulted#0": "bytes"
      },
      "block": "set_default_status",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3425": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_trustee",
      "op": "callsub assert_caller_is_trustee"
    },
    "3428": {
      "op": "frame_dig -1",
      "defined_out": [
        "defaulted#0 (copy)"
      ],
      "stack_out": [
        "defaulted#0 (copy)"
      ]
    },
    "3430": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "defaulted#0 (copy)"
      ],
      "stack_out": [
        "defaulted#0 (copy)",
        "0"
      ]
    },
    "3431": {
      "op": "getbit",
      "defined_out": [
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0"
      ]
    },
    "3432": {
      "op": "bytec 19 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0",
        "\"defaulted\""
      ]
    },
    "3434": {
      "op": "swap",
      "stack_out": [
        "\"defaulted\"",
        "reinterpret_uint64%0#0"
      ]
    },
    "3435": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3436": {
      "retsub": true,
      "op": "retsub"
    },
    "3437": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_trustee",
      "params": {},
      "block": "assert_caller_is_trustee",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "3440": {
      "op": "intc_0 // 0"
    },
    "3441": {
      "op": "bytec 25 // 0x52363023"
    },
    "3443": {
      "op": "txn Sender",
      "defined_out": [
        "0x52363023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52363023",
        "caller#0"
      ]
    },
    "3445": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3446": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3447": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3448": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3450": {
      "op": "bz assert_caller_is_trustee_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3453": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3455": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3456": {
      "error": "check self.trustee entry exists",
      "op": "assert // check self.trustee entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3457": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "3460": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3462": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "3463": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "3464": {
      "op": "frame_bury 0",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "3466": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "3467": {
      "op": "bz assert_caller_is_trustee_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3470": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3472": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3473": {
      "error": "check self.trustee entry exists",
      "op": "assert // check self.trustee entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "3474": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "3477": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0",
        "tmp%2#0"
      ]
    },
    "3479": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "3480": {
      "op": "bz assert_caller_is_trustee_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3483": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3484": {
      "op": "b assert_caller_is_trustee_bool_merge@5"
    },
    "3487": {
      "block": "assert_caller_is_trustee_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3488": {
      "block": "assert_caller_is_trustee_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3489": {
      "retsub": true,
      "op": "retsub"
    },
    "3490": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info",
      "params": {},
      "block": "get_asset_info",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3493": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3494": {
      "op": "bytec 6 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"denomination_asset_id\""
      ]
    },
    "3496": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3497": {
      "error": "check self.denomination_asset_id exists",
      "op": "assert // check self.denomination_asset_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3498": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3499": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3500": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3501": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3502": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "3503": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "3504": {
      "op": "bytec 11 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "0",
        "\"unit_value\""
      ]
    },
    "3506": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3507": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "3508": {
      "op": "*",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "3509": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3510": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "3511": {
      "op": "bytec 11 // \"unit_value\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"unit_value\""
      ]
    },
    "3513": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3514": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%3#0"
      ]
    },
    "3515": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3516": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "3517": {
      "op": "bytec 12 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "3519": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3520": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0"
      ]
    },
    "3521": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "3522": {
      "op": "extract 7 1",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0"
      ]
    },
    "3525": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "0"
      ]
    },
    "3526": {
      "op": "bytec 7 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "0",
        "\"interest_rate\""
      ]
    },
    "3528": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3529": {
      "error": "check self.interest_rate exists",
      "op": "assert // check self.interest_rate exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "maybe_value%5#0"
      ]
    },
    "3530": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "val_as_bytes%4#0"
      ]
    },
    "3531": {
      "op": "extract 6 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3534": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "3535": {
      "op": "bytec 13 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "0",
        "\"total_units\""
      ]
    },
    "3537": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3538": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%6#0"
      ]
    },
    "3539": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0"
      ]
    },
    "3540": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "0"
      ]
    },
    "3541": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3542": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3543": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "maybe_value%7#0"
      ]
    },
    "3544": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "3545": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0"
      ]
    },
    "3546": {
      "op": "bytec 8 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "3548": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "3549": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%8#0"
      ]
    },
    "3550": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "3551": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0"
      ]
    },
    "3552": {
      "op": "bytec 17 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "3554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "3555": {
      "error": "check self.primary_distribution_closure_date exists",
      "op": "assert // check self.primary_distribution_closure_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%9#0"
      ]
    },
    "3556": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "3557": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0"
      ]
    },
    "3558": {
      "op": "bytec 4 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "3560": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "3561": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%10#0"
      ]
    },
    "3562": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "3563": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "3564": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "3565": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "3566": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%11#0"
      ]
    },
    "3567": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "3568": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "3569": {
      "op": "bytec 18 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "\"suspended\""
      ]
    },
    "3571": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "3572": {
      "error": "check self.suspended exists",
      "op": "assert // check self.suspended exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0"
      ]
    },
    "3573": {
      "op": "bytec 10 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0",
        "0x00"
      ]
    },
    "3575": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0",
        "0x00",
        "0"
      ]
    },
    "3576": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0",
        "maybe_value%12#0"
      ]
    },
    "3578": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0"
      ]
    },
    "3579": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "3580": {
      "op": "bytec 19 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0",
        "\"defaulted\""
      ]
    },
    "3582": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_exists%13#0",
        "maybe_value%13#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "3583": {
      "error": "check self.defaulted exists",
      "op": "assert // check self.defaulted exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "maybe_value%13#0"
      ]
    },
    "3584": {
      "op": "bytec 10 // 0x00",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "maybe_value%13#0",
        "0x00"
      ]
    },
    "3586": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "maybe_value%13#0",
        "0x00",
        "0"
      ]
    },
    "3587": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "maybe_value%13#0"
      ]
    },
    "3589": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "3590": {
      "op": "uncover 12"
    },
    "3592": {
      "op": "uncover 12",
      "stack_out": [
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3594": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3595": {
      "op": "uncover 11",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3597": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3598": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%0#0"
      ]
    },
    "3600": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3601": {
      "op": "uncover 9",
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0"
      ]
    },
    "3603": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%10#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3604": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%5#0"
      ]
    },
    "3606": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3607": {
      "op": "uncover 7",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%6#0"
      ]
    },
    "3609": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%10#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3610": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%7#0"
      ]
    },
    "3612": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%10#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3613": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%8#0"
      ]
    },
    "3615": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3616": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%9#0"
      ]
    },
    "3618": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3619": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%10#0"
      ]
    },
    "3621": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3622": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%11#0",
        "encoded_bool%0#0"
      ]
    },
    "3624": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "3625": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_bool%1#0"
      ]
    },
    "3626": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "3627": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "is_true%0#0"
      ]
    },
    "3628": {
      "op": "pushint 601 // 601"
    },
    "3631": {
      "op": "swap",
      "defined_out": [
        "601",
        "encoded_tuple_buffer%12#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "601",
        "is_true%0#0"
      ]
    },
    "3632": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%13#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%13#0"
      ]
    },
    "3633": {
      "retsub": true,
      "op": "retsub"
    },
    "3634": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "get_account_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3637": {
      "op": "frame_dig -1",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "3639": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "3642": {
      "op": "bytec_0 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "3643": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3645": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3646": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3647": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3648": {
      "retsub": true,
      "op": "retsub"
    },
    "3649": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events",
      "params": {},
      "block": "get_time_events",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3652": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0"
      ]
    },
    "3656": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_active",
      "op": "callsub status_is_active",
      "defined_out": [
        "time_events#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "time_events#0",
        "tmp%0#0"
      ]
    },
    "3659": {
      "op": "bz get_time_events_after_if_else@2",
      "stack_out": [
        "time_events#0"
      ]
    },
    "3662": {
      "op": "bytec 22 // 0x74696d654576656e7473",
      "defined_out": [
        "0x74696d654576656e7473",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "0x74696d654576656e7473"
      ]
    },
    "3664": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "time_events#0",
        "maybe_exists%0#0"
      ]
    },
    "3665": {
      "op": "swap",
      "stack_out": [
        "time_events#0",
        "maybe_exists%0#0",
        "time_events#0"
      ]
    },
    "3666": {
      "op": "frame_bury 0",
      "stack_out": [
        "time_events#0",
        "maybe_exists%0#0"
      ]
    },
    "3668": {
      "error": "check self.time_events exists",
      "op": "assert // check self.time_events exists",
      "stack_out": [
        "time_events#0"
      ]
    },
    "3669": {
      "block": "get_time_events_after_if_else@2",
      "stack_in": [
        "time_events#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "time_events#0"
      ]
    },
    "3671": {
      "op": "swap"
    },
    "3672": {
      "retsub": true,
      "op": "retsub"
    },
    "3673": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule",
      "params": {},
      "block": "get_secondary_market_schedule",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3676": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3677": {
      "op": "bytec 14 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"secondary_market_opening_date\""
      ]
    },
    "3679": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3680": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3681": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3682": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3683": {
      "op": "bytec 15 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"secondary_market_closure_date\""
      ]
    },
    "3685": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3686": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "3687": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3688": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "3689": {
      "op": "pushbytes 0x0002",
      "defined_out": [
        "0x0002",
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0",
        "0x0002"
      ]
    },
    "3693": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "result%1#0"
      ]
    },
    "3694": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "3695": {
      "retsub": true,
      "op": "retsub"
    },
    "3696": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata",
      "params": {},
      "block": "get_asset_metadata",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3699": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3700": {
      "op": "bytec 20 // \"metadata\"",
      "defined_out": [
        "\"metadata\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"metadata\""
      ]
    },
    "3702": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3703": {
      "error": "check self.metadata exists",
      "op": "assert // check self.metadata exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3704": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "3705": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0"
      ]
    },
    "3706": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "as_bytes%0#0"
      ]
    },
    "3707": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length_uint16%0#0"
      ]
    },
    "3710": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "3711": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "3712": {
      "retsub": true,
      "op": "retsub"
    },
    "3713": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_update",
      "params": {},
      "block": "asset_update",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "3716": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "3719": {
      "retsub": true,
      "op": "retsub"
    },
    "3720": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3723": {
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "3725": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "3727": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "3728": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "frame_dig 0"
    },
    "3730": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "3732": {
      "op": ">",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "3733": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "3736": {
      "op": "itxn_begin"
    },
    "3737": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "3739": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "3741": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "3743": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "3745": {
      "op": "bytec 28 // 0x068101",
      "defined_out": [
        "0x068101",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "3747": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "3749": {
      "op": "bytec 28 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "3751": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "3753": {
      "op": "frame_dig -1",
      "defined_out": [
        "fee_source#0 (copy)",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "fee_source#0 (copy)"
      ]
    },
    "3755": {
      "op": "switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "3761": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "3764": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "3765": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "3767": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "3770": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "3772": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "3774": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "3775": {
      "op": "b ensure_budget_while_top@1"
    },
    "3778": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    }
  }
}