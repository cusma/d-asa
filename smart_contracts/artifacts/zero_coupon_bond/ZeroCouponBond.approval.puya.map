{
  "version": 3,
  "sources": [
    "../../base_d_asa/contract.py",
    "../../zero_coupon_bond/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCmD;;AAAf;;AAA5B;AAkBA;;AAA6B;AAA7B;AACA;;AAA2B;AAA3B;AACA;;AAAkB;AAAlB;AACA;;AAA4B;AAA5B;AAGA;;AAAgB;;AAAhB;AAGA;;AAAmB;AAAnB;AACA;AAAyB;AAAzB;AAGA;;AAA0B;AAA1B;AAGA;;AAAqB;AAArB;AAIA;;AAAqB;AAArB;AAKA;;AAAyC;AAAzC;AACA;;AAAyC;AAAzC;AACA;;AAAqB;AAArB;AACA;;AAAqC;AAArC;AACA;;AAAqC;AAArC;AACA;;AAAqB;AAArB;AAGA;AAAc;AAAd;AACA;;AAAiB;AAAjB;AACA;;AAAiB;AAAjB;AC3DO;;AAA6B;;AAA7B;AAAP;AACO;;AAAuB;;AAAvB;AAAP;AACO;;AAAA;AAAP;AACO;;AAAA;AAAP;AApBR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ADi8BK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;ACt5BL;;;ADs5BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;ACj2BL;;;ADi2BK;;;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AC10BL;;;AAAA;;;AD00BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;ACxzBL;;;ADwzBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AC9wBL;;;AAAA;;;AD8wBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AChvBL;;;ADgvBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;AC7sBL;;;AAAA;;;AD6sBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AC7pBL;;;AAAA;;;AD6pBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/DA;;AAAA;AAAA;AAAA;;AAAA;AC9lBL;;;AAAA;;;AAAA;;;AD8lBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxDA;;AAAA;AAAA;AAAA;;AAAA;ACtiBL;;;ADsiBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AArFA;;AAAA;AAAA;AAAA;;AAAA;ACjdL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;ADidK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;ACtcL;;;ADscK;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AC1bL;;;AAAA;;;AD0bK;;;AAAA;;ACpOA;;AAAA;AAAA;AAAA;;AAAA;AAtNL;;;AAsNK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnEA;;AAAA;AAAA;AAAA;;AAAA;AAnJL;;;AAAA;;;AAmJK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AAzGL;;;AAAA;;;AAyGK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AA7DL;;;AAAA;;;AAAA;;;AA6DK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlCL;;;AAGyB;;AAA0B;AAAA;;AAAA;AAAA;AAA1B;AAAjB;AACmB;AAAA;;AAAA;AAAA;AAAqB;AAAA;;AAAA;AAAA;AAArB;AAAnB;AAAA;;AACG;AAAA;;AAAA;AAAA;;;;AAAX;;;ADiTe;;AAAe;;AAAf;AAAA;;AAAe;;AAAf;;;;;;;;;AC7SO;AACE;AAAA;AAFT;AAAP;;AAAA;AAUR;;;AAI2B;;;AACnB;AAAiB;AAAA;AACjB;AAAmB;;AAAA;AAEf;;AAAA;;AAAA;;;AACE;AAAA;;AAAA;AAAA;AADF;AAAA;;AAAA;AAII;;;AAAA;;AAAA;AAJJ;AADJ;AASR;;;;;;;;;AA8BY;;AAAA;ADNG;AAAA;AAAA;AAAA;AAAe;;AAAf;AAkMH;;;AACI;AAAA;;AAAA;AAAA;AACD;;AAAA;AAAA;;AADC;AAAA;;;AAEF;AAAA;;AAAA;AAAA;AADC;;AAAA;AADC;;;;AAFR;AAiFO;;AAAA;;AAAA;AAAP;AACA;;;AACA;;;AA9M0B;AAAnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAP;AAA0B;AAAnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAP;AAiNW;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AACW;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AAIa;;AAAA;AAAA;AAAA;AAAA;AAAT;;AAAA;AADJ;AAUoB;AAAA;AAAA;AAAA;;;AAApB;;AACG;AAAA;AAAA;AAAA;AAAX;;;AAzFY;;AAAA;AAAA;AAAA;;;AAAmC;;AAAA;AAAA;AAAA;;;AAAnC;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AAAqC;;AAAA;AAAA;AAAA;;;AAArC;AADJ;;;;AADJ;AClMoB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACpB;;AAAA;;AAAA;AAAA;;AAAmB;;;AAAnB;;AD+TI;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AADyC;AAA7C;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAII;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAD2C;AAA/C;;AAAA;AAAA;AAAA;AAAA;;AAAA;AA5EG;AAAA;AAAA;AAAA;AAAX;;;AACY;;AAAA;AAAA;AAAA;AAA2C;;AAA3C;;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAA6C;;AAA7C;;AAAA;AChP8B;;AARd;;AAQc;AAAf;;AAAA;AAAA;;AAAA;AAAZ;AAAP;;AAAA;;;;;ADyRI;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACsD;;AAAA;AAAA;AAAtD;;AAAA;AAAA;AAAA;AAAsD;;;AAAtD;;AAAA;;;;;;;;ACxRZ;;;ADpBe;AAAA;AAAA;AAAA;AAAe;;AAAf;AAoVP;AACA;;;AACA;;;AAhR0B;AAAnB;;AAAA;AAAA;;AAAA;AAAA;;AAAP;AAkRQ;AAAA;AAAA;AAAA;AAAA;AACR;AACO;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AAAP;AAtII;AAAA;AAAA;;;AACU;AAAA;;AAAA;AAAA;AADV;;AAAA;;AAAA;;;AAGQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAJ;;;;AC1KhB;;;AACY;;AAAiB;;;AAAjB;AD+KwC;;AAAlC;AAAA;;AAAA;AAAA;AAAN;;AAAA;AAAA;;AAAA;AADJ;AC1Ka;;AAAA;AAAA;AAAA;;;ADiLb;AAIQ;;AAHO;AAAA;;AAAA;AAAA;;;;;;;;;;;AADf;;;;;AAAA;AA8HA;AAAA;AAAA;AAAA;AAA0B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA1B;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAsC;;AAAtC;;AAAA;AACA;;;AC1SW;AACe;;AAAZ;AAFP;AAAA;;;;AAAA;AAAA;;AAAA;AAAP;AAAA;AAHqB;;;;;;;;AAS7B;;;;;;;;AAoBY;AAAA;;AAAA;AAAA;AAAA;;;AACI;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AADJ;;;;AADJ;ADX0B;AAAnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAP;ACiBI;;AAAA;;AAAA;AAAA;;;AAAa;;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;;AAAA;AAAJ;;;;AADJ;AAKqB;;AAAA;AAAA;AAAA;;AADrB;;AAAA;AAA8B;;;AAA9B;AAAA;;AAIkC;AAAA;;AAAA;AAAA;AAA9B;;AAAA;AAAyD;;;AAAzD;AAKA;AADJ;;AAKmB;AAAnB;;AACY;AAAZ;;AACc;AAAd;;AAnJO;AAAA;;AAAA;AAAA;AAAsB;;AAAA;AAAA;;AAAtB;AAAA;;;AAAgD;AAAA;;AAAA;AAAA;AAA1B;;AAAA;AAAtB;;;;AAsJf;;;AAC+B;;;AACnB;;AAAA;;AAAmB;;;AAAnB;;AAGA;AAAY;AAAA;AAAZ;;AACc;;AAAA;AAAd;;AAGD;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AAAX;;;;;;;AAIwB;;AAAA;AACK;;AAAA;AAEH;;AAAA;AACE;;AAAA;AAFC;AAHd;;AAAA;AAAA;AAAA;AAAP;;AAAA;;;;;;;;;;;;;AASR;;;AD3DkC;AAAnB;;AAAA;AAAA;AAAA;;AAAP;AC2EmB;ADjJZ;AAAA;AAAA;AAAA;AAAe;;AAAf;ACkJf;;;AACY;;AAAmB;;;AAAnB;;AAGU;;AAAA;AADD;;AADN;AAAA;AAAP;AAAA;AD5IW;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AAIW;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AAIO;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;;AAER;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;;;;;;AA2BR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;;;;;;AAwFR;;;;;;AAGY;;AAAA;;;AAAA;;;;AAAA;AACE;;AADF;AADJ;AAIiB;;AAAA;AAAA;AAAqB;AAArB;AAAP;AAAA;;AAAA;;AAAA;AAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKqB;;AAAA;AAAA;;AAAA;AAAT;;AAAA;AAAA;;AAAA;AAAS;AAAT;AAAA;;AAAA;;AAC0B;AAAL;AAAA;AAAA;;AAAZ;;AAAA;AAAA;AAAT;AAAA;;AACO;AAAP;AACG;AAAA;;AAAA;AAAA;AAA6B;;;AAA7B;AAAf;;;AAEwB;;AAAA;;AAAA;AAAmB;;AAApB;AAAA;AAAP;;;;;;;;;AAmFhB;;;AAIuB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAR;;AAAA;AAAP;AAER;;;AAG6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AADd;;AAAA;AAAA;;;AAAP;AAgBG;AAAA;AAAA;AAAA;AAAX;;;AACY;AAAc;;AAAd;;AA8FZ;;;AASQ;;AAAA;;AAAA;AACA;;AAAA;;AAAA;;AAER;;;AAQQ;;;AACA;;AAAA;;AAAA;;AAER;;;;;;;AA2CQ;;;AACO;AAAA;AAAA;AAAA;AAAA;AAAP;AAG+B;;AAAA;AAAA;AA/V3B;;;AAAuC;;AAAA;;AAAA;AAAA;;AAAA;AAAvC;;;;AADJ;AAMA;;AAAA;;AAAA;AA8V6B;;AAAA;AAxVF;AAAA;;AAAA;AAAA;AAAvB;;AAAA;AADJ;AAMA;;AAAA;AAAA;AAEA;AAIQ;;AAHO;AAAA;;AAAA;AAAA;AACI;;AACF;;;;;;;AAHjB;;;;;AAAA;AAsVI;;AAAA;AAAmB;;AAAA;AAAnB;AAAA;AAAA;AADJ;AAGA;;AAAA;;AAAA;AACmB;AAAnB;;AAAA;AAAA;AAC0B;;AAAA;AAA1B;;AAAA;AAAA;AAGiC;;AAAA;AAAA;AAAA;;AAnV1B;;;AAAA;;AAEH;;;AAFG;AAAA;;;;AAAP;AAOA;;AAAA;;AAAA;AAgV0B;;AAAA;AC3fnB;AAAA;AAAP;ADqLA;;AAAA;AAAA;AAIW;;AAAA;AAAA;AAAJ;AAAA;AAAP;AAIA;;AAAA;AAAA;AACG;AAAA;;AAAA;AAAA;AAAX;;;AACY;;AAAA;;AAAA;;AAAA;;AAAA;AAKA;;AAAA;AAAA;AAAsB;AAAA;;AAAA;AAAA;AAAqB;AAArB;AAAtB;AADJ;AAiUA;;AAAA;;;AAAA;;AAvSA;;AAAA;;AAAA;;AAAA;;AAAA;AACyC;;AAAA;;;AAAA;;AAAA;;;;AAAA;AAAzC;;AAAA;AAAA;AAGyC;;;;AAAA;AAAzC;;AAAA;AAAA;AAGqB;;;;AAAA;AAArB;;AAAA;AAAA;AAGG;;AAAA;AAAA;AAAA;AAAA;;AAAsB;AAAA;;AAAA;AAAA;AAAqB;AAArB;AAAtB;AAAX;;;AACiC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAArB;;AAAA;AAAA;AAIO;;AAAA;AAAA;AAAJ;AAAP;AA+RA;AAAc;;AAAd;;;;;;;;;;AAER;;;;AAqBQ;;;AAleO;AAAA;AAAA;AAAA;AAAe;;AAAf;AAmeA;AAAP;AACA;;;AAEO;;AAAA;AAAA;AAAP;AAAA;AACyC;AAAtC;;;;AAAX;;;AACY;;AAAA;;;;AAAA;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AACG;;AAAA;;;AAAA;;AAAA;;;;AAAA;AADH;AAAA;;AAAA;AADJ;AAMA;;AAAA;AAAA;AAGG;AAAA;;AAAA;AAAA;AAAX;;;AAEgB;AAAA;;AAAA;AAAA;AAEI;;AAAA;AAAA;AADD;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AADH;AAAA;;AAAA;AADJ;AAMA;;AAAA;AAAA;AAKI;AAAA;;AAAA;AAAA;AAD0B;AAI1B;AAAA;;AAAA;AAAA;AAD0B;AAJ3B;AAAP;;AAAA;AASR;;;AAqBQ;;;AACA;;;AACO;;AAAA;AAAA;AACH;;AADG;AAAA;;;AAAA;;AAEH;;AAFG;AAAA;;;AAAA;;AAGH;;AAHG;AAAA;;;AAAA;;AAIH;;AAJG;AAAA;;;AAAA;;AAKH;;AALG;AAAA;;;AAAA;;AAMH;;AANG;AAAA;;;;AAAP;AASS;;;;;;;;AADT;;AAAA;;;;;;;;;;;;;;AA6BQ;AANwB;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAGqC;;AACjC;;;AADJ;AAKW;;AAAZ;AAAP;AAAA;AAXmC;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAC+B;;AAA0B;;;AAAzD;;;;AAJ2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAC6B;;AAA0B;;;AAAvD;;;;AAN2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACoC;;AAChC;;;AADJ;;;;AAPwB;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAGqC;;AACjC;;;AADJ;;;;AALA;;AAAA;;AAAA;;;;;;;;AA8BhB;;;AAkBQ;;;AACA;;;AACO;;AAAA;AAAA;AACH;;AADG;AAAA;;;AAAA;;AAEH;;AAFG;AAAA;;;AAAA;;AAGH;;AAHG;AAAA;;;AAAA;;AAIH;;AAJG;AAAA;;;AAAA;;AAKH;;AALG;AAAA;;;;AAAP;AASS;;;;;;;AAFT;;AAAA;;;;;;;;;;;;AAkBQ;AAHuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;AAGW;;AAAZ;AAAP;AAAA;AAP+B;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAJuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAJuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAJuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;;;;;AAiBhB;;;AAoBQ;;;AAxoBO;AAAA;AAAA;AAAA;AAAe;;AAAf;AAyoBA;AAAP;AACA;;;AACA;;;AAC8B;AAAvB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEgC;;AAEtB;;AAFsB;AAGjB;;AAHiB;AAIf;;AAJe;AAKlB;;AALkB;AAAhC;AAOmB;;AAAZ;AAAP;AAER;;;AAkBQ;;;AACA;;;AAxmB0B;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AA2mBe;AAAA;AAAA;AAAA;AAAA;AACf;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEK;AAAuC;;AAAZ;AADzB;AAAP;AAIR;;;;;;;AAzrBe;AAAA;AAAA;AAAA;AAAe;;AAAf;AAyLH;;;AACI;AAAA;;AAAA;AAAA;AACD;;AAAA;AAAA;;AADC;AAAA;;;AAEF;AAAA;;AAAA;AAAA;AADC;;AAAA;AADC;;;;AAFR;AAxJc;;AAFQ;;AAElB;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;AAuC0B;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AA+oBA;;;AACA;;;AACO;;AAAA;AAAP;AAAA;AAEI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAyC;AAAA;;AAAA;AAAA;AAAzC;AADJ;AAIA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEI;;AAAA;AAAA;AAAA;AAAA;AAAA;AADkC;AAAtC;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAGuD;AAAA;;AAAA;AAAA;AAAZ;AAA3C;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACmB;AAAA;;AAAA;AAAA;AAAmB;AAAA;AAAA;AAAA;AAAnB;AAAZ;AAAP;;AAAA;;;;;;;;;AAER;;;AAcQ;;;AACiB;;;AAAO;AAAxB;;AAAA;AAAA;AACmB;;AAAZ;AAAP;AAER;;;AAkBQ;;;AAjsB0B;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAmsBA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACmB;;AAAZ;AAAP;AAER;;;;AAluBsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;AA+uBiB;;;AAAO;AAAxB;;AAAA;AAAA;;;;;;AAER;;;AAUsB;AAAd;AACG;;AAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA1B;AAAA;;;;;;;AAAA;;AAAA;;;AACe;;;;;;;AAEf;AAAA;;AAAA;AAAA;AAAX;;;AAC0B;;AAAd;;AAGkC;AAAA;;AAAA;AAAA;AAAZ;AACU;AAAA;;AAAA;AAAA;AAAZ;AAjkBjB;AAAA;AAAA;AAAA;AAAyB;AAAA;;AAAA;AAAA;AAAzB;AAkkBmB;AACC;AAAA;;AAAA;AAAA;AAAZ;AACqB;AAAA;;AAAA;AAAA;AAAX;AAAA;;;AACU;AAAA;;AAAA;AAAA;AAAZ;AAAA;;;AACO;AAAA;;AAAA;AAAA;AAAZ;AAAA;;;AACW;AAAA;;AAAA;AAAA;AAAZ;AACkB;AAAA;AAAA;AAAA;AAAZ;AAEf;AAAA;;AAAA;AAAA;AAD8B;AAI9B;AAAA;;AAAA;AAAA;AAD8B;AAGR;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AACW;AAAA;;AAAA;AAAA;AAAf;;AAAA;AAAA;;AAAA;AACE;;AAAA;AAAA;;;AAnBT;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;;AAAA;AAsBR;;;AA3vBkC;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AA0wBO;AAAA;AAAP;AAER;;;AAQsB;;;;AA11BP;AAAA;AAAA;AAAA;AAAe;;AAAf;AA21Bf;;;AAC0B;;AAAA;AAAA;AAAA;;AAAA;AAClB;;AAAA;AAAA;AAWgB;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AAFG;AAAA;;;;AAAA;AAAA;AAAP;AAcoC;AAAA;;AAAA;AAAA;AAApC",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32 4 448 86400 200"
    },
    "14": {
      "op": "bytecblock 0x151f7c75 \"circulating_units\" 0x52333023 \"status\" \"maturity_date\" 0x0000000000000000 \"settlement_asset_id\" \"issuance_date\" \"primary_distribution_opening_date\" \"unit_value\" \"day_count_convention\" \"total_units\" \"principal_discount\" \"total_coupons\" \"secondary_market_opening_date\" \"secondary_market_closure_date\" 0x00 0x52323023 \"denomination_asset_id\" \"metadata\" \"primary_distribution_closure_date\" \"suspended\" \"defaulted\" \"interest_rate\" 0x52343023 0x52373023 0x74696d654576656e7473 0x52363023 0x52353023 0x068101 0x636f75706f6e5261746573 0x52383023"
    },
    "437": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "439": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "442": {
      "op": "bytec 17 // 0x52323023"
    },
    "444": {
      "op": "global ZeroAddress"
    },
    "446": {
      "op": "app_global_put"
    },
    "447": {
      "op": "bytec 18 // \"denomination_asset_id\""
    },
    "449": {
      "op": "intc_0 // 0"
    },
    "450": {
      "op": "app_global_put"
    },
    "451": {
      "op": "bytec 6 // \"settlement_asset_id\""
    },
    "453": {
      "op": "intc_0 // 0"
    },
    "454": {
      "op": "app_global_put"
    },
    "455": {
      "op": "bytec 9 // \"unit_value\""
    },
    "457": {
      "op": "intc_0 // 0"
    },
    "458": {
      "op": "app_global_put"
    },
    "459": {
      "op": "bytec 10 // \"day_count_convention\""
    },
    "461": {
      "op": "intc_0 // 0"
    },
    "462": {
      "op": "app_global_put"
    },
    "463": {
      "op": "bytec 19 // \"metadata\""
    },
    "465": {
      "op": "pushbytes 0x"
    },
    "467": {
      "op": "app_global_put"
    },
    "468": {
      "op": "bytec 11 // \"total_units\""
    },
    "470": {
      "op": "intc_0 // 0"
    },
    "471": {
      "op": "app_global_put"
    },
    "472": {
      "op": "bytec_1 // \"circulating_units\""
    },
    "473": {
      "op": "intc_0 // 0"
    },
    "474": {
      "op": "app_global_put"
    },
    "475": {
      "op": "bytec 12 // \"principal_discount\""
    },
    "477": {
      "op": "intc_0 // 0"
    },
    "478": {
      "op": "app_global_put"
    },
    "479": {
      "op": "bytec 23 // \"interest_rate\""
    },
    "481": {
      "op": "intc_0 // 0"
    },
    "482": {
      "op": "app_global_put"
    },
    "483": {
      "op": "bytec 13 // \"total_coupons\""
    },
    "485": {
      "op": "intc_0 // 0"
    },
    "486": {
      "op": "app_global_put"
    },
    "487": {
      "op": "bytec 8 // \"primary_distribution_opening_date\""
    },
    "489": {
      "op": "intc_0 // 0"
    },
    "490": {
      "op": "app_global_put"
    },
    "491": {
      "op": "bytec 20 // \"primary_distribution_closure_date\""
    },
    "493": {
      "op": "intc_0 // 0"
    },
    "494": {
      "op": "app_global_put"
    },
    "495": {
      "op": "bytec 7 // \"issuance_date\""
    },
    "497": {
      "op": "intc_0 // 0"
    },
    "498": {
      "op": "app_global_put"
    },
    "499": {
      "op": "bytec 14 // \"secondary_market_opening_date\""
    },
    "501": {
      "op": "intc_0 // 0"
    },
    "502": {
      "op": "app_global_put"
    },
    "503": {
      "op": "bytec 15 // \"secondary_market_closure_date\""
    },
    "505": {
      "op": "intc_0 // 0"
    },
    "506": {
      "op": "app_global_put"
    },
    "507": {
      "op": "bytec 4 // \"maturity_date\""
    },
    "509": {
      "op": "intc_0 // 0"
    },
    "510": {
      "op": "app_global_put"
    },
    "511": {
      "op": "bytec_3 // \"status\""
    },
    "512": {
      "op": "intc_0 // 0"
    },
    "513": {
      "op": "app_global_put"
    },
    "514": {
      "op": "bytec 21 // \"suspended\""
    },
    "516": {
      "op": "intc_0 // 0"
    },
    "517": {
      "op": "app_global_put"
    },
    "518": {
      "op": "bytec 22 // \"defaulted\""
    },
    "520": {
      "op": "intc_0 // 0"
    },
    "521": {
      "op": "app_global_put"
    },
    "522": {
      "op": "txn GlobalNumByteSlice"
    },
    "524": {
      "op": "pushint 2 // 2"
    },
    "526": {
      "op": "=="
    },
    "527": {
      "error": "Wrong Global Bytes allocation",
      "op": "assert // Wrong Global Bytes allocation"
    },
    "528": {
      "op": "txn GlobalNumUint"
    },
    "530": {
      "op": "pushint 18 // 18"
    },
    "532": {
      "op": "=="
    },
    "533": {
      "error": "Wrong Global UInts allocation",
      "op": "assert // Wrong Global UInts allocation"
    },
    "534": {
      "op": "txn LocalNumByteSlice"
    },
    "536": {
      "op": "!"
    },
    "537": {
      "error": "Wrong Local Bytes allocation",
      "op": "assert // Wrong Local Bytes allocation"
    },
    "538": {
      "op": "txn LocalNumUint"
    },
    "540": {
      "op": "!"
    },
    "541": {
      "error": "Wrong Local UInts allocation",
      "op": "assert // Wrong Local UInts allocation"
    },
    "542": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "544": {
      "op": "bz main_after_if_else@26",
      "stack_out": []
    },
    "547": {
      "op": "pushbytess 0x4fd6a3cc 0x9c76b6a3 0x44363d49 0x67db4f20 0x3f0efc6c 0x25dba95b 0x89474134 0x1d6fc255 0xfef74567 0xb8fc1390 0x3d43d1f0 0xebd96b2f 0x6c85e3ee 0xf63ace8d 0xbbcca18a 0x1a7babb4 0x402dba47 0xed02759f 0xfad2173e 0x08efea35 0xe4a5ab54 // method \"asset_transfer(address,address,uint64)uint64\", method \"pay_principal(address,byte[])(uint64,uint64,byte[])\", method \"get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))\", method \"get_payment_amount(address)(uint64,uint64)\", method \"asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void\", method \"asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void\", method \"asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void\", method \"set_secondary_time_events(uint64[])(uint64,uint64)\", method \"assign_role(address,uint8,byte[])uint64\", method \"revoke_role(address,uint8)uint64\", method \"open_account(address,address)uint64\", method \"close_account(address)(uint64,uint64)\", method \"primary_distribution(address,uint64)uint64\", method \"set_asset_suspension(bool)uint64\", method \"set_account_suspension(address,bool)uint64\", method \"set_default_status(bool)void\", method \"get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)\", method \"get_account_info(address)(address,uint64,uint64,uint64,bool)\", method \"get_time_events()uint64[]\", method \"get_secondary_market_schedule()uint64[]\", method \"get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)\""
    },
    "654": {
      "op": "txna ApplicationArgs 0"
    },
    "657": {
      "op": "match main_asset_transfer_route@5 main_pay_principal_route@6 main_get_account_units_current_value_route@7 main_get_payment_amount_route@8 main_asset_create_route@9 main_asset_update_route@10 main_asset_config_route@11 main_set_secondary_time_events_route@12 main_assign_role_route@13 main_revoke_role_route@14 main_open_account_route@15 main_close_account_route@16 main_primary_distribution_route@17 main_set_asset_suspension_route@18 main_set_account_suspension_route@19 main_set_default_status_route@20 main_get_asset_info_route@21 main_get_account_info_route@22 main_get_time_events_route@23 main_get_secondary_market_schedule_route@24 main_get_asset_metadata_route@25"
    },
    "701": {
      "block": "main_after_if_else@26",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "702": {
      "op": "return"
    },
    "703": {
      "block": "main_get_asset_metadata_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "705": {
      "op": "!",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "706": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "707": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "709": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "710": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata",
      "op": "callsub get_asset_metadata",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "713": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0",
        "0x151f7c75"
      ]
    },
    "714": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%127#0"
      ]
    },
    "715": {
      "op": "concat",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "716": {
      "op": "log",
      "stack_out": []
    },
    "717": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "718": {
      "op": "return"
    },
    "719": {
      "block": "main_get_secondary_market_schedule_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "721": {
      "op": "!",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "722": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "723": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "725": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "726": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule",
      "op": "callsub get_secondary_market_schedule",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "729": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0",
        "0x151f7c75"
      ]
    },
    "730": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%121#0"
      ]
    },
    "731": {
      "op": "concat",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "732": {
      "op": "log",
      "stack_out": []
    },
    "733": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "734": {
      "op": "return"
    },
    "735": {
      "block": "main_get_time_events_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "737": {
      "op": "!",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "738": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "739": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "741": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "742": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events",
      "op": "callsub get_time_events",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "745": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0",
        "0x151f7c75"
      ]
    },
    "746": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%115#0"
      ]
    },
    "747": {
      "op": "concat",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "748": {
      "op": "log",
      "stack_out": []
    },
    "749": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "750": {
      "op": "return"
    },
    "751": {
      "block": "main_get_account_info_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "753": {
      "op": "!",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "754": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "755": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "757": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "758": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%13#0"
      ]
    },
    "761": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info",
      "op": "callsub get_account_info",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "764": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0",
        "0x151f7c75"
      ]
    },
    "765": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%109#0"
      ]
    },
    "766": {
      "op": "concat",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "767": {
      "op": "log",
      "stack_out": []
    },
    "768": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "769": {
      "op": "return"
    },
    "770": {
      "block": "main_get_asset_info_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "772": {
      "op": "!",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "773": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "774": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "776": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "777": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info",
      "op": "callsub get_asset_info",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "780": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0",
        "0x151f7c75"
      ]
    },
    "781": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%103#0"
      ]
    },
    "782": {
      "op": "concat",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "783": {
      "op": "log",
      "stack_out": []
    },
    "784": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "785": {
      "op": "return"
    },
    "786": {
      "block": "main_set_default_status_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "788": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "789": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "790": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "792": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "793": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "796": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status",
      "op": "callsub set_default_status",
      "stack_out": []
    },
    "799": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "800": {
      "op": "return"
    },
    "801": {
      "block": "main_set_account_suspension_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "803": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "804": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "805": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "807": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "808": {
      "op": "txna ApplicationArgs 1"
    },
    "811": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%4#0",
        "reinterpret_bytes[32]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "814": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension",
      "op": "callsub set_account_suspension",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "817": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0",
        "0x151f7c75"
      ]
    },
    "818": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%93#0"
      ]
    },
    "819": {
      "op": "concat",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "820": {
      "op": "log",
      "stack_out": []
    },
    "821": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "822": {
      "op": "return"
    },
    "823": {
      "block": "main_set_asset_suspension_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "825": {
      "op": "!",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "826": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "827": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "829": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "830": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "833": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension",
      "op": "callsub set_asset_suspension",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "836": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0",
        "0x151f7c75"
      ]
    },
    "837": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%87#0"
      ]
    },
    "838": {
      "op": "concat",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "839": {
      "op": "log",
      "stack_out": []
    },
    "840": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "841": {
      "op": "return"
    },
    "842": {
      "block": "main_primary_distribution_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "844": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "845": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "846": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "848": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "849": {
      "op": "txna ApplicationArgs 1"
    },
    "852": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "855": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution",
      "op": "callsub primary_distribution",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "858": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "0x151f7c75"
      ]
    },
    "859": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%81#0"
      ]
    },
    "860": {
      "op": "concat",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "861": {
      "op": "log",
      "stack_out": []
    },
    "862": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "863": {
      "op": "return"
    },
    "864": {
      "block": "main_close_account_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "866": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "867": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "868": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "870": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "871": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0"
      ]
    },
    "874": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.close_account",
      "op": "callsub close_account",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "877": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "0x151f7c75"
      ]
    },
    "878": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%75#0"
      ]
    },
    "879": {
      "op": "concat",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "880": {
      "op": "log",
      "stack_out": []
    },
    "881": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "882": {
      "op": "return"
    },
    "883": {
      "block": "main_open_account_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "885": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "886": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "887": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "889": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "890": {
      "op": "txna ApplicationArgs 1"
    },
    "893": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ]
    },
    "896": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.open_account",
      "op": "callsub open_account",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "899": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "0x151f7c75"
      ]
    },
    "900": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%69#0"
      ]
    },
    "901": {
      "op": "concat",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "902": {
      "op": "log",
      "stack_out": []
    },
    "903": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "904": {
      "op": "return"
    },
    "905": {
      "block": "main_revoke_role_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "907": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "908": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "909": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "911": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "912": {
      "op": "txna ApplicationArgs 1"
    },
    "915": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "918": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role",
      "op": "callsub revoke_role",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "921": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "0x151f7c75"
      ]
    },
    "922": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%63#0"
      ]
    },
    "923": {
      "op": "concat",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "924": {
      "op": "log",
      "stack_out": []
    },
    "925": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "926": {
      "op": "return"
    },
    "927": {
      "block": "main_assign_role_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "929": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "930": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "931": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "933": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "934": {
      "op": "txna ApplicationArgs 1"
    },
    "937": {
      "op": "txna ApplicationArgs 2"
    },
    "940": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%6#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%56#0"
      ]
    },
    "943": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assign_role",
      "op": "callsub assign_role",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "946": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "0x151f7c75"
      ]
    },
    "947": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%57#0"
      ]
    },
    "948": {
      "op": "concat",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "949": {
      "op": "log",
      "stack_out": []
    },
    "950": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "951": {
      "op": "return"
    },
    "952": {
      "block": "main_set_secondary_time_events_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "954": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "955": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "956": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "958": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "959": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "962": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events",
      "op": "callsub set_secondary_time_events",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "965": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "0x151f7c75"
      ]
    },
    "966": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%50#0"
      ]
    },
    "967": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "968": {
      "op": "log",
      "stack_out": []
    },
    "969": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "970": {
      "op": "return"
    },
    "971": {
      "block": "main_asset_config_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "973": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "974": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "975": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "977": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "978": {
      "op": "txna ApplicationArgs 1"
    },
    "981": {
      "op": "txna ApplicationArgs 2"
    },
    "984": {
      "op": "txna ApplicationArgs 3"
    },
    "987": {
      "op": "txna ApplicationArgs 4"
    },
    "990": {
      "op": "txna ApplicationArgs 5"
    },
    "993": {
      "op": "txna ApplicationArgs 6"
    },
    "996": {
      "op": "txna ApplicationArgs 7"
    },
    "999": {
      "op": "txna ApplicationArgs 8"
    },
    "1002": {
      "op": "txna ApplicationArgs 9"
    },
    "1005": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "1008": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_config",
      "op": "callsub asset_config",
      "stack_out": []
    },
    "1011": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1012": {
      "op": "return"
    },
    "1013": {
      "block": "main_asset_update_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1015": {
      "op": "intc_3 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "UpdateApplication"
      ]
    },
    "1016": {
      "op": "==",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1017": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "1018": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1020": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1021": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1024": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_update",
      "op": "callsub asset_update",
      "stack_out": []
    },
    "1027": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1028": {
      "op": "return"
    },
    "1029": {
      "block": "main_asset_create_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1031": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1032": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1033": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1035": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1036": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1037": {
      "op": "txna ApplicationArgs 1"
    },
    "1040": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%5#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%5#0",
        "tmp%32#0"
      ]
    },
    "1043": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_create",
      "op": "callsub asset_create",
      "stack_out": []
    },
    "1046": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1047": {
      "op": "return"
    },
    "1048": {
      "block": "main_get_payment_amount_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1050": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1051": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1052": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1054": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1055": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "1058": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.get_payment_amount",
      "op": "callsub get_payment_amount",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1061": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0x151f7c75"
      ]
    },
    "1062": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%26#0"
      ]
    },
    "1063": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1064": {
      "op": "log",
      "stack_out": []
    },
    "1065": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1066": {
      "op": "return"
    },
    "1067": {
      "block": "main_get_account_units_current_value_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1069": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1070": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1071": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1073": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1074": {
      "op": "txna ApplicationArgs 1"
    },
    "1077": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1080": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.get_account_units_current_value",
      "op": "callsub get_account_units_current_value",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1083": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "1084": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%20#0"
      ]
    },
    "1085": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1086": {
      "op": "log",
      "stack_out": []
    },
    "1087": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1088": {
      "op": "return"
    },
    "1089": {
      "block": "main_pay_principal_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1091": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1092": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1093": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1095": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1096": {
      "op": "txna ApplicationArgs 1"
    },
    "1099": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "tmp%13#0"
      ]
    },
    "1102": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.pay_principal",
      "op": "callsub pay_principal",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1105": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "1106": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%14#0"
      ]
    },
    "1107": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1108": {
      "op": "log",
      "stack_out": []
    },
    "1109": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1110": {
      "op": "return"
    },
    "1111": {
      "block": "main_asset_transfer_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "1113": {
      "op": "!",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "1114": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1115": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%5#1"
      ]
    },
    "1117": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1118": {
      "op": "txna ApplicationArgs 1"
    },
    "1121": {
      "op": "txna ApplicationArgs 2"
    },
    "1124": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1127": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.asset_transfer",
      "op": "callsub asset_transfer",
      "defined_out": [
        "tmp%7#1"
      ],
      "stack_out": [
        "tmp%7#1"
      ]
    },
    "1130": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#1"
      ],
      "stack_out": [
        "tmp%7#1",
        "0x151f7c75"
      ]
    },
    "1131": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%7#1"
      ]
    },
    "1132": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1133": {
      "op": "log",
      "stack_out": []
    },
    "1134": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1135": {
      "op": "return"
    },
    "1136": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.day_count_factor",
      "params": {},
      "block": "day_count_factor",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1139": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1141": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1142": {
      "op": "bytec 7 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "1144": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1145": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1146": {
      "op": "-",
      "defined_out": [
        "accrued_period#0"
      ],
      "stack_out": [
        "accrued_period#0"
      ]
    },
    "1147": {
      "op": "dup",
      "defined_out": [
        "accrued_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0"
      ]
    },
    "1148": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "0"
      ]
    },
    "1149": {
      "op": "bytec 4 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "accrued_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "1151": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accrued_period#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1152": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0"
      ]
    },
    "1153": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1154": {
      "op": "bytec 7 // \"issuance_date\"",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "1156": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accrued_period#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1157": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1158": {
      "op": "-",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "principal_period#0"
      ]
    },
    "1159": {
      "op": "dup",
      "stack_out": [
        "accrued_period#0",
        "accrued_period#0",
        "principal_period#0",
        "principal_period#0"
      ]
    },
    "1160": {
      "op": "cover 2",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0"
      ]
    },
    "1162": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0",
        "0"
      ]
    },
    "1163": {
      "op": "bytec 10 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "accrued_period#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "1165": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accrued_period#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1166": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "principal_period#0",
        "maybe_value%3#0"
      ]
    },
    "1167": {
      "op": "swap",
      "defined_out": [
        "accrued_period#0",
        "maybe_value%3#0",
        "principal_period#0",
        "principal_period#5"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "accrued_period#0",
        "maybe_value%3#0",
        "principal_period#5"
      ]
    },
    "1168": {
      "op": "cover 2",
      "defined_out": [
        "accrued_period#0",
        "accrued_period#5",
        "maybe_value%3#0",
        "principal_period#0",
        "principal_period#5"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "maybe_value%3#0"
      ]
    },
    "1170": {
      "op": "bnz day_count_factor_after_if_else@2",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5"
      ]
    },
    "1173": {
      "op": "frame_dig 0"
    },
    "1175": {
      "op": "intc 5 // 86400"
    },
    "1177": {
      "op": "/"
    },
    "1178": {
      "op": "frame_dig 1"
    },
    "1180": {
      "op": "intc 5 // 86400"
    },
    "1182": {
      "op": "/"
    },
    "1183": {
      "op": "frame_bury 2"
    },
    "1185": {
      "op": "frame_bury 3"
    },
    "1187": {
      "block": "day_count_factor_after_if_else@2",
      "stack_in": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "principal_period#0"
      ]
    },
    "1189": {
      "op": "frame_dig 3",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "principal_period#0",
        "accrued_period#0"
      ]
    },
    "1191": {
      "op": "itob",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "principal_period#0",
        "val_as_bytes%0#0"
      ]
    },
    "1192": {
      "op": "swap",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "val_as_bytes%0#0",
        "principal_period#0"
      ]
    },
    "1193": {
      "op": "itob",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1194": {
      "op": "concat",
      "defined_out": [
        "accrued_period#0",
        "encoded_tuple_buffer%2#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "principal_period#5",
        "accrued_period#5",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1195": {
      "op": "frame_bury 0"
    },
    "1197": {
      "retsub": true,
      "op": "retsub"
    },
    "1198": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.accrued_interest_amount",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "uint64"
      },
      "block": "accrued_interest_amount",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1201": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.day_count_factor",
      "op": "callsub day_count_factor",
      "defined_out": [
        "day_count_factor#0"
      ],
      "stack_out": [
        "day_count_factor#0"
      ]
    },
    "1204": {
      "op": "dup",
      "defined_out": [
        "day_count_factor#0",
        "day_count_factor#0 (copy)"
      ],
      "stack_out": [
        "day_count_factor#0",
        "day_count_factor#0 (copy)"
      ]
    },
    "1205": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "day_count_factor#0",
        "day_count_factor#0 (copy)"
      ],
      "stack_out": [
        "day_count_factor#0",
        "day_count_factor#0 (copy)",
        "0"
      ]
    },
    "1206": {
      "op": "extract_uint64",
      "defined_out": [
        "accrued_period#0",
        "day_count_factor#0"
      ],
      "stack_out": [
        "day_count_factor#0",
        "accrued_period#0"
      ]
    },
    "1207": {
      "op": "swap",
      "stack_out": [
        "accrued_period#0",
        "day_count_factor#0"
      ]
    },
    "1208": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "accrued_period#0",
        "day_count_factor#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "day_count_factor#0",
        "8"
      ]
    },
    "1210": {
      "op": "extract_uint64",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0"
      ]
    },
    "1211": {
      "op": "frame_dig -2",
      "defined_out": [
        "accrued_period#0",
        "holding_address#0 (copy)",
        "principal_period#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "holding_address#0 (copy)"
      ]
    },
    "1213": {
      "op": "frame_dig -1",
      "defined_out": [
        "accrued_period#0",
        "holding_address#0 (copy)",
        "principal_period#0",
        "units#0 (copy)"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "holding_address#0 (copy)",
        "units#0 (copy)"
      ]
    },
    "1215": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "op": "callsub account_units_value",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0"
      ]
    },
    "1218": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0",
        "0"
      ]
    },
    "1219": {
      "op": "bytec 12 // \"principal_discount\"",
      "defined_out": [
        "\"principal_discount\"",
        "0",
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0",
        "0",
        "\"principal_discount\""
      ]
    },
    "1221": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accrued_period#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "principal_period#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1222": {
      "error": "check self.principal_discount exists",
      "op": "assert // check self.principal_discount exists",
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "1223": {
      "op": "*",
      "defined_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "accrued_period#0",
        "principal_period#0",
        "tmp%3#0"
      ]
    },
    "1224": {
      "op": "uncover 2",
      "stack_out": [
        "principal_period#0",
        "tmp%3#0",
        "accrued_period#0"
      ]
    },
    "1226": {
      "op": "*",
      "defined_out": [
        "principal_period#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "principal_period#0",
        "tmp%4#0"
      ]
    },
    "1227": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "principal_period#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "principal_period#0",
        "tmp%4#0",
        "10000"
      ]
    },
    "1230": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "10000",
        "principal_period#0"
      ]
    },
    "1232": {
      "op": "*",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1233": {
      "op": "/",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1234": {
      "retsub": true,
      "op": "retsub"
    },
    "1235": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.asset_transfer",
      "params": {
        "sender_holding_address#0": "bytes",
        "receiver_holding_address#0": "bytes",
        "units#0": "bytes"
      },
      "block": "asset_transfer",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1238": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1239": {
      "op": "dupn 3",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3"
      ]
    },
    "1241": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0"
      ]
    },
    "1243": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0"
      ]
    },
    "1244": {
      "op": "frame_dig -1",
      "defined_out": [
        "units#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#0 (copy)"
      ]
    },
    "1246": {
      "op": "btoi",
      "defined_out": [
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1247": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "0"
      ]
    },
    "1248": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "0",
        "\"status\""
      ]
    },
    "1249": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#2",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "1250": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#2"
      ]
    },
    "1251": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#2",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#2",
        "100"
      ]
    },
    "1253": {
      "op": "==",
      "defined_out": [
        "tmp%0#4",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#4"
      ]
    },
    "1254": {
      "op": "bz asset_transfer_bool_false@5",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1257": {
      "op": "intc_0 // 0"
    },
    "1258": {
      "op": "bytec 14 // \"secondary_market_opening_date\""
    },
    "1260": {
      "op": "app_global_get_ex"
    },
    "1261": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists"
    },
    "1262": {
      "op": "global LatestTimestamp"
    },
    "1264": {
      "op": "dup"
    },
    "1265": {
      "op": "frame_bury 5"
    },
    "1267": {
      "op": "<="
    },
    "1268": {
      "op": "bz asset_transfer_bool_false@5"
    },
    "1271": {
      "op": "intc_0 // 0"
    },
    "1272": {
      "op": "bytec 15 // \"secondary_market_closure_date\""
    },
    "1274": {
      "op": "app_global_get_ex"
    },
    "1275": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists"
    },
    "1276": {
      "op": "frame_dig 5"
    },
    "1278": {
      "op": ">"
    },
    "1279": {
      "op": "bz asset_transfer_bool_false@5"
    },
    "1282": {
      "op": "intc_1 // 1"
    },
    "1283": {
      "block": "asset_transfer_bool_merge@6",
      "stack_in": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "and_result%0#0"
      ],
      "error": "Secondary market is closed",
      "op": "assert // Secondary market is closed",
      "defined_out": [],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1284": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1"
      ]
    },
    "1286": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender_holding_address#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#1",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1288": {
      "op": "==",
      "defined_out": [
        "tmp%1#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%1#2"
      ]
    },
    "1289": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1290": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1293": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "1296": {
      "op": "bytec_2 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "0x52333023"
      ]
    },
    "1297": {
      "op": "frame_dig -3",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "0x52333023",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1299": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2"
      ]
    },
    "1300": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "1301": {
      "op": "frame_bury 2",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2"
      ]
    },
    "1303": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1304": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#2",
        "tmp%0#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "1305": {
      "op": "bury 1",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "1307": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2"
      ]
    },
    "1308": {
      "op": "bytec_2 // 0x52333023",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "0x52333023"
      ]
    },
    "1309": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "receiver_holding_address#0 (copy)",
        "tmp%0#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "0x52333023",
        "receiver_holding_address#0 (copy)"
      ]
    },
    "1311": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3"
      ]
    },
    "1312": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%0#3"
      ]
    },
    "1313": {
      "op": "frame_bury 3",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3"
      ]
    },
    "1315": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "1316": {
      "op": "box_len",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "1317": {
      "op": "bury 1",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_exists%0#0"
      ]
    },
    "1319": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3"
      ]
    },
    "1320": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%0#2 (copy)"
      ]
    },
    "1322": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1323": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%0#0"
      ]
    },
    "1324": {
      "op": "intc 4 // 448",
      "defined_out": [
        "448",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%0#0",
        "448"
      ]
    },
    "1326": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "is_true%0#0"
      ]
    },
    "1327": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1329": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1330": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1332": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "encoded_bool%0#0"
      ]
    },
    "1333": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1334": {
      "op": "getbit",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%3#0"
      ]
    },
    "1335": {
      "op": "!",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%4#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%4#2"
      ]
    },
    "1336": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3"
      ]
    },
    "1337": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "1338": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1339": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%1#0"
      ]
    },
    "1340": {
      "op": "intc 4 // 448",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%1#0",
        "448"
      ]
    },
    "1342": {
      "op": "getbit",
      "defined_out": [
        "is_true%1#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "is_true%1#0"
      ]
    },
    "1343": {
      "op": "bytec 16 // 0x00",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "is_true%1#0",
        "0x00"
      ]
    },
    "1345": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "1346": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "1348": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "encoded_bool%1#0"
      ]
    },
    "1349": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1350": {
      "op": "getbit",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%6#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%6#2"
      ]
    },
    "1351": {
      "op": "!",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%7#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%7#0"
      ]
    },
    "1352": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3"
      ]
    },
    "1353": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%0#2 (copy)"
      ]
    },
    "1355": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%2#0",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1356": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%2#0"
      ]
    },
    "1357": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "maybe_value%0#0",
        "maybe_value%2#0",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%2#0",
        "32"
      ]
    },
    "1358": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%10#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%10#0"
      ]
    },
    "1359": {
      "op": "frame_dig 6",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%10#0",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%10#0",
        "units#1"
      ]
    },
    "1361": {
      "op": ">=",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%11#0",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%11#0"
      ]
    },
    "1362": {
      "error": "Insufficient sender units to transfer",
      "op": "assert // Insufficient sender units to transfer",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3"
      ]
    },
    "1363": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "tmp%0#2"
      ]
    },
    "1364": {
      "op": "box_get",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1365": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%0#0"
      ]
    },
    "1366": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "sender_unit_value#1"
      ]
    },
    "1369": {
      "op": "frame_bury 1",
      "defined_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3"
      ]
    },
    "1371": {
      "op": "box_get",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1372": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%1#0"
      ]
    },
    "1373": {
      "op": "intc_2 // 32",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%1#0",
        "32"
      ]
    },
    "1374": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%3#1",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%3#1"
      ]
    },
    "1375": {
      "op": "bz asset_transfer_else_body@16",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1378": {
      "op": "frame_dig 2"
    },
    "1380": {
      "op": "box_get"
    },
    "1381": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1382": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds"
    },
    "1385": {
      "op": "frame_dig 3"
    },
    "1387": {
      "op": "box_get"
    },
    "1388": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1389": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds"
    },
    "1392": {
      "op": "b=="
    },
    "1393": {
      "op": "bz asset_transfer_bool_false@14"
    },
    "1396": {
      "op": "frame_dig 2"
    },
    "1398": {
      "op": "box_get"
    },
    "1399": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1400": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds"
    },
    "1403": {
      "op": "frame_dig 3"
    },
    "1405": {
      "op": "box_get"
    },
    "1406": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1407": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds"
    },
    "1410": {
      "op": "b=="
    },
    "1411": {
      "op": "bz asset_transfer_bool_false@14"
    },
    "1414": {
      "op": "intc_1 // 1"
    },
    "1415": {
      "block": "asset_transfer_bool_merge@15",
      "stack_in": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "and_result%0#0"
      ],
      "error": "Sender and receiver units are not fungible",
      "op": "assert // Sender and receiver units are not fungible",
      "defined_out": [],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1416": {
      "block": "asset_transfer_after_if_else@17",
      "stack_in": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2"
      ]
    },
    "1418": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1419": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1420": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1421": {
      "op": "frame_bury 0",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "1423": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2"
      ]
    },
    "1424": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_value%0#0",
        "sender_holding_address#0 (copy)",
        "tmp%0#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "sender_holding_address#0 (copy)"
      ]
    },
    "1426": {
      "op": "frame_dig 6",
      "defined_out": [
        "maybe_value%0#0",
        "sender_holding_address#0 (copy)",
        "tmp%0#2",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "sender_holding_address#0 (copy)",
        "units#1"
      ]
    },
    "1428": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "sender_holding_address#0 (copy)",
        "tmp%0#2",
        "units#1",
        "units#1 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "sender_holding_address#0 (copy)",
        "units#1 (copy)",
        "units#1 (copy)"
      ]
    },
    "1429": {
      "op": "cover 3",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "sender_holding_address#0 (copy)",
        "units#1 (copy)"
      ]
    },
    "1431": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.accrued_interest_amount",
      "op": "callsub accrued_interest_amount",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "accrued_interest#0"
      ]
    },
    "1434": {
      "op": "frame_bury 4",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2"
      ]
    },
    "1436": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1437": {
      "op": "box_get",
      "defined_out": [
        "accrued_interest#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1438": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "maybe_value%0#1"
      ]
    },
    "1439": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "accrued_interest#0",
        "maybe_value%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "maybe_value%0#1",
        "32"
      ]
    },
    "1440": {
      "op": "extract_uint64",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%2#1",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "tmp%2#1"
      ]
    },
    "1441": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "tmp%2#1",
        "units#1 (copy)"
      ]
    },
    "1443": {
      "op": "-",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "to_encode%0#0",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "to_encode%0#0"
      ]
    },
    "1444": {
      "op": "itob",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "units#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ]
    },
    "1445": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "tmp%0#2 (copy)"
      ]
    },
    "1447": {
      "op": "box_get",
      "defined_out": [
        "accrued_interest#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#2",
        "units#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1448": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1449": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1450": {
      "op": "replace2 32",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "units#1",
        "updated_data%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "updated_data%0#0"
      ]
    },
    "1452": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "updated_data%0#0",
        "tmp%0#2 (copy)"
      ]
    },
    "1454": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "updated_data%0#0"
      ]
    },
    "1455": {
      "op": "box_put",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2"
      ]
    },
    "1456": {
      "op": "frame_dig 3",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "tmp%0#3"
      ]
    },
    "1458": {
      "op": "dup",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "1459": {
      "op": "box_get",
      "defined_out": [
        "accrued_interest#0",
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%2#0",
        "tmp%0#2",
        "tmp%0#3",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1460": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%2#0"
      ]
    },
    "1461": {
      "op": "intc_2 // 32",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%2#0",
        "32"
      ]
    },
    "1462": {
      "op": "extract_uint64",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%6#0",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%6#0"
      ]
    },
    "1463": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "tmp%6#0",
        "units#1"
      ]
    },
    "1465": {
      "op": "+",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "to_encode%1#0",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "to_encode%1#0"
      ]
    },
    "1466": {
      "op": "itob",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "units#1",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "val_as_bytes%1#0"
      ]
    },
    "1467": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "val_as_bytes%1#0",
        "tmp%0#3 (copy)"
      ]
    },
    "1469": {
      "op": "box_get",
      "defined_out": [
        "accrued_interest#0",
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "tmp%0#2",
        "tmp%0#3",
        "units#1",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "val_as_bytes%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1470": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "val_as_bytes%1#0",
        "maybe_value%3#0"
      ]
    },
    "1471": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "maybe_value%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "1472": {
      "op": "replace2 32",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%0#2",
        "tmp%0#3",
        "units#1",
        "updated_data%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2",
        "tmp%0#3",
        "updated_data%1#0"
      ]
    },
    "1474": {
      "op": "box_put",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#2"
      ]
    },
    "1475": {
      "op": "box_get",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1476": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#1"
      ]
    },
    "1477": {
      "op": "intc_2 // 32",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#1",
        "32"
      ]
    },
    "1478": {
      "op": "extract_uint64",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%2#1"
      ]
    },
    "1479": {
      "op": "bnz asset_transfer_after_if_else@21",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1482": {
      "op": "frame_dig 2"
    },
    "1484": {
      "op": "dup"
    },
    "1485": {
      "op": "box_get"
    },
    "1486": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1487": {
      "op": "bytec 5 // 0x0000000000000000"
    },
    "1489": {
      "op": "replace2 40"
    },
    "1491": {
      "op": "dig 1"
    },
    "1493": {
      "op": "swap"
    },
    "1494": {
      "op": "box_put"
    },
    "1495": {
      "op": "dup"
    },
    "1496": {
      "op": "box_get"
    },
    "1497": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1498": {
      "op": "bytec 5 // 0x0000000000000000"
    },
    "1500": {
      "op": "replace2 48"
    },
    "1502": {
      "op": "box_put"
    },
    "1503": {
      "block": "asset_transfer_after_if_else@21",
      "stack_in": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#0"
      ]
    },
    "1505": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "maybe_value%0#0",
        "40"
      ]
    },
    "1507": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%5#0"
      ]
    },
    "1508": {
      "op": "frame_dig 6",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%5#0",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%5#0",
        "units#1"
      ]
    },
    "1510": {
      "op": "*",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%6#0",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%6#0"
      ]
    },
    "1511": {
      "op": "frame_dig 4",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "tmp%6#0",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%6#0",
        "accrued_interest#0"
      ]
    },
    "1513": {
      "op": "+",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "to_encode%0#0",
        "units#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "to_encode%0#0"
      ]
    },
    "1514": {
      "op": "itob",
      "defined_out": [
        "accrued_interest#0",
        "maybe_value%0#0",
        "units#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "val_as_bytes%0#0"
      ]
    },
    "1515": {
      "op": "frame_bury 0"
    },
    "1517": {
      "retsub": true,
      "op": "retsub"
    },
    "1518": {
      "block": "asset_transfer_bool_false@14",
      "stack_in": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "and_result%0#0"
      ]
    },
    "1519": {
      "op": "b asset_transfer_bool_merge@15"
    },
    "1522": {
      "block": "asset_transfer_else_body@16",
      "stack_in": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3"
      ]
    },
    "1524": {
      "op": "dup",
      "defined_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "1525": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1526": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%2#0"
      ]
    },
    "1527": {
      "op": "frame_dig 1",
      "defined_out": [
        "maybe_value%2#0",
        "sender_unit_value#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%2#0",
        "sender_unit_value#1"
      ]
    },
    "1529": {
      "op": "replace2 40",
      "defined_out": [
        "sender_unit_value#1",
        "tmp%0#3",
        "updated_data%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "updated_data%0#0"
      ]
    },
    "1531": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "updated_data%0#0",
        "tmp%0#3 (copy)"
      ]
    },
    "1533": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "updated_data%0#0"
      ]
    },
    "1534": {
      "op": "box_put",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3"
      ]
    },
    "1535": {
      "op": "frame_dig 2",
      "defined_out": [
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "tmp%0#2"
      ]
    },
    "1537": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1538": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%3#0"
      ]
    },
    "1539": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%3#0",
        "tmp%0#3 (copy)"
      ]
    },
    "1541": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1542": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "1543": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%4#0",
        "maybe_value%3#0"
      ]
    },
    "1544": {
      "error": "Index access is out of bounds",
      "op": "extract 48 8 // on error: Index access is out of bounds",
      "defined_out": [
        "assigned_value%1#0",
        "maybe_value%4#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "maybe_value%4#0",
        "assigned_value%1#0"
      ]
    },
    "1547": {
      "op": "replace2 48",
      "defined_out": [
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "updated_data%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "tmp%0#3",
        "updated_data%1#0"
      ]
    },
    "1549": {
      "op": "box_put",
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ]
    },
    "1550": {
      "op": "b asset_transfer_after_if_else@17"
    },
    "1553": {
      "block": "asset_transfer_bool_false@5",
      "stack_in": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "sender_unit_value#1",
        "tmp%0#2",
        "tmp%0#3",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "units#1",
        "and_result%0#0"
      ]
    },
    "1554": {
      "op": "b asset_transfer_bool_merge@6"
    },
    "1557": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.pay_principal",
      "params": {
        "holding_address#0": "bytes",
        "payment_info#0": "bytes"
      },
      "block": "pay_principal",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1560": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1561": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "1562": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1563": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "1564": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "100"
      ]
    },
    "1566": {
      "op": "==",
      "defined_out": [
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#4"
      ]
    },
    "1567": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "1568": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1571": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "1574": {
      "op": "bytec_2 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1575": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1577": {
      "op": "concat",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5"
      ]
    },
    "1578": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ],
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ]
    },
    "1580": {
      "op": "box_len",
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1581": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "maybe_exists%0#0"
      ]
    },
    "1583": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5"
      ]
    },
    "1584": {
      "op": "dup",
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ]
    },
    "1585": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1586": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "maybe_value%0#0"
      ]
    },
    "1587": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "maybe_value%0#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "maybe_value%0#0",
        "32"
      ]
    },
    "1588": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#5",
        "units#0"
      ],
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "units#0"
      ]
    },
    "1589": {
      "error": "No D-ASA units",
      "op": "assert // No D-ASA units",
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5"
      ]
    },
    "1590": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "tmp%4#0"
      ]
    },
    "1592": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "tmp%4#0",
        "0"
      ]
    },
    "1593": {
      "op": "bytec 4 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "tmp%0#5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "tmp%4#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "1595": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#1",
        "tmp%0#5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "tmp%4#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "1596": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "tmp%4#0",
        "maybe_value%1#1"
      ]
    },
    "1597": {
      "op": ">=",
      "defined_out": [
        "tmp%0#5",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5",
        "tmp%5#0"
      ]
    },
    "1598": {
      "error": "Not mature",
      "op": "assert // Not mature",
      "stack_out": [
        "tmp%0#5",
        "tmp%0#5"
      ]
    },
    "1599": {
      "op": "box_get",
      "stack_out": [
        "tmp%0#5",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1600": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#5",
        "maybe_value%0#0"
      ]
    },
    "1601": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1604": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#5",
        "reinterpret_bytes[32]%0#0",
        "0"
      ]
    },
    "1605": {
      "op": "bytec 6 // \"settlement_asset_id\"",
      "defined_out": [
        "\"settlement_asset_id\"",
        "0",
        "reinterpret_bytes[32]%0#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "reinterpret_bytes[32]%0#0",
        "0",
        "\"settlement_asset_id\""
      ]
    },
    "1607": {
      "op": "app_global_get_ex",
      "stack_out": [
        "tmp%0#5",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "1608": {
      "error": "check self.settlement_asset_id exists",
      "op": "assert // check self.settlement_asset_id exists",
      "stack_out": [
        "tmp%0#5",
        "reinterpret_bytes[32]%0#0",
        "maybe_value%1#1"
      ]
    },
    "1609": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%0#5",
        "tmp%1#4",
        "tmp%2#3"
      ],
      "stack_out": [
        "tmp%0#5",
        "tmp%1#4",
        "tmp%2#3"
      ]
    },
    "1611": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#5",
        "tmp%2#3"
      ]
    },
    "1613": {
      "op": "bz pay_principal_bool_false@16",
      "stack_out": [
        "tmp%0#5"
      ]
    },
    "1616": {
      "op": "frame_dig 0"
    },
    "1618": {
      "op": "box_get"
    },
    "1619": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1620": {
      "op": "intc 4 // 448"
    },
    "1622": {
      "op": "getbit"
    },
    "1623": {
      "op": "bytec 16 // 0x00"
    },
    "1625": {
      "op": "intc_0 // 0"
    },
    "1626": {
      "op": "uncover 2"
    },
    "1628": {
      "op": "setbit"
    },
    "1629": {
      "op": "intc_0 // 0"
    },
    "1630": {
      "op": "getbit"
    },
    "1631": {
      "op": "bnz pay_principal_bool_false@16"
    },
    "1634": {
      "op": "intc_1 // 1"
    },
    "1635": {
      "block": "pay_principal_bool_merge@17",
      "stack_in": [
        "tmp%0#5",
        "and_result%0#0"
      ],
      "op": "bz pay_principal_else_body@2",
      "defined_out": [],
      "stack_out": [
        "tmp%0#5"
      ]
    },
    "1638": {
      "op": "frame_dig -2"
    },
    "1640": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value",
      "op": "callsub account_total_units_value"
    },
    "1643": {
      "op": "dup"
    },
    "1644": {
      "op": "global CurrentApplicationAddress"
    },
    "1646": {
      "op": "intc_0 // 0"
    },
    "1647": {
      "op": "bytec 6 // \"settlement_asset_id\""
    },
    "1649": {
      "op": "app_global_get_ex"
    },
    "1650": {
      "error": "check self.settlement_asset_id exists",
      "op": "assert // check self.settlement_asset_id exists"
    },
    "1651": {
      "op": "asset_holding_get AssetBalance"
    },
    "1653": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "1654": {
      "op": "dig 1"
    },
    "1656": {
      "op": ">="
    },
    "1657": {
      "error": "Not enough funds for the payment",
      "op": "assert // Not enough funds for the payment"
    },
    "1658": {
      "op": "frame_dig 0"
    },
    "1660": {
      "op": "box_get"
    },
    "1661": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1662": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds"
    },
    "1665": {
      "op": "itxn_begin"
    },
    "1666": {
      "op": "global MinTxnFee"
    },
    "1668": {
      "op": "intc_0 // 0"
    },
    "1669": {
      "op": "bytec 6 // \"settlement_asset_id\""
    },
    "1671": {
      "op": "app_global_get_ex"
    },
    "1672": {
      "error": "check self.settlement_asset_id exists",
      "op": "assert // check self.settlement_asset_id exists"
    },
    "1673": {
      "op": "uncover 3"
    },
    "1675": {
      "op": "itxn_field AssetAmount"
    },
    "1677": {
      "op": "uncover 2"
    },
    "1679": {
      "op": "itxn_field AssetReceiver"
    },
    "1681": {
      "op": "itxn_field XferAsset"
    },
    "1683": {
      "op": "intc_3 // axfer"
    },
    "1684": {
      "op": "itxn_field TypeEnum"
    },
    "1686": {
      "op": "itxn_field Fee"
    },
    "1688": {
      "op": "itxn_submit"
    },
    "1689": {
      "block": "pay_principal_after_if_else@3",
      "stack_in": [
        "tmp%0#5",
        "payment_amount#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "0"
      ]
    },
    "1690": {
      "op": "bytec_1 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "1691": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1692": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "maybe_value%0#1"
      ]
    },
    "1693": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "maybe_value%0#1",
        "tmp%0#5"
      ]
    },
    "1695": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "maybe_value%0#1",
        "tmp%0#5 (copy)",
        "tmp%0#5 (copy)"
      ]
    },
    "1696": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "maybe_value%0#1",
        "tmp%0#5 (copy)"
      ]
    },
    "1698": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#1",
        "maybe_value%1#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "maybe_value%0#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1699": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "maybe_value%0#1",
        "maybe_value%1#0"
      ]
    },
    "1700": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "maybe_value%0#1",
        "maybe_value%1#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "maybe_value%0#1",
        "maybe_value%1#0",
        "32"
      ]
    },
    "1701": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%0#5",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "maybe_value%0#1",
        "tmp%2#1"
      ]
    },
    "1702": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "new_state_value%0#0"
      ]
    },
    "1703": {
      "op": "bytec_1 // \"circulating_units\"",
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "new_state_value%0#0",
        "\"circulating_units\""
      ]
    },
    "1704": {
      "op": "swap",
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "\"circulating_units\"",
        "new_state_value%0#0"
      ]
    },
    "1705": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5"
      ]
    },
    "1706": {
      "op": "dup",
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ]
    },
    "1707": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1708": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "maybe_value%2#0"
      ]
    },
    "1709": {
      "op": "bytec 5 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "maybe_value%2#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "maybe_value%2#0",
        "0x0000000000000000"
      ]
    },
    "1711": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%0#5",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0",
        "tmp%0#5",
        "updated_data%0#0"
      ]
    },
    "1713": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0"
      ]
    },
    "1714": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units",
      "op": "callsub end_if_no_circulating_units",
      "defined_out": [
        "payment_amount#0",
        "tmp%0#5"
      ]
    },
    "1717": {
      "op": "itob",
      "defined_out": [
        "tmp%0#5",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#5",
        "val_as_bytes%0#0"
      ]
    },
    "1718": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#5",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#5",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "1720": {
      "op": "itob",
      "defined_out": [
        "tmp%0#5",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#5",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1721": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1722": {
      "op": "pushbytes 0x0012",
      "defined_out": [
        "0x0012",
        "encoded_tuple_buffer%2#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "encoded_tuple_buffer%2#0",
        "0x0012"
      ]
    },
    "1726": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1727": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "payment_info#0 (copy)",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "encoded_tuple_buffer%3#0",
        "payment_info#0 (copy)"
      ]
    },
    "1729": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "tmp%0#5",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1730": {
      "op": "swap"
    },
    "1731": {
      "retsub": true,
      "op": "retsub"
    },
    "1732": {
      "block": "pay_principal_else_body@2",
      "stack_in": [
        "tmp%0#5"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "payment_amount#0"
      ],
      "stack_out": [
        "tmp%0#5",
        "payment_amount#0"
      ]
    },
    "1733": {
      "op": "b pay_principal_after_if_else@3"
    },
    "1736": {
      "block": "pay_principal_bool_false@16",
      "stack_in": [
        "tmp%0#5"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#5",
        "and_result%0#0"
      ]
    },
    "1737": {
      "op": "b pay_principal_bool_merge@17"
    },
    "1740": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.get_account_units_current_value",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "bytes"
      },
      "block": "get_account_units_current_value",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1743": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "1744": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0"
      ]
    },
    "1746": {
      "op": "dupn 6",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1748": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "0"
      ]
    },
    "1749": {
      "op": "bytec 8 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "1751": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1752": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_value%0#0"
      ]
    },
    "1753": {
      "op": "bz get_account_units_current_value_bool_false@3",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1756": {
      "op": "global LatestTimestamp"
    },
    "1758": {
      "op": "intc_0 // 0"
    },
    "1759": {
      "op": "bytec 8 // \"primary_distribution_opening_date\""
    },
    "1761": {
      "op": "app_global_get_ex"
    },
    "1762": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists"
    },
    "1763": {
      "op": ">="
    },
    "1764": {
      "op": "bz get_account_units_current_value_bool_false@3"
    },
    "1767": {
      "op": "intc_1 // 1"
    },
    "1768": {
      "block": "get_account_units_current_value_bool_merge@4",
      "stack_in": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "and_result%0#0"
      ],
      "error": "Primary distribution not yet executed",
      "op": "assert // Primary distribution not yet executed",
      "defined_out": [],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1769": {
      "op": "bytec_2 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "0x52333023"
      ]
    },
    "1770": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1772": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%0#2"
      ]
    },
    "1773": {
      "op": "dup",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "1774": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%0#2"
      ]
    },
    "1776": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1777": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_exists%0#0"
      ]
    },
    "1779": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1780": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#2",
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "units#0 (copy)"
      ]
    },
    "1782": {
      "op": "bytec 5 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "tmp%0#2",
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "units#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "1784": {
      "op": "b>",
      "defined_out": [
        "tmp%0#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%3#0"
      ]
    },
    "1785": {
      "op": "bz get_account_units_current_value_bool_false@7",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1788": {
      "op": "frame_dig 0"
    },
    "1790": {
      "op": "box_get"
    },
    "1791": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists"
    },
    "1792": {
      "op": "intc_2 // 32"
    },
    "1793": {
      "op": "extract_uint64"
    },
    "1794": {
      "op": "itob"
    },
    "1795": {
      "op": "frame_dig -1"
    },
    "1797": {
      "op": "b>="
    },
    "1798": {
      "op": "bz get_account_units_current_value_bool_false@7"
    },
    "1801": {
      "op": "intc_1 // 1"
    },
    "1802": {
      "block": "get_account_units_current_value_bool_merge@8",
      "stack_in": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "and_result%1#0"
      ],
      "error": "Invalid amount of units for the account",
      "op": "assert // Invalid amount of units for the account",
      "defined_out": [],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1803": {
      "op": "frame_dig -1",
      "defined_out": [
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "units#0 (copy)"
      ]
    },
    "1805": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "1806": {
      "op": "dup",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "1807": {
      "op": "frame_bury 7",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "1809": {
      "op": "frame_dig -2",
      "defined_out": [
        "holding_address#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%9#0",
        "holding_address#0 (copy)"
      ]
    },
    "1811": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "holding_address#0 (copy)",
        "tmp%9#0"
      ]
    },
    "1812": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "op": "callsub account_units_value",
      "defined_out": [
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0"
      ]
    },
    "1815": {
      "op": "dup",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "account_units_nominal_value#0"
      ]
    },
    "1816": {
      "op": "frame_bury 2",
      "defined_out": [
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0"
      ]
    },
    "1818": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "0"
      ]
    },
    "1819": {
      "op": "bytec 12 // \"principal_discount\"",
      "defined_out": [
        "\"principal_discount\"",
        "0",
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "0",
        "\"principal_discount\""
      ]
    },
    "1821": {
      "op": "app_global_get_ex",
      "defined_out": [
        "account_units_nominal_value#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1822": {
      "error": "check self.principal_discount exists",
      "op": "assert // check self.principal_discount exists",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "maybe_value%3#0"
      ]
    },
    "1823": {
      "op": "dig 1",
      "defined_out": [
        "account_units_nominal_value#0",
        "account_units_nominal_value#0 (copy)",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "maybe_value%3#0",
        "account_units_nominal_value#0 (copy)"
      ]
    },
    "1825": {
      "op": "*",
      "defined_out": [
        "account_units_nominal_value#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "tmp%10#0"
      ]
    },
    "1826": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "account_units_nominal_value#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "tmp%10#0",
        "10000"
      ]
    },
    "1829": {
      "op": "/",
      "defined_out": [
        "account_units_discount#0",
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_nominal_value#0",
        "account_units_discount#0"
      ]
    },
    "1830": {
      "op": "-",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_current_value#0"
      ]
    },
    "1831": {
      "op": "frame_bury 1",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1833": {
      "op": "intc_0 // 0",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "accrued_interest#0"
      ]
    },
    "1834": {
      "op": "frame_bury 3",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1836": {
      "op": "intc_0 // 0",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "numerator#0"
      ]
    },
    "1837": {
      "op": "frame_bury 6",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1839": {
      "op": "intc_0 // 0",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "denominator#0"
      ]
    },
    "1840": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1842": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "0"
      ]
    },
    "1843": {
      "op": "bytec 7 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "1845": {
      "op": "app_global_get_ex",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "denominator#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1846": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_value%0#0"
      ]
    },
    "1847": {
      "op": "global LatestTimestamp"
    },
    "1849": {
      "op": "dup",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "maybe_value%0#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_value%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1850": {
      "op": "frame_bury 4",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "maybe_value%0#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "maybe_value%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1852": {
      "op": "<=",
      "defined_out": [
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%0#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%0#1"
      ]
    },
    "1853": {
      "op": "bz get_account_units_current_value_bool_false@16",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1856": {
      "op": "intc_0 // 0"
    },
    "1857": {
      "op": "bytec 4 // \"maturity_date\""
    },
    "1859": {
      "op": "app_global_get_ex"
    },
    "1860": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists"
    },
    "1861": {
      "op": "frame_dig 4"
    },
    "1863": {
      "op": ">"
    },
    "1864": {
      "op": "bz get_account_units_current_value_bool_false@16"
    },
    "1867": {
      "op": "intc_1 // 1"
    },
    "1868": {
      "block": "get_account_units_current_value_bool_merge@17",
      "stack_in": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "and_result%0#0"
      ],
      "op": "bz get_account_units_current_value_after_if_else@10",
      "defined_out": [],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1871": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.day_count_factor",
      "op": "callsub day_count_factor"
    },
    "1874": {
      "op": "frame_dig -2"
    },
    "1876": {
      "op": "frame_dig 7"
    },
    "1878": {
      "callsub": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.accrued_interest_amount",
      "op": "callsub accrued_interest_amount"
    },
    "1881": {
      "op": "frame_bury 3"
    },
    "1883": {
      "op": "dup"
    },
    "1884": {
      "op": "intc_0 // 0"
    },
    "1885": {
      "op": "extract_uint64"
    },
    "1886": {
      "op": "frame_bury 6"
    },
    "1888": {
      "op": "pushint 8 // 8"
    },
    "1890": {
      "op": "extract_uint64"
    },
    "1891": {
      "op": "frame_bury 5"
    },
    "1893": {
      "block": "get_account_units_current_value_after_if_else@10",
      "stack_in": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%15#0"
      ]
    },
    "1895": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%15#0",
        "0"
      ]
    },
    "1896": {
      "op": "bytec 4 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%15#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "1898": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%15#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1899": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%15#0",
        "maybe_value%4#0"
      ]
    },
    "1900": {
      "op": ">=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "tmp%16#0"
      ]
    },
    "1901": {
      "op": "bz get_account_units_current_value_after_if_else@12",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ]
    },
    "1904": {
      "op": "frame_dig 2"
    },
    "1906": {
      "op": "frame_bury 1"
    },
    "1908": {
      "block": "get_account_units_current_value_after_if_else@12",
      "stack_in": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "account_units_current_value#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "account_units_current_value#0"
      ]
    },
    "1910": {
      "op": "itob",
      "defined_out": [
        "account_units_current_value#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "1911": {
      "op": "frame_dig 3",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "accrued_interest#0"
      ]
    },
    "1913": {
      "op": "itob",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1914": {
      "op": "frame_dig 6",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "numerator#0"
      ]
    },
    "1916": {
      "op": "itob",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1917": {
      "op": "frame_dig 5",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "denominator#0"
      ]
    },
    "1919": {
      "op": "itob",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "1920": {
      "op": "concat",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "encoded_tuple_buffer%2#0",
        "numerator#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1921": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1923": {
      "op": "concat",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "numerator#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1924": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1925": {
      "op": "concat",
      "defined_out": [
        "account_units_current_value#0",
        "accrued_interest#0",
        "denominator#0",
        "encoded_tuple_buffer%6#0",
        "numerator#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1926": {
      "op": "frame_bury 0"
    },
    "1928": {
      "retsub": true,
      "op": "retsub"
    },
    "1929": {
      "block": "get_account_units_current_value_bool_false@16",
      "stack_in": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "and_result%0#0"
      ]
    },
    "1930": {
      "op": "b get_account_units_current_value_bool_merge@17"
    },
    "1933": {
      "block": "get_account_units_current_value_bool_false@7",
      "stack_in": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "and_result%1#0"
      ]
    },
    "1934": {
      "op": "b get_account_units_current_value_bool_merge@8"
    },
    "1937": {
      "block": "get_account_units_current_value_bool_false@3",
      "stack_in": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "account_units_current_value#0",
        "account_units_nominal_value#0",
        "accrued_interest#0",
        "awst_tmp%0#0",
        "denominator#0",
        "numerator#0",
        "tmp%9#0",
        "and_result%0#0"
      ]
    },
    "1938": {
      "op": "b get_account_units_current_value_bool_merge@4"
    },
    "1941": {
      "subroutine": "smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.get_payment_amount",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "get_payment_amount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1944": {
      "op": "bytec_2 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1945": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1947": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1948": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1949": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1951": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": []
    },
    "1952": {
      "op": "intc_0 // 0"
    },
    "1953": {
      "op": "dup"
    },
    "1954": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0",
        "principal_amount#0"
      ],
      "stack_out": [
        "principal_amount#0",
        "0",
        "\"status\""
      ]
    },
    "1955": {
      "op": "app_global_get_ex",
      "stack_out": [
        "principal_amount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1956": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "principal_amount#0",
        "maybe_value%0#0"
      ]
    },
    "1957": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#0",
        "principal_amount#0"
      ],
      "stack_out": [
        "principal_amount#0",
        "maybe_value%0#0",
        "100"
      ]
    },
    "1959": {
      "op": "==",
      "defined_out": [
        "principal_amount#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "principal_amount#0",
        "tmp%0#2"
      ]
    },
    "1960": {
      "op": "bz get_payment_amount_after_if_else@2",
      "stack_out": [
        "principal_amount#0"
      ]
    },
    "1963": {
      "op": "frame_dig -1"
    },
    "1965": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value",
      "op": "callsub account_total_units_value"
    },
    "1968": {
      "op": "frame_bury 0"
    },
    "1970": {
      "block": "get_payment_amount_after_if_else@2",
      "stack_in": [
        "principal_amount#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "principal_amount#0"
      ],
      "stack_out": [
        "principal_amount#0",
        "principal_amount#0"
      ]
    },
    "1972": {
      "op": "itob",
      "defined_out": [
        "principal_amount#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "principal_amount#0",
        "val_as_bytes%0#0"
      ]
    },
    "1973": {
      "op": "bytec 5 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "principal_amount#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "principal_amount#0",
        "val_as_bytes%0#0",
        "0x0000000000000000"
      ]
    },
    "1975": {
      "op": "swap",
      "stack_out": [
        "principal_amount#0",
        "0x0000000000000000",
        "val_as_bytes%0#0"
      ]
    },
    "1976": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "principal_amount#0"
      ],
      "stack_out": [
        "principal_amount#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1977": {
      "op": "swap"
    },
    "1978": {
      "retsub": true,
      "op": "retsub"
    },
    "1979": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "params": {},
      "block": "assert_is_not_defaulted",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1980": {
      "op": "bytec 22 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"defaulted\""
      ]
    },
    "1982": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1983": {
      "error": "check self.defaulted exists",
      "op": "assert // check self.defaulted exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1984": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1985": {
      "error": "Defaulted",
      "op": "assert // Defaulted",
      "stack_out": []
    },
    "1986": {
      "retsub": true,
      "op": "retsub"
    },
    "1987": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "params": {},
      "block": "assert_is_not_suspended",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1988": {
      "op": "bytec 21 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"suspended\""
      ]
    },
    "1990": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1991": {
      "error": "check self.suspended exists",
      "op": "assert // check self.suspended exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1992": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1993": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": []
    },
    "1994": {
      "retsub": true,
      "op": "retsub"
    },
    "1995": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "params": {},
      "block": "assert_caller_is_arranger",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1997": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1998": {
      "op": "bytec 17 // 0x52323023",
      "defined_out": [
        "0",
        "0x52323023",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x52323023"
      ]
    },
    "2000": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2001": {
      "error": "check self.arranger exists",
      "op": "assert // check self.arranger exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2002": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2003": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "2004": {
      "retsub": true,
      "op": "retsub"
    },
    "2005": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "params": {},
      "block": "assert_caller_is_account_manager",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2008": {
      "op": "intc_0 // 0"
    },
    "2009": {
      "op": "bytec 24 // 0x52343023"
    },
    "2011": {
      "op": "txn Sender",
      "defined_out": [
        "0x52343023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52343023",
        "caller#0"
      ]
    },
    "2013": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2014": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2015": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2016": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2018": {
      "op": "bz assert_caller_is_account_manager_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2021": {
      "op": "frame_dig 1"
    },
    "2023": {
      "op": "box_get"
    },
    "2024": {
      "error": "check self.account_manager entry exists",
      "op": "assert // check self.account_manager entry exists"
    },
    "2025": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "2028": {
      "op": "global LatestTimestamp"
    },
    "2030": {
      "op": "itob"
    },
    "2031": {
      "op": "dup"
    },
    "2032": {
      "op": "frame_bury 0"
    },
    "2034": {
      "op": "b<="
    },
    "2035": {
      "op": "bz assert_caller_is_account_manager_bool_false@4"
    },
    "2038": {
      "op": "frame_dig 1"
    },
    "2040": {
      "op": "box_get"
    },
    "2041": {
      "error": "check self.account_manager entry exists",
      "op": "assert // check self.account_manager entry exists"
    },
    "2042": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "2045": {
      "op": "frame_dig 0"
    },
    "2047": {
      "op": "b>="
    },
    "2048": {
      "op": "bz assert_caller_is_account_manager_bool_false@4"
    },
    "2051": {
      "op": "intc_1 // 1"
    },
    "2052": {
      "block": "assert_caller_is_account_manager_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2053": {
      "retsub": true,
      "op": "retsub"
    },
    "2054": {
      "block": "assert_caller_is_account_manager_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2055": {
      "op": "b assert_caller_is_account_manager_bool_merge@5"
    },
    "2058": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "params": {},
      "block": "assert_caller_is_authority",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2061": {
      "op": "intc_0 // 0"
    },
    "2062": {
      "op": "bytec 25 // 0x52373023"
    },
    "2064": {
      "op": "txn Sender",
      "defined_out": [
        "0x52373023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52373023",
        "caller#0"
      ]
    },
    "2066": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2067": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2068": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2069": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2071": {
      "op": "bz assert_caller_is_authority_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2074": {
      "op": "frame_dig 1"
    },
    "2076": {
      "op": "box_get"
    },
    "2077": {
      "error": "check self.authority entry exists",
      "op": "assert // check self.authority entry exists"
    },
    "2078": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "2081": {
      "op": "global LatestTimestamp"
    },
    "2083": {
      "op": "itob"
    },
    "2084": {
      "op": "dup"
    },
    "2085": {
      "op": "frame_bury 0"
    },
    "2087": {
      "op": "b<="
    },
    "2088": {
      "op": "bz assert_caller_is_authority_bool_false@4"
    },
    "2091": {
      "op": "frame_dig 1"
    },
    "2093": {
      "op": "box_get"
    },
    "2094": {
      "error": "check self.authority entry exists",
      "op": "assert // check self.authority entry exists"
    },
    "2095": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "2098": {
      "op": "frame_dig 0"
    },
    "2100": {
      "op": "b>="
    },
    "2101": {
      "op": "bz assert_caller_is_authority_bool_false@4"
    },
    "2104": {
      "op": "intc_1 // 1"
    },
    "2105": {
      "block": "assert_caller_is_authority_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2106": {
      "retsub": true,
      "op": "retsub"
    },
    "2107": {
      "block": "assert_caller_is_authority_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2108": {
      "op": "b assert_caller_is_authority_bool_merge@5"
    },
    "2111": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "params": {
        "time_events#0": "bytes"
      },
      "block": "assert_time_events_sorted",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2114": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "time_f#0"
      ]
    },
    "2116": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0"
      ]
    },
    "2117": {
      "op": "frame_dig -1",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "time_events#0 (copy)"
      ]
    },
    "2119": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2122": {
      "op": "frame_dig -1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ]
    },
    "2124": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)",
        "2"
      ]
    },
    "2126": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ]
    },
    "2127": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2129": {
      "op": ">",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ]
    },
    "2130": {
      "error": "Time events must be set in the future",
      "op": "assert // Time events must be set in the future",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2131": {
      "op": "frame_dig -1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ]
    },
    "2133": {
      "op": "intc_0 // 0",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "2134": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ]
    },
    "2135": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%4#0",
        "1"
      ]
    },
    "2136": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ]
    },
    "2137": {
      "op": "intc_0 // 0",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "2138": {
      "block": "assert_time_events_sorted_for_header@1",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "_t#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0"
      ]
    },
    "2140": {
      "op": "frame_dig 3",
      "defined_out": [
        "_t#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "tmp%5#0"
      ]
    },
    "2142": {
      "op": "<",
      "defined_out": [
        "_t#0",
        "continue_looping%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "continue_looping%0#0"
      ]
    },
    "2143": {
      "op": "bz assert_time_events_sorted_after_for@6",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "2146": {
      "block": "assert_time_events_sorted_while_top@8",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ],
      "op": "pushint 75 // 75"
    },
    "2148": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "75",
        "tmp%0#1"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "75",
        "tmp%0#1"
      ]
    },
    "2150": {
      "op": ">",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "tmp%1#1"
      ]
    },
    "2151": {
      "op": "bz assert_time_events_sorted_after_while@13",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "2154": {
      "op": "itxn_begin"
    },
    "2155": {
      "op": "pushint 6 // appl"
    },
    "2157": {
      "op": "itxn_field TypeEnum"
    },
    "2159": {
      "op": "pushint 5 // DeleteApplication"
    },
    "2161": {
      "op": "itxn_field OnCompletion"
    },
    "2163": {
      "op": "bytec 29 // 0x068101"
    },
    "2165": {
      "op": "itxn_field ApprovalProgram"
    },
    "2167": {
      "op": "bytec 29 // 0x068101"
    },
    "2169": {
      "op": "itxn_field ClearStateProgram"
    },
    "2171": {
      "op": "global MinTxnFee"
    },
    "2173": {
      "op": "itxn_field Fee"
    },
    "2175": {
      "op": "itxn_submit"
    },
    "2176": {
      "op": "b assert_time_events_sorted_while_top@8"
    },
    "2179": {
      "block": "assert_time_events_sorted_after_while@13",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "_t#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0"
      ]
    },
    "2181": {
      "op": "dup",
      "defined_out": [
        "_t#0",
        "_t#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "_t#0 (copy)"
      ]
    },
    "2182": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "_t#0",
        "_t#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "_t#0 (copy)",
        "8"
      ]
    },
    "2184": {
      "op": "*",
      "defined_out": [
        "_t#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "item_offset%1#0"
      ]
    },
    "2185": {
      "op": "frame_dig 2",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "item_offset%1#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2187": {
      "op": "dup",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "item_offset%1#0",
        "array_head_and_tail%0#0 (copy)",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "2188": {
      "op": "cover 3",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "item_offset%1#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "2190": {
      "op": "swap",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%1#0"
      ]
    },
    "2191": {
      "op": "extract_uint64",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "time_i#0"
      ]
    },
    "2192": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "time_i#0",
        "time_i#0 (copy)"
      ]
    },
    "2193": {
      "op": "cover 3",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "time_i#0"
      ]
    },
    "2195": {
      "op": "frame_bury 1",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "2197": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "1"
      ]
    },
    "2198": {
      "op": "+",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "2199": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "_t#0"
      ]
    },
    "2200": {
      "op": "frame_bury 4",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "2202": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "8"
      ]
    },
    "2204": {
      "op": "*",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%2#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "item_offset%2#0"
      ]
    },
    "2205": {
      "op": "extract_uint64",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "time_f#0"
      ]
    },
    "2206": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "time_f#0",
        "time_f#0"
      ]
    },
    "2207": {
      "op": "frame_bury 0",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "time_f#0"
      ]
    },
    "2209": {
      "op": "<",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "tmp%9#0"
      ]
    },
    "2210": {
      "error": "Time events must be sorted in strictly ascending order",
      "op": "assert // Time events must be sorted in strictly ascending order",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "2211": {
      "op": "intc_0 // 0",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "0"
      ]
    },
    "2212": {
      "op": "bytec 10 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "2214": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "time_f#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2215": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "maybe_value%0#0"
      ]
    },
    "2216": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "_t#0",
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "time_f#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "maybe_value%0#0",
        "255"
      ]
    },
    "2219": {
      "op": "!=",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "tmp%10#0"
      ]
    },
    "2220": {
      "op": "bz assert_time_events_sorted_for_header@1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "2223": {
      "op": "frame_dig 0"
    },
    "2225": {
      "op": "frame_dig 1"
    },
    "2227": {
      "op": "-"
    },
    "2228": {
      "op": "intc 5 // 86400"
    },
    "2230": {
      "op": "%"
    },
    "2231": {
      "op": "!"
    },
    "2232": {
      "error": "Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)",
      "op": "assert // Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)"
    },
    "2233": {
      "op": "b assert_time_events_sorted_for_header@1"
    },
    "2236": {
      "block": "assert_time_events_sorted_after_for@6",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_events#0 (copy)"
      ]
    },
    "2238": {
      "op": "frame_bury 0"
    },
    "2240": {
      "retsub": true,
      "op": "retsub"
    },
    "2241": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "uint64"
      },
      "block": "account_units_value",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2244": {
      "op": "bytec_2 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2245": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2247": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2248": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2249": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2250": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "40"
      ]
    },
    "2252": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2253": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%2#0",
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "units#0 (copy)"
      ]
    },
    "2255": {
      "op": "*",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2256": {
      "retsub": true,
      "op": "retsub"
    },
    "2257": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "account_total_units_value",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2260": {
      "op": "bytec_2 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2261": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2263": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2264": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2265": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2266": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "32"
      ]
    },
    "2267": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2268": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "holding_address#0 (copy)"
      ]
    },
    "2270": {
      "op": "swap",
      "stack_out": [
        "holding_address#0 (copy)",
        "tmp%2#0"
      ]
    },
    "2271": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value",
      "op": "callsub account_units_value",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2274": {
      "retsub": true,
      "op": "retsub"
    },
    "2275": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units",
      "params": {},
      "block": "end_if_no_circulating_units",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2276": {
      "op": "bytec_1 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_units\""
      ]
    },
    "2277": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2278": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2279": {
      "op": "bnz end_if_no_circulating_units_after_if_else@2",
      "stack_out": []
    },
    "2282": {
      "op": "bytec_3 // \"status\""
    },
    "2283": {
      "op": "intc 6 // 200"
    },
    "2285": {
      "op": "app_global_put"
    },
    "2286": {
      "block": "end_if_no_circulating_units_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2287": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_create",
      "params": {
        "arranger#0": "bytes",
        "metadata#0": "bytes"
      },
      "block": "asset_create",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2290": {
      "op": "bytec 17 // 0x52323023",
      "defined_out": [
        "0x52323023"
      ],
      "stack_out": [
        "0x52323023"
      ]
    },
    "2292": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52323023",
        "arranger#0 (copy)"
      ],
      "stack_out": [
        "0x52323023",
        "arranger#0 (copy)"
      ]
    },
    "2294": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2295": {
      "op": "bytec 19 // \"metadata\"",
      "defined_out": [
        "\"metadata\""
      ],
      "stack_out": [
        "\"metadata\""
      ]
    },
    "2297": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"metadata\"",
        "metadata#0 (copy)"
      ],
      "stack_out": [
        "\"metadata\"",
        "metadata#0 (copy)"
      ]
    },
    "2299": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2300": {
      "retsub": true,
      "op": "retsub"
    },
    "2301": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_update",
      "params": {
        "metadata#0": "bytes"
      },
      "block": "asset_update",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2304": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "2307": {
      "op": "bytec 19 // \"metadata\"",
      "defined_out": [
        "\"metadata\""
      ],
      "stack_out": [
        "\"metadata\""
      ]
    },
    "2309": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"metadata\"",
        "metadata#0 (copy)"
      ],
      "stack_out": [
        "\"metadata\"",
        "metadata#0 (copy)"
      ]
    },
    "2311": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2312": {
      "retsub": true,
      "op": "retsub"
    },
    "2313": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_config",
      "params": {
        "denomination_asset_id#0": "bytes",
        "settlement_asset_id#0": "bytes",
        "principal#0": "bytes",
        "principal_discount#0": "bytes",
        "minimum_denomination#0": "bytes",
        "day_count_convention#0": "bytes",
        "interest_rate#0": "bytes",
        "coupon_rates#0": "bytes",
        "time_events#0": "bytes",
        "time_periods#0": "bytes"
      },
      "block": "asset_config",
      "stack_in": [],
      "op": "proto 10 0"
    },
    "2316": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "2317": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1"
      ]
    },
    "2319": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1"
      ]
    },
    "2320": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "2323": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "0"
      ]
    },
    "2324": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "0",
        "\"status\""
      ]
    },
    "2325": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2326": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "maybe_value%0#0"
      ]
    },
    "2327": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "tmp%0#0"
      ]
    },
    "2328": {
      "error": "D-ASA already configured",
      "op": "assert // D-ASA already configured",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1"
      ]
    },
    "2329": {
      "op": "frame_dig -10",
      "defined_out": [
        "denomination_asset_id#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#0 (copy)"
      ]
    },
    "2331": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2332": {
      "op": "dup",
      "defined_out": [
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "denomination_asset_id#1"
      ]
    },
    "2333": {
      "op": "bz asset_config_bool_false@4",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2336": {
      "op": "frame_dig 3"
    },
    "2338": {
      "op": "asset_params_get AssetCreator"
    },
    "2340": {
      "error": "asset exists",
      "op": "assert // asset exists"
    },
    "2341": {
      "op": "global ZeroAddress"
    },
    "2343": {
      "op": "!="
    },
    "2344": {
      "op": "bz asset_config_bool_false@4"
    },
    "2347": {
      "op": "intc_1 // 1"
    },
    "2348": {
      "block": "asset_config_bool_merge@5",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "and_result%0#0"
      ],
      "error": "Denomination asset is not properly set",
      "op": "assert // Denomination asset is not properly set",
      "defined_out": [],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2349": {
      "op": "bytec 18 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\""
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"denomination_asset_id\""
      ]
    },
    "2351": {
      "op": "frame_dig 3",
      "defined_out": [
        "\"denomination_asset_id\"",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"denomination_asset_id\"",
        "denomination_asset_id#1"
      ]
    },
    "2353": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2354": {
      "op": "frame_dig -9",
      "defined_out": [
        "denomination_asset_id#1",
        "settlement_asset_id#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#0 (copy)"
      ]
    },
    "2356": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ]
    },
    "2357": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "0"
      ]
    },
    "2358": {
      "op": "bytec 18 // \"denomination_asset_id\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "0",
        "\"denomination_asset_id\""
      ]
    },
    "2360": {
      "op": "app_global_get_ex",
      "defined_out": [
        "denomination_asset_id#1",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2361": {
      "error": "check self.denomination_asset_id exists",
      "op": "assert // check self.denomination_asset_id exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "maybe_value%0#0"
      ]
    },
    "2362": {
      "op": "dig 1",
      "defined_out": [
        "denomination_asset_id#1",
        "maybe_value%0#0",
        "settlement_asset_id#1",
        "settlement_asset_id#1 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "maybe_value%0#0",
        "settlement_asset_id#1 (copy)"
      ]
    },
    "2364": {
      "op": "==",
      "defined_out": [
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "tmp%0#0"
      ]
    },
    "2365": {
      "error": "Different settlement asset not supported, must be equal to denomination asset",
      "op": "assert // Different settlement asset not supported, must be equal to denomination asset",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ]
    },
    "2366": {
      "op": "bytec 6 // \"settlement_asset_id\"",
      "defined_out": [
        "\"settlement_asset_id\"",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "\"settlement_asset_id\""
      ]
    },
    "2368": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"settlement_asset_id\"",
        "settlement_asset_id#1"
      ]
    },
    "2369": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2370": {
      "op": "itxn_begin"
    },
    "2371": {
      "op": "global MinTxnFee",
      "defined_out": [
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2373": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "2374": {
      "op": "bytec 6 // \"settlement_asset_id\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0",
        "\"settlement_asset_id\""
      ]
    },
    "2376": {
      "op": "app_global_get_ex",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2377": {
      "error": "check self.settlement_asset_id exists",
      "op": "assert // check self.settlement_asset_id exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "2378": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2380": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2381": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2383": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "2385": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2387": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "axfer"
      ]
    },
    "2388": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "2390": {
      "op": "itxn_field Fee",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2392": {
      "op": "itxn_submit"
    },
    "2393": {
      "op": "frame_dig -8",
      "defined_out": [
        "denomination_asset_id#1",
        "principal#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "principal#0 (copy)"
      ]
    },
    "2395": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0"
      ]
    },
    "2396": {
      "op": "frame_dig -6",
      "defined_out": [
        "denomination_asset_id#1",
        "minimum_denomination#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "minimum_denomination#0 (copy)"
      ]
    },
    "2398": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2399": {
      "op": "dup2",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%5#0 (copy)",
        "tmp%6#0 (copy)"
      ]
    },
    "2400": {
      "op": "%",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2401": {
      "op": "!",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "2402": {
      "error": "Minimum denomination is not a divisor of principal",
      "op": "assert // Minimum denomination is not a divisor of principal",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2403": {
      "op": "bytec 9 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "\"unit_value\""
      ]
    },
    "2405": {
      "op": "dig 1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "\"unit_value\"",
        "tmp%6#0 (copy)"
      ]
    },
    "2407": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2408": {
      "op": "/",
      "defined_out": [
        "denomination_asset_id#1",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%1#0"
      ]
    },
    "2409": {
      "op": "bytec 11 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "denomination_asset_id#1",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%1#0",
        "\"total_units\""
      ]
    },
    "2411": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"total_units\"",
        "new_state_value%1#0"
      ]
    },
    "2412": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2413": {
      "op": "frame_dig -7",
      "defined_out": [
        "denomination_asset_id#1",
        "principal_discount#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "principal_discount#0 (copy)"
      ]
    },
    "2415": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%2#0"
      ]
    },
    "2416": {
      "op": "bytec 12 // \"principal_discount\"",
      "defined_out": [
        "\"principal_discount\"",
        "denomination_asset_id#1",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%2#0",
        "\"principal_discount\""
      ]
    },
    "2418": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"principal_discount\"",
        "new_state_value%2#0"
      ]
    },
    "2419": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2420": {
      "op": "frame_dig -5",
      "defined_out": [
        "day_count_convention#0 (copy)",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#0 (copy)"
      ]
    },
    "2422": {
      "op": "btoi",
      "defined_out": [
        "day_count_convention#1",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#1"
      ]
    },
    "2423": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#1",
        "day_count_convention#1"
      ]
    },
    "2424": {
      "op": "frame_bury 1",
      "defined_out": [
        "day_count_convention#1",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#1"
      ]
    },
    "2426": {
      "op": "bz asset_config_bool_true@15",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2429": {
      "op": "frame_dig 1"
    },
    "2431": {
      "op": "pushint 255 // 255"
    },
    "2434": {
      "op": "=="
    },
    "2435": {
      "op": "bz asset_config_bool_false@16"
    },
    "2438": {
      "block": "asset_config_bool_true@15",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "or_result%0#0"
      ]
    },
    "2439": {
      "block": "asset_config_bool_merge@17",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "or_result%0#0"
      ],
      "error": "Invalid day-count convention ID",
      "op": "assert // Invalid day-count convention ID",
      "defined_out": [],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2440": {
      "op": "bytec 10 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\""
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"day_count_convention\""
      ]
    },
    "2442": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"day_count_convention\"",
        "day_count_convention#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"day_count_convention\"",
        "day_count_convention#1"
      ]
    },
    "2444": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2445": {
      "op": "frame_dig -4",
      "defined_out": [
        "day_count_convention#1",
        "interest_rate#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#0 (copy)"
      ]
    },
    "2447": {
      "op": "btoi",
      "defined_out": [
        "day_count_convention#1",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#1"
      ]
    },
    "2448": {
      "op": "dup",
      "defined_out": [
        "day_count_convention#1",
        "interest_rate#1",
        "interest_rate#1 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#1",
        "interest_rate#1 (copy)"
      ]
    },
    "2449": {
      "op": "!",
      "defined_out": [
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#1",
        "tmp%0#0"
      ]
    },
    "2450": {
      "error": "Interest rate is not properly defined",
      "op": "assert // Interest rate is not properly defined",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#1"
      ]
    },
    "2451": {
      "op": "bytec 23 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "day_count_convention#1",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#1",
        "\"interest_rate\""
      ]
    },
    "2453": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"interest_rate\"",
        "interest_rate#1"
      ]
    },
    "2454": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2455": {
      "op": "frame_dig -3",
      "defined_out": [
        "coupon_rates#0 (copy)",
        "day_count_convention#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "coupon_rates#0 (copy)"
      ]
    },
    "2457": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "coupon_rates#0 (copy)",
        "day_count_convention#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "coupon_rates#0 (copy)",
        "0"
      ]
    },
    "2458": {
      "op": "extract_uint16",
      "defined_out": [
        "day_count_convention#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "2459": {
      "op": "dup",
      "defined_out": [
        "day_count_convention#1",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ]
    },
    "2460": {
      "op": "!",
      "defined_out": [
        "day_count_convention#1",
        "tmp%0#5",
        "tmp%1#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "tmp%1#2"
      ]
    },
    "2461": {
      "error": "Coupon rates are not properly defined",
      "op": "assert // Coupon rates are not properly defined",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "2462": {
      "op": "bytec 13 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\"",
        "day_count_convention#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "\"total_coupons\""
      ]
    },
    "2464": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"total_coupons\"",
        "tmp%0#5"
      ]
    },
    "2465": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2466": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0"
      ]
    },
    "2467": {
      "op": "bytec 13 // \"total_coupons\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0",
        "\"total_coupons\""
      ]
    },
    "2469": {
      "op": "app_global_get_ex",
      "defined_out": [
        "day_count_convention#1",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2470": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "maybe_value%0#0"
      ]
    },
    "2471": {
      "op": "bz asset_config_after_if_else@29",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2474": {
      "op": "bytec 30 // 0x636f75706f6e5261746573"
    },
    "2476": {
      "op": "box_del"
    },
    "2477": {
      "op": "pop"
    },
    "2478": {
      "op": "bytec 30 // 0x636f75706f6e5261746573"
    },
    "2480": {
      "op": "frame_dig -3"
    },
    "2482": {
      "op": "box_put"
    },
    "2483": {
      "block": "asset_config_after_if_else@29",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "2485": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "2486": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "2487": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "0"
      ]
    },
    "2488": {
      "op": "bytec 13 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\"",
        "0",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "0",
        "\"total_coupons\""
      ]
    },
    "2490": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2491": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "maybe_value%0#0"
      ]
    },
    "2492": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "maybe_value%0#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "maybe_value%0#0",
        "4"
      ]
    },
    "2493": {
      "op": "+",
      "defined_out": [
        "tmp%0#5",
        "tmp%1#4"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "tmp%1#4"
      ]
    },
    "2494": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%2#1"
      ]
    },
    "2495": {
      "error": "Time events length is invalid",
      "op": "assert // Time events length is invalid",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2496": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "2498": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "op": "callsub assert_time_events_sorted",
      "defined_out": [
        "time_events#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0"
      ]
    },
    "2501": {
      "op": "frame_bury -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2503": {
      "op": "bytec 26 // 0x74696d654576656e7473",
      "defined_out": [
        "0x74696d654576656e7473"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x74696d654576656e7473"
      ]
    },
    "2505": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "{box_del}"
      ]
    },
    "2506": {
      "op": "pop",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2507": {
      "op": "bytec 26 // 0x74696d654576656e7473",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x74696d654576656e7473"
      ]
    },
    "2509": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x74696d654576656e7473",
        "time_events#0 (copy)"
      ]
    },
    "2511": {
      "op": "box_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2512": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "2514": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0"
      ]
    },
    "2517": {
      "op": "frame_bury 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2519": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "2521": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "2"
      ]
    },
    "2523": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%0#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%0#2"
      ]
    },
    "2524": {
      "op": "bytec 8 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%0#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%0#2",
        "\"primary_distribution_opening_date\""
      ]
    },
    "2526": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"primary_distribution_opening_date\"",
        "new_state_value%0#2"
      ]
    },
    "2527": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2528": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "2530": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "10"
      ]
    },
    "2532": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%1#0"
      ]
    },
    "2533": {
      "op": "bytec 20 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%1#0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "2535": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"primary_distribution_closure_date\"",
        "new_state_value%1#0"
      ]
    },
    "2536": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2537": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "2539": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "18"
      ]
    },
    "2541": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%2#0"
      ]
    },
    "2542": {
      "op": "bytec 7 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "new_state_value%2#0",
        "\"issuance_date\""
      ]
    },
    "2544": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"issuance_date\"",
        "new_state_value%2#0"
      ]
    },
    "2545": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2546": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "2548": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "2549": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1"
      ]
    },
    "2550": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "tmp%3#1"
      ]
    },
    "2551": {
      "op": "frame_bury 2",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1"
      ]
    },
    "2553": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "0"
      ]
    },
    "2554": {
      "op": "bytec 13 // \"total_coupons\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "0",
        "\"total_coupons\""
      ]
    },
    "2556": {
      "op": "app_global_get_ex",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2557": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "maybe_value%0#0"
      ]
    },
    "2558": {
      "op": "intc_3 // 4",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "maybe_value%0#0",
        "4"
      ]
    },
    "2559": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "2560": {
      "op": "==",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#1"
      ]
    },
    "2561": {
      "op": "bz asset_config_after_if_else@35",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2564": {
      "op": "frame_dig 2"
    },
    "2566": {
      "op": "intc_1 // 1"
    },
    "2567": {
      "op": "-"
    },
    "2568": {
      "op": "pushint 8 // 8"
    },
    "2570": {
      "op": "*"
    },
    "2571": {
      "op": "frame_dig 0"
    },
    "2573": {
      "op": "swap"
    },
    "2574": {
      "op": "extract_uint64"
    },
    "2575": {
      "op": "bytec 4 // \"maturity_date\""
    },
    "2577": {
      "op": "swap"
    },
    "2578": {
      "op": "app_global_put"
    },
    "2579": {
      "block": "asset_config_after_if_else@35",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "time_periods#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_periods#0 (copy)"
      ]
    },
    "2581": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "time_periods#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_periods#0 (copy)",
        "0"
      ]
    },
    "2582": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "2583": {
      "op": "!",
      "defined_out": [
        "tmp%1#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%1#2"
      ]
    },
    "2584": {
      "error": "Time periods are not properly defined",
      "op": "assert // Time periods are not properly defined",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2585": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"status\""
      ]
    },
    "2586": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "\"status\"",
        "100"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"status\"",
        "100"
      ]
    },
    "2588": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "2589": {
      "retsub": true,
      "op": "retsub"
    },
    "2590": {
      "block": "asset_config_bool_false@16",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "or_result%0#0"
      ]
    },
    "2591": {
      "op": "b asset_config_bool_merge@17"
    },
    "2594": {
      "block": "asset_config_bool_false@4",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "and_result%0#0"
      ]
    },
    "2595": {
      "op": "b asset_config_bool_merge@5"
    },
    "2598": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events",
      "params": {
        "secondary_market_time_events#0": "bytes"
      },
      "block": "set_secondary_time_events",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2601": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "2602": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "2605": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "2606": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0",
        "\"status\""
      ]
    },
    "2607": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2608": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0"
      ]
    },
    "2609": {
      "op": "intc 6 // 200",
      "defined_out": [
        "200",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "200"
      ]
    },
    "2611": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%0#1"
      ]
    },
    "2612": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ]
    },
    "2613": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "2614": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "2617": {
      "op": "frame_dig -1",
      "defined_out": [
        "secondary_market_time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "2619": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#0 (copy)",
        "0"
      ]
    },
    "2620": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ]
    },
    "2621": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2622": {
      "error": "Time events length is invalid",
      "op": "assert // Time events length is invalid",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ]
    },
    "2623": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0",
        "1"
      ]
    },
    "2624": {
      "op": ">",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ]
    },
    "2625": {
      "op": "frame_dig -1",
      "defined_out": [
        "secondary_market_time_events#5",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "secondary_market_time_events#5"
      ]
    },
    "2627": {
      "op": "swap",
      "defined_out": [
        "secondary_market_time_events#5",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%5#0"
      ]
    },
    "2628": {
      "op": "bz set_secondary_time_events_after_if_else@2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "2631": {
      "op": "frame_dig -1"
    },
    "2633": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "op": "callsub assert_time_events_sorted"
    },
    "2636": {
      "op": "dup"
    },
    "2637": {
      "op": "frame_bury -1"
    },
    "2639": {
      "op": "frame_bury 1"
    },
    "2641": {
      "block": "set_secondary_time_events_after_if_else@2",
      "stack_in": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "secondary_market_time_events#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "secondary_market_time_events#0"
      ]
    },
    "2643": {
      "op": "frame_bury -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "2645": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0"
      ]
    },
    "2646": {
      "op": "bytec 7 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0",
        "\"issuance_date\""
      ]
    },
    "2648": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2649": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0"
      ]
    },
    "2650": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "2652": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2655": {
      "op": "frame_bury 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0"
      ]
    },
    "2657": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "2659": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)",
        "2"
      ]
    },
    "2661": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "tmp%7#0"
      ]
    },
    "2662": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "maybe_value%0#0"
      ]
    },
    "2663": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "maybe_value%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2665": {
      "op": "<=",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2666": {
      "error": "Invalid secondary market opening date",
      "op": "assert // Invalid secondary market opening date",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0"
      ]
    },
    "2667": {
      "op": "bytec 14 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "array_head_and_tail%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "\"secondary_market_opening_date\""
      ]
    },
    "2669": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "\"secondary_market_opening_date\"",
        "tmp%7#0"
      ]
    },
    "2670": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "2671": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0"
      ]
    },
    "2672": {
      "op": "bytec 4 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0",
        "\"maturity_date\""
      ]
    },
    "2674": {
      "op": "app_global_get_ex",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2675": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%1#0"
      ]
    },
    "2676": {
      "op": "bz set_secondary_time_events_after_if_else@4",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "2679": {
      "op": "intc_0 // 0"
    },
    "2680": {
      "op": "bytec 4 // \"maturity_date\""
    },
    "2682": {
      "op": "app_global_get_ex"
    },
    "2683": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists"
    },
    "2684": {
      "op": "frame_dig -1"
    },
    "2686": {
      "op": "intc_0 // 0"
    },
    "2687": {
      "op": "extract_uint16"
    },
    "2688": {
      "op": "intc_1 // 1"
    },
    "2689": {
      "op": "-"
    },
    "2690": {
      "op": "pushint 8 // 8"
    },
    "2692": {
      "op": "*"
    },
    "2693": {
      "op": "frame_dig 0"
    },
    "2695": {
      "op": "swap"
    },
    "2696": {
      "op": "extract_uint64"
    },
    "2697": {
      "op": "swap"
    },
    "2698": {
      "op": "dig 1"
    },
    "2700": {
      "op": ">="
    },
    "2701": {
      "error": "Invalid secondary market closure date",
      "op": "assert // Invalid secondary market closure date"
    },
    "2702": {
      "op": "bytec 15 // \"secondary_market_closure_date\""
    },
    "2704": {
      "op": "swap"
    },
    "2705": {
      "op": "app_global_put"
    },
    "2706": {
      "block": "set_secondary_time_events_after_if_else@4",
      "stack_in": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0"
      ]
    },
    "2707": {
      "op": "bytec 14 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0",
        "\"secondary_market_opening_date\""
      ]
    },
    "2709": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2710": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%3#0"
      ]
    },
    "2711": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0"
      ]
    },
    "2712": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "2713": {
      "op": "bytec 15 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "0",
        "\"secondary_market_closure_date\""
      ]
    },
    "2715": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2716": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "maybe_value%4#0"
      ]
    },
    "2717": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2718": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2719": {
      "op": "frame_bury 0"
    },
    "2721": {
      "retsub": true,
      "op": "retsub"
    },
    "2722": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assign_role",
      "params": {
        "role_address#0": "bytes",
        "role#0": "bytes",
        "config#0": "bytes"
      },
      "block": "assign_role",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2725": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "2728": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "2731": {
      "op": "frame_dig -2",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "2733": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2734": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2735": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "20"
      ]
    },
    "2737": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2738": {
      "op": "bnz assign_role_bool_true@6",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2741": {
      "op": "frame_dig 0"
    },
    "2743": {
      "op": "pushint 40 // 40"
    },
    "2745": {
      "op": "=="
    },
    "2746": {
      "op": "bnz assign_role_bool_true@6"
    },
    "2749": {
      "op": "frame_dig 0"
    },
    "2751": {
      "op": "pushint 50 // 50"
    },
    "2753": {
      "op": "=="
    },
    "2754": {
      "op": "bnz assign_role_bool_true@6"
    },
    "2757": {
      "op": "frame_dig 0"
    },
    "2759": {
      "op": "pushint 60 // 60"
    },
    "2761": {
      "op": "=="
    },
    "2762": {
      "op": "bnz assign_role_bool_true@6"
    },
    "2765": {
      "op": "frame_dig 0"
    },
    "2767": {
      "op": "pushint 70 // 70"
    },
    "2769": {
      "op": "=="
    },
    "2770": {
      "op": "bnz assign_role_bool_true@6"
    },
    "2773": {
      "op": "frame_dig 0"
    },
    "2775": {
      "op": "pushint 80 // 80"
    },
    "2777": {
      "op": "=="
    },
    "2778": {
      "op": "bz assign_role_bool_false@7"
    },
    "2781": {
      "block": "assign_role_bool_true@6",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "2782": {
      "block": "assign_role_bool_merge@8",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid role identifier",
      "op": "assert // Invalid role identifier",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2783": {
      "op": "pushints 20 40 50 60 70 80 // 20, 40, 50, 60, 70, 80",
      "defined_out": [
        "20",
        "40",
        "50",
        "60",
        "70",
        "80"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20",
        "40",
        "50",
        "60",
        "70",
        "80"
      ]
    },
    "2791": {
      "op": "frame_dig 0",
      "defined_out": [
        "20",
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20",
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ]
    },
    "2793": {
      "op": "match assign_role_switch_case_0@9 assign_role_switch_case_1@10 assign_role_switch_case_2@11 assign_role_switch_case_3@12 assign_role_switch_case_4@13 assign_role_switch_case_5@14",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2807": {
      "op": "err"
    },
    "2808": {
      "block": "assign_role_switch_case_5@14",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 31 // 0x52383023",
      "defined_out": [
        "0x52383023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023"
      ]
    },
    "2810": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52383023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023",
        "role_address#0 (copy)"
      ]
    },
    "2812": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0"
      ]
    },
    "2813": {
      "op": "dup",
      "defined_out": [
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "2814": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2815": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "maybe_exists%4#0"
      ]
    },
    "2817": {
      "op": "!",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "2818": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0"
      ]
    },
    "2819": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%19#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "config#0 (copy)"
      ]
    },
    "2821": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[16]%4#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%19#0",
        "reinterpret_bytes[16]%4#0"
      ]
    },
    "2824": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2825": {
      "block": "assign_role_switch_case_next@16",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "2827": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "2828": {
      "op": "swap"
    },
    "2829": {
      "retsub": true,
      "op": "retsub"
    },
    "2830": {
      "block": "assign_role_switch_case_4@13",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 25 // 0x52373023",
      "defined_out": [
        "0x52373023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023"
      ]
    },
    "2832": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52373023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023",
        "role_address#0 (copy)"
      ]
    },
    "2834": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0"
      ]
    },
    "2835": {
      "op": "dup",
      "defined_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "2836": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2837": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "maybe_exists%3#0"
      ]
    },
    "2839": {
      "op": "!",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "2840": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0"
      ]
    },
    "2841": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "config#0 (copy)"
      ]
    },
    "2843": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[16]%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0",
        "reinterpret_bytes[16]%3#0"
      ]
    },
    "2846": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2847": {
      "op": "b assign_role_switch_case_next@16"
    },
    "2850": {
      "block": "assign_role_switch_case_3@12",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 27 // 0x52363023",
      "defined_out": [
        "0x52363023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023"
      ]
    },
    "2852": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52363023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023",
        "role_address#0 (copy)"
      ]
    },
    "2854": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ]
    },
    "2855": {
      "op": "dup",
      "defined_out": [
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "2856": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2857": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "maybe_exists%2#0"
      ]
    },
    "2859": {
      "op": "!",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "2860": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ]
    },
    "2861": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "config#0 (copy)"
      ]
    },
    "2863": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[16]%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "reinterpret_bytes[16]%2#0"
      ]
    },
    "2866": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2867": {
      "op": "b assign_role_switch_case_next@16"
    },
    "2870": {
      "block": "assign_role_switch_case_2@11",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 28 // 0x52353023",
      "defined_out": [
        "0x52353023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023"
      ]
    },
    "2872": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52353023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023",
        "role_address#0 (copy)"
      ]
    },
    "2874": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0"
      ]
    },
    "2875": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "2876": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2877": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "maybe_exists%1#0"
      ]
    },
    "2879": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2880": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0"
      ]
    },
    "2881": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "config#0 (copy)"
      ]
    },
    "2883": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[16]%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "reinterpret_bytes[16]%1#0"
      ]
    },
    "2886": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2887": {
      "op": "b assign_role_switch_case_next@16"
    },
    "2890": {
      "block": "assign_role_switch_case_1@10",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 24 // 0x52343023",
      "defined_out": [
        "0x52343023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023"
      ]
    },
    "2892": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52343023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023",
        "role_address#0 (copy)"
      ]
    },
    "2894": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "2895": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2896": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2897": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "maybe_exists%0#0"
      ]
    },
    "2899": {
      "op": "!",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2900": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "2901": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "config#0 (copy)"
      ]
    },
    "2903": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[16]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "2906": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2907": {
      "op": "b assign_role_switch_case_next@16"
    },
    "2910": {
      "block": "assign_role_switch_case_0@9",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 17 // 0x52323023",
      "defined_out": [
        "0x52323023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52323023"
      ]
    },
    "2912": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52323023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52323023",
        "role_address#0 (copy)"
      ]
    },
    "2914": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2915": {
      "op": "b assign_role_switch_case_next@16"
    },
    "2918": {
      "block": "assign_role_bool_false@7",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "2919": {
      "op": "b assign_role_bool_merge@8"
    },
    "2922": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role",
      "params": {
        "role_address#0": "bytes",
        "role#0": "bytes"
      },
      "block": "revoke_role",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2925": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "2928": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "2931": {
      "op": "frame_dig -1",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "2933": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2934": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2935": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "40"
      ]
    },
    "2937": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2938": {
      "op": "bnz revoke_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2941": {
      "op": "frame_dig 0"
    },
    "2943": {
      "op": "pushint 50 // 50"
    },
    "2945": {
      "op": "=="
    },
    "2946": {
      "op": "bnz revoke_role_bool_true@5"
    },
    "2949": {
      "op": "frame_dig 0"
    },
    "2951": {
      "op": "pushint 60 // 60"
    },
    "2953": {
      "op": "=="
    },
    "2954": {
      "op": "bnz revoke_role_bool_true@5"
    },
    "2957": {
      "op": "frame_dig 0"
    },
    "2959": {
      "op": "pushint 70 // 70"
    },
    "2961": {
      "op": "=="
    },
    "2962": {
      "op": "bnz revoke_role_bool_true@5"
    },
    "2965": {
      "op": "frame_dig 0"
    },
    "2967": {
      "op": "pushint 80 // 80"
    },
    "2969": {
      "op": "=="
    },
    "2970": {
      "op": "bz revoke_role_bool_false@6"
    },
    "2973": {
      "block": "revoke_role_bool_true@5",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "2974": {
      "block": "revoke_role_bool_merge@7",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid role identifier",
      "op": "assert // Invalid role identifier",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2975": {
      "op": "pushints 40 50 60 70 80 // 40, 50, 60, 70, 80",
      "defined_out": [
        "40",
        "50",
        "60",
        "70",
        "80"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "40",
        "50",
        "60",
        "70",
        "80"
      ]
    },
    "2982": {
      "op": "frame_dig 0",
      "defined_out": [
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ]
    },
    "2984": {
      "op": "match revoke_role_switch_case_0@8 revoke_role_switch_case_1@9 revoke_role_switch_case_2@10 revoke_role_switch_case_3@11 revoke_role_switch_case_4@12",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2996": {
      "op": "err"
    },
    "2997": {
      "block": "revoke_role_switch_case_4@12",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 31 // 0x52383023",
      "defined_out": [
        "0x52383023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023"
      ]
    },
    "2999": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52383023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023",
        "role_address#0 (copy)"
      ]
    },
    "3001": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%14#0"
      ]
    },
    "3002": {
      "op": "dup",
      "defined_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "3003": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%14#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3004": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%14#0",
        "maybe_exists%4#0"
      ]
    },
    "3006": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%14#0"
      ]
    },
    "3007": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "3008": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3009": {
      "block": "revoke_role_switch_case_next@14",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "3011": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "3012": {
      "op": "swap"
    },
    "3013": {
      "retsub": true,
      "op": "retsub"
    },
    "3014": {
      "block": "revoke_role_switch_case_3@11",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 25 // 0x52373023",
      "defined_out": [
        "0x52373023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023"
      ]
    },
    "3016": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52373023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023",
        "role_address#0 (copy)"
      ]
    },
    "3018": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ]
    },
    "3019": {
      "op": "dup",
      "defined_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "3020": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3021": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "maybe_exists%3#0"
      ]
    },
    "3023": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ]
    },
    "3024": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "3025": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3026": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "3029": {
      "block": "revoke_role_switch_case_2@10",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 27 // 0x52363023",
      "defined_out": [
        "0x52363023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023"
      ]
    },
    "3031": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52363023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023",
        "role_address#0 (copy)"
      ]
    },
    "3033": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0"
      ]
    },
    "3034": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "3035": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3036": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "maybe_exists%2#0"
      ]
    },
    "3038": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%10#0"
      ]
    },
    "3039": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "3040": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3041": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "3044": {
      "block": "revoke_role_switch_case_1@9",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 28 // 0x52353023",
      "defined_out": [
        "0x52353023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023"
      ]
    },
    "3046": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52353023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023",
        "role_address#0 (copy)"
      ]
    },
    "3048": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0"
      ]
    },
    "3049": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "3050": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3051": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0",
        "maybe_exists%1#0"
      ]
    },
    "3053": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0"
      ]
    },
    "3054": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "3055": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3056": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "3059": {
      "block": "revoke_role_switch_case_0@8",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 24 // 0x52343023",
      "defined_out": [
        "0x52343023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023"
      ]
    },
    "3061": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52343023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023",
        "role_address#0 (copy)"
      ]
    },
    "3063": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "3064": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3065": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3066": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "maybe_exists%0#0"
      ]
    },
    "3068": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "3069": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "3070": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3071": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "3074": {
      "block": "revoke_role_bool_false@6",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "3075": {
      "op": "b revoke_role_bool_merge@7"
    },
    "3078": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.open_account",
      "params": {
        "holding_address#0": "bytes",
        "payment_address#0": "bytes"
      },
      "block": "open_account",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3081": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "op": "callsub assert_caller_is_account_manager"
    },
    "3084": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3085": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "3086": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3087": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3088": {
      "op": "intc 6 // 200",
      "defined_out": [
        "200",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "200"
      ]
    },
    "3090": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3091": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3092": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "3093": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "3096": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "3099": {
      "op": "bytec_2 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "3100": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3102": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3103": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3104": {
      "op": "box_len",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3105": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "3107": {
      "op": "!",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3108": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3109": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment_address#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "payment_address#0 (copy)"
      ]
    },
    "3111": {
      "op": "bytec 5 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "payment_address#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "payment_address#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "3113": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3114": {
      "op": "bytec 5 // 0x0000000000000000",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "3116": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3117": {
      "op": "bytec 5 // 0x0000000000000000",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "3119": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3120": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "encoded_tuple_buffer%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "0x00"
      ]
    },
    "3122": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3123": {
      "op": "box_put",
      "stack_out": []
    },
    "3124": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3126": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3127": {
      "retsub": true,
      "op": "retsub"
    },
    "3128": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.close_account",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "close_account",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3131": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "op": "callsub assert_caller_is_account_manager"
    },
    "3134": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "3137": {
      "op": "bytec_2 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "3138": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3140": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3141": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "3142": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3143": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3145": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3146": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "3147": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3148": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "3149": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "32"
      ]
    },
    "3150": {
      "op": "extract_uint64",
      "defined_out": [
        "closed_units#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "closed_units#0"
      ]
    },
    "3151": {
      "op": "swap",
      "stack_out": [
        "closed_units#0",
        "tmp%0#1"
      ]
    },
    "3152": {
      "op": "box_del",
      "defined_out": [
        "closed_units#0",
        "{box_del}"
      ],
      "stack_out": [
        "closed_units#0",
        "{box_del}"
      ]
    },
    "3153": {
      "op": "pop",
      "stack_out": [
        "closed_units#0"
      ]
    },
    "3154": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "0"
      ]
    },
    "3155": {
      "op": "bytec_1 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3156": {
      "op": "app_global_get_ex",
      "defined_out": [
        "closed_units#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3157": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0"
      ]
    },
    "3158": {
      "op": "dig 1",
      "defined_out": [
        "closed_units#0",
        "closed_units#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0",
        "closed_units#0 (copy)"
      ]
    },
    "3160": {
      "op": "-",
      "defined_out": [
        "closed_units#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "closed_units#0",
        "new_state_value%0#0"
      ]
    },
    "3161": {
      "op": "bytec_1 // \"circulating_units\"",
      "stack_out": [
        "closed_units#0",
        "new_state_value%0#0",
        "\"circulating_units\""
      ]
    },
    "3162": {
      "op": "swap",
      "stack_out": [
        "closed_units#0",
        "\"circulating_units\"",
        "new_state_value%0#0"
      ]
    },
    "3163": {
      "op": "app_global_put",
      "stack_out": [
        "closed_units#0"
      ]
    },
    "3164": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units",
      "op": "callsub end_if_no_circulating_units"
    },
    "3167": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3168": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "3170": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3171": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3172": {
      "retsub": true,
      "op": "retsub"
    },
    "3173": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "bytes"
      },
      "block": "primary_distribution",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3176": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "3177": {
      "op": "dup",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2"
      ]
    },
    "3178": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "3180": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "3181": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0",
        "\"status\""
      ]
    },
    "3182": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3183": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3184": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "100"
      ]
    },
    "3186": {
      "op": "==",
      "defined_out": [
        "tmp%0#4"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#4"
      ]
    },
    "3187": {
      "op": "bz primary_distribution_bool_false@5",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "3190": {
      "op": "intc_0 // 0"
    },
    "3191": {
      "op": "bytec 8 // \"primary_distribution_opening_date\""
    },
    "3193": {
      "op": "app_global_get_ex"
    },
    "3194": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists"
    },
    "3195": {
      "op": "global LatestTimestamp"
    },
    "3197": {
      "op": "dup"
    },
    "3198": {
      "op": "frame_bury 2"
    },
    "3200": {
      "op": "<="
    },
    "3201": {
      "op": "bz primary_distribution_bool_false@5"
    },
    "3204": {
      "op": "intc_0 // 0"
    },
    "3205": {
      "op": "bytec 20 // \"primary_distribution_closure_date\""
    },
    "3207": {
      "op": "app_global_get_ex"
    },
    "3208": {
      "error": "check self.primary_distribution_closure_date exists",
      "op": "assert // check self.primary_distribution_closure_date exists"
    },
    "3209": {
      "op": "frame_dig 2"
    },
    "3211": {
      "op": ">"
    },
    "3212": {
      "op": "bz primary_distribution_bool_false@5"
    },
    "3215": {
      "op": "intc_1 // 1"
    },
    "3216": {
      "block": "primary_distribution_bool_merge@6",
      "stack_in": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Primary distribution is closed",
      "op": "assert // Primary distribution is closed",
      "defined_out": [],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "3217": {
      "op": "bytec 28 // 0x52353023"
    },
    "3219": {
      "op": "txn Sender",
      "defined_out": [
        "0x52353023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0x52353023",
        "caller#0"
      ]
    },
    "3221": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2"
      ]
    },
    "3222": {
      "op": "dup",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3223": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2"
      ]
    },
    "3225": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3226": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3228": {
      "op": "bz primary_distribution_bool_false@12",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "3231": {
      "op": "frame_dig 0"
    },
    "3233": {
      "op": "box_get"
    },
    "3234": {
      "error": "check self.primary_dealer entry exists",
      "op": "assert // check self.primary_dealer entry exists"
    },
    "3235": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "3238": {
      "op": "global LatestTimestamp"
    },
    "3240": {
      "op": "itob"
    },
    "3241": {
      "op": "dup"
    },
    "3242": {
      "op": "frame_bury 1"
    },
    "3244": {
      "op": "b<="
    },
    "3245": {
      "op": "bz primary_distribution_bool_false@12"
    },
    "3248": {
      "op": "frame_dig 0"
    },
    "3250": {
      "op": "box_get"
    },
    "3251": {
      "error": "check self.primary_dealer entry exists",
      "op": "assert // check self.primary_dealer entry exists"
    },
    "3252": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "3255": {
      "op": "frame_dig 1"
    },
    "3257": {
      "op": "b>="
    },
    "3258": {
      "op": "bz primary_distribution_bool_false@12"
    },
    "3261": {
      "op": "intc_1 // 1"
    },
    "3262": {
      "block": "primary_distribution_bool_merge@13",
      "stack_in": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "3263": {
      "op": "bytec_2 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0x52333023"
      ]
    },
    "3264": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3266": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2"
      ]
    },
    "3267": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "3268": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3269": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3271": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2"
      ]
    },
    "3272": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "3275": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "3278": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#2",
        "units#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "units#0 (copy)"
      ]
    },
    "3280": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0"
      ]
    },
    "3281": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3282": {
      "error": "Can not distribute zero units",
      "op": "assert // Can not distribute zero units",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0"
      ]
    },
    "3283": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "0"
      ]
    },
    "3284": {
      "op": "bytec_1 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3285": {
      "op": "app_global_get_ex",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3286": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3287": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3289": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "3290": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%3#0",
        "0"
      ]
    },
    "3291": {
      "op": "bytec 11 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "0",
        "tmp%0#0",
        "tmp%0#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%3#0",
        "0",
        "\"total_units\""
      ]
    },
    "3293": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%0#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3294": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "3295": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "3296": {
      "error": "Insufficient remaining D-ASA units",
      "op": "assert // Insufficient remaining D-ASA units",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0"
      ]
    },
    "3297": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "0"
      ]
    },
    "3298": {
      "op": "bytec_1 // \"circulating_units\"",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3299": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3300": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "3301": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3303": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "new_state_value%0#0"
      ]
    },
    "3304": {
      "op": "bytec_1 // \"circulating_units\"",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "new_state_value%0#0",
        "\"circulating_units\""
      ]
    },
    "3305": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "\"circulating_units\"",
        "new_state_value%0#0"
      ]
    },
    "3306": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0"
      ]
    },
    "3307": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%0#2 (copy)"
      ]
    },
    "3309": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3310": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%3#0"
      ]
    },
    "3311": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "maybe_value%3#0",
        "32"
      ]
    },
    "3312": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#2",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "3313": {
      "op": "+",
      "defined_out": [
        "tmp%0#2",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "to_encode%0#0"
      ]
    },
    "3314": {
      "op": "itob",
      "defined_out": [
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ]
    },
    "3315": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "tmp%0#2 (copy)"
      ]
    },
    "3317": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3318": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%4#0"
      ]
    },
    "3319": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "3320": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%0#2",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "updated_data%0#0"
      ]
    },
    "3322": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "updated_data%0#0",
        "tmp%0#2 (copy)"
      ]
    },
    "3324": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "updated_data%0#0"
      ]
    },
    "3325": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2"
      ]
    },
    "3326": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "0"
      ]
    },
    "3327": {
      "op": "bytec 9 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "0",
        "\"unit_value\""
      ]
    },
    "3329": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3330": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_value%5#0"
      ]
    },
    "3331": {
      "op": "itob",
      "defined_out": [
        "tmp%0#2",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%1#0"
      ]
    },
    "3332": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%1#0",
        "tmp%0#2 (copy)"
      ]
    },
    "3334": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%0#2",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%1#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3335": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "val_as_bytes%1#0",
        "maybe_value%6#0"
      ]
    },
    "3336": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "maybe_value%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "3337": {
      "op": "replace2 40",
      "defined_out": [
        "tmp%0#2",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "tmp%0#2",
        "updated_data%1#0"
      ]
    },
    "3339": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ]
    },
    "3340": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "3341": {
      "op": "bytec 11 // \"total_units\"",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "0",
        "\"total_units\""
      ]
    },
    "3343": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3344": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0"
      ]
    },
    "3345": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0",
        "0"
      ]
    },
    "3346": {
      "op": "bytec_1 // \"circulating_units\"",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3347": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "3348": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "3349": {
      "op": "-",
      "defined_out": [
        "tmp%0#2",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "to_encode%1#0"
      ]
    },
    "3350": {
      "op": "itob",
      "defined_out": [
        "tmp%0#2",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "3351": {
      "op": "frame_bury 0"
    },
    "3353": {
      "retsub": true,
      "op": "retsub"
    },
    "3354": {
      "block": "primary_distribution_bool_false@12",
      "stack_in": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3355": {
      "op": "b primary_distribution_bool_merge@13"
    },
    "3358": {
      "block": "primary_distribution_bool_false@5",
      "stack_in": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%2#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3359": {
      "op": "b primary_distribution_bool_merge@6"
    },
    "3362": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension",
      "params": {
        "suspended#0": "bytes"
      },
      "block": "set_asset_suspension",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3365": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "op": "callsub assert_caller_is_authority"
    },
    "3368": {
      "op": "frame_dig -1",
      "defined_out": [
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "suspended#0 (copy)"
      ]
    },
    "3370": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "suspended#0 (copy)",
        "0"
      ]
    },
    "3371": {
      "op": "getbit",
      "defined_out": [
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0"
      ]
    },
    "3372": {
      "op": "bytec 21 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0",
        "\"suspended\""
      ]
    },
    "3374": {
      "op": "swap",
      "stack_out": [
        "\"suspended\"",
        "reinterpret_uint64%0#0"
      ]
    },
    "3375": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3376": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3378": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3379": {
      "retsub": true,
      "op": "retsub"
    },
    "3380": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension",
      "params": {
        "holding_address#0": "bytes",
        "suspended#0": "bytes"
      },
      "block": "set_account_suspension",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3383": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "op": "callsub assert_caller_is_authority"
    },
    "3386": {
      "op": "bytec_2 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "3387": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3389": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3390": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "3391": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3392": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3394": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3395": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "3396": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3397": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "3398": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "suspended#0 (copy)"
      ]
    },
    "3400": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "0"
      ]
    },
    "3401": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "is_true%0#0"
      ]
    },
    "3402": {
      "op": "intc 4 // 448"
    },
    "3404": {
      "op": "swap",
      "defined_out": [
        "448",
        "is_true%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "448",
        "is_true%0#0"
      ]
    },
    "3405": {
      "op": "setbit",
      "defined_out": [
        "tmp%0#1",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "updated_data%0#0"
      ]
    },
    "3406": {
      "op": "box_put",
      "stack_out": []
    },
    "3407": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3409": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3410": {
      "retsub": true,
      "op": "retsub"
    },
    "3411": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status",
      "params": {
        "defaulted#0": "bytes"
      },
      "block": "set_default_status",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3414": {
      "op": "intc_0 // 0"
    },
    "3415": {
      "op": "bytec 27 // 0x52363023"
    },
    "3417": {
      "op": "txn Sender",
      "defined_out": [
        "0x52363023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52363023",
        "caller#0"
      ]
    },
    "3419": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3420": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3421": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3422": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3424": {
      "op": "bz set_default_status_bool_false@5",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3427": {
      "op": "frame_dig 1"
    },
    "3429": {
      "op": "box_get"
    },
    "3430": {
      "error": "check self.trustee entry exists",
      "op": "assert // check self.trustee entry exists"
    },
    "3431": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "3434": {
      "op": "global LatestTimestamp"
    },
    "3436": {
      "op": "itob"
    },
    "3437": {
      "op": "dup"
    },
    "3438": {
      "op": "frame_bury 0"
    },
    "3440": {
      "op": "b<="
    },
    "3441": {
      "op": "bz set_default_status_bool_false@5"
    },
    "3444": {
      "op": "frame_dig 1"
    },
    "3446": {
      "op": "box_get"
    },
    "3447": {
      "error": "check self.trustee entry exists",
      "op": "assert // check self.trustee entry exists"
    },
    "3448": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "3451": {
      "op": "frame_dig 0"
    },
    "3453": {
      "op": "b>="
    },
    "3454": {
      "op": "bz set_default_status_bool_false@5"
    },
    "3457": {
      "op": "intc_1 // 1"
    },
    "3458": {
      "block": "set_default_status_bool_merge@6",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3459": {
      "op": "frame_dig -1",
      "defined_out": [
        "defaulted#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "defaulted#0 (copy)"
      ]
    },
    "3461": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "defaulted#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "defaulted#0 (copy)",
        "0"
      ]
    },
    "3462": {
      "op": "getbit",
      "defined_out": [
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_uint64%0#0"
      ]
    },
    "3463": {
      "op": "bytec 22 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_uint64%0#0",
        "\"defaulted\""
      ]
    },
    "3465": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "\"defaulted\"",
        "reinterpret_uint64%0#0"
      ]
    },
    "3466": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "3467": {
      "retsub": true,
      "op": "retsub"
    },
    "3468": {
      "block": "set_default_status_bool_false@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "3469": {
      "op": "b set_default_status_bool_merge@6"
    },
    "3472": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info",
      "params": {},
      "block": "get_asset_info",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3475": {
      "op": "intc_0 // 0"
    },
    "3476": {
      "op": "dup"
    },
    "3477": {
      "op": "global LatestTimestamp"
    },
    "3479": {
      "op": "intc_0 // 0"
    },
    "3480": {
      "op": "bytec 4 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "performance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "3482": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3483": {
      "op": "swap",
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "3484": {
      "op": "dup",
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "3485": {
      "op": "cover 2",
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "3487": {
      "op": "cover 4",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3489": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3490": {
      "op": ">",
      "defined_out": [
        "maybe_value%0#0",
        "performance#0",
        "performance#8",
        "tmp%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%1#0"
      ]
    },
    "3491": {
      "op": "bz get_asset_info_after_if_else@3",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "3494": {
      "op": "frame_dig 0"
    },
    "3496": {
      "op": "frame_bury 2"
    },
    "3498": {
      "op": "frame_dig 1"
    },
    "3500": {
      "op": "bz get_asset_info_after_if_else@3"
    },
    "3503": {
      "op": "intc_3 // 4"
    },
    "3504": {
      "op": "frame_bury 2"
    },
    "3506": {
      "block": "get_asset_info_after_if_else@3",
      "stack_in": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "performance#0"
      ]
    },
    "3508": {
      "op": "frame_bury 0",
      "defined_out": [
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "3510": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0"
      ]
    },
    "3511": {
      "op": "bytec 22 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "0",
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0",
        "\"defaulted\""
      ]
    },
    "3513": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3514": {
      "error": "check self.defaulted exists",
      "op": "assert // check self.defaulted exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%1#0"
      ]
    },
    "3515": {
      "op": "bz get_asset_info_after_if_else@5",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "3518": {
      "op": "pushint 3 // 3"
    },
    "3520": {
      "op": "frame_bury 0"
    },
    "3522": {
      "block": "get_asset_info_after_if_else@5",
      "stack_in": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0"
      ]
    },
    "3523": {
      "op": "bytec 18 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0",
        "\"denomination_asset_id\""
      ]
    },
    "3525": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3526": {
      "error": "check self.denomination_asset_id exists",
      "op": "assert // check self.denomination_asset_id exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%2#0"
      ]
    },
    "3527": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0"
      ]
    },
    "3528": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3529": {
      "op": "bytec 6 // \"settlement_asset_id\"",
      "defined_out": [
        "\"settlement_asset_id\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "0",
        "\"settlement_asset_id\""
      ]
    },
    "3531": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3532": {
      "error": "check self.settlement_asset_id exists",
      "op": "assert // check self.settlement_asset_id exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "maybe_value%3#0"
      ]
    },
    "3533": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3534": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "3535": {
      "op": "bytec_1 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3536": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3537": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0"
      ]
    },
    "3538": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "3539": {
      "op": "bytec 9 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "0",
        "\"unit_value\""
      ]
    },
    "3541": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3542": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "3543": {
      "op": "*",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%0#0"
      ]
    },
    "3544": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3545": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "3546": {
      "op": "bytec 9 // \"unit_value\"",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "\"unit_value\""
      ]
    },
    "3548": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3549": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0"
      ]
    },
    "3550": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "3551": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "3552": {
      "op": "bytec 10 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "3554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3555": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%5#0"
      ]
    },
    "3556": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "3557": {
      "op": "extract 7 1",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0"
      ]
    },
    "3560": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "0"
      ]
    },
    "3561": {
      "op": "bytec 12 // \"principal_discount\"",
      "defined_out": [
        "\"principal_discount\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "0",
        "\"principal_discount\""
      ]
    },
    "3563": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%6#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3564": {
      "error": "check self.principal_discount exists",
      "op": "assert // check self.principal_discount exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "maybe_value%6#0"
      ]
    },
    "3565": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "3566": {
      "op": "extract 6 2",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "3569": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "3570": {
      "op": "bytec 23 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "0",
        "\"interest_rate\""
      ]
    },
    "3572": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%0#0",
        "maybe_value%7#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3573": {
      "error": "check self.interest_rate exists",
      "op": "assert // check self.interest_rate exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "maybe_value%7#0"
      ]
    },
    "3574": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "3575": {
      "op": "extract 6 2",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "3578": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "0"
      ]
    },
    "3579": {
      "op": "bytec 11 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "0",
        "\"total_units\""
      ]
    },
    "3581": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%0#0",
        "maybe_value%8#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "3582": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_value%8#0"
      ]
    },
    "3583": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "3584": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "0"
      ]
    },
    "3585": {
      "op": "bytec_1 // \"circulating_units\"",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "3586": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%0#0",
        "maybe_value%9#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "3587": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "maybe_value%9#0"
      ]
    },
    "3588": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "3589": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0"
      ]
    },
    "3590": {
      "op": "bytec 8 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "3592": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%0#0",
        "maybe_value%10#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "3593": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%10#0"
      ]
    },
    "3594": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "3595": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "3596": {
      "op": "bytec 20 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "3598": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%0#0",
        "maybe_value%11#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "3599": {
      "error": "check self.primary_distribution_closure_date exists",
      "op": "assert // check self.primary_distribution_closure_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%11#0"
      ]
    },
    "3600": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "3601": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "3602": {
      "op": "bytec 7 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "3604": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%0#0",
        "maybe_value%12#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "3605": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0"
      ]
    },
    "3606": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "3607": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0"
      ]
    },
    "3608": {
      "op": "bytec 4 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "3610": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "3611": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%13#0"
      ]
    },
    "3612": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "3613": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0"
      ]
    },
    "3614": {
      "op": "bytec 21 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0",
        "\"suspended\""
      ]
    },
    "3616": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%14#0",
        "maybe_value%0#0",
        "maybe_value%14#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%14#0",
        "maybe_exists%14#0"
      ]
    },
    "3617": {
      "error": "check self.suspended exists",
      "op": "assert // check self.suspended exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%14#0"
      ]
    },
    "3618": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0",
        "maybe_value%14#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%14#0",
        "0x00"
      ]
    },
    "3620": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%14#0",
        "0x00",
        "0"
      ]
    },
    "3621": {
      "op": "uncover 2",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0x00",
        "0",
        "maybe_value%14#0"
      ]
    },
    "3623": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0"
      ]
    },
    "3624": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "performance#0"
      ]
    },
    "3626": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "val_as_bytes%13#0"
      ]
    },
    "3627": {
      "op": "extract 7 1",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0"
      ]
    },
    "3630": {
      "op": "uncover 14"
    },
    "3632": {
      "op": "uncover 14",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3634": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3635": {
      "op": "uncover 13",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3637": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3638": {
      "op": "uncover 12",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "3640": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3641": {
      "op": "uncover 11",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%4#0",
        "tmp%4#0"
      ]
    },
    "3643": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%5#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3644": {
      "op": "uncover 10",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%5#0",
        "tmp%5#0"
      ]
    },
    "3646": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3647": {
      "op": "uncover 9",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%6#0",
        "tmp%6#0"
      ]
    },
    "3649": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%7#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3650": {
      "op": "uncover 8",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%7#0"
      ]
    },
    "3652": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%7#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3653": {
      "op": "uncover 7",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%8#0"
      ]
    },
    "3655": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%7#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3656": {
      "op": "uncover 6",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%9#0"
      ]
    },
    "3658": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%10#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%7#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3659": {
      "op": "uncover 5",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%10#0"
      ]
    },
    "3661": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%11#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%7#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3662": {
      "op": "uncover 4",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%11#0"
      ]
    },
    "3664": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%12#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%7#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "3665": {
      "op": "uncover 3",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%12#0"
      ]
    },
    "3667": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%13#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_bool%0#0",
        "tmp%7#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "3668": {
      "op": "uncover 2",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%7#0",
        "encoded_tuple_buffer%13#0",
        "encoded_bool%0#0"
      ]
    },
    "3670": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%7#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "3671": {
      "op": "swap",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_tuple_buffer%14#0",
        "tmp%7#0"
      ]
    },
    "3672": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0",
        "maybe_value%0#0",
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "3673": {
      "op": "frame_bury 0"
    },
    "3675": {
      "retsub": true,
      "op": "retsub"
    },
    "3676": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "get_account_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3679": {
      "op": "bytec_2 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "3680": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "3682": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3683": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "3684": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3685": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3687": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3688": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3689": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3690": {
      "retsub": true,
      "op": "retsub"
    },
    "3691": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events",
      "params": {},
      "block": "get_time_events",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3694": {
      "op": "pushbytes 0x0000"
    },
    "3698": {
      "op": "intc_0 // 0"
    },
    "3699": {
      "op": "bytec_3 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "0",
        "\"status\""
      ]
    },
    "3700": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3701": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "time_events#0",
        "maybe_value%0#0"
      ]
    },
    "3702": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#0",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "maybe_value%0#0",
        "100"
      ]
    },
    "3704": {
      "op": "==",
      "defined_out": [
        "time_events#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "time_events#0",
        "tmp%0#1"
      ]
    },
    "3705": {
      "op": "bz get_time_events_after_if_else@2",
      "stack_out": [
        "time_events#0"
      ]
    },
    "3708": {
      "op": "bytec 26 // 0x74696d654576656e7473"
    },
    "3710": {
      "op": "box_get"
    },
    "3711": {
      "op": "swap"
    },
    "3712": {
      "op": "frame_bury 0"
    },
    "3714": {
      "error": "check self.time_events exists",
      "op": "assert // check self.time_events exists"
    },
    "3715": {
      "block": "get_time_events_after_if_else@2",
      "stack_in": [
        "time_events#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "time_events#0"
      ]
    },
    "3717": {
      "op": "swap"
    },
    "3718": {
      "retsub": true,
      "op": "retsub"
    },
    "3719": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule",
      "params": {},
      "block": "get_secondary_market_schedule",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3720": {
      "op": "bytec 14 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"secondary_market_opening_date\""
      ]
    },
    "3722": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3723": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3724": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3725": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3726": {
      "op": "bytec 15 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"secondary_market_closure_date\""
      ]
    },
    "3728": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3729": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "3730": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3731": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "3732": {
      "op": "pushbytes 0x0002",
      "defined_out": [
        "0x0002",
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0",
        "0x0002"
      ]
    },
    "3736": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "result%1#0"
      ]
    },
    "3737": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "3738": {
      "retsub": true,
      "op": "retsub"
    },
    "3739": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata",
      "params": {},
      "block": "get_asset_metadata",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3740": {
      "op": "bytec 19 // \"metadata\"",
      "defined_out": [
        "\"metadata\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"metadata\""
      ]
    },
    "3742": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3743": {
      "error": "check self.metadata exists",
      "op": "assert // check self.metadata exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3744": {
      "retsub": true,
      "op": "retsub"
    }
  }
}