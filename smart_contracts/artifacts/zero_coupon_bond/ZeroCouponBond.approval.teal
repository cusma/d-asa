#pragma version 10

smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.approval_program:
    intcblock 0 1 8 4 448 10000 86400
    bytecblock 0x52333023 0x151f7c75 "circulating_units" "maturity_date" "issuance_date" 0x0000000000000000 "denomination_asset_id" "interest_rate" "primary_distribution_opening_date" "status" 0x00 "unit_value" "day_count_convention" "total_units" "secondary_market_opening_date" "secondary_market_closure_date" "arranger" "primary_distribution_closure_date" "suspended" "defaulted" "metadata" "total_coupons" 0x74696d654576656e7473 0x52343023 0x52353023 0x52363023 0x52373023 0x636f75706f6e5261746573 0x068101
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.__init__() -> void:
__init__:
    // smart_contracts/zero_coupon_bond/contract.py:32
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/zero_coupon_bond/contract.py:33
    // super().__init__()
    callsub smart_contracts.base_d_asa.contract.BaseDAsa.__init__
    // smart_contracts/zero_coupon_bond/contract.py:35-36
    // # State schema validation
    // assert Txn.global_num_byte_slice == cfg.GLOBAL_BYTES, err.WRONG_GLOBAL_BYTES
    txn GlobalNumByteSlice
    pushint 2 // 2
    ==
    assert // Wrong Global Bytes allocation
    // smart_contracts/zero_coupon_bond/contract.py:37
    // assert Txn.global_num_uint == cfg.GLOBAL_UINTS, err.WRONG_GLOBAL_UINTS
    txn GlobalNumUint
    pushint 16 // 16
    ==
    assert // Wrong Global UInts allocation
    // smart_contracts/zero_coupon_bond/contract.py:38
    // assert Txn.local_num_byte_slice == cfg.LOCAL_BYTES, err.WRONG_LOCAL_BYTES
    txn LocalNumByteSlice
    !
    assert // Wrong Local Bytes allocation
    // smart_contracts/zero_coupon_bond/contract.py:39
    // assert Txn.local_num_uint == cfg.LOCAL_UINTS, err.WRONG_LOCAL_UINTS
    txn LocalNumUint
    !
    assert // Wrong Local UInts allocation
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.__init__() -> void:
smart_contracts.base_d_asa.contract.BaseDAsa.__init__:
    // smart_contracts/base_d_asa/contract.py:37
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/base_d_asa/contract.py:38-39
    // # Role Based Access Control
    // self.arranger = Global.zero_address  # TODO: Use role key
    bytec 16 // "arranger"
    global ZeroAddress
    app_global_put
    // smart_contracts/base_d_asa/contract.py:53-54
    // # Asset Configuration
    // self.denomination_asset_id = UInt64()
    bytec 6 // "denomination_asset_id"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:55
    // self.unit_value = UInt64()
    bytec 11 // "unit_value"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:56
    // self.day_count_convention = UInt64()
    bytec 12 // "day_count_convention"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:58-59
    // # Metadata
    // self.metadata = Bytes()
    bytec 20 // "metadata"
    pushbytes 0x
    app_global_put
    // smart_contracts/base_d_asa/contract.py:61-62
    // # Supply
    // self.total_units = UInt64()
    bytec 13 // "total_units"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:63
    // self.circulating_units = UInt64()
    bytec_2 // "circulating_units"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:65-66
    // # Interest
    // self.interest_rate = UInt64()
    bytec 7 // "interest_rate"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:70
    // self.total_coupons = UInt64()
    bytec 21 // "total_coupons"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:74
    // self.primary_distribution_opening_date = UInt64()
    bytec 8 // "primary_distribution_opening_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:75
    // self.primary_distribution_closure_date = UInt64()
    bytec 17 // "primary_distribution_closure_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:76
    // self.issuance_date = UInt64()
    bytec 4 // "issuance_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:77
    // self.secondary_market_opening_date = UInt64()
    bytec 14 // "secondary_market_opening_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:78
    // self.secondary_market_closure_date = UInt64()
    bytec 15 // "secondary_market_closure_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:79
    // self.maturity_date = UInt64()
    bytec_3 // "maturity_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:81-82
    // # Status
    // self.status = UInt64(cfg.STATUS_EMPTY)
    bytec 9 // "status"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:83
    // self.suspended = UInt64()
    bytec 18 // "suspended"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:84
    // self.defaulted = UInt64()
    bytec 19 // "defaulted"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@24
    pushbytess 0x4fd6a3cc 0x9c76b6a3 0x44363d49 0x2e2877af 0x63f99589 0xeae05031 0x1d6fc255 0xfef74567 0xb8fc1390 0x3d43d1f0 0xebd96b2f 0x6c85e3ee 0xf63ace8d 0xbbcca18a 0x1a7babb4 0x301dd919 0xed02759f 0xfad2173e 0x08efea35 0xddcec07b // method "asset_transfer(address,address,uint64)uint64", method "pay_principal(address,byte[])(uint64,uint64,byte[])", method "get_account_units_current_value(address,uint64)(uint64,uint64,(uint64,uint64))", method "get_payment_amount(address,uint64)(uint64,uint64)", method "asset_create(address,byte[])void", method "asset_config(uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void", method "set_secondary_time_events(uint64[])(uint64,uint64)", method "assign_role(address,uint8,byte[])uint64", method "revoke_role(address,uint8)uint64", method "open_account(address,address)uint64", method "close_account(address)(uint64,uint64)", method "primary_distribution(address,uint64)uint64", method "set_asset_suspension(bool)uint64", method "set_account_suspension(address,bool)uint64", method "set_default_status(bool)void", method "get_asset_info()(uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)", method "get_account_info(address)(address,uint64,uint64,uint64,bool)", method "get_time_events()uint64[]", method "get_secondary_market_schedule()uint64[]", method "get_asset_metadata()byte[]"
    txna ApplicationArgs 0
    match __puya_arc4_router___asset_transfer_route@2 __puya_arc4_router___pay_principal_route@3 __puya_arc4_router___get_account_units_current_value_route@4 __puya_arc4_router___get_payment_amount_route@5 __puya_arc4_router___asset_create_route@6 __puya_arc4_router___asset_config_route@7 __puya_arc4_router___set_secondary_time_events_route@8 __puya_arc4_router___assign_role_route@9 __puya_arc4_router___revoke_role_route@10 __puya_arc4_router___open_account_route@11 __puya_arc4_router___close_account_route@12 __puya_arc4_router___primary_distribution_route@13 __puya_arc4_router___set_asset_suspension_route@14 __puya_arc4_router___set_account_suspension_route@15 __puya_arc4_router___set_default_status_route@16 __puya_arc4_router___get_asset_info_route@17 __puya_arc4_router___get_account_info_route@18 __puya_arc4_router___get_time_events_route@19 __puya_arc4_router___get_secondary_market_schedule_route@20 __puya_arc4_router___get_asset_metadata_route@21
    intc_0 // 0
    retsub

__puya_arc4_router___asset_transfer_route@2:
    // smart_contracts/zero_coupon_bond/contract.py:70
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/zero_coupon_bond/contract.py:70
    // @arc4.abimethod
    callsub asset_transfer
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___pay_principal_route@3:
    // smart_contracts/zero_coupon_bond/contract.py:114
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/zero_coupon_bond/contract.py:114
    // @arc4.abimethod
    callsub pay_principal
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___get_account_units_current_value_route@4:
    // smart_contracts/zero_coupon_bond/contract.py:153
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/zero_coupon_bond/contract.py:153
    // @arc4.abimethod(readonly=True)
    callsub get_account_units_current_value
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___get_payment_amount_route@5:
    // smart_contracts/zero_coupon_bond/contract.py:220
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/zero_coupon_bond/contract.py:220
    // @arc4.abimethod(readonly=True)
    callsub get_payment_amount
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___asset_create_route@6:
    // smart_contracts/base_d_asa/contract.py:356
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/base_d_asa/contract.py:356
    // @arc4.abimethod(create="require")
    callsub asset_create
    intc_1 // 1
    retsub

__puya_arc4_router___asset_config_route@7:
    // smart_contracts/base_d_asa/contract.py:378
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    // smart_contracts/base_d_asa/contract.py:378
    // @arc4.abimethod
    callsub asset_config
    intc_1 // 1
    retsub

__puya_arc4_router___set_secondary_time_events_route@8:
    // smart_contracts/base_d_asa/contract.py:456
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/base_d_asa/contract.py:456
    // @arc4.abimethod
    callsub set_secondary_time_events
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___assign_role_route@9:
    // smart_contracts/base_d_asa/contract.py:513
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/base_d_asa/contract.py:513
    // @arc4.abimethod
    callsub assign_role
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___revoke_role_route@10:
    // smart_contracts/base_d_asa/contract.py:568
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/base_d_asa/contract.py:568
    // @arc4.abimethod
    callsub revoke_role
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___open_account_route@11:
    // smart_contracts/base_d_asa/contract.py:612
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/base_d_asa/contract.py:612
    // @arc4.abimethod
    callsub open_account
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___close_account_route@12:
    // smart_contracts/base_d_asa/contract.py:647
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/base_d_asa/contract.py:647
    // @arc4.abimethod
    callsub close_account
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___primary_distribution_route@13:
    // smart_contracts/base_d_asa/contract.py:677
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/base_d_asa/contract.py:677
    // @arc4.abimethod
    callsub primary_distribution
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___set_asset_suspension_route@14:
    // smart_contracts/base_d_asa/contract.py:719
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/base_d_asa/contract.py:719
    // @arc4.abimethod
    callsub set_asset_suspension
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___set_account_suspension_route@15:
    // smart_contracts/base_d_asa/contract.py:737
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/base_d_asa/contract.py:737
    // @arc4.abimethod
    callsub set_account_suspension
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___set_default_status_route@16:
    // smart_contracts/base_d_asa/contract.py:760
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/base_d_asa/contract.py:760
    // @arc4.abimethod
    callsub set_default_status
    intc_1 // 1
    retsub

__puya_arc4_router___get_asset_info_route@17:
    // smart_contracts/base_d_asa/contract.py:774
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_asset_info
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___get_account_info_route@18:
    // smart_contracts/base_d_asa/contract.py:804
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/base_d_asa/contract.py:804
    // @arc4.abimethod(readonly=True)
    callsub get_account_info
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___get_time_events_route@19:
    // smart_contracts/base_d_asa/contract.py:821
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_time_events
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___get_secondary_market_schedule_route@20:
    // smart_contracts/base_d_asa/contract.py:834
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_secondary_market_schedule
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___get_asset_metadata_route@21:
    // smart_contracts/base_d_asa/contract.py:841
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_asset_metadata
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@24:
    // smart_contracts/zero_coupon_bond/contract.py:19-27
    // class ZeroCouponBond(
    //     BaseDAsa,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    intc_3 // 4
    txn OnCompletion
    match __puya_arc4_router___asset_update@25
    intc_0 // 0
    retsub

__puya_arc4_router___asset_update@25:
    // smart_contracts/base_d_asa/contract.py:368
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:368-369
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def asset_update(self) -> None:
    callsub asset_update
    intc_1 // 1
    retsub


// smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.asset_transfer(sender_holding_address: bytes, receiver_holding_address: bytes, units: bytes) -> bytes:
asset_transfer:
    // smart_contracts/zero_coupon_bond/contract.py:70-76
    // @arc4.abimethod
    // def asset_transfer(
    //     self,
    //     sender_holding_address: arc4.Address,
    //     receiver_holding_address: arc4.Address,
    //     units: arc4.UInt64,
    // ) -> arc4.UInt64:
    proto 3 1
    // smart_contracts/zero_coupon_bond/contract.py:100
    // units.native,
    frame_dig -1
    btoi
    // smart_contracts/zero_coupon_bond/contract.py:97-101
    // self.assert_asset_transfer_preconditions(
    //     sender_holding_address,
    //     receiver_holding_address,
    //     units.native,
    // )
    frame_dig -3
    frame_dig -2
    dig 2
    callsub assert_asset_transfer_preconditions
    // smart_contracts/zero_coupon_bond/contract.py:103-104
    // # Transferred units value (must be computed before the transfer)
    // sender_unit_value = self.account[sender_holding_address].unit_value
    bytec_0 // 0x52333023
    frame_dig -3
    concat
    box_get
    assert // check self.account entry exists
    extract 40 8 // on error: Index access is out of bounds
    // smart_contracts/zero_coupon_bond/contract.py:105-107
    // accrued_interest = self.accrued_interest_amount(
    //     sender_holding_address, units.native
    // )
    frame_dig -3
    dig 2
    callsub accrued_interest_amount
    // smart_contracts/zero_coupon_bond/contract.py:109-111
    // self.transfer_units(
    //     sender_holding_address, receiver_holding_address, units.native
    // )
    frame_dig -3
    frame_dig -2
    dig 4
    callsub transfer_units
    // smart_contracts/zero_coupon_bond/contract.py:112
    // return arc4.UInt64(units.native * sender_unit_value.native + accrued_interest)
    swap
    btoi
    uncover 2
    *
    +
    itob
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_asset_transfer_preconditions(sender_holding_address: bytes, receiver_holding_address: bytes, units: uint64) -> void:
assert_asset_transfer_preconditions:
    // smart_contracts/base_d_asa/contract.py:303-309
    // @subroutine
    // def assert_asset_transfer_preconditions(
    //     self,
    //     sender_holding_address: arc4.Address,
    //     receiver_holding_address: arc4.Address,
    //     units: UInt64,
    // ) -> None:
    proto 3 0
    // smart_contracts/base_d_asa/contract.py:310
    // self.assert_is_secondary_market_open()
    callsub assert_is_secondary_market_open
    // smart_contracts/base_d_asa/contract.py:311-315
    // self.assert_asset_transfer_authorization(
    //     sender_holding_address,
    //     receiver_holding_address,
    //     units,
    // )
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub assert_asset_transfer_authorization
    // smart_contracts/base_d_asa/contract.py:316-319
    // self.assert_transferred_units_fungibility(
    //     sender_holding_address,
    //     receiver_holding_address,
    // )
    frame_dig -3
    frame_dig -2
    callsub assert_transferred_units_fungibility
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_secondary_market_open() -> void:
assert_is_secondary_market_open:
    // smart_contracts/base_d_asa/contract.py:180-181
    // @subroutine
    // def assert_is_secondary_market_open(self) -> None:
    proto 0 0
    pushbytes ""
    // smart_contracts/base_d_asa/contract.py:183
    // self.status_is_active()
    callsub status_is_active
    // smart_contracts/base_d_asa/contract.py:183-186
    // self.status_is_active()
    // and self.secondary_market_opening_date
    // <= Global.latest_timestamp
    // < self.secondary_market_closure_date
    bz assert_is_secondary_market_open_bool_false@4
    // smart_contracts/base_d_asa/contract.py:184
    // and self.secondary_market_opening_date
    intc_0 // 0
    bytec 14 // "secondary_market_opening_date"
    app_global_get_ex
    assert // check self.secondary_market_opening_date exists
    // smart_contracts/base_d_asa/contract.py:185
    // <= Global.latest_timestamp
    global LatestTimestamp
    dup
    frame_bury 0
    // smart_contracts/base_d_asa/contract.py:184-185
    // and self.secondary_market_opening_date
    // <= Global.latest_timestamp
    <=
    // smart_contracts/base_d_asa/contract.py:184-186
    // and self.secondary_market_opening_date
    // <= Global.latest_timestamp
    // < self.secondary_market_closure_date
    bz assert_is_secondary_market_open_bool_false@4
    // smart_contracts/base_d_asa/contract.py:186
    // < self.secondary_market_closure_date
    intc_0 // 0
    bytec 15 // "secondary_market_closure_date"
    app_global_get_ex
    assert // check self.secondary_market_closure_date exists
    // smart_contracts/base_d_asa/contract.py:185-186
    // <= Global.latest_timestamp
    // < self.secondary_market_closure_date
    frame_dig 0
    >
    // smart_contracts/base_d_asa/contract.py:184-186
    // and self.secondary_market_opening_date
    // <= Global.latest_timestamp
    // < self.secondary_market_closure_date
    bz assert_is_secondary_market_open_bool_false@4
    intc_1 // 1
    b assert_is_secondary_market_open_bool_merge@5

assert_is_secondary_market_open_bool_false@4:
    intc_0 // 0

assert_is_secondary_market_open_bool_merge@5:
    // smart_contracts/base_d_asa/contract.py:182-187
    // assert (
    //     self.status_is_active()
    //     and self.secondary_market_opening_date
    //     <= Global.latest_timestamp
    //     < self.secondary_market_closure_date
    // ), err.SECONDARY_MARKET_CLOSED
    assert // Secondary market is closed
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.status_is_active() -> uint64:
status_is_active:
    // smart_contracts/base_d_asa/contract.py:91-92
    // @subroutine
    // def status_is_active(self) -> bool:
    proto 0 1
    // smart_contracts/base_d_asa/contract.py:93
    // return self.status == cfg.STATUS_ACTIVE
    intc_0 // 0
    bytec 9 // "status"
    app_global_get_ex
    assert // check self.status exists
    pushint 100 // 100
    ==
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_asset_transfer_authorization(sender_holding_address: bytes, receiver_holding_address: bytes, units: uint64) -> void:
assert_asset_transfer_authorization:
    // smart_contracts/base_d_asa/contract.py:264-270
    // @subroutine
    // def assert_asset_transfer_authorization(
    //     self,
    //     sender_holding_address: arc4.Address,
    //     receiver_holding_address: arc4.Address,
    //     units: UInt64,
    // ) -> None:
    proto 3 0
    // smart_contracts/base_d_asa/contract.py:271-273
    // # The reference implementation grants transfer right on secondary market to D-ASA owners. Other implementations
    // # may relay on other roles or external Apps (e.g. an order book or a transfer agent) through C2C calls.
    // assert Txn.sender == sender_holding_address, err.UNAUTHORIZED
    frame_dig -3
    txn Sender
    ==
    assert // Not authorized
    // smart_contracts/base_d_asa/contract.py:274
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:275
    // self.assert_is_not_suspended()
    callsub assert_is_not_suspended
    // smart_contracts/base_d_asa/contract.py:276
    // self.assert_valid_holding_address(sender_holding_address)
    frame_dig -3
    callsub assert_valid_holding_address
    // smart_contracts/base_d_asa/contract.py:277
    // self.assert_valid_holding_address(receiver_holding_address)
    frame_dig -2
    callsub assert_valid_holding_address
    // smart_contracts/base_d_asa/contract.py:278
    // assert not self.account[sender_holding_address].suspended.native, err.SUSPENDED
    bytec_0 // 0x52333023
    frame_dig -3
    concat
    dup
    box_get
    assert // check self.account entry exists
    intc 4 // 448
    getbit
    bytec 10 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // Suspended operations
    // smart_contracts/base_d_asa/contract.py:279
    // assert not self.account[
    bytec_0 // 0x52333023
    // smart_contracts/base_d_asa/contract.py:279-281
    // assert not self.account[
    //     receiver_holding_address
    // ].suspended.native, err.SUSPENDED
    frame_dig -2
    concat
    box_get
    assert // check self.account entry exists
    intc 4 // 448
    getbit
    bytec 10 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // Suspended operations
    // smart_contracts/base_d_asa/contract.py:283
    // units <= self.account[sender_holding_address].units.native
    box_get
    assert // check self.account entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    >=
    // smart_contracts/base_d_asa/contract.py:282-284
    // assert (
    //     units <= self.account[sender_holding_address].units.native
    // ), err.OVER_TRANSFER
    assert // Insufficient sender units to transfer
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted() -> void:
assert_is_not_defaulted:
    // smart_contracts/base_d_asa/contract.py:99-100
    // @subroutine
    // def assert_is_not_defaulted(self) -> None:
    proto 0 0
    // smart_contracts/base_d_asa/contract.py:101
    // assert not self.defaulted, err.DEFAULTED
    intc_0 // 0
    bytec 19 // "defaulted"
    app_global_get_ex
    assert // check self.defaulted exists
    !
    assert // Defaulted
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended() -> void:
assert_is_not_suspended:
    // smart_contracts/base_d_asa/contract.py:103-104
    // @subroutine
    // def assert_is_not_suspended(self) -> None:
    proto 0 0
    // smart_contracts/base_d_asa/contract.py:105
    // assert not self.suspended, err.SUSPENDED
    intc_0 // 0
    bytec 18 // "suspended"
    app_global_get_ex
    assert // check self.suspended exists
    !
    assert // Suspended operations
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address(holding_address: bytes) -> void:
assert_valid_holding_address:
    // smart_contracts/base_d_asa/contract.py:151-152
    // @subroutine
    // def assert_valid_holding_address(self, holding_address: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/base_d_asa/contract.py:153
    // assert holding_address in self.account, err.INVALID_HOLDING_ADDRESS
    bytec_0 // 0x52333023
    frame_dig -1
    concat
    box_len
    bury 1
    assert // Invalid account holding address
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_transferred_units_fungibility(sender_holding_address: bytes, receiver_holding_address: bytes) -> void:
assert_transferred_units_fungibility:
    // smart_contracts/base_d_asa/contract.py:286-291
    // @subroutine
    // def assert_transferred_units_fungibility(
    //     self,
    //     sender_holding_address: arc4.Address,
    //     receiver_holding_address: arc4.Address,
    // ) -> None:
    proto 2 0
    // smart_contracts/base_d_asa/contract.py:292
    // sender_unit_value = self.account[sender_holding_address].unit_value
    bytec_0 // 0x52333023
    frame_dig -2
    concat
    dup
    box_get
    assert // check self.account entry exists
    extract 40 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:293
    // if self.account[receiver_holding_address].units.native > 0:
    bytec_0 // 0x52333023
    frame_dig -1
    concat
    dup
    box_get
    assert // check self.account entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    bz assert_transferred_units_fungibility_else_body@2
    // smart_contracts/base_d_asa/contract.py:294-296
    // self.assert_are_units_fungible(
    //     sender_holding_address, receiver_holding_address
    // )
    frame_dig -2
    frame_dig -1
    callsub assert_are_units_fungible
    b assert_transferred_units_fungibility_after_if_else@3

assert_transferred_units_fungibility_else_body@2:
    // smart_contracts/base_d_asa/contract.py:298
    // self.account[receiver_holding_address].unit_value = sender_unit_value
    frame_dig 2
    dup
    box_get
    assert // check self.account entry exists
    frame_dig 1
    replace2 40
    dig 1
    swap
    box_put
    // smart_contracts/base_d_asa/contract.py:299-301
    // self.account[receiver_holding_address].paid_coupons = self.account[
    //     sender_holding_address
    // ].paid_coupons
    frame_dig 0
    box_get
    assert // check self.account entry exists
    // smart_contracts/base_d_asa/contract.py:299
    // self.account[receiver_holding_address].paid_coupons = self.account[
    dig 1
    box_get
    assert // check self.account entry exists
    // smart_contracts/base_d_asa/contract.py:299-301
    // self.account[receiver_holding_address].paid_coupons = self.account[
    //     sender_holding_address
    // ].paid_coupons
    swap
    extract 48 8 // on error: Index access is out of bounds
    replace2 48
    box_put

assert_transferred_units_fungibility_after_if_else@3:
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_are_units_fungible(sender: bytes, receiver: bytes) -> void:
assert_are_units_fungible:
    // smart_contracts/base_d_asa/contract.py:189-192
    // @subroutine
    // def assert_are_units_fungible(
    //     self, sender: arc4.Address, receiver: arc4.Address
    // ) -> None:
    proto 2 0
    // smart_contracts/base_d_asa/contract.py:194
    // self.account[sender].unit_value == self.account[receiver].unit_value
    bytec_0 // 0x52333023
    frame_dig -2
    concat
    dup
    box_get
    assert // check self.account entry exists
    extract 40 8 // on error: Index access is out of bounds
    bytec_0 // 0x52333023
    frame_dig -1
    concat
    dup
    cover 2
    box_get
    assert // check self.account entry exists
    extract 40 8 // on error: Index access is out of bounds
    b==
    // smart_contracts/base_d_asa/contract.py:194-195
    // self.account[sender].unit_value == self.account[receiver].unit_value
    // and self.account[sender].paid_coupons == self.account[receiver].paid_coupons
    bz assert_are_units_fungible_bool_false@3
    // smart_contracts/base_d_asa/contract.py:195
    // and self.account[sender].paid_coupons == self.account[receiver].paid_coupons
    frame_dig 0
    box_get
    assert // check self.account entry exists
    extract 48 8 // on error: Index access is out of bounds
    frame_dig 1
    box_get
    assert // check self.account entry exists
    extract 48 8 // on error: Index access is out of bounds
    b==
    // smart_contracts/base_d_asa/contract.py:194-195
    // self.account[sender].unit_value == self.account[receiver].unit_value
    // and self.account[sender].paid_coupons == self.account[receiver].paid_coupons
    bz assert_are_units_fungible_bool_false@3
    intc_1 // 1
    b assert_are_units_fungible_bool_merge@4

assert_are_units_fungible_bool_false@3:
    intc_0 // 0

assert_are_units_fungible_bool_merge@4:
    // smart_contracts/base_d_asa/contract.py:193-196
    // assert (
    //     self.account[sender].unit_value == self.account[receiver].unit_value
    //     and self.account[sender].paid_coupons == self.account[receiver].paid_coupons
    // ), err.NON_FUNGIBLE_UNITS
    assert // Sender and receiver units are not fungible
    retsub


// smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.accrued_interest_amount(holding_address: bytes, units: uint64) -> uint64:
accrued_interest_amount:
    // smart_contracts/zero_coupon_bond/contract.py:54-57
    // @subroutine
    // def accrued_interest_amount(
    //     self, holding_address: arc4.Address, units: UInt64
    // ) -> UInt64:
    proto 2 1
    // smart_contracts/zero_coupon_bond/contract.py:58
    // day_count_factor = self.day_count_factor()
    callsub day_count_factor
    // smart_contracts/zero_coupon_bond/contract.py:59
    // accrued_period = day_count_factor.numerator.native
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    // smart_contracts/zero_coupon_bond/contract.py:60
    // principal_period = day_count_factor.denominator.native
    swap
    extract 8 8 // on error: Index access is out of bounds
    btoi
    // smart_contracts/zero_coupon_bond/contract.py:62
    // self.account_units_value(holding_address, units)
    frame_dig -2
    frame_dig -1
    callsub account_units_value
    // smart_contracts/zero_coupon_bond/contract.py:63
    // * self.interest_rate
    intc_0 // 0
    bytec 7 // "interest_rate"
    app_global_get_ex
    assert // check self.interest_rate exists
    // smart_contracts/zero_coupon_bond/contract.py:62-63
    // self.account_units_value(holding_address, units)
    // * self.interest_rate
    *
    // smart_contracts/zero_coupon_bond/contract.py:62-64
    // self.account_units_value(holding_address, units)
    // * self.interest_rate
    // * accrued_period
    uncover 2
    *
    // smart_contracts/zero_coupon_bond/contract.py:66
    // cst.BPS * principal_period
    intc 5 // 10000
    uncover 2
    *
    // smart_contracts/zero_coupon_bond/contract.py:62-67
    // self.account_units_value(holding_address, units)
    // * self.interest_rate
    // * accrued_period
    // // (
    //     cst.BPS * principal_period
    // )  # div-by-zero: principal_period != 0 due to assert_time_events_sorted checks
    /
    // smart_contracts/zero_coupon_bond/contract.py:61-68
    // return (
    //     self.account_units_value(holding_address, units)
    //     * self.interest_rate
    //     * accrued_period
    //     // (
    //         cst.BPS * principal_period
    //     )  # div-by-zero: principal_period != 0 due to assert_time_events_sorted checks
    // )
    retsub


// smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.day_count_factor() -> bytes:
day_count_factor:
    // smart_contracts/zero_coupon_bond/contract.py:41-42
    // @subroutine
    // def day_count_factor(self) -> typ.DayCountFactor:
    proto 0 1
    // smart_contracts/zero_coupon_bond/contract.py:43-44
    // # The reference implementation supports only the Actual/Actual and Continuous day-count conventions
    // accrued_period = Global.latest_timestamp - self.issuance_date
    global LatestTimestamp
    intc_0 // 0
    bytec 4 // "issuance_date"
    app_global_get_ex
    assert // check self.issuance_date exists
    -
    dup
    // smart_contracts/zero_coupon_bond/contract.py:45
    // principal_period = self.maturity_date - self.issuance_date
    intc_0 // 0
    bytec_3 // "maturity_date"
    app_global_get_ex
    assert // check self.maturity_date exists
    intc_0 // 0
    bytec 4 // "issuance_date"
    app_global_get_ex
    assert // check self.issuance_date exists
    -
    dup
    cover 2
    // smart_contracts/zero_coupon_bond/contract.py:46
    // if self.day_count_convention == UInt64(cst.DCC_A_A):
    intc_0 // 0
    bytec 12 // "day_count_convention"
    app_global_get_ex
    assert // check self.day_count_convention exists
    pushint 100 // 100
    ==
    swap
    cover 2
    bz day_count_factor_after_if_else@2
    // smart_contracts/zero_coupon_bond/contract.py:47
    // accrued_period = self.days_in(accrued_period)
    frame_dig 0
    callsub days_in
    // smart_contracts/zero_coupon_bond/contract.py:48
    // principal_period = self.days_in(principal_period)
    frame_dig 1
    callsub days_in
    frame_bury 2
    frame_bury 3

day_count_factor_after_if_else@2:
    frame_dig 2
    frame_dig 3
    // smart_contracts/zero_coupon_bond/contract.py:50
    // numerator=arc4.UInt64(accrued_period),
    itob
    // smart_contracts/zero_coupon_bond/contract.py:51
    // denominator=arc4.UInt64(principal_period),
    swap
    itob
    // smart_contracts/zero_coupon_bond/contract.py:49-52
    // return typ.DayCountFactor(
    //     numerator=arc4.UInt64(accrued_period),
    //     denominator=arc4.UInt64(principal_period),
    // )
    concat
    frame_bury 0
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.days_in(time_period: uint64) -> uint64:
days_in:
    // smart_contracts/base_d_asa/contract.py:249-250
    // @subroutine
    // def days_in(self, time_period: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/base_d_asa/contract.py:251
    // return time_period // UInt64(cst.DAY_2_SEC)
    frame_dig -1
    intc 6 // 86400
    /
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.account_units_value(holding_address: bytes, units: uint64) -> uint64:
account_units_value:
    // smart_contracts/base_d_asa/contract.py:225-228
    // @subroutine
    // def account_units_value(
    //     self, holding_address: arc4.Address, units: UInt64
    // ) -> UInt64:
    proto 2 1
    // smart_contracts/base_d_asa/contract.py:229
    // return units * self.account[holding_address].unit_value.native
    bytec_0 // 0x52333023
    frame_dig -2
    concat
    box_get
    assert // check self.account entry exists
    extract 40 8 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    *
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.transfer_units(sender_holding_address: bytes, receiver_holding_address: bytes, units: uint64) -> void:
transfer_units:
    // smart_contracts/base_d_asa/contract.py:321-327
    // @subroutine
    // def transfer_units(
    //     self,
    //     sender_holding_address: arc4.Address,
    //     receiver_holding_address: arc4.Address,
    //     units: UInt64,
    // ) -> None:
    proto 3 0
    // smart_contracts/base_d_asa/contract.py:329
    // self.account[sender_holding_address].units.native - units
    bytec_0 // 0x52333023
    frame_dig -3
    concat
    dup
    box_get
    assert // check self.account entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    -
    // smart_contracts/base_d_asa/contract.py:328-330
    // self.account[sender_holding_address].units = arc4.UInt64(
    //     self.account[sender_holding_address].units.native - units
    // )
    itob
    // smart_contracts/base_d_asa/contract.py:328
    // self.account[sender_holding_address].units = arc4.UInt64(
    dig 1
    box_get
    assert // check self.account entry exists
    // smart_contracts/base_d_asa/contract.py:328-330
    // self.account[sender_holding_address].units = arc4.UInt64(
    //     self.account[sender_holding_address].units.native - units
    // )
    swap
    replace2 32
    box_put
    // smart_contracts/base_d_asa/contract.py:332
    // self.account[receiver_holding_address].units.native + units
    bytec_0 // 0x52333023
    frame_dig -2
    concat
    dup
    box_get
    assert // check self.account entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    +
    // smart_contracts/base_d_asa/contract.py:331-333
    // self.account[receiver_holding_address].units = arc4.UInt64(
    //     self.account[receiver_holding_address].units.native + units
    // )
    itob
    // smart_contracts/base_d_asa/contract.py:331
    // self.account[receiver_holding_address].units = arc4.UInt64(
    dig 1
    box_get
    assert // check self.account entry exists
    // smart_contracts/base_d_asa/contract.py:331-333
    // self.account[receiver_holding_address].units = arc4.UInt64(
    //     self.account[receiver_holding_address].units.native + units
    // )
    swap
    replace2 32
    box_put
    // smart_contracts/base_d_asa/contract.py:334
    // self.reset_account_if_zero_units(sender_holding_address)
    frame_dig -3
    callsub reset_account_if_zero_units
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.reset_account_if_zero_units(holding_address: bytes) -> void:
reset_account_if_zero_units:
    // smart_contracts/base_d_asa/contract.py:253-254
    // @subroutine
    // def reset_account_if_zero_units(self, holding_address: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/base_d_asa/contract.py:255
    // if self.account[holding_address].units.native == 0:
    bytec_0 // 0x52333023
    frame_dig -1
    concat
    dup
    box_get
    assert // check self.account entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    bnz reset_account_if_zero_units_after_if_else@2
    // smart_contracts/base_d_asa/contract.py:256
    // self.account[holding_address].unit_value = arc4.UInt64()
    frame_dig 0
    dup
    box_get
    assert // check self.account entry exists
    bytec 5 // 0x0000000000000000
    replace2 40
    dig 1
    swap
    box_put
    // smart_contracts/base_d_asa/contract.py:257
    // self.account[holding_address].paid_coupons = arc4.UInt64()
    dup
    box_get
    assert // check self.account entry exists
    bytec 5 // 0x0000000000000000
    replace2 48
    box_put

reset_account_if_zero_units_after_if_else@2:
    retsub


// smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.pay_principal(holding_address: bytes, payment_info: bytes) -> bytes:
pay_principal:
    // smart_contracts/zero_coupon_bond/contract.py:114-117
    // @arc4.abimethod
    // def pay_principal(
    //     self, holding_address: arc4.Address, payment_info: arc4.DynamicBytes
    // ) -> typ.PaymentResult:
    proto 2 1
    // smart_contracts/zero_coupon_bond/contract.py:136
    // self.assert_pay_principal_authorization(holding_address)
    frame_dig -2
    callsub assert_pay_principal_authorization
    // smart_contracts/zero_coupon_bond/contract.py:138
    // if self.is_payment_executable(holding_address):
    frame_dig -2
    callsub is_payment_executable
    bz pay_principal_else_body@2
    // smart_contracts/zero_coupon_bond/contract.py:139
    // payment_amount = self.account_total_units_value(holding_address)
    frame_dig -2
    callsub account_total_units_value
    dup
    // smart_contracts/zero_coupon_bond/contract.py:140-141
    // # The reference implementation has on-chain payment agent
    // self.pay(self.account[holding_address].payment_address, payment_amount)
    bytec_0 // 0x52333023
    frame_dig -2
    concat
    box_get
    assert // check self.account entry exists
    extract 0 32 // on error: Index access is out of bounds
    swap
    callsub pay
    b pay_principal_after_if_else@3

pay_principal_else_body@2:
    // smart_contracts/zero_coupon_bond/contract.py:143-144
    // # Accounts suspended or not opted in at the time of payments must not stall the D-ASA
    // payment_amount = UInt64()
    intc_0 // 0

pay_principal_after_if_else@3:
    // smart_contracts/zero_coupon_bond/contract.py:146
    // self.update_supply_after_principal_payment(holding_address)
    frame_dig -2
    callsub update_supply_after_principal_payment
    // smart_contracts/zero_coupon_bond/contract.py:148
    // amount=arc4.UInt64(payment_amount),
    itob
    // smart_contracts/zero_coupon_bond/contract.py:149
    // timestamp=arc4.UInt64(Global.latest_timestamp),
    global LatestTimestamp
    itob
    // smart_contracts/zero_coupon_bond/contract.py:147-151
    // return typ.PaymentResult(
    //     amount=arc4.UInt64(payment_amount),
    //     timestamp=arc4.UInt64(Global.latest_timestamp),
    //     context=payment_info.copy(),  # TODO: Add info on failed payment
    // )
    concat
    pushbytes 0x0012
    concat
    frame_dig -1
    concat
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_pay_principal_authorization(holding_address: bytes) -> void:
assert_pay_principal_authorization:
    // smart_contracts/base_d_asa/contract.py:336-337
    // @subroutine
    // def assert_pay_principal_authorization(self, holding_address: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/base_d_asa/contract.py:338-339
    // # The reference implementation does not restrict caller authorization
    // assert self.status_is_active(), err.UNAUTHORIZED
    callsub status_is_active
    assert // Not authorized
    // smart_contracts/base_d_asa/contract.py:340
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:341
    // self.assert_is_not_suspended()
    callsub assert_is_not_suspended
    // smart_contracts/base_d_asa/contract.py:342
    // self.assert_valid_holding_address(holding_address)
    frame_dig -1
    callsub assert_valid_holding_address
    // smart_contracts/base_d_asa/contract.py:343
    // units = self.account[holding_address].units.native
    bytec_0 // 0x52333023
    frame_dig -1
    concat
    box_get
    assert // check self.account entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    // smart_contracts/base_d_asa/contract.py:344
    // assert units > 0, err.NO_UNITS
    assert // No D-ASA units
    // smart_contracts/base_d_asa/contract.py:345
    // assert Global.latest_timestamp >= self.maturity_date, err.NOT_MATURE
    global LatestTimestamp
    intc_0 // 0
    bytec_3 // "maturity_date"
    app_global_get_ex
    assert // check self.maturity_date exists
    >=
    assert // Not mature
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.is_payment_executable(holding_address: bytes) -> uint64:
is_payment_executable:
    // smart_contracts/base_d_asa/contract.py:207-208
    // @subroutine
    // def is_payment_executable(self, holding_address: arc4.Address) -> bool:
    proto 1 1
    // smart_contracts/base_d_asa/contract.py:210
    // self.account[holding_address].payment_address.native.is_opted_in(
    bytec_0 // 0x52333023
    frame_dig -1
    concat
    dup
    box_get
    assert // check self.account entry exists
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:211
    // Asset(self.denomination_asset_id)
    intc_0 // 0
    bytec 6 // "denomination_asset_id"
    app_global_get_ex
    assert // check self.denomination_asset_id exists
    // smart_contracts/base_d_asa/contract.py:210-212
    // self.account[holding_address].payment_address.native.is_opted_in(
    //     Asset(self.denomination_asset_id)
    // )
    asset_holding_get AssetBalance
    bury 1
    // smart_contracts/base_d_asa/contract.py:210-213
    // self.account[holding_address].payment_address.native.is_opted_in(
    //     Asset(self.denomination_asset_id)
    // )
    // and not self.account[holding_address].suspended.native
    bz is_payment_executable_bool_false@3
    // smart_contracts/base_d_asa/contract.py:213
    // and not self.account[holding_address].suspended.native
    frame_dig 0
    box_get
    assert // check self.account entry exists
    intc 4 // 448
    getbit
    bytec 10 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    bnz is_payment_executable_bool_false@3
    intc_1 // 1
    b is_payment_executable_bool_merge@4

is_payment_executable_bool_false@3:
    intc_0 // 0

is_payment_executable_bool_merge@4:
    // smart_contracts/base_d_asa/contract.py:209-214
    // return (
    //     self.account[holding_address].payment_address.native.is_opted_in(
    //         Asset(self.denomination_asset_id)
    //     )
    //     and not self.account[holding_address].suspended.native
    // )
    swap
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.account_total_units_value(holding_address: bytes) -> uint64:
account_total_units_value:
    // smart_contracts/base_d_asa/contract.py:231-232
    // @subroutine
    // def account_total_units_value(self, holding_address: arc4.Address) -> UInt64:
    proto 1 1
    // smart_contracts/base_d_asa/contract.py:234
    // holding_address, self.account[holding_address].units.native
    bytec_0 // 0x52333023
    frame_dig -1
    concat
    box_get
    assert // check self.account entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    // smart_contracts/base_d_asa/contract.py:233-235
    // return self.account_units_value(
    //     holding_address, self.account[holding_address].units.native
    // )
    frame_dig -1
    swap
    callsub account_units_value
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.pay(receiver: bytes, amount: uint64) -> void:
pay:
    // smart_contracts/base_d_asa/contract.py:216-217
    // @subroutine
    // def pay(self, receiver: arc4.Address, amount: UInt64) -> None:
    proto 2 0
    // smart_contracts/base_d_asa/contract.py:218-223
    // itxn.AssetTransfer(
    //     xfer_asset=self.denomination_asset_id,
    //     asset_receiver=receiver.native,
    //     asset_amount=amount,
    //     fee=Global.min_txn_fee,
    // ).submit()
    itxn_begin
    // smart_contracts/base_d_asa/contract.py:222
    // fee=Global.min_txn_fee,
    global MinTxnFee
    // smart_contracts/base_d_asa/contract.py:219
    // xfer_asset=self.denomination_asset_id,
    intc_0 // 0
    bytec 6 // "denomination_asset_id"
    app_global_get_ex
    assert // check self.denomination_asset_id exists
    frame_dig -1
    itxn_field AssetAmount
    frame_dig -2
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/base_d_asa/contract.py:218
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    itxn_field Fee
    // smart_contracts/base_d_asa/contract.py:218-223
    // itxn.AssetTransfer(
    //     xfer_asset=self.denomination_asset_id,
    //     asset_receiver=receiver.native,
    //     asset_amount=amount,
    //     fee=Global.min_txn_fee,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.update_supply_after_principal_payment(holding_address: bytes) -> void:
update_supply_after_principal_payment:
    // smart_contracts/base_d_asa/contract.py:348-351
    // @subroutine
    // def update_supply_after_principal_payment(
    //     self, holding_address: arc4.Address
    // ) -> None:
    proto 1 0
    // smart_contracts/base_d_asa/contract.py:352
    // self.circulating_units -= self.account[holding_address].units.native
    intc_0 // 0
    bytec_2 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    bytec_0 // 0x52333023
    frame_dig -1
    concat
    dup
    box_get
    assert // check self.account entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    uncover 2
    swap
    -
    bytec_2 // "circulating_units"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:353
    // self.account[holding_address].units = arc4.UInt64()
    dup
    box_get
    assert // check self.account entry exists
    bytec 5 // 0x0000000000000000
    replace2 32
    box_put
    // smart_contracts/base_d_asa/contract.py:354
    // self.end_if_no_circulating_units()
    callsub end_if_no_circulating_units
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units() -> void:
end_if_no_circulating_units:
    // smart_contracts/base_d_asa/contract.py:259-260
    // @subroutine
    // def end_if_no_circulating_units(self) -> None:
    proto 0 0
    // smart_contracts/base_d_asa/contract.py:261
    // if self.circulating_units == 0:
    intc_0 // 0
    bytec_2 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    bnz end_if_no_circulating_units_after_if_else@2
    // smart_contracts/base_d_asa/contract.py:262
    // self.status = UInt64(cfg.STATUS_ENDED)
    bytec 9 // "status"
    pushint 200 // 200
    app_global_put

end_if_no_circulating_units_after_if_else@2:
    retsub


// smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.get_account_units_current_value(holding_address: bytes, units: bytes) -> bytes:
get_account_units_current_value:
    // smart_contracts/zero_coupon_bond/contract.py:153-156
    // @arc4.abimethod(readonly=True)
    // def get_account_units_current_value(
    //     self, holding_address: arc4.Address, units: arc4.UInt64
    // ) -> typ.CurrentUnitsValue:
    proto 2 1
    pushbytes ""
    dupn 9
    // smart_contracts/zero_coupon_bond/contract.py:173
    // self.primary_distribution_opening_date
    intc_0 // 0
    bytec 8 // "primary_distribution_opening_date"
    app_global_get_ex
    assert // check self.primary_distribution_opening_date exists
    // smart_contracts/zero_coupon_bond/contract.py:173-174
    // self.primary_distribution_opening_date
    // and Global.latest_timestamp >= self.primary_distribution_opening_date
    bz get_account_units_current_value_bool_false@3
    // smart_contracts/zero_coupon_bond/contract.py:174
    // and Global.latest_timestamp >= self.primary_distribution_opening_date
    global LatestTimestamp
    intc_0 // 0
    bytec 8 // "primary_distribution_opening_date"
    app_global_get_ex
    assert // check self.primary_distribution_opening_date exists
    >=
    // smart_contracts/zero_coupon_bond/contract.py:173-174
    // self.primary_distribution_opening_date
    // and Global.latest_timestamp >= self.primary_distribution_opening_date
    bz get_account_units_current_value_bool_false@3
    intc_1 // 1
    b get_account_units_current_value_bool_merge@4

get_account_units_current_value_bool_false@3:
    intc_0 // 0

get_account_units_current_value_bool_merge@4:
    // smart_contracts/zero_coupon_bond/contract.py:172-175
    // assert (
    //     self.primary_distribution_opening_date
    //     and Global.latest_timestamp >= self.primary_distribution_opening_date
    // ), err.NO_PRIMARY_DISTRIBUTION
    assert // Primary distribution not yet executed
    // smart_contracts/zero_coupon_bond/contract.py:176
    // self.assert_valid_holding_address(holding_address)
    frame_dig -2
    callsub assert_valid_holding_address
    // smart_contracts/zero_coupon_bond/contract.py:178
    // 0 < units <= self.account[holding_address].units.native
    frame_dig -1
    bytec 5 // 0x0000000000000000
    b>
    bz get_account_units_current_value_bool_false@7
    bytec_0 // 0x52333023
    frame_dig -2
    concat
    box_get
    assert // check self.account entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    itob
    frame_dig -1
    b>=
    bz get_account_units_current_value_bool_false@7
    intc_1 // 1
    b get_account_units_current_value_bool_merge@8

get_account_units_current_value_bool_false@7:
    intc_0 // 0

get_account_units_current_value_bool_merge@8:
    // smart_contracts/zero_coupon_bond/contract.py:177-179
    // assert (
    //     0 < units <= self.account[holding_address].units.native
    // ), err.INVALID_UNITS
    assert // Invalid amount of units for the account
    // smart_contracts/zero_coupon_bond/contract.py:182
    // holding_address, units.native
    frame_dig -1
    btoi
    dup
    frame_bury 9
    // smart_contracts/zero_coupon_bond/contract.py:181-183
    // account_units_nominal_value = self.account_units_value(
    //     holding_address, units.native
    // )
    frame_dig -2
    swap
    callsub account_units_value
    dup
    frame_bury 1
    // smart_contracts/zero_coupon_bond/contract.py:185
    // account_units_nominal_value * self.interest_rate // cst.BPS
    intc_0 // 0
    bytec 7 // "interest_rate"
    app_global_get_ex
    assert // check self.interest_rate exists
    dig 1
    *
    intc 5 // 10000
    /
    // smart_contracts/zero_coupon_bond/contract.py:190
    // account_units_nominal_value - account_units_discount
    -
    // smart_contracts/zero_coupon_bond/contract.py:188-191
    // # Value during primary distribution
    // account_units_current_value = (
    //     account_units_nominal_value - account_units_discount
    // )
    frame_bury 0
    // smart_contracts/zero_coupon_bond/contract.py:193-194
    // # Accruing interest during primary distribution and at maturity
    // accrued_interest = UInt64()
    intc_0 // 0
    dup
    frame_bury 2
    // smart_contracts/zero_coupon_bond/contract.py:195
    // numerator = UInt64()
    intc_0 // 0
    dup
    frame_bury 7
    // smart_contracts/zero_coupon_bond/contract.py:196
    // denominator = UInt64()
    intc_0 // 0
    dup
    frame_bury 5
    // smart_contracts/zero_coupon_bond/contract.py:198-199
    // # Accruing interest
    // if self.issuance_date <= Global.latest_timestamp < self.maturity_date:
    intc_0 // 0
    bytec 4 // "issuance_date"
    app_global_get_ex
    assert // check self.issuance_date exists
    global LatestTimestamp
    dup
    frame_bury 4
    <=
    swap
    frame_bury 6
    swap
    frame_bury 8
    swap
    frame_bury 3
    bz get_account_units_current_value_after_if_else@11
    intc_0 // 0
    bytec_3 // "maturity_date"
    app_global_get_ex
    assert // check self.maturity_date exists
    frame_dig 4
    >
    frame_dig 5
    frame_bury 6
    frame_dig 7
    frame_bury 8
    frame_dig 2
    frame_bury 3
    bz get_account_units_current_value_after_if_else@11
    // smart_contracts/zero_coupon_bond/contract.py:200
    // day_count_factor = self.day_count_factor()
    callsub day_count_factor
    // smart_contracts/zero_coupon_bond/contract.py:201-203
    // accrued_interest = self.accrued_interest_amount(
    //     holding_address, units.native
    // )
    frame_dig -2
    frame_dig 9
    callsub accrued_interest_amount
    // smart_contracts/zero_coupon_bond/contract.py:204
    // numerator = day_count_factor.numerator.native
    dig 1
    extract 0 8 // on error: Index access is out of bounds
    btoi
    // smart_contracts/zero_coupon_bond/contract.py:205
    // denominator = day_count_factor.denominator.native
    uncover 2
    extract 8 8 // on error: Index access is out of bounds
    btoi
    frame_bury 6
    frame_bury 8
    frame_bury 3

get_account_units_current_value_after_if_else@11:
    frame_dig 6
    frame_bury 5
    frame_dig 8
    frame_bury 7
    frame_dig 3
    frame_bury 2
    // smart_contracts/zero_coupon_bond/contract.py:207-208
    // # Value at maturity
    // if Global.latest_timestamp >= self.maturity_date:
    global LatestTimestamp
    intc_0 // 0
    bytec_3 // "maturity_date"
    app_global_get_ex
    assert // check self.maturity_date exists
    >=
    bz get_account_units_current_value_after_if_else@13
    frame_dig 1
    frame_bury 0

get_account_units_current_value_after_if_else@13:
    // smart_contracts/zero_coupon_bond/contract.py:212
    // units_value=arc4.UInt64(account_units_current_value),
    frame_dig 0
    itob
    // smart_contracts/zero_coupon_bond/contract.py:213
    // accrued_interest=arc4.UInt64(accrued_interest),
    frame_dig 2
    itob
    // smart_contracts/zero_coupon_bond/contract.py:215
    // numerator=arc4.UInt64(numerator),
    frame_dig 7
    itob
    // smart_contracts/zero_coupon_bond/contract.py:216
    // denominator=arc4.UInt64(denominator),
    frame_dig 5
    itob
    // smart_contracts/zero_coupon_bond/contract.py:214-217
    // day_count_factor=typ.DayCountFactor(
    //     numerator=arc4.UInt64(numerator),
    //     denominator=arc4.UInt64(denominator),
    // ),
    concat
    // smart_contracts/zero_coupon_bond/contract.py:211-218
    // return typ.CurrentUnitsValue(
    //     units_value=arc4.UInt64(account_units_current_value),
    //     accrued_interest=arc4.UInt64(accrued_interest),
    //     day_count_factor=typ.DayCountFactor(
    //         numerator=arc4.UInt64(numerator),
    //         denominator=arc4.UInt64(denominator),
    //     ),
    // )
    cover 2
    concat
    swap
    concat
    frame_bury 0
    retsub


// smart_contracts.zero_coupon_bond.contract.ZeroCouponBond.get_payment_amount(holding_address: bytes, payment_index: bytes) -> bytes:
get_payment_amount:
    // smart_contracts/zero_coupon_bond/contract.py:220-223
    // @arc4.abimethod(readonly=True)
    // def get_payment_amount(
    //     self, holding_address: arc4.Address, payment_index: arc4.UInt64
    // ) -> typ.PaymentAmounts:
    proto 2 1
    // smart_contracts/zero_coupon_bond/contract.py:238
    // self.assert_valid_holding_address(holding_address)
    frame_dig -2
    callsub assert_valid_holding_address
    // smart_contracts/zero_coupon_bond/contract.py:239
    // interest_amount = UInt64()
    intc_0 // 0
    // smart_contracts/zero_coupon_bond/contract.py:240
    // principal_amount = UInt64()
    dup
    // smart_contracts/zero_coupon_bond/contract.py:241
    // if self.status_is_active():
    callsub status_is_active
    bz get_payment_amount_after_if_else@2
    // smart_contracts/zero_coupon_bond/contract.py:242
    // assert payment_index.native == 1, err.INVALID_PAYMENT_INDEX
    frame_dig -1
    btoi
    intc_1 // 1
    ==
    assert // Invalid 1-based payment index
    // smart_contracts/zero_coupon_bond/contract.py:243
    // principal_amount = self.account_total_units_value(holding_address)
    frame_dig -2
    callsub account_total_units_value
    dup
    frame_bury 1
    // smart_contracts/zero_coupon_bond/contract.py:244
    // interest_amount = principal_amount * self.interest_rate // cst.BPS
    intc_0 // 0
    bytec 7 // "interest_rate"
    app_global_get_ex
    assert // check self.interest_rate exists
    *
    intc 5 // 10000
    /
    frame_bury 0

get_payment_amount_after_if_else@2:
    // smart_contracts/zero_coupon_bond/contract.py:246
    // interest=arc4.UInt64(interest_amount),
    frame_dig 0
    itob
    // smart_contracts/zero_coupon_bond/contract.py:247
    // principal=arc4.UInt64(principal_amount),
    frame_dig 1
    itob
    // smart_contracts/zero_coupon_bond/contract.py:245-248
    // return typ.PaymentAmounts(
    //     interest=arc4.UInt64(interest_amount),
    //     principal=arc4.UInt64(principal_amount),
    // )
    concat
    frame_bury 0
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.asset_create(arranger: bytes, metadata: bytes) -> void:
asset_create:
    // smart_contracts/base_d_asa/contract.py:356-357
    // @arc4.abimethod(create="require")
    // def asset_create(self, arranger: arc4.Address, metadata: typ.AssetMetadata) -> None:
    proto 2 0
    // smart_contracts/base_d_asa/contract.py:365
    // self.arranger = arranger.native
    bytec 16 // "arranger"
    frame_dig -2
    app_global_put
    // smart_contracts/base_d_asa/contract.py:366
    // self.metadata = metadata.native
    frame_dig -1
    extract 2 0
    bytec 20 // "metadata"
    swap
    app_global_put
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.asset_config(denomination_asset_id: bytes, principal: bytes, minimum_denomination: bytes, day_count_convention: bytes, interest_rate: bytes, coupon_rates: bytes, time_events: bytes, time_periods: bytes) -> void:
asset_config:
    // smart_contracts/base_d_asa/contract.py:378-389
    // @arc4.abimethod
    // def asset_config(
    //     self,
    //     denomination_asset_id: arc4.UInt64,
    //     principal: arc4.UInt64,
    //     minimum_denomination: arc4.UInt64,
    //     day_count_convention: arc4.UInt8,
    //     interest_rate: arc4.UInt16,
    //     coupon_rates: typ.CouponRates,
    //     time_events: typ.TimeEvents,
    //     time_periods: typ.TimePeriods,
    // ) -> None:
    proto 8 0
    // smart_contracts/base_d_asa/contract.py:412
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    // smart_contracts/base_d_asa/contract.py:413
    // assert self.status == cfg.STATUS_EMPTY, err.ALREADY_CONFIGURED
    intc_0 // 0
    bytec 9 // "status"
    app_global_get_ex
    assert // check self.status exists
    !
    assert // D-ASA already configured
    // smart_contracts/base_d_asa/contract.py:415
    // self.denomination_asset_id = denomination_asset_id.native
    frame_dig -8
    btoi
    bytec 6 // "denomination_asset_id"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:416-417
    // # The reference implementation has on-chain payment agent
    // self.opt_in_denomination_asset()
    callsub opt_in_denomination_asset
    // smart_contracts/base_d_asa/contract.py:420
    // principal.native % minimum_denomination.native == 0
    frame_dig -7
    btoi
    frame_dig -6
    btoi
    dup2
    %
    !
    // smart_contracts/base_d_asa/contract.py:419-421
    // assert (
    //     principal.native % minimum_denomination.native == 0
    // ), err.INVALID_MINIMUM_DENOMINATION
    assert // Minimum denomination is not a divisor of principal
    // smart_contracts/base_d_asa/contract.py:422
    // self.unit_value = minimum_denomination.native
    bytec 11 // "unit_value"
    dig 1
    app_global_put
    // smart_contracts/base_d_asa/contract.py:423
    // self.total_units = principal.native // minimum_denomination.native
    /
    bytec 13 // "total_units"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:425-426
    // # The reference implementation supports only the Actual/Actual and Continuous day-count conventions
    // assert day_count_convention.native in (
    frame_dig -5
    btoi
    dup
    // smart_contracts/base_d_asa/contract.py:427
    // UInt64(cst.DCC_A_A),
    pushint 100 // 100
    // smart_contracts/base_d_asa/contract.py:425-429
    // # The reference implementation supports only the Actual/Actual and Continuous day-count conventions
    // assert day_count_convention.native in (
    //     UInt64(cst.DCC_A_A),
    //     UInt64(cst.DCC_CONT),
    // ), err.INVALID_DAY_COUNT_CONVENTION
    ==
    bnz asset_config_bool_true@2
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:428
    // UInt64(cst.DCC_CONT),
    pushint 255 // 255
    // smart_contracts/base_d_asa/contract.py:425-429
    // # The reference implementation supports only the Actual/Actual and Continuous day-count conventions
    // assert day_count_convention.native in (
    //     UInt64(cst.DCC_A_A),
    //     UInt64(cst.DCC_CONT),
    // ), err.INVALID_DAY_COUNT_CONVENTION
    ==
    bz asset_config_bool_false@3

asset_config_bool_true@2:
    intc_1 // 1
    b asset_config_bool_merge@4

asset_config_bool_false@3:
    intc_0 // 0

asset_config_bool_merge@4:
    // smart_contracts/base_d_asa/contract.py:425-429
    // # The reference implementation supports only the Actual/Actual and Continuous day-count conventions
    // assert day_count_convention.native in (
    //     UInt64(cst.DCC_A_A),
    //     UInt64(cst.DCC_CONT),
    // ), err.INVALID_DAY_COUNT_CONVENTION
    assert // Invalid day-count convention ID
    // smart_contracts/base_d_asa/contract.py:430
    // self.day_count_convention = day_count_convention.native
    bytec 12 // "day_count_convention"
    frame_dig 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:432-433
    // # Set Interest Rate
    // self.interest_rate = interest_rate.native
    frame_dig -4
    btoi
    bytec 7 // "interest_rate"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:435-436
    // # Set Coupons
    // self.total_coupons = coupon_rates.length
    frame_dig -3
    intc_0 // 0
    extract_uint16
    bytec 21 // "total_coupons"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:437
    // self.coupon_rates.value = coupon_rates.copy()
    bytec 27 // 0x636f75706f6e5261746573
    box_del
    pop
    bytec 27 // 0x636f75706f6e5261746573
    frame_dig -3
    box_put
    // smart_contracts/base_d_asa/contract.py:441
    // time_events.length == self.total_coupons + cfg.TIME_SCHEDULE_LIMITS
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    bytec 21 // "total_coupons"
    app_global_get_ex
    assert // check self.total_coupons exists
    intc_3 // 4
    +
    ==
    // smart_contracts/base_d_asa/contract.py:439-442
    // # Set Time Events
    // assert (
    //     time_events.length == self.total_coupons + cfg.TIME_SCHEDULE_LIMITS
    // ), err.INVALID_TIME_EVENTS_LENGTH
    assert // Time events length is invalid
    // smart_contracts/base_d_asa/contract.py:444
    // time_events[cfg.PRIMARY_DISTRIBUTION_OPENING_DATE_IDX].native
    frame_dig -2
    extract 2 0
    extract 0 8 // on error: Index access is out of bounds
    btoi
    // smart_contracts/base_d_asa/contract.py:445
    // > Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/base_d_asa/contract.py:444-445
    // time_events[cfg.PRIMARY_DISTRIBUTION_OPENING_DATE_IDX].native
    // > Global.latest_timestamp
    >
    // smart_contracts/base_d_asa/contract.py:443-446
    // assert (
    //     time_events[cfg.PRIMARY_DISTRIBUTION_OPENING_DATE_IDX].native
    //     > Global.latest_timestamp
    // ), err.INVALID_TIME
    assert // Time events must be set in the future
    // smart_contracts/base_d_asa/contract.py:447
    // self.assert_time_events_sorted(time_events)
    frame_dig -2
    callsub assert_time_events_sorted
    dup
    frame_bury -2
    // smart_contracts/base_d_asa/contract.py:448
    // self.set_time_events(time_events)
    callsub set_time_events
    frame_bury -2
    // smart_contracts/base_d_asa/contract.py:450-452
    // # Set Time Periods
    // # The reference implementation does not use time periods
    // assert not time_periods.length
    frame_dig -1
    intc_0 // 0
    extract_uint16
    !
    assert
    // smart_contracts/base_d_asa/contract.py:454
    // self.status = UInt64(cfg.STATUS_ACTIVE)
    bytec 9 // "status"
    pushint 100 // 100
    app_global_put
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger() -> void:
assert_caller_is_arranger:
    // smart_contracts/base_d_asa/contract.py:107-108
    // @subroutine
    // def assert_caller_is_arranger(self) -> None:
    proto 0 0
    // smart_contracts/base_d_asa/contract.py:109
    // assert Txn.sender == self.arranger, err.UNAUTHORIZED
    txn Sender
    intc_0 // 0
    bytec 16 // "arranger"
    app_global_get_ex
    assert // check self.arranger exists
    ==
    assert // Not authorized
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.opt_in_denomination_asset() -> void:
opt_in_denomination_asset:
    // smart_contracts/base_d_asa/contract.py:198-199
    // @subroutine
    // def opt_in_denomination_asset(self) -> None:
    proto 0 0
    // smart_contracts/base_d_asa/contract.py:200-205
    // itxn.AssetTransfer(
    //     xfer_asset=self.denomination_asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    //     fee=Global.min_txn_fee,
    // ).submit()
    itxn_begin
    // smart_contracts/base_d_asa/contract.py:204
    // fee=Global.min_txn_fee,
    global MinTxnFee
    // smart_contracts/base_d_asa/contract.py:201
    // xfer_asset=self.denomination_asset_id,
    intc_0 // 0
    bytec 6 // "denomination_asset_id"
    app_global_get_ex
    assert // check self.denomination_asset_id exists
    // smart_contracts/base_d_asa/contract.py:202
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/base_d_asa/contract.py:203
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/base_d_asa/contract.py:200
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    itxn_field Fee
    // smart_contracts/base_d_asa/contract.py:200-205
    // itxn.AssetTransfer(
    //     xfer_asset=self.denomination_asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    //     fee=Global.min_txn_fee,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted(time_events: bytes) -> bytes:
assert_time_events_sorted:
    // smart_contracts/base_d_asa/contract.py:155-156
    // @subroutine
    // def assert_time_events_sorted(self, time_events: typ.TimeEvents) -> None:
    proto 1 1
    pushbytes ""
    dup
    // smart_contracts/base_d_asa/contract.py:157
    // for _t in urange(time_events.length - 1):
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    intc_0 // 0

assert_time_events_sorted_for_header@1:
    // smart_contracts/base_d_asa/contract.py:157
    // for _t in urange(time_events.length - 1):
    frame_dig 3
    frame_dig 2
    <
    bz assert_time_events_sorted_after_for@6
    // smart_contracts/base_d_asa/contract.py:159
    // required_budget=UInt64(cfg.OP_UP_TIME_EVENT_SORTING),
    pushint 65 // 65
    // smart_contracts/base_d_asa/contract.py:160
    // fee_source=OpUpFeeSource.AppAccount,  # App funds are not at risk since caller is trusted
    intc_1 // 1
    // smart_contracts/base_d_asa/contract.py:158-161
    // ensure_budget(
    //     required_budget=UInt64(cfg.OP_UP_TIME_EVENT_SORTING),
    //     fee_source=OpUpFeeSource.AppAccount,  # App funds are not at risk since caller is trusted
    // )
    callsub ensure_budget
    // smart_contracts/base_d_asa/contract.py:162
    // time_i = time_events[_t].native
    frame_dig -1
    extract 2 0
    frame_dig 3
    dup
    cover 2
    intc_2 // 8
    *
    dig 1
    swap
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    dup
    cover 3
    frame_bury 1
    // smart_contracts/base_d_asa/contract.py:163
    // time_f = time_events[_t + 1].native
    swap
    intc_1 // 1
    +
    dup
    frame_bury 3
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    dup
    frame_bury 0
    // smart_contracts/base_d_asa/contract.py:164
    // assert time_f > time_i, err.INVALID_SORTING
    <
    assert // Time events must be sorted in strictly ascending order
    // smart_contracts/base_d_asa/contract.py:165
    // if self.day_count_convention != UInt64(cst.DCC_CONT):
    intc_0 // 0
    bytec 12 // "day_count_convention"
    app_global_get_ex
    assert // check self.day_count_convention exists
    pushint 255 // 255
    !=
    bz assert_time_events_sorted_for_header@1
    // smart_contracts/base_d_asa/contract.py:166-167
    // # The reference implementation requires time periods expressed in days for regular day-count conventions
    // assert (time_f - time_i) % UInt64(
    frame_dig 0
    frame_dig 1
    -
    // smart_contracts/base_d_asa/contract.py:166-169
    // # The reference implementation requires time periods expressed in days for regular day-count conventions
    // assert (time_f - time_i) % UInt64(
    //     cst.DAY_2_SEC
    // ) == 0, err.INVALID_TIME_PERIOD
    intc 6 // 86400
    %
    !
    assert // Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)
    b assert_time_events_sorted_for_header@1

assert_time_events_sorted_after_for@6:
    frame_dig -1
    frame_bury 0
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.set_time_events(time_events: bytes) -> bytes:
set_time_events:
    // smart_contracts/base_d_asa/contract.py:237-238
    // @subroutine
    // def set_time_events(self, time_events: typ.TimeEvents) -> None:
    proto 1 1
    // smart_contracts/base_d_asa/contract.py:239
    // self.time_events.value = time_events.copy()
    bytec 22 // 0x74696d654576656e7473
    box_del
    pop
    bytec 22 // 0x74696d654576656e7473
    frame_dig -1
    box_put
    // smart_contracts/base_d_asa/contract.py:240-242
    // self.primary_distribution_opening_date = time_events[
    //     cfg.PRIMARY_DISTRIBUTION_OPENING_DATE_IDX
    // ].native
    frame_dig -1
    extract 2 0
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    // smart_contracts/base_d_asa/contract.py:240
    // self.primary_distribution_opening_date = time_events[
    bytec 8 // "primary_distribution_opening_date"
    // smart_contracts/base_d_asa/contract.py:240-242
    // self.primary_distribution_opening_date = time_events[
    //     cfg.PRIMARY_DISTRIBUTION_OPENING_DATE_IDX
    // ].native
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:243-245
    // self.primary_distribution_closure_date = time_events[
    //     cfg.PRIMARY_DISTRIBUTION_CLOSURE_DATE_IDX
    // ].native
    dup
    extract 8 8 // on error: Index access is out of bounds
    btoi
    // smart_contracts/base_d_asa/contract.py:243
    // self.primary_distribution_closure_date = time_events[
    bytec 17 // "primary_distribution_closure_date"
    // smart_contracts/base_d_asa/contract.py:243-245
    // self.primary_distribution_closure_date = time_events[
    //     cfg.PRIMARY_DISTRIBUTION_CLOSURE_DATE_IDX
    // ].native
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:246
    // self.issuance_date = time_events[cfg.ISSUANCE_DATE_IDX].native
    dup
    extract 16 8 // on error: Index access is out of bounds
    btoi
    bytec 4 // "issuance_date"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:247
    // self.maturity_date = time_events[cfg.MATURITY_DATE_IDX].native
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    bytec_3 // "maturity_date"
    swap
    app_global_put
    frame_dig -1
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events(secondary_market_time_events: bytes) -> bytes:
set_secondary_time_events:
    // smart_contracts/base_d_asa/contract.py:456-459
    // @arc4.abimethod
    // def set_secondary_time_events(
    //     self, secondary_market_time_events: typ.TimeEvents
    // ) -> typ.SecondaryMarketSchedule:
    proto 1 1
    // smart_contracts/base_d_asa/contract.py:477
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    // smart_contracts/base_d_asa/contract.py:478
    // assert not self.status_is_ended(), err.UNAUTHORIZED
    callsub status_is_ended
    !
    assert // Not authorized
    // smart_contracts/base_d_asa/contract.py:479
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:481
    // assert secondary_market_time_events.length == UInt64(
    frame_dig -1
    intc_0 // 0
    extract_uint16
    // smart_contracts/base_d_asa/contract.py:481-483
    // assert secondary_market_time_events.length == UInt64(
    //     cfg.SECONDARY_MARKET_SCHEDULE_LIMITS
    // ), err.INVALID_TIME_EVENTS_LENGTH
    pushint 2 // 2
    ==
    assert // Time events length is invalid
    // smart_contracts/base_d_asa/contract.py:484
    // self.assert_time_events_sorted(secondary_market_time_events)
    frame_dig -1
    callsub assert_time_events_sorted
    frame_bury -1
    // smart_contracts/base_d_asa/contract.py:486
    // self.issuance_date
    intc_0 // 0
    bytec 4 // "issuance_date"
    app_global_get_ex
    assert // check self.issuance_date exists
    // smart_contracts/base_d_asa/contract.py:487-489
    // <= secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_OPENING_DATE_IDX
    // ].native
    frame_dig -1
    extract 2 0
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    // smart_contracts/base_d_asa/contract.py:486-489
    // self.issuance_date
    // <= secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_OPENING_DATE_IDX
    // ].native
    uncover 2
    dig 1
    <=
    // smart_contracts/base_d_asa/contract.py:485-490
    // assert (
    //     self.issuance_date
    //     <= secondary_market_time_events[
    //         cfg.SECONDARY_MARKET_OPENING_DATE_IDX
    //     ].native
    // ), err.INVALID_SECONDARY_OPENING_DATE
    assert // Invalid secondary market opening date
    // smart_contracts/base_d_asa/contract.py:492
    // self.maturity_date
    intc_0 // 0
    bytec_3 // "maturity_date"
    app_global_get_ex
    assert // check self.maturity_date exists
    // smart_contracts/base_d_asa/contract.py:494
    // cfg.SECONDARY_MARKET_CLOSURE_DATE_IDX
    frame_dig -1
    intc_0 // 0
    extract_uint16
    // smart_contracts/base_d_asa/contract.py:493-495
    // >= secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_CLOSURE_DATE_IDX
    // ].native
    intc_1 // 1
    -
    intc_2 // 8
    *
    uncover 3
    swap
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    // smart_contracts/base_d_asa/contract.py:492-495
    // self.maturity_date
    // >= secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_CLOSURE_DATE_IDX
    // ].native
    swap
    dig 1
    >=
    // smart_contracts/base_d_asa/contract.py:491-496
    // assert (
    //     self.maturity_date
    //     >= secondary_market_time_events[
    //         cfg.SECONDARY_MARKET_CLOSURE_DATE_IDX
    //     ].native
    // ), err.INVALID_SECONDARY_CLOSURE_DATE
    assert // Invalid secondary market closure date
    // smart_contracts/base_d_asa/contract.py:498
    // self.secondary_market_opening_date = secondary_market_time_events[
    bytec 14 // "secondary_market_opening_date"
    // smart_contracts/base_d_asa/contract.py:498-500
    // self.secondary_market_opening_date = secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_OPENING_DATE_IDX
    // ].native
    uncover 2
    app_global_put
    // smart_contracts/base_d_asa/contract.py:501
    // self.secondary_market_closure_date = secondary_market_time_events[
    bytec 15 // "secondary_market_closure_date"
    // smart_contracts/base_d_asa/contract.py:501-503
    // self.secondary_market_closure_date = secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_CLOSURE_DATE_IDX
    // ].native
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:506
    // self.secondary_market_opening_date
    intc_0 // 0
    bytec 14 // "secondary_market_opening_date"
    app_global_get_ex
    assert // check self.secondary_market_opening_date exists
    // smart_contracts/base_d_asa/contract.py:505-507
    // secondary_market_opening_date=arc4.UInt64(
    //     self.secondary_market_opening_date
    // ),
    itob
    // smart_contracts/base_d_asa/contract.py:509
    // self.secondary_market_closure_date
    intc_0 // 0
    bytec 15 // "secondary_market_closure_date"
    app_global_get_ex
    assert // check self.secondary_market_closure_date exists
    // smart_contracts/base_d_asa/contract.py:508-510
    // secondary_market_closure_date=arc4.UInt64(
    //     self.secondary_market_closure_date
    // ),
    itob
    // smart_contracts/base_d_asa/contract.py:504-511
    // return typ.SecondaryMarketSchedule(
    //     secondary_market_opening_date=arc4.UInt64(
    //         self.secondary_market_opening_date
    //     ),
    //     secondary_market_closure_date=arc4.UInt64(
    //         self.secondary_market_closure_date
    //     ),
    // )
    concat
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.status_is_ended() -> uint64:
status_is_ended:
    // smart_contracts/base_d_asa/contract.py:95-96
    // @subroutine
    // def status_is_ended(self) -> bool:
    proto 0 1
    // smart_contracts/base_d_asa/contract.py:97
    // return self.status == cfg.STATUS_ENDED
    intc_0 // 0
    bytec 9 // "status"
    app_global_get_ex
    assert // check self.status exists
    pushint 200 // 200
    ==
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assign_role(role_address: bytes, role: bytes, config: bytes) -> bytes:
assign_role:
    // smart_contracts/base_d_asa/contract.py:513-516
    // @arc4.abimethod
    // def assign_role(
    //     self, role_address: arc4.Address, role: arc4.UInt8, config: arc4.DynamicBytes
    // ) -> arc4.UInt64:
    proto 3 1
    // smart_contracts/base_d_asa/contract.py:534
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    // smart_contracts/base_d_asa/contract.py:535
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:536
    // assert role.native in (
    frame_dig -2
    btoi
    dup
    // smart_contracts/base_d_asa/contract.py:537
    // UInt64(cst.ROLE_ARRANGER),
    pushint 20 // 20
    // smart_contracts/base_d_asa/contract.py:536-542
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@5
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:538
    // UInt64(cst.ROLE_ACCOUNT_MANAGER),
    pushint 40 // 40
    // smart_contracts/base_d_asa/contract.py:536-542
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@5
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:539
    // UInt64(cst.ROLE_PRIMARY_DEALER),
    pushint 50 // 50
    // smart_contracts/base_d_asa/contract.py:536-542
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@5
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:540
    // UInt64(cst.ROLE_TRUSTEE),
    pushint 60 // 60
    // smart_contracts/base_d_asa/contract.py:536-542
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@5
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:541
    // UInt64(cst.ROLE_AUTHORITY),
    pushint 70 // 70
    // smart_contracts/base_d_asa/contract.py:536-542
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    // ), err.INVALID_ROLE
    ==
    bz assign_role_bool_false@6

assign_role_bool_true@5:
    intc_1 // 1
    b assign_role_bool_merge@7

assign_role_bool_false@6:
    intc_0 // 0

assign_role_bool_merge@7:
    // smart_contracts/base_d_asa/contract.py:536-542
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    // ), err.INVALID_ROLE
    assert // Invalid role identifier
    // smart_contracts/base_d_asa/contract.py:544
    // case UInt64(cst.ROLE_ARRANGER):
    pushints 20 40 50 60 70 // 20, 40, 50, 60, 70
    // smart_contracts/base_d_asa/contract.py:543-565
    // match role.native:
    //     case UInt64(cst.ROLE_ARRANGER):
    //         self.arranger = role_address.native
    //     case UInt64(cst.ROLE_ACCOUNT_MANAGER):
    //         assert (
    //             role_address not in self.account_manager
    //         ), err.INVALID_ROLE_ADDRESS
    //         self.account_manager[role_address] = typ.RoleConfig.from_bytes(
    //             config.native
    //         )
    //     case UInt64(cst.ROLE_PRIMARY_DEALER):
    //         assert role_address not in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    //         self.primary_dealer[role_address] = typ.RoleConfig.from_bytes(
    //             config.native
    //         )
    //     case UInt64(cst.ROLE_TRUSTEE):
    //         assert role_address not in self.trustee, err.INVALID_ROLE_ADDRESS
    //         self.trustee[role_address] = typ.RoleConfig.from_bytes(config.native)
    //     case UInt64(cst.ROLE_AUTHORITY):
    //         assert role_address not in self.authority, err.INVALID_ROLE_ADDRESS
    //         self.authority[role_address] = typ.RoleConfig.from_bytes(config.native)
    //     case _:
    //         op.err()
    frame_dig 0
    match assign_role_switch_case_0@8 assign_role_switch_case_1@9 assign_role_switch_case_2@10 assign_role_switch_case_3@11 assign_role_switch_case_4@12
    // smart_contracts/base_d_asa/contract.py:565
    // op.err()
    err

assign_role_switch_case_0@8:
    // smart_contracts/base_d_asa/contract.py:545
    // self.arranger = role_address.native
    bytec 16 // "arranger"
    frame_dig -3
    app_global_put
    b assign_role_switch_case_next@14

assign_role_switch_case_1@9:
    // smart_contracts/base_d_asa/contract.py:548
    // role_address not in self.account_manager
    bytec 23 // 0x52343023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    // smart_contracts/base_d_asa/contract.py:547-549
    // assert (
    //     role_address not in self.account_manager
    // ), err.INVALID_ROLE_ADDRESS
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:551
    // config.native
    frame_dig -1
    extract 2 0
    // smart_contracts/base_d_asa/contract.py:550-552
    // self.account_manager[role_address] = typ.RoleConfig.from_bytes(
    //     config.native
    // )
    box_put
    b assign_role_switch_case_next@14

assign_role_switch_case_2@10:
    // smart_contracts/base_d_asa/contract.py:554
    // assert role_address not in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    bytec 24 // 0x52353023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:556
    // config.native
    frame_dig -1
    extract 2 0
    // smart_contracts/base_d_asa/contract.py:555-557
    // self.primary_dealer[role_address] = typ.RoleConfig.from_bytes(
    //     config.native
    // )
    box_put
    b assign_role_switch_case_next@14

assign_role_switch_case_3@11:
    // smart_contracts/base_d_asa/contract.py:559
    // assert role_address not in self.trustee, err.INVALID_ROLE_ADDRESS
    bytec 25 // 0x52363023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:560
    // self.trustee[role_address] = typ.RoleConfig.from_bytes(config.native)
    frame_dig -1
    extract 2 0
    box_put
    b assign_role_switch_case_next@14

assign_role_switch_case_4@12:
    // smart_contracts/base_d_asa/contract.py:562
    // assert role_address not in self.authority, err.INVALID_ROLE_ADDRESS
    bytec 26 // 0x52373023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:563
    // self.authority[role_address] = typ.RoleConfig.from_bytes(config.native)
    frame_dig -1
    extract 2 0
    box_put

assign_role_switch_case_next@14:
    // smart_contracts/base_d_asa/contract.py:566
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    swap
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role(role_address: bytes, role: bytes) -> bytes:
revoke_role:
    // smart_contracts/base_d_asa/contract.py:568-569
    // @arc4.abimethod
    // def revoke_role(self, role_address: arc4.Address, role: arc4.UInt8) -> arc4.UInt64:
    proto 2 1
    // smart_contracts/base_d_asa/contract.py:586
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    // smart_contracts/base_d_asa/contract.py:587
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:588
    // assert role.native in (
    frame_dig -1
    btoi
    dup
    // smart_contracts/base_d_asa/contract.py:589
    // UInt64(cst.ROLE_ACCOUNT_MANAGER),
    pushint 40 // 40
    // smart_contracts/base_d_asa/contract.py:588-593
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    // ), err.INVALID_ROLE
    ==
    bnz revoke_role_bool_true@4
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:590
    // UInt64(cst.ROLE_PRIMARY_DEALER),
    pushint 50 // 50
    // smart_contracts/base_d_asa/contract.py:588-593
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    // ), err.INVALID_ROLE
    ==
    bnz revoke_role_bool_true@4
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:591
    // UInt64(cst.ROLE_TRUSTEE),
    pushint 60 // 60
    // smart_contracts/base_d_asa/contract.py:588-593
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    // ), err.INVALID_ROLE
    ==
    bnz revoke_role_bool_true@4
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:592
    // UInt64(cst.ROLE_AUTHORITY),
    pushint 70 // 70
    // smart_contracts/base_d_asa/contract.py:588-593
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    // ), err.INVALID_ROLE
    ==
    bz revoke_role_bool_false@5

revoke_role_bool_true@4:
    intc_1 // 1
    b revoke_role_bool_merge@6

revoke_role_bool_false@5:
    intc_0 // 0

revoke_role_bool_merge@6:
    // smart_contracts/base_d_asa/contract.py:588-593
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    // ), err.INVALID_ROLE
    assert // Invalid role identifier
    // smart_contracts/base_d_asa/contract.py:595-596
    // # Arranger role can not be revoked (just rotated)
    // case UInt64(cst.ROLE_ACCOUNT_MANAGER):
    pushints 40 50 60 70 // 40, 50, 60, 70
    // smart_contracts/base_d_asa/contract.py:594-609
    // match role.native:
    //     # Arranger role can not be revoked (just rotated)
    //     case UInt64(cst.ROLE_ACCOUNT_MANAGER):
    //         assert role_address in self.account_manager, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_BOX_ID_ACCOUNT_MANAGER + role_address.bytes)
    //     case UInt64(cst.ROLE_PRIMARY_DEALER):
    //         assert role_address in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_BOX_ID_PRIMARY_DEALER + role_address.bytes)
    //     case UInt64(cst.ROLE_TRUSTEE):
    //         assert role_address in self.trustee, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_BOX_ID_TRUSTEE + role_address.bytes)
    //     case UInt64(cst.ROLE_AUTHORITY):
    //         assert role_address in self.authority, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_BOX_ID_AUTHORITY + role_address.bytes)
    //     case _:
    //         op.err()
    frame_dig 0
    match revoke_role_switch_case_0@7 revoke_role_switch_case_1@8 revoke_role_switch_case_2@9 revoke_role_switch_case_3@10
    // smart_contracts/base_d_asa/contract.py:609
    // op.err()
    err

revoke_role_switch_case_0@7:
    // smart_contracts/base_d_asa/contract.py:597
    // assert role_address in self.account_manager, err.INVALID_ROLE_ADDRESS
    bytec 23 // 0x52343023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:598
    // op.Box.delete(cst.PREFIX_BOX_ID_ACCOUNT_MANAGER + role_address.bytes)
    box_del
    pop
    b revoke_role_switch_case_next@12

revoke_role_switch_case_1@8:
    // smart_contracts/base_d_asa/contract.py:600
    // assert role_address in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    bytec 24 // 0x52353023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:601
    // op.Box.delete(cst.PREFIX_BOX_ID_PRIMARY_DEALER + role_address.bytes)
    box_del
    pop
    b revoke_role_switch_case_next@12

revoke_role_switch_case_2@9:
    // smart_contracts/base_d_asa/contract.py:603
    // assert role_address in self.trustee, err.INVALID_ROLE_ADDRESS
    bytec 25 // 0x52363023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:604
    // op.Box.delete(cst.PREFIX_BOX_ID_TRUSTEE + role_address.bytes)
    box_del
    pop
    b revoke_role_switch_case_next@12

revoke_role_switch_case_3@10:
    // smart_contracts/base_d_asa/contract.py:606
    // assert role_address in self.authority, err.INVALID_ROLE_ADDRESS
    bytec 26 // 0x52373023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:607
    // op.Box.delete(cst.PREFIX_BOX_ID_AUTHORITY + role_address.bytes)
    box_del
    pop

revoke_role_switch_case_next@12:
    // smart_contracts/base_d_asa/contract.py:610
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    swap
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.open_account(holding_address: bytes, payment_address: bytes) -> bytes:
open_account:
    // smart_contracts/base_d_asa/contract.py:612-615
    // @arc4.abimethod
    // def open_account(
    //     self, holding_address: arc4.Address, payment_address: arc4.Address
    // ) -> arc4.UInt64:
    proto 2 1
    // smart_contracts/base_d_asa/contract.py:632
    // self.assert_caller_is_account_manager()
    callsub assert_caller_is_account_manager
    // smart_contracts/base_d_asa/contract.py:633
    // assert not self.status_is_ended(), err.UNAUTHORIZED
    callsub status_is_ended
    !
    assert // Not authorized
    // smart_contracts/base_d_asa/contract.py:634
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:635
    // self.assert_is_not_suspended()
    callsub assert_is_not_suspended
    // smart_contracts/base_d_asa/contract.py:636
    // assert holding_address not in self.account, err.INVALID_HOLDING_ADDRESS
    bytec_0 // 0x52333023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    !
    assert // Invalid account holding address
    // smart_contracts/base_d_asa/contract.py:638-644
    // self.account[holding_address] = typ.AccountInfo(
    //     payment_address=payment_address,
    //     units=arc4.UInt64(),
    //     unit_value=arc4.UInt64(),
    //     paid_coupons=arc4.UInt64(),
    //     suspended=arc4.Bool(),
    // )
    frame_dig -1
    // smart_contracts/base_d_asa/contract.py:640
    // units=arc4.UInt64(),
    bytec 5 // 0x0000000000000000
    // smart_contracts/base_d_asa/contract.py:638-644
    // self.account[holding_address] = typ.AccountInfo(
    //     payment_address=payment_address,
    //     units=arc4.UInt64(),
    //     unit_value=arc4.UInt64(),
    //     paid_coupons=arc4.UInt64(),
    //     suspended=arc4.Bool(),
    // )
    concat
    // smart_contracts/base_d_asa/contract.py:641
    // unit_value=arc4.UInt64(),
    bytec 5 // 0x0000000000000000
    // smart_contracts/base_d_asa/contract.py:638-644
    // self.account[holding_address] = typ.AccountInfo(
    //     payment_address=payment_address,
    //     units=arc4.UInt64(),
    //     unit_value=arc4.UInt64(),
    //     paid_coupons=arc4.UInt64(),
    //     suspended=arc4.Bool(),
    // )
    concat
    // smart_contracts/base_d_asa/contract.py:642
    // paid_coupons=arc4.UInt64(),
    bytec 5 // 0x0000000000000000
    // smart_contracts/base_d_asa/contract.py:638-644
    // self.account[holding_address] = typ.AccountInfo(
    //     payment_address=payment_address,
    //     units=arc4.UInt64(),
    //     unit_value=arc4.UInt64(),
    //     paid_coupons=arc4.UInt64(),
    //     suspended=arc4.Bool(),
    // )
    concat
    // smart_contracts/base_d_asa/contract.py:643
    // suspended=arc4.Bool(),
    bytec 10 // 0x00
    // smart_contracts/base_d_asa/contract.py:638-644
    // self.account[holding_address] = typ.AccountInfo(
    //     payment_address=payment_address,
    //     units=arc4.UInt64(),
    //     unit_value=arc4.UInt64(),
    //     paid_coupons=arc4.UInt64(),
    //     suspended=arc4.Bool(),
    // )
    concat
    box_put
    // smart_contracts/base_d_asa/contract.py:645
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager() -> void:
assert_caller_is_account_manager:
    // smart_contracts/base_d_asa/contract.py:111-112
    // @subroutine
    // def assert_caller_is_account_manager(self) -> None:
    proto 0 0
    intc_0 // 0
    // smart_contracts/base_d_asa/contract.py:115
    // caller in self.account_manager
    bytec 23 // 0x52343023
    // smart_contracts/base_d_asa/contract.py:113
    // caller = arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/base_d_asa/contract.py:115
    // caller in self.account_manager
    concat
    dup
    box_len
    bury 1
    // smart_contracts/base_d_asa/contract.py:115-118
    // caller in self.account_manager
    // and self.account_manager[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.account_manager[caller].role_validity_end
    bz assert_caller_is_account_manager_bool_false@4
    // smart_contracts/base_d_asa/contract.py:116
    // and self.account_manager[caller].role_validity_start
    frame_dig 1
    box_get
    assert // check self.account_manager entry exists
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:117
    // <= Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/base_d_asa/contract.py:116-117
    // and self.account_manager[caller].role_validity_start
    // <= Global.latest_timestamp
    itob
    dup
    frame_bury 0
    b<=
    // smart_contracts/base_d_asa/contract.py:116-118
    // and self.account_manager[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.account_manager[caller].role_validity_end
    bz assert_caller_is_account_manager_bool_false@4
    // smart_contracts/base_d_asa/contract.py:118
    // <= self.account_manager[caller].role_validity_end
    frame_dig 1
    box_get
    assert // check self.account_manager entry exists
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:117-118
    // <= Global.latest_timestamp
    // <= self.account_manager[caller].role_validity_end
    frame_dig 0
    b>=
    // smart_contracts/base_d_asa/contract.py:116-118
    // and self.account_manager[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.account_manager[caller].role_validity_end
    bz assert_caller_is_account_manager_bool_false@4
    intc_1 // 1
    b assert_caller_is_account_manager_bool_merge@5

assert_caller_is_account_manager_bool_false@4:
    intc_0 // 0

assert_caller_is_account_manager_bool_merge@5:
    // smart_contracts/base_d_asa/contract.py:114-119
    // assert (
    //     caller in self.account_manager
    //     and self.account_manager[caller].role_validity_start
    //     <= Global.latest_timestamp
    //     <= self.account_manager[caller].role_validity_end
    // ), err.UNAUTHORIZED
    assert // Not authorized
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.close_account(holding_address: bytes) -> bytes:
close_account:
    // smart_contracts/base_d_asa/contract.py:647-650
    // @arc4.abimethod
    // def close_account(
    //     self, holding_address: arc4.Address
    // ) -> arc4.Tuple[arc4.UInt64, arc4.UInt64]:
    proto 1 1
    // smart_contracts/base_d_asa/contract.py:665
    // self.assert_caller_is_account_manager()
    callsub assert_caller_is_account_manager
    // smart_contracts/base_d_asa/contract.py:666
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:667
    // self.assert_valid_holding_address(holding_address)
    frame_dig -1
    callsub assert_valid_holding_address
    // smart_contracts/base_d_asa/contract.py:669
    // closed_units = self.account[holding_address].units.native
    bytec_0 // 0x52333023
    frame_dig -1
    concat
    dup
    box_get
    assert // check self.account entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    // smart_contracts/base_d_asa/contract.py:670
    // op.Box.delete(cst.PREFIX_BOX_ID_ACCOUNT + holding_address.bytes)
    swap
    box_del
    pop
    // smart_contracts/base_d_asa/contract.py:671
    // self.circulating_units -= closed_units
    intc_0 // 0
    bytec_2 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    dig 1
    -
    bytec_2 // "circulating_units"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:672
    // self.end_if_no_circulating_units()
    callsub end_if_no_circulating_units
    // smart_contracts/base_d_asa/contract.py:674
    // (arc4.UInt64(closed_units), arc4.UInt64(Global.latest_timestamp))
    itob
    global LatestTimestamp
    itob
    // smart_contracts/base_d_asa/contract.py:673-675
    // return arc4.Tuple(
    //     (arc4.UInt64(closed_units), arc4.UInt64(Global.latest_timestamp))
    // )
    concat
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution(holding_address: bytes, units: bytes) -> bytes:
primary_distribution:
    // smart_contracts/base_d_asa/contract.py:677-680
    // @arc4.abimethod
    // def primary_distribution(
    //     self, holding_address: arc4.Address, units: arc4.UInt64
    // ) -> arc4.UInt64:
    proto 2 1
    // smart_contracts/base_d_asa/contract.py:700
    // self.assert_is_primary_distribution_open()
    callsub assert_is_primary_distribution_open
    // smart_contracts/base_d_asa/contract.py:701-703
    // # The reference implementation grants primary distribution permissions to the Primary Dealer role. Other
    // # implementations may relay on other roles or external Apps (e.g. an auction) through C2C calls.
    // self.assert_caller_is_primary_dealer()
    callsub assert_caller_is_primary_dealer
    // smart_contracts/base_d_asa/contract.py:704
    // self.assert_valid_holding_address(holding_address)
    frame_dig -2
    callsub assert_valid_holding_address
    // smart_contracts/base_d_asa/contract.py:705
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:706
    // self.assert_is_not_suspended()
    callsub assert_is_not_suspended
    // smart_contracts/base_d_asa/contract.py:707
    // assert units.native > 0, err.ZERO_UNITS
    frame_dig -1
    btoi
    dup
    assert // Can not distribute zero units
    // smart_contracts/base_d_asa/contract.py:709
    // self.circulating_units + units.native <= self.total_units
    intc_0 // 0
    bytec_2 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    dig 1
    +
    intc_0 // 0
    bytec 13 // "total_units"
    app_global_get_ex
    assert // check self.total_units exists
    <=
    // smart_contracts/base_d_asa/contract.py:708-710
    // assert (
    //     self.circulating_units + units.native <= self.total_units
    // ), err.OVER_DISTRIBUTION
    assert // Insufficient remaining D-ASA units
    // smart_contracts/base_d_asa/contract.py:712
    // self.circulating_units += units.native
    intc_0 // 0
    bytec_2 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    dig 1
    +
    bytec_2 // "circulating_units"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:714
    // self.account[holding_address].units.native + units.native
    bytec_0 // 0x52333023
    frame_dig -2
    concat
    dup
    box_get
    assert // check self.account entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    uncover 2
    +
    // smart_contracts/base_d_asa/contract.py:713-715
    // self.account[holding_address].units = arc4.UInt64(
    //     self.account[holding_address].units.native + units.native
    // )
    itob
    // smart_contracts/base_d_asa/contract.py:713
    // self.account[holding_address].units = arc4.UInt64(
    dig 1
    box_get
    assert // check self.account entry exists
    // smart_contracts/base_d_asa/contract.py:713-715
    // self.account[holding_address].units = arc4.UInt64(
    //     self.account[holding_address].units.native + units.native
    // )
    swap
    replace2 32
    dig 1
    swap
    box_put
    // smart_contracts/base_d_asa/contract.py:716
    // self.account[holding_address].unit_value = arc4.UInt64(self.unit_value)
    intc_0 // 0
    bytec 11 // "unit_value"
    app_global_get_ex
    assert // check self.unit_value exists
    itob
    dig 1
    box_get
    assert // check self.account entry exists
    swap
    replace2 40
    box_put
    // smart_contracts/base_d_asa/contract.py:717
    // return arc4.UInt64(self.total_units - self.circulating_units)
    intc_0 // 0
    bytec 13 // "total_units"
    app_global_get_ex
    assert // check self.total_units exists
    intc_0 // 0
    bytec_2 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    -
    itob
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_primary_distribution_open() -> void:
assert_is_primary_distribution_open:
    // smart_contracts/base_d_asa/contract.py:171-172
    // @subroutine
    // def assert_is_primary_distribution_open(self) -> None:
    proto 0 0
    pushbytes ""
    // smart_contracts/base_d_asa/contract.py:174
    // self.status_is_active()
    callsub status_is_active
    // smart_contracts/base_d_asa/contract.py:174-177
    // self.status_is_active()
    // and self.primary_distribution_opening_date
    // <= Global.latest_timestamp
    // < self.primary_distribution_closure_date
    bz assert_is_primary_distribution_open_bool_false@4
    // smart_contracts/base_d_asa/contract.py:175
    // and self.primary_distribution_opening_date
    intc_0 // 0
    bytec 8 // "primary_distribution_opening_date"
    app_global_get_ex
    assert // check self.primary_distribution_opening_date exists
    // smart_contracts/base_d_asa/contract.py:176
    // <= Global.latest_timestamp
    global LatestTimestamp
    dup
    frame_bury 0
    // smart_contracts/base_d_asa/contract.py:175-176
    // and self.primary_distribution_opening_date
    // <= Global.latest_timestamp
    <=
    // smart_contracts/base_d_asa/contract.py:175-177
    // and self.primary_distribution_opening_date
    // <= Global.latest_timestamp
    // < self.primary_distribution_closure_date
    bz assert_is_primary_distribution_open_bool_false@4
    // smart_contracts/base_d_asa/contract.py:177
    // < self.primary_distribution_closure_date
    intc_0 // 0
    bytec 17 // "primary_distribution_closure_date"
    app_global_get_ex
    assert // check self.primary_distribution_closure_date exists
    // smart_contracts/base_d_asa/contract.py:176-177
    // <= Global.latest_timestamp
    // < self.primary_distribution_closure_date
    frame_dig 0
    >
    // smart_contracts/base_d_asa/contract.py:175-177
    // and self.primary_distribution_opening_date
    // <= Global.latest_timestamp
    // < self.primary_distribution_closure_date
    bz assert_is_primary_distribution_open_bool_false@4
    intc_1 // 1
    b assert_is_primary_distribution_open_bool_merge@5

assert_is_primary_distribution_open_bool_false@4:
    intc_0 // 0

assert_is_primary_distribution_open_bool_merge@5:
    // smart_contracts/base_d_asa/contract.py:173-178
    // assert (
    //     self.status_is_active()
    //     and self.primary_distribution_opening_date
    //     <= Global.latest_timestamp
    //     < self.primary_distribution_closure_date
    // ), err.PRIMARY_DISTRIBUTION_CLOSED
    assert // Primary distribution is closed
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_primary_dealer() -> void:
assert_caller_is_primary_dealer:
    // smart_contracts/base_d_asa/contract.py:141-142
    // @subroutine
    // def assert_caller_is_primary_dealer(self) -> None:
    proto 0 0
    intc_0 // 0
    // smart_contracts/base_d_asa/contract.py:145
    // caller in self.primary_dealer
    bytec 24 // 0x52353023
    // smart_contracts/base_d_asa/contract.py:143
    // caller = arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/base_d_asa/contract.py:145
    // caller in self.primary_dealer
    concat
    dup
    box_len
    bury 1
    // smart_contracts/base_d_asa/contract.py:145-148
    // caller in self.primary_dealer
    // and self.primary_dealer[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.primary_dealer[caller].role_validity_end
    bz assert_caller_is_primary_dealer_bool_false@4
    // smart_contracts/base_d_asa/contract.py:146
    // and self.primary_dealer[caller].role_validity_start
    frame_dig 1
    box_get
    assert // check self.primary_dealer entry exists
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:147
    // <= Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/base_d_asa/contract.py:146-147
    // and self.primary_dealer[caller].role_validity_start
    // <= Global.latest_timestamp
    itob
    dup
    frame_bury 0
    b<=
    // smart_contracts/base_d_asa/contract.py:146-148
    // and self.primary_dealer[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.primary_dealer[caller].role_validity_end
    bz assert_caller_is_primary_dealer_bool_false@4
    // smart_contracts/base_d_asa/contract.py:148
    // <= self.primary_dealer[caller].role_validity_end
    frame_dig 1
    box_get
    assert // check self.primary_dealer entry exists
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:147-148
    // <= Global.latest_timestamp
    // <= self.primary_dealer[caller].role_validity_end
    frame_dig 0
    b>=
    // smart_contracts/base_d_asa/contract.py:146-148
    // and self.primary_dealer[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.primary_dealer[caller].role_validity_end
    bz assert_caller_is_primary_dealer_bool_false@4
    intc_1 // 1
    b assert_caller_is_primary_dealer_bool_merge@5

assert_caller_is_primary_dealer_bool_false@4:
    intc_0 // 0

assert_caller_is_primary_dealer_bool_merge@5:
    // smart_contracts/base_d_asa/contract.py:144-149
    // assert (
    //     caller in self.primary_dealer
    //     and self.primary_dealer[caller].role_validity_start
    //     <= Global.latest_timestamp
    //     <= self.primary_dealer[caller].role_validity_end
    // ), err.UNAUTHORIZED
    assert // Not authorized
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension(suspended: bytes) -> bytes:
set_asset_suspension:
    // smart_contracts/base_d_asa/contract.py:719-720
    // @arc4.abimethod
    // def set_asset_suspension(self, suspended: arc4.Bool) -> arc4.UInt64:
    proto 1 1
    // smart_contracts/base_d_asa/contract.py:733
    // self.assert_caller_is_authority()
    callsub assert_caller_is_authority
    // smart_contracts/base_d_asa/contract.py:734
    // self.suspended = UInt64(suspended.native)
    frame_dig -1
    intc_0 // 0
    getbit
    bytec 18 // "suspended"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:735
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority() -> void:
assert_caller_is_authority:
    // smart_contracts/base_d_asa/contract.py:131-132
    // @subroutine
    // def assert_caller_is_authority(self) -> None:
    proto 0 0
    intc_0 // 0
    // smart_contracts/base_d_asa/contract.py:135
    // caller in self.authority
    bytec 26 // 0x52373023
    // smart_contracts/base_d_asa/contract.py:133
    // caller = arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/base_d_asa/contract.py:135
    // caller in self.authority
    concat
    dup
    box_len
    bury 1
    // smart_contracts/base_d_asa/contract.py:135-138
    // caller in self.authority
    // and self.authority[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.authority[caller].role_validity_end
    bz assert_caller_is_authority_bool_false@4
    // smart_contracts/base_d_asa/contract.py:136
    // and self.authority[caller].role_validity_start
    frame_dig 1
    box_get
    assert // check self.authority entry exists
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:137
    // <= Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/base_d_asa/contract.py:136-137
    // and self.authority[caller].role_validity_start
    // <= Global.latest_timestamp
    itob
    dup
    frame_bury 0
    b<=
    // smart_contracts/base_d_asa/contract.py:136-138
    // and self.authority[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.authority[caller].role_validity_end
    bz assert_caller_is_authority_bool_false@4
    // smart_contracts/base_d_asa/contract.py:138
    // <= self.authority[caller].role_validity_end
    frame_dig 1
    box_get
    assert // check self.authority entry exists
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:137-138
    // <= Global.latest_timestamp
    // <= self.authority[caller].role_validity_end
    frame_dig 0
    b>=
    // smart_contracts/base_d_asa/contract.py:136-138
    // and self.authority[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.authority[caller].role_validity_end
    bz assert_caller_is_authority_bool_false@4
    intc_1 // 1
    b assert_caller_is_authority_bool_merge@5

assert_caller_is_authority_bool_false@4:
    intc_0 // 0

assert_caller_is_authority_bool_merge@5:
    // smart_contracts/base_d_asa/contract.py:134-139
    // assert (
    //     caller in self.authority
    //     and self.authority[caller].role_validity_start
    //     <= Global.latest_timestamp
    //     <= self.authority[caller].role_validity_end
    // ), err.UNAUTHORIZED
    assert // Not authorized
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension(holding_address: bytes, suspended: bytes) -> bytes:
set_account_suspension:
    // smart_contracts/base_d_asa/contract.py:737-740
    // @arc4.abimethod
    // def set_account_suspension(
    //     self, holding_address: arc4.Address, suspended: arc4.Bool
    // ) -> arc4.UInt64:
    proto 2 1
    // smart_contracts/base_d_asa/contract.py:755
    // self.assert_caller_is_authority()
    callsub assert_caller_is_authority
    // smart_contracts/base_d_asa/contract.py:756
    // self.assert_valid_holding_address(holding_address)
    frame_dig -2
    callsub assert_valid_holding_address
    // smart_contracts/base_d_asa/contract.py:757
    // self.account[holding_address].suspended = suspended
    bytec_0 // 0x52333023
    frame_dig -2
    concat
    dup
    box_get
    assert // check self.account entry exists
    frame_dig -1
    intc_0 // 0
    getbit
    intc 4 // 448
    swap
    setbit
    box_put
    // smart_contracts/base_d_asa/contract.py:758
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status(defaulted: bytes) -> void:
set_default_status:
    // smart_contracts/base_d_asa/contract.py:760-761
    // @arc4.abimethod
    // def set_default_status(self, defaulted: arc4.Bool) -> None:
    proto 1 0
    // smart_contracts/base_d_asa/contract.py:771
    // self.assert_caller_is_trustee()
    callsub assert_caller_is_trustee
    // smart_contracts/base_d_asa/contract.py:772
    // self.defaulted = UInt64(defaulted.native)
    frame_dig -1
    intc_0 // 0
    getbit
    bytec 19 // "defaulted"
    swap
    app_global_put
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_trustee() -> void:
assert_caller_is_trustee:
    // smart_contracts/base_d_asa/contract.py:121-122
    // @subroutine
    // def assert_caller_is_trustee(self) -> None:
    proto 0 0
    intc_0 // 0
    // smart_contracts/base_d_asa/contract.py:125
    // caller in self.trustee
    bytec 25 // 0x52363023
    // smart_contracts/base_d_asa/contract.py:123
    // caller = arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/base_d_asa/contract.py:125
    // caller in self.trustee
    concat
    dup
    box_len
    bury 1
    // smart_contracts/base_d_asa/contract.py:125-128
    // caller in self.trustee
    // and self.trustee[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.trustee[caller].role_validity_end
    bz assert_caller_is_trustee_bool_false@4
    // smart_contracts/base_d_asa/contract.py:126
    // and self.trustee[caller].role_validity_start
    frame_dig 1
    box_get
    assert // check self.trustee entry exists
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:127
    // <= Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/base_d_asa/contract.py:126-127
    // and self.trustee[caller].role_validity_start
    // <= Global.latest_timestamp
    itob
    dup
    frame_bury 0
    b<=
    // smart_contracts/base_d_asa/contract.py:126-128
    // and self.trustee[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.trustee[caller].role_validity_end
    bz assert_caller_is_trustee_bool_false@4
    // smart_contracts/base_d_asa/contract.py:128
    // <= self.trustee[caller].role_validity_end
    frame_dig 1
    box_get
    assert // check self.trustee entry exists
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:127-128
    // <= Global.latest_timestamp
    // <= self.trustee[caller].role_validity_end
    frame_dig 0
    b>=
    // smart_contracts/base_d_asa/contract.py:126-128
    // and self.trustee[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.trustee[caller].role_validity_end
    bz assert_caller_is_trustee_bool_false@4
    intc_1 // 1
    b assert_caller_is_trustee_bool_merge@5

assert_caller_is_trustee_bool_false@4:
    intc_0 // 0

assert_caller_is_trustee_bool_merge@5:
    // smart_contracts/base_d_asa/contract.py:124-129
    // assert (
    //     caller in self.trustee
    //     and self.trustee[caller].role_validity_start
    //     <= Global.latest_timestamp
    //     <= self.trustee[caller].role_validity_end
    // ), err.UNAUTHORIZED
    assert // Not authorized
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info() -> bytes:
get_asset_info:
    // smart_contracts/base_d_asa/contract.py:774-775
    // @arc4.abimethod(readonly=True)
    // def get_asset_info(self) -> typ.AssetInfo:
    proto 0 1
    // smart_contracts/base_d_asa/contract.py:785
    // denomination_asset_id=arc4.UInt64(self.denomination_asset_id),
    intc_0 // 0
    bytec 6 // "denomination_asset_id"
    app_global_get_ex
    assert // check self.denomination_asset_id exists
    itob
    // smart_contracts/base_d_asa/contract.py:786
    // outstanding_principal=arc4.UInt64(self.circulating_units * self.unit_value),
    intc_0 // 0
    bytec_2 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    intc_0 // 0
    bytec 11 // "unit_value"
    app_global_get_ex
    assert // check self.unit_value exists
    *
    itob
    // smart_contracts/base_d_asa/contract.py:787
    // unit_value=arc4.UInt64(self.unit_value),
    intc_0 // 0
    bytec 11 // "unit_value"
    app_global_get_ex
    assert // check self.unit_value exists
    itob
    // smart_contracts/base_d_asa/contract.py:788
    // day_count_convention=arc4.UInt8(self.day_count_convention),
    intc_0 // 0
    bytec 12 // "day_count_convention"
    app_global_get_ex
    assert // check self.day_count_convention exists
    itob
    extract 7 1
    // smart_contracts/base_d_asa/contract.py:789
    // interest_rate=arc4.UInt16(self.interest_rate),
    intc_0 // 0
    bytec 7 // "interest_rate"
    app_global_get_ex
    assert // check self.interest_rate exists
    itob
    extract 6 2
    // smart_contracts/base_d_asa/contract.py:790
    // total_supply=arc4.UInt64(self.total_units),
    intc_0 // 0
    bytec 13 // "total_units"
    app_global_get_ex
    assert // check self.total_units exists
    itob
    // smart_contracts/base_d_asa/contract.py:791
    // circulating_supply=arc4.UInt64(self.circulating_units),
    intc_0 // 0
    bytec_2 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    itob
    // smart_contracts/base_d_asa/contract.py:793
    // self.primary_distribution_opening_date
    intc_0 // 0
    bytec 8 // "primary_distribution_opening_date"
    app_global_get_ex
    assert // check self.primary_distribution_opening_date exists
    // smart_contracts/base_d_asa/contract.py:792-794
    // primary_distribution_opening_date=arc4.UInt64(
    //     self.primary_distribution_opening_date
    // ),
    itob
    // smart_contracts/base_d_asa/contract.py:796
    // self.primary_distribution_closure_date
    intc_0 // 0
    bytec 17 // "primary_distribution_closure_date"
    app_global_get_ex
    assert // check self.primary_distribution_closure_date exists
    // smart_contracts/base_d_asa/contract.py:795-797
    // primary_distribution_closure_date=arc4.UInt64(
    //     self.primary_distribution_closure_date
    // ),
    itob
    // smart_contracts/base_d_asa/contract.py:798
    // issuance_date=arc4.UInt64(self.issuance_date),
    intc_0 // 0
    bytec 4 // "issuance_date"
    app_global_get_ex
    assert // check self.issuance_date exists
    itob
    // smart_contracts/base_d_asa/contract.py:799
    // maturity_date=arc4.UInt64(self.maturity_date),
    intc_0 // 0
    bytec_3 // "maturity_date"
    app_global_get_ex
    assert // check self.maturity_date exists
    itob
    // smart_contracts/base_d_asa/contract.py:800
    // suspended=arc4.Bool(bool(self.suspended)),
    intc_0 // 0
    bytec 18 // "suspended"
    app_global_get_ex
    assert // check self.suspended exists
    bytec 10 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // smart_contracts/base_d_asa/contract.py:801
    // defaulted=arc4.Bool(bool(self.defaulted)),
    intc_0 // 0
    bytec 19 // "defaulted"
    app_global_get_ex
    assert // check self.defaulted exists
    bytec 10 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // smart_contracts/base_d_asa/contract.py:784-802
    // return typ.AssetInfo(
    //     denomination_asset_id=arc4.UInt64(self.denomination_asset_id),
    //     outstanding_principal=arc4.UInt64(self.circulating_units * self.unit_value),
    //     unit_value=arc4.UInt64(self.unit_value),
    //     day_count_convention=arc4.UInt8(self.day_count_convention),
    //     interest_rate=arc4.UInt16(self.interest_rate),
    //     total_supply=arc4.UInt64(self.total_units),
    //     circulating_supply=arc4.UInt64(self.circulating_units),
    //     primary_distribution_opening_date=arc4.UInt64(
    //         self.primary_distribution_opening_date
    //     ),
    //     primary_distribution_closure_date=arc4.UInt64(
    //         self.primary_distribution_closure_date
    //     ),
    //     issuance_date=arc4.UInt64(self.issuance_date),
    //     maturity_date=arc4.UInt64(self.maturity_date),
    //     suspended=arc4.Bool(bool(self.suspended)),
    //     defaulted=arc4.Bool(bool(self.defaulted)),
    // )
    uncover 12
    uncover 12
    concat
    uncover 11
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    pushint 601 // 601
    swap
    setbit
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info(holding_address: bytes) -> bytes:
get_account_info:
    // smart_contracts/base_d_asa/contract.py:804-805
    // @arc4.abimethod(readonly=True)
    // def get_account_info(self, holding_address: arc4.Address) -> typ.AccountInfo:
    proto 1 1
    // smart_contracts/base_d_asa/contract.py:818
    // self.assert_valid_holding_address(holding_address)
    frame_dig -1
    callsub assert_valid_holding_address
    // smart_contracts/base_d_asa/contract.py:819
    // return self.account[holding_address]
    bytec_0 // 0x52333023
    frame_dig -1
    concat
    box_get
    assert // check self.account entry exists
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events() -> bytes:
get_time_events:
    // smart_contracts/base_d_asa/contract.py:821-822
    // @arc4.abimethod(readonly=True)
    // def get_time_events(self) -> typ.TimeEvents:
    proto 0 1
    // smart_contracts/base_d_asa/contract.py:829
    // time_events = typ.TimeEvents()
    pushbytes 0x0000
    // smart_contracts/base_d_asa/contract.py:830
    // if self.status_is_active():
    callsub status_is_active
    bz get_time_events_after_if_else@2
    // smart_contracts/base_d_asa/contract.py:831
    // time_events = self.time_events.value.copy()
    bytec 22 // 0x74696d654576656e7473
    box_get
    swap
    frame_bury 0
    assert // check self.time_events exists

get_time_events_after_if_else@2:
    // smart_contracts/base_d_asa/contract.py:832
    // return time_events
    frame_dig 0
    swap
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule() -> bytes:
get_secondary_market_schedule:
    // smart_contracts/base_d_asa/contract.py:834-835
    // @arc4.abimethod(readonly=True)
    // def get_secondary_market_schedule(self) -> typ.TimeEvents:
    proto 0 1
    // smart_contracts/base_d_asa/contract.py:837
    // arc4.UInt64(self.secondary_market_opening_date),
    intc_0 // 0
    bytec 14 // "secondary_market_opening_date"
    app_global_get_ex
    assert // check self.secondary_market_opening_date exists
    itob
    // smart_contracts/base_d_asa/contract.py:838
    // arc4.UInt64(self.secondary_market_closure_date),
    intc_0 // 0
    bytec 15 // "secondary_market_closure_date"
    app_global_get_ex
    assert // check self.secondary_market_closure_date exists
    itob
    // smart_contracts/base_d_asa/contract.py:836-839
    // return typ.TimeEvents(
    //     arc4.UInt64(self.secondary_market_opening_date),
    //     arc4.UInt64(self.secondary_market_closure_date),
    // )
    concat
    pushbytes 0x0002
    swap
    concat
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata() -> bytes:
get_asset_metadata:
    // smart_contracts/base_d_asa/contract.py:841-842
    // @arc4.abimethod(readonly=True)
    // def get_asset_metadata(self) -> typ.AssetMetadata:
    proto 0 1
    // smart_contracts/base_d_asa/contract.py:843
    // return typ.AssetMetadata(self.metadata)
    intc_0 // 0
    bytec 20 // "metadata"
    app_global_get_ex
    assert // check self.metadata exists
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.asset_update() -> void:
asset_update:
    // smart_contracts/base_d_asa/contract.py:368-369
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    // def asset_update(self) -> None:
    proto 0 0
    // smart_contracts/base_d_asa/contract.py:373-376
    // # The reference implementation grants the update permissions to the Arranger.
    // # Other implementations may disable D-ASA application updatability or change its authorizations.
    // # ⚠️ WARNING: Application updates must be executed VERY carefully, as they might introduce breaking changes.
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    retsub


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    frame_dig -2
    pushint 10 // 10
    +

ensure_budget_while_top@1:
    frame_dig 0
    global OpcodeBudget
    >
    bz ensure_budget_after_while@7
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 28 // 0x068101
    itxn_field ApprovalProgram
    bytec 28 // 0x068101
    itxn_field ClearStateProgram
    frame_dig -1
    switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee

ensure_budget_switch_case_next@6:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_after_while@7:
    retsub
