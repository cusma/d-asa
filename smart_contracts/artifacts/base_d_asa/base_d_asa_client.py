# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "asset_create(address,byte[])void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "asset_config(uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_secondary_time_events(uint64[])(uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "SecondaryMarketSchedule",
                    "elements": [
                        [
                            "secondary_market_opening_date",
                            "uint64"
                        ],
                        [
                            "secondary_market_closure_date",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assign_role(address,uint8,byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "revoke_role(address,uint8)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "open_account(address,address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "close_account(address)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "primary_distribution(address,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_asset_suspension(bool)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_account_suspension(address,bool)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_default_status(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "AssetInfo",
                    "elements": [
                        [
                            "denomination_asset_id",
                            "uint64"
                        ],
                        [
                            "settlement_asset_id",
                            "uint64"
                        ],
                        [
                            "outstanding_principal",
                            "uint64"
                        ],
                        [
                            "unit_value",
                            "uint64"
                        ],
                        [
                            "day_count_convention",
                            "uint8"
                        ],
                        [
                            "interest_rate",
                            "uint16"
                        ],
                        [
                            "total_supply",
                            "uint64"
                        ],
                        [
                            "circulating_supply",
                            "uint64"
                        ],
                        [
                            "primary_distribution_opening_date",
                            "uint64"
                        ],
                        [
                            "primary_distribution_closure_date",
                            "uint64"
                        ],
                        [
                            "issuance_date",
                            "uint64"
                        ],
                        [
                            "maturity_date",
                            "uint64"
                        ],
                        [
                            "suspended",
                            "bool"
                        ],
                        [
                            "defaulted",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_account_info(address)(address,uint64,uint64,uint64,bool)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "AccountInfo",
                    "elements": [
                        [
                            "payment_address",
                            "address"
                        ],
                        [
                            "units",
                            "uint64"
                        ],
                        [
                            "unit_value",
                            "uint64"
                        ],
                        [
                            "paid_coupons",
                            "uint64"
                        ],
                        [
                            "suspended",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_time_events()uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_secondary_market_schedule()uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_metadata()byte[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYmFzZV9kX2FzYS5jb250cmFjdC5CYXNlREFzYS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 17
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "arranger": {
                    "type": "bytes",
                    "key": "R20#"
                },
                "circulating_units": {
                    "type": "uint64",
                    "key": "circulating_units"
                },
                "day_count_convention": {
                    "type": "uint64",
                    "key": "day_count_convention"
                },
                "defaulted": {
                    "type": "uint64",
                    "key": "defaulted"
                },
                "denomination_asset_id": {
                    "type": "uint64",
                    "key": "denomination_asset_id"
                },
                "interest_rate": {
                    "type": "uint64",
                    "key": "interest_rate"
                },
                "issuance_date": {
                    "type": "uint64",
                    "key": "issuance_date"
                },
                "maturity_date": {
                    "type": "uint64",
                    "key": "maturity_date"
                },
                "metadata": {
                    "type": "bytes",
                    "key": "metadata"
                },
                "primary_distribution_closure_date": {
                    "type": "uint64",
                    "key": "primary_distribution_closure_date"
                },
                "primary_distribution_opening_date": {
                    "type": "uint64",
                    "key": "primary_distribution_opening_date"
                },
                "secondary_market_closure_date": {
                    "type": "uint64",
                    "key": "secondary_market_closure_date"
                },
                "secondary_market_opening_date": {
                    "type": "uint64",
                    "key": "secondary_market_opening_date"
                },
                "settlement_asset_id": {
                    "type": "uint64",
                    "key": "settlement_asset_id"
                },
                "status": {
                    "type": "uint64",
                    "key": "status"
                },
                "suspended": {
                    "type": "uint64",
                    "key": "suspended"
                },
                "total_coupons": {
                    "type": "uint64",
                    "key": "total_coupons"
                },
                "total_units": {
                    "type": "uint64",
                    "key": "total_units"
                },
                "unit_value": {
                    "type": "uint64",
                    "key": "unit_value"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "BaseDAsa",
        "methods": [
            {
                "name": "asset_create",
                "args": [
                    {
                        "type": "address",
                        "name": "arranger",
                        "desc": "D-ASA Arranger Address"
                    },
                    {
                        "type": "byte[]",
                        "name": "metadata",
                        "desc": "D-ASA metadata digest (e.g. prospectus digest)"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Create a new D-ASA"
            },
            {
                "name": "asset_config",
                "args": [
                    {
                        "type": "uint64",
                        "name": "denomination_asset_id",
                        "desc": "Denomination asset identifier"
                    },
                    {
                        "type": "uint64",
                        "name": "settlement_asset_id",
                        "desc": "Settlement asset identifier"
                    },
                    {
                        "type": "uint64",
                        "name": "principal",
                        "desc": "Principal, expressed in denomination asset"
                    },
                    {
                        "type": "uint64",
                        "name": "minimum_denomination",
                        "desc": "Minimum denomination, expressed in denomination asset"
                    },
                    {
                        "type": "uint8",
                        "name": "day_count_convention",
                        "desc": "Day-count convention for interests calculation"
                    },
                    {
                        "type": "uint16",
                        "name": "interest_rate",
                        "desc": "Interest rate in bps"
                    },
                    {
                        "type": "uint16[]",
                        "name": "coupon_rates",
                        "desc": "Coupon interest rates in bps"
                    },
                    {
                        "type": "uint64[]",
                        "name": "time_events",
                        "desc": "Time events (strictly ascending order)"
                    },
                    {
                        "type": "(uint64,uint64)[]",
                        "name": "time_periods",
                        "desc": "Time periods of recurring time events"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Configure the Debt Algorand Standard Application"
            },
            {
                "name": "set_secondary_time_events",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "secondary_market_time_events",
                        "desc": "Secondary market time events (strictly ascending order)"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Secondary Market Opening Date, Secondary Market Closure Date"
                },
                "desc": "Set secondary market time schedule"
            },
            {
                "name": "assign_role",
                "args": [
                    {
                        "type": "address",
                        "name": "role_address",
                        "desc": "Account Role Address"
                    },
                    {
                        "type": "uint8",
                        "name": "role",
                        "desc": "Role identifier"
                    },
                    {
                        "type": "byte[]",
                        "name": "config",
                        "desc": "Role configuration (Optional)"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the role assignment"
                },
                "desc": "Assign a role to an address"
            },
            {
                "name": "revoke_role",
                "args": [
                    {
                        "type": "address",
                        "name": "role_address",
                        "desc": "Account Role Address"
                    },
                    {
                        "type": "uint8",
                        "name": "role",
                        "desc": "Role identifier"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the role revocation"
                },
                "desc": "Revoke a role from an address"
            },
            {
                "name": "open_account",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "address",
                        "name": "payment_address",
                        "desc": "Account Payment Address"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the account opening"
                },
                "desc": "Open D-ASA account"
            },
            {
                "name": "close_account",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Closed units, Timestamp of the account closing"
                },
                "desc": "Close D-ASA account"
            },
            {
                "name": "primary_distribution",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "uint64",
                        "name": "units",
                        "desc": "Amount of D-ASA units to distribute"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Remaining D-ASA units to be distributed"
                },
                "desc": "Distribute D-ASA units to accounts according the primary market"
            },
            {
                "name": "set_asset_suspension",
                "args": [
                    {
                        "type": "bool",
                        "name": "suspended",
                        "desc": "Suspension status"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the set asset suspension status"
                },
                "desc": "Set asset suspension status"
            },
            {
                "name": "set_account_suspension",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    },
                    {
                        "type": "bool",
                        "name": "suspended",
                        "desc": "Suspension status"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Timestamp of the set account suspension status"
                },
                "desc": "Set account suspension status"
            },
            {
                "name": "set_default_status",
                "args": [
                    {
                        "type": "bool",
                        "name": "defaulted",
                        "desc": "Default status"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set D-ASA default status"
            },
            {
                "name": "get_asset_info",
                "args": [],
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)",
                    "desc": "Denomination asset ID, Settlement asset ID, Outstanding principal, Unit nominal value, Day-count convention, Interest rate, Total supply, Circulating supply, Primary distribution opening date, Primary distribution closure date, Issuance date, Maturity date, Suspended, Defaulted"
                },
                "desc": "Get D-ASA info"
            },
            {
                "name": "get_account_info",
                "args": [
                    {
                        "type": "address",
                        "name": "holding_address",
                        "desc": "Account Holding Address"
                    }
                ],
                "returns": {
                    "type": "(address,uint64,uint64,uint64,bool)",
                    "desc": "Payment Address, D-ASA units, Unit nominal value in denomination asset, Paid coupons, Suspended"
                },
                "desc": "Get account info"
            },
            {
                "name": "get_time_events",
                "args": [],
                "returns": {
                    "type": "uint64[]",
                    "desc": "Time events"
                },
                "desc": "Get D-ASA time events"
            },
            {
                "name": "get_secondary_market_schedule",
                "args": [],
                "returns": {
                    "type": "uint64[]",
                    "desc": "Secondary market schedule"
                },
                "desc": "Get secondary market schedule"
            },
            {
                "name": "get_asset_metadata",
                "args": [],
                "returns": {
                    "type": "byte[]",
                    "desc": "Asset metadata"
                },
                "desc": "Get D-ASA metadata"
            }
        ],
        "networks": {},
        "desc": "\n    Base D-ASA Class implementing common interfaces and state schema:\n\n    - Asset creation and configuration\n    - Role-based access control\n    - Account management (creation, suspension, close-out)\n    - Time schedule with no coupons and maturity date\n    - Primary distribution\n    - Getters (asset info, account info, time events)\n    "
    },
    "bare_call_config": {
        "update_application": "CALL"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class AssetConfigArgs(_ArgsBase[None]):
    """Configure the Debt Algorand Standard Application"""

    denomination_asset_id: int
    """Denomination asset identifier"""
    settlement_asset_id: int
    """Settlement asset identifier"""
    principal: int
    """Principal, expressed in denomination asset"""
    minimum_denomination: int
    """Minimum denomination, expressed in denomination asset"""
    day_count_convention: int
    """Day-count convention for interests calculation"""
    interest_rate: int
    """Interest rate in bps"""
    coupon_rates: list[int]
    """Coupon interest rates in bps"""
    time_events: list[int]
    """Time events (strictly ascending order)"""
    time_periods: list[tuple[int, int]]
    """Time periods of recurring time events"""

    @staticmethod
    def method() -> str:
        return "asset_config(uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void"


@dataclasses.dataclass(kw_only=True)
class SecondaryMarketSchedule:
    secondary_market_opening_date: int
    secondary_market_closure_date: int


@dataclasses.dataclass(kw_only=True)
class SetSecondaryTimeEventsArgs(_ArgsBase[SecondaryMarketSchedule]):
    """Set secondary market time schedule"""

    secondary_market_time_events: list[int]
    """Secondary market time events (strictly ascending order)"""

    @staticmethod
    def method() -> str:
        return "set_secondary_time_events(uint64[])(uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class AssignRoleArgs(_ArgsBase[int]):
    """Assign a role to an address"""

    role_address: str
    """Account Role Address"""
    role: int
    """Role identifier"""
    config: bytes | bytearray
    """Role configuration (Optional)"""

    @staticmethod
    def method() -> str:
        return "assign_role(address,uint8,byte[])uint64"


@dataclasses.dataclass(kw_only=True)
class RevokeRoleArgs(_ArgsBase[int]):
    """Revoke a role from an address"""

    role_address: str
    """Account Role Address"""
    role: int
    """Role identifier"""

    @staticmethod
    def method() -> str:
        return "revoke_role(address,uint8)uint64"


@dataclasses.dataclass(kw_only=True)
class OpenAccountArgs(_ArgsBase[int]):
    """Open D-ASA account"""

    holding_address: str
    """Account Holding Address"""
    payment_address: str
    """Account Payment Address"""

    @staticmethod
    def method() -> str:
        return "open_account(address,address)uint64"


@dataclasses.dataclass(kw_only=True)
class CloseAccountArgs(_ArgsBase[tuple[int, int]]):
    """Close D-ASA account"""

    holding_address: str
    """Account Holding Address"""

    @staticmethod
    def method() -> str:
        return "close_account(address)(uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class PrimaryDistributionArgs(_ArgsBase[int]):
    """Distribute D-ASA units to accounts according the primary market"""

    holding_address: str
    """Account Holding Address"""
    units: int
    """Amount of D-ASA units to distribute"""

    @staticmethod
    def method() -> str:
        return "primary_distribution(address,uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class SetAssetSuspensionArgs(_ArgsBase[int]):
    """Set asset suspension status"""

    suspended: bool
    """Suspension status"""

    @staticmethod
    def method() -> str:
        return "set_asset_suspension(bool)uint64"


@dataclasses.dataclass(kw_only=True)
class SetAccountSuspensionArgs(_ArgsBase[int]):
    """Set account suspension status"""

    holding_address: str
    """Account Holding Address"""
    suspended: bool
    """Suspension status"""

    @staticmethod
    def method() -> str:
        return "set_account_suspension(address,bool)uint64"


@dataclasses.dataclass(kw_only=True)
class SetDefaultStatusArgs(_ArgsBase[None]):
    """Set D-ASA default status"""

    defaulted: bool
    """Default status"""

    @staticmethod
    def method() -> str:
        return "set_default_status(bool)void"


@dataclasses.dataclass(kw_only=True)
class AssetInfo:
    denomination_asset_id: int
    settlement_asset_id: int
    outstanding_principal: int
    unit_value: int
    day_count_convention: int
    interest_rate: int
    total_supply: int
    circulating_supply: int
    primary_distribution_opening_date: int
    primary_distribution_closure_date: int
    issuance_date: int
    maturity_date: int
    suspended: bool
    defaulted: bool


@dataclasses.dataclass(kw_only=True)
class GetAssetInfoArgs(_ArgsBase[AssetInfo]):
    """Get D-ASA info"""

    @staticmethod
    def method() -> str:
        return "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)"


@dataclasses.dataclass(kw_only=True)
class AccountInfo:
    payment_address: str
    units: int
    unit_value: int
    paid_coupons: int
    suspended: bool


@dataclasses.dataclass(kw_only=True)
class GetAccountInfoArgs(_ArgsBase[AccountInfo]):
    """Get account info"""

    holding_address: str
    """Account Holding Address"""

    @staticmethod
    def method() -> str:
        return "get_account_info(address)(address,uint64,uint64,uint64,bool)"


@dataclasses.dataclass(kw_only=True)
class GetTimeEventsArgs(_ArgsBase[list[int]]):
    """Get D-ASA time events"""

    @staticmethod
    def method() -> str:
        return "get_time_events()uint64[]"


@dataclasses.dataclass(kw_only=True)
class GetSecondaryMarketScheduleArgs(_ArgsBase[list[int]]):
    """Get secondary market schedule"""

    @staticmethod
    def method() -> str:
        return "get_secondary_market_schedule()uint64[]"


@dataclasses.dataclass(kw_only=True)
class GetAssetMetadataArgs(_ArgsBase[bytes | bytearray]):
    """Get D-ASA metadata"""

    @staticmethod
    def method() -> str:
        return "get_asset_metadata()byte[]"


@dataclasses.dataclass(kw_only=True)
class AssetCreateArgs(_ArgsBase[None]):
    """Create a new D-ASA"""

    arranger: str
    """D-ASA Arranger Address"""
    metadata: bytes | bytearray
    """D-ASA metadata digest (e.g. prospectus digest)"""

    @staticmethod
    def method() -> str:
        return "asset_create(address,byte[])void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.arranger = ByteReader(typing.cast(bytes, data.get(b"R20#")))
        self.circulating_units = typing.cast(int, data.get(b"circulating_units"))
        self.day_count_convention = typing.cast(int, data.get(b"day_count_convention"))
        self.defaulted = typing.cast(int, data.get(b"defaulted"))
        self.denomination_asset_id = typing.cast(int, data.get(b"denomination_asset_id"))
        self.interest_rate = typing.cast(int, data.get(b"interest_rate"))
        self.issuance_date = typing.cast(int, data.get(b"issuance_date"))
        self.maturity_date = typing.cast(int, data.get(b"maturity_date"))
        self.metadata = ByteReader(typing.cast(bytes, data.get(b"metadata")))
        self.primary_distribution_closure_date = typing.cast(int, data.get(b"primary_distribution_closure_date"))
        self.primary_distribution_opening_date = typing.cast(int, data.get(b"primary_distribution_opening_date"))
        self.secondary_market_closure_date = typing.cast(int, data.get(b"secondary_market_closure_date"))
        self.secondary_market_opening_date = typing.cast(int, data.get(b"secondary_market_opening_date"))
        self.settlement_asset_id = typing.cast(int, data.get(b"settlement_asset_id"))
        self.status = typing.cast(int, data.get(b"status"))
        self.suspended = typing.cast(int, data.get(b"suspended"))
        self.total_coupons = typing.cast(int, data.get(b"total_coupons"))
        self.total_units = typing.cast(int, data.get(b"total_units"))
        self.unit_value = typing.cast(int, data.get(b"unit_value"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def asset_config(
        self,
        *,
        denomination_asset_id: int,
        settlement_asset_id: int,
        principal: int,
        minimum_denomination: int,
        day_count_convention: int,
        interest_rate: int,
        coupon_rates: list[int],
        time_events: list[int],
        time_periods: list[tuple[int, int]],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Configure the Debt Algorand Standard Application
        
        Adds a call to `asset_config(uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void` ABI method
        
        :param int denomination_asset_id: Denomination asset identifier
        :param int settlement_asset_id: Settlement asset identifier
        :param int principal: Principal, expressed in denomination asset
        :param int minimum_denomination: Minimum denomination, expressed in denomination asset
        :param int day_count_convention: Day-count convention for interests calculation
        :param int interest_rate: Interest rate in bps
        :param list[int] coupon_rates: Coupon interest rates in bps
        :param list[int] time_events: Time events (strictly ascending order)
        :param list[tuple[int, int]] time_periods: Time periods of recurring time events
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AssetConfigArgs(
            denomination_asset_id=denomination_asset_id,
            settlement_asset_id=settlement_asset_id,
            principal=principal,
            minimum_denomination=minimum_denomination,
            day_count_convention=day_count_convention,
            interest_rate=interest_rate,
            coupon_rates=coupon_rates,
            time_events=time_events,
            time_periods=time_periods,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_secondary_time_events(
        self,
        *,
        secondary_market_time_events: list[int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set secondary market time schedule
        
        Adds a call to `set_secondary_time_events(uint64[])(uint64,uint64)` ABI method
        
        :param list[int] secondary_market_time_events: Secondary market time events (strictly ascending order)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetSecondaryTimeEventsArgs(
            secondary_market_time_events=secondary_market_time_events,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def assign_role(
        self,
        *,
        role_address: str,
        role: int,
        config: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Assign a role to an address
        
        Adds a call to `assign_role(address,uint8,byte[])uint64` ABI method
        
        :param str role_address: Account Role Address
        :param int role: Role identifier
        :param bytes | bytearray config: Role configuration (Optional)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AssignRoleArgs(
            role_address=role_address,
            role=role,
            config=config,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def revoke_role(
        self,
        *,
        role_address: str,
        role: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Revoke a role from an address
        
        Adds a call to `revoke_role(address,uint8)uint64` ABI method
        
        :param str role_address: Account Role Address
        :param int role: Role identifier
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RevokeRoleArgs(
            role_address=role_address,
            role=role,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def open_account(
        self,
        *,
        holding_address: str,
        payment_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Open D-ASA account
        
        Adds a call to `open_account(address,address)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param str payment_address: Account Payment Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OpenAccountArgs(
            holding_address=holding_address,
            payment_address=payment_address,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def close_account(
        self,
        *,
        holding_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Close D-ASA account
        
        Adds a call to `close_account(address)(uint64,uint64)` ABI method
        
        :param str holding_address: Account Holding Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CloseAccountArgs(
            holding_address=holding_address,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def primary_distribution(
        self,
        *,
        holding_address: str,
        units: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Distribute D-ASA units to accounts according the primary market
        
        Adds a call to `primary_distribution(address,uint64)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param int units: Amount of D-ASA units to distribute
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PrimaryDistributionArgs(
            holding_address=holding_address,
            units=units,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_asset_suspension(
        self,
        *,
        suspended: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set asset suspension status
        
        Adds a call to `set_asset_suspension(bool)uint64` ABI method
        
        :param bool suspended: Suspension status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetAssetSuspensionArgs(
            suspended=suspended,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_account_suspension(
        self,
        *,
        holding_address: str,
        suspended: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set account suspension status
        
        Adds a call to `set_account_suspension(address,bool)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param bool suspended: Suspension status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetAccountSuspensionArgs(
            holding_address=holding_address,
            suspended=suspended,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_default_status(
        self,
        *,
        defaulted: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set D-ASA default status
        
        Adds a call to `set_default_status(bool)void` ABI method
        
        :param bool defaulted: Default status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetDefaultStatusArgs(
            defaulted=defaulted,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_asset_info(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get D-ASA info
        
        Adds a call to `get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetAssetInfoArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_account_info(
        self,
        *,
        holding_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get account info
        
        Adds a call to `get_account_info(address)(address,uint64,uint64,uint64,bool)` ABI method
        
        :param str holding_address: Account Holding Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetAccountInfoArgs(
            holding_address=holding_address,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_time_events(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get D-ASA time events
        
        Adds a call to `get_time_events()uint64[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetTimeEventsArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_secondary_market_schedule(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get secondary market schedule
        
        Adds a call to `get_secondary_market_schedule()uint64[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetSecondaryMarketScheduleArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_asset_metadata(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get D-ASA metadata
        
        Adds a call to `get_asset_metadata()byte[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetAssetMetadataArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_asset_create(
        self,
        *,
        arranger: str,
        metadata: bytes | bytearray,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Create a new D-ASA
        
        Adds a call to `asset_create(address,byte[])void` ABI method
        
        :param str arranger: D-ASA Arranger Address
        :param bytes | bytearray metadata: D-ASA metadata digest (e.g. prospectus digest)
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AssetCreateArgs(
            arranger=arranger,
            metadata=metadata,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a calls to the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_update(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class BaseDAsaClient:
    """
        Base D-ASA Class implementing common interfaces and state schema:
    
        - Asset creation and configuration
        - Role-based access control
        - Account management (creation, suspension, close-out)
        - Time schedule with no coupons and maturity date
        - Primary distribution
        - Getters (asset info, account info, time events)
        
    
    A class for interacting with the BaseDAsa app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        BaseDAsaClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def asset_config(
        self,
        *,
        denomination_asset_id: int,
        settlement_asset_id: int,
        principal: int,
        minimum_denomination: int,
        day_count_convention: int,
        interest_rate: int,
        coupon_rates: list[int],
        time_events: list[int],
        time_periods: list[tuple[int, int]],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Configure the Debt Algorand Standard Application
        
        Calls `asset_config(uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void` ABI method
        
        :param int denomination_asset_id: Denomination asset identifier
        :param int settlement_asset_id: Settlement asset identifier
        :param int principal: Principal, expressed in denomination asset
        :param int minimum_denomination: Minimum denomination, expressed in denomination asset
        :param int day_count_convention: Day-count convention for interests calculation
        :param int interest_rate: Interest rate in bps
        :param list[int] coupon_rates: Coupon interest rates in bps
        :param list[int] time_events: Time events (strictly ascending order)
        :param list[tuple[int, int]] time_periods: Time periods of recurring time events
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AssetConfigArgs(
            denomination_asset_id=denomination_asset_id,
            settlement_asset_id=settlement_asset_id,
            principal=principal,
            minimum_denomination=minimum_denomination,
            day_count_convention=day_count_convention,
            interest_rate=interest_rate,
            coupon_rates=coupon_rates,
            time_events=time_events,
            time_periods=time_periods,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_secondary_time_events(
        self,
        *,
        secondary_market_time_events: list[int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[SecondaryMarketSchedule]:
        """Set secondary market time schedule
        
        Calls `set_secondary_time_events(uint64[])(uint64,uint64)` ABI method
        
        :param list[int] secondary_market_time_events: Secondary market time events (strictly ascending order)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[SecondaryMarketSchedule]: Secondary Market Opening Date, Secondary Market Closure Date"""

        args = SetSecondaryTimeEventsArgs(
            secondary_market_time_events=secondary_market_time_events,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = SecondaryMarketSchedule(**result_dict)
        return result

    def assign_role(
        self,
        *,
        role_address: str,
        role: int,
        config: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Assign a role to an address
        
        Calls `assign_role(address,uint8,byte[])uint64` ABI method
        
        :param str role_address: Account Role Address
        :param int role: Role identifier
        :param bytes | bytearray config: Role configuration (Optional)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Timestamp of the role assignment"""

        args = AssignRoleArgs(
            role_address=role_address,
            role=role,
            config=config,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def revoke_role(
        self,
        *,
        role_address: str,
        role: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Revoke a role from an address
        
        Calls `revoke_role(address,uint8)uint64` ABI method
        
        :param str role_address: Account Role Address
        :param int role: Role identifier
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Timestamp of the role revocation"""

        args = RevokeRoleArgs(
            role_address=role_address,
            role=role,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def open_account(
        self,
        *,
        holding_address: str,
        payment_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Open D-ASA account
        
        Calls `open_account(address,address)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param str payment_address: Account Payment Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Timestamp of the account opening"""

        args = OpenAccountArgs(
            holding_address=holding_address,
            payment_address=payment_address,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def close_account(
        self,
        *,
        holding_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[tuple[int, int]]:
        """Close D-ASA account
        
        Calls `close_account(address)(uint64,uint64)` ABI method
        
        :param str holding_address: Account Holding Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[tuple[int, int]]: Closed units, Timestamp of the account closing"""

        args = CloseAccountArgs(
            holding_address=holding_address,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def primary_distribution(
        self,
        *,
        holding_address: str,
        units: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Distribute D-ASA units to accounts according the primary market
        
        Calls `primary_distribution(address,uint64)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param int units: Amount of D-ASA units to distribute
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Remaining D-ASA units to be distributed"""

        args = PrimaryDistributionArgs(
            holding_address=holding_address,
            units=units,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_asset_suspension(
        self,
        *,
        suspended: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Set asset suspension status
        
        Calls `set_asset_suspension(bool)uint64` ABI method
        
        :param bool suspended: Suspension status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Timestamp of the set asset suspension status"""

        args = SetAssetSuspensionArgs(
            suspended=suspended,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_account_suspension(
        self,
        *,
        holding_address: str,
        suspended: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Set account suspension status
        
        Calls `set_account_suspension(address,bool)uint64` ABI method
        
        :param str holding_address: Account Holding Address
        :param bool suspended: Suspension status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Timestamp of the set account suspension status"""

        args = SetAccountSuspensionArgs(
            holding_address=holding_address,
            suspended=suspended,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_default_status(
        self,
        *,
        defaulted: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set D-ASA default status
        
        Calls `set_default_status(bool)void` ABI method
        
        :param bool defaulted: Default status
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetDefaultStatusArgs(
            defaulted=defaulted,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_asset_info(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[AssetInfo]:
        """Get D-ASA info
        
        Calls `get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[AssetInfo]: Denomination asset ID, Settlement asset ID, Outstanding principal, Unit nominal value, Day-count convention, Interest rate, Total supply, Circulating supply, Primary distribution opening date, Primary distribution closure date, Issuance date, Maturity date, Suspended, Defaulted"""

        args = GetAssetInfoArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = AssetInfo(**result_dict)
        return result

    def get_account_info(
        self,
        *,
        holding_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[AccountInfo]:
        """Get account info
        
        Calls `get_account_info(address)(address,uint64,uint64,uint64,bool)` ABI method
        
        :param str holding_address: Account Holding Address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[AccountInfo]: Payment Address, D-ASA units, Unit nominal value in denomination asset, Paid coupons, Suspended"""

        args = GetAccountInfoArgs(
            holding_address=holding_address,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = AccountInfo(**result_dict)
        return result

    def get_time_events(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[list[int]]:
        """Get D-ASA time events
        
        Calls `get_time_events()uint64[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[list[int]]: Time events"""

        args = GetTimeEventsArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_secondary_market_schedule(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[list[int]]:
        """Get secondary market schedule
        
        Calls `get_secondary_market_schedule()uint64[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[list[int]]: Secondary market schedule"""

        args = GetSecondaryMarketScheduleArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_asset_metadata(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[bytes | bytearray]:
        """Get D-ASA metadata
        
        Calls `get_asset_metadata()byte[]` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[bytes | bytearray]: Asset metadata"""

        args = GetAssetMetadataArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_asset_create(
        self,
        *,
        arranger: str,
        metadata: bytes | bytearray,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Create a new D-ASA
        
        Calls `asset_create(address,byte[])void` ABI method
        
        :param str arranger: D-ASA Arranger Address
        :param bytes | bytearray metadata: D-ASA metadata digest (e.g. prospectus digest)
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AssetCreateArgs(
            arranger=arranger,
            metadata=metadata,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.update(
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[AssetCreateArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[AssetCreateArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
