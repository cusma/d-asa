#pragma version 10
#pragma typetrack false

// smart_contracts.base_d_asa.contract.BaseDAsa.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 8 4 200
    bytecblock 0x151f7c75 "circulating_units" "status" "maturity_date" "unit_value" "total_units" "total_coupons" 0x52333023 0x52323023 "denomination_asset_id" "settlement_asset_id" "day_count_convention" "metadata" "principal_discount" "primary_distribution_opening_date" "primary_distribution_closure_date" "issuance_date" "secondary_market_opening_date" "secondary_market_closure_date" "suspended" "defaulted" "interest_rate" 0x52343023 0x52373023 0x74696d654576656e7473 0x52363023 0x52353023 0x0000000000000000 0x068101 0x636f75706f6e5261746573 0x52383023
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/base_d_asa/contract.py:41-42
    // # Role Based Access Control
    // self.arranger = GlobalState(Account(), key=cst.PREFIX_ID_ARRANGER)
    bytec 8 // 0x52323023
    global ZeroAddress
    app_global_put
    // smart_contracts/base_d_asa/contract.py:59-60
    // # Asset Configuration
    // self.denomination_asset_id = UInt64()
    bytec 9 // "denomination_asset_id"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:61
    // self.settlement_asset_id = UInt64()
    bytec 10 // "settlement_asset_id"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:62
    // self.unit_value = UInt64()
    bytec 4 // "unit_value"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:63
    // self.day_count_convention = UInt64()
    bytec 11 // "day_count_convention"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:65-66
    // # Metadata
    // self.metadata = Bytes()
    bytec 12 // "metadata"
    pushbytes 0x
    app_global_put
    // smart_contracts/base_d_asa/contract.py:68-69
    // # Supply
    // self.total_units = UInt64()
    bytec 5 // "total_units"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:70
    // self.circulating_units = UInt64()
    bytec_1 // "circulating_units"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:72-73
    // # Principal
    // self.principal_discount = UInt64()
    bytec 13 // "principal_discount"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:75-76
    // # Interest
    // self.interest_rate = UInt64()
    bytec 21 // "interest_rate"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:80
    // self.total_coupons = UInt64()
    bytec 6 // "total_coupons"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:85
    // self.primary_distribution_opening_date = UInt64()
    bytec 14 // "primary_distribution_opening_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:86
    // self.primary_distribution_closure_date = UInt64()
    bytec 15 // "primary_distribution_closure_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:87
    // self.issuance_date = UInt64()
    bytec 16 // "issuance_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:88
    // self.secondary_market_opening_date = UInt64()
    bytec 17 // "secondary_market_opening_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:89
    // self.secondary_market_closure_date = UInt64()
    bytec 18 // "secondary_market_closure_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:90
    // self.maturity_date = UInt64()
    bytec_3 // "maturity_date"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:92-93
    // # Status
    // self.status = UInt64(cfg.STATUS_EMPTY)
    bytec_2 // "status"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:94
    // self.suspended = UInt64()
    bytec 19 // "suspended"
    intc_0 // 0
    app_global_put
    // smart_contracts/base_d_asa/contract.py:95
    // self.defaulted = UInt64()
    bytec 20 // "defaulted"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@22
    pushbytess 0x3f0efc6c 0x25dba95b 0x89474134 0x1d6fc255 0xfef74567 0xb8fc1390 0x3d43d1f0 0xebd96b2f 0x6c85e3ee 0xf63ace8d 0xbbcca18a 0x1a7babb4 0x402dba47 0xed02759f 0xfad2173e 0x08efea35 0xe4a5ab54 // method "asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void", method "asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void", method "asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void", method "set_secondary_time_events(uint64[])(uint64,uint64)", method "assign_role(address,uint8,byte[])uint64", method "revoke_role(address,uint8)uint64", method "open_account(address,address)uint64", method "close_account(address)(uint64,uint64)", method "primary_distribution(address,uint64)uint64", method "set_asset_suspension(bool)uint64", method "set_account_suspension(address,bool)uint64", method "set_default_status(bool)void", method "get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)", method "get_account_info(address)(address,uint64,uint64,uint64,bool)", method "get_time_events()uint64[]", method "get_secondary_market_schedule()uint64[]", method "get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)"
    txna ApplicationArgs 0
    match main_asset_create_route@5 main_asset_update_route@6 main_asset_config_route@7 main_set_secondary_time_events_route@8 main_assign_role_route@9 main_revoke_role_route@10 main_open_account_route@11 main_close_account_route@12 main_primary_distribution_route@13 main_set_asset_suspension_route@14 main_set_account_suspension_route@15 main_set_default_status_route@16 main_get_asset_info_route@17 main_get_account_info_route@18 main_get_time_events_route@19 main_get_secondary_market_schedule_route@20 main_get_asset_metadata_route@21

main_after_if_else@22:
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    intc_0 // 0
    return

main_get_asset_metadata_route@21:
    // smart_contracts/base_d_asa/contract.py:980
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_asset_metadata
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_secondary_market_schedule_route@20:
    // smart_contracts/base_d_asa/contract.py:967
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_secondary_market_schedule
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_time_events_route@19:
    // smart_contracts/base_d_asa/contract.py:954
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_time_events
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_account_info_route@18:
    // smart_contracts/base_d_asa/contract.py:937
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/base_d_asa/contract.py:937
    // @arc4.abimethod(readonly=True)
    callsub get_account_info
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_asset_info_route@17:
    // smart_contracts/base_d_asa/contract.py:898
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_asset_info
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_set_default_status_route@16:
    // smart_contracts/base_d_asa/contract.py:884
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/base_d_asa/contract.py:884
    // @arc4.abimethod
    callsub set_default_status
    intc_1 // 1
    return

main_set_account_suspension_route@15:
    // smart_contracts/base_d_asa/contract.py:861
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/base_d_asa/contract.py:861
    // @arc4.abimethod
    callsub set_account_suspension
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_set_asset_suspension_route@14:
    // smart_contracts/base_d_asa/contract.py:843
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/base_d_asa/contract.py:843
    // @arc4.abimethod
    callsub set_asset_suspension
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_primary_distribution_route@13:
    // smart_contracts/base_d_asa/contract.py:801
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/base_d_asa/contract.py:801
    // @arc4.abimethod
    callsub primary_distribution
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_close_account_route@12:
    // smart_contracts/base_d_asa/contract.py:771
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/base_d_asa/contract.py:771
    // @arc4.abimethod
    callsub close_account
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_open_account_route@11:
    // smart_contracts/base_d_asa/contract.py:736
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/base_d_asa/contract.py:736
    // @arc4.abimethod
    callsub open_account
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_revoke_role_route@10:
    // smart_contracts/base_d_asa/contract.py:688
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/base_d_asa/contract.py:688
    // @arc4.abimethod
    callsub revoke_role
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_assign_role_route@9:
    // smart_contracts/base_d_asa/contract.py:625
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/base_d_asa/contract.py:625
    // @arc4.abimethod
    callsub assign_role
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_set_secondary_time_events_route@8:
    // smart_contracts/base_d_asa/contract.py:569
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/base_d_asa/contract.py:569
    // @arc4.abimethod
    callsub set_secondary_time_events
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_asset_config_route@7:
    // smart_contracts/base_d_asa/contract.py:484
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    // smart_contracts/base_d_asa/contract.py:484
    // @arc4.abimethod
    callsub asset_config
    intc_1 // 1
    return

main_asset_update_route@6:
    // smart_contracts/base_d_asa/contract.py:473
    // @arc4.abimethod(allow_actions=["UpdateApplication"])
    txn OnCompletion
    intc_3 // UpdateApplication
    ==
    assert // OnCompletion is not UpdateApplication
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/base_d_asa/contract.py:473
    // @arc4.abimethod(allow_actions=["UpdateApplication"])
    callsub asset_update
    intc_1 // 1
    return

main_asset_create_route@5:
    // smart_contracts/base_d_asa/contract.py:461
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/base_d_asa/contract.py:28
    // class BaseDAsa(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/base_d_asa/contract.py:461
    // @arc4.abimethod(create="require")
    callsub asset_create
    intc_1 // 1
    return


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted() -> void:
assert_is_not_defaulted:
    // smart_contracts/base_d_asa/contract.py:112
    // assert not self.defaulted, err.DEFAULTED
    intc_0 // 0
    bytec 20 // "defaulted"
    app_global_get_ex
    assert // check self.defaulted exists
    !
    assert // Defaulted
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended() -> void:
assert_is_not_suspended:
    // smart_contracts/base_d_asa/contract.py:116
    // assert not self.suspended, err.SUSPENDED
    intc_0 // 0
    bytec 19 // "suspended"
    app_global_get_ex
    assert // check self.suspended exists
    !
    assert // Suspended operations
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger() -> void:
assert_caller_is_arranger:
    // smart_contracts/base_d_asa/contract.py:120
    // assert Txn.sender == self.arranger.value, err.UNAUTHORIZED
    txn Sender
    intc_0 // 0
    bytec 8 // 0x52323023
    app_global_get_ex
    assert // check self.arranger exists
    ==
    assert // Not authorized
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager() -> void:
assert_caller_is_account_manager:
    // smart_contracts/base_d_asa/contract.py:122-123
    // @subroutine
    // def assert_caller_is_account_manager(self) -> None:
    proto 0 0
    intc_0 // 0
    // smart_contracts/base_d_asa/contract.py:126
    // caller in self.account_manager
    bytec 22 // 0x52343023
    // smart_contracts/base_d_asa/contract.py:124
    // caller = arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/base_d_asa/contract.py:126
    // caller in self.account_manager
    concat
    dup
    box_len
    bury 1
    // smart_contracts/base_d_asa/contract.py:126-129
    // caller in self.account_manager
    // and self.account_manager[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.account_manager[caller].role_validity_end
    bz assert_caller_is_account_manager_bool_false@4
    // smart_contracts/base_d_asa/contract.py:127
    // and self.account_manager[caller].role_validity_start
    frame_dig 1
    box_get
    assert // check self.account_manager entry exists
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:128
    // <= Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/base_d_asa/contract.py:127-128
    // and self.account_manager[caller].role_validity_start
    // <= Global.latest_timestamp
    itob
    dup
    frame_bury 0
    b<=
    // smart_contracts/base_d_asa/contract.py:127-129
    // and self.account_manager[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.account_manager[caller].role_validity_end
    bz assert_caller_is_account_manager_bool_false@4
    // smart_contracts/base_d_asa/contract.py:129
    // <= self.account_manager[caller].role_validity_end
    frame_dig 1
    box_get
    assert // check self.account_manager entry exists
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:128-129
    // <= Global.latest_timestamp
    // <= self.account_manager[caller].role_validity_end
    frame_dig 0
    b>=
    // smart_contracts/base_d_asa/contract.py:127-129
    // and self.account_manager[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.account_manager[caller].role_validity_end
    bz assert_caller_is_account_manager_bool_false@4
    intc_1 // 1

assert_caller_is_account_manager_bool_merge@5:
    // smart_contracts/base_d_asa/contract.py:125-130
    // assert (
    //     caller in self.account_manager
    //     and self.account_manager[caller].role_validity_start
    //     <= Global.latest_timestamp
    //     <= self.account_manager[caller].role_validity_end
    // ), err.UNAUTHORIZED
    assert // Not authorized
    retsub

assert_caller_is_account_manager_bool_false@4:
    intc_0 // 0
    b assert_caller_is_account_manager_bool_merge@5


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority() -> void:
assert_caller_is_authority:
    // smart_contracts/base_d_asa/contract.py:152-153
    // @subroutine
    // def assert_caller_is_authority(self) -> None:
    proto 0 0
    intc_0 // 0
    // smart_contracts/base_d_asa/contract.py:156
    // caller in self.authority
    bytec 23 // 0x52373023
    // smart_contracts/base_d_asa/contract.py:154
    // caller = arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/base_d_asa/contract.py:156
    // caller in self.authority
    concat
    dup
    box_len
    bury 1
    // smart_contracts/base_d_asa/contract.py:156-159
    // caller in self.authority
    // and self.authority[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.authority[caller].role_validity_end
    bz assert_caller_is_authority_bool_false@4
    // smart_contracts/base_d_asa/contract.py:157
    // and self.authority[caller].role_validity_start
    frame_dig 1
    box_get
    assert // check self.authority entry exists
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:158
    // <= Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/base_d_asa/contract.py:157-158
    // and self.authority[caller].role_validity_start
    // <= Global.latest_timestamp
    itob
    dup
    frame_bury 0
    b<=
    // smart_contracts/base_d_asa/contract.py:157-159
    // and self.authority[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.authority[caller].role_validity_end
    bz assert_caller_is_authority_bool_false@4
    // smart_contracts/base_d_asa/contract.py:159
    // <= self.authority[caller].role_validity_end
    frame_dig 1
    box_get
    assert // check self.authority entry exists
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:158-159
    // <= Global.latest_timestamp
    // <= self.authority[caller].role_validity_end
    frame_dig 0
    b>=
    // smart_contracts/base_d_asa/contract.py:157-159
    // and self.authority[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.authority[caller].role_validity_end
    bz assert_caller_is_authority_bool_false@4
    intc_1 // 1

assert_caller_is_authority_bool_merge@5:
    // smart_contracts/base_d_asa/contract.py:155-160
    // assert (
    //     caller in self.authority
    //     and self.authority[caller].role_validity_start
    //     <= Global.latest_timestamp
    //     <= self.authority[caller].role_validity_end
    // ), err.UNAUTHORIZED
    assert // Not authorized
    retsub

assert_caller_is_authority_bool_false@4:
    intc_0 // 0
    b assert_caller_is_authority_bool_merge@5


// smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted(time_events: bytes) -> bytes:
assert_time_events_sorted:
    // smart_contracts/base_d_asa/contract.py:243-244
    // @subroutine
    // def assert_time_events_sorted(self, time_events: typ.TimeEvents) -> None:
    proto 1 1
    pushbytes ""
    dup
    // smart_contracts/base_d_asa/contract.py:246
    // time_events[cfg.PRIMARY_DISTRIBUTION_OPENING_DATE_IDX].native
    frame_dig -1
    extract 2 0
    frame_dig -1
    pushint 2 // 2
    extract_uint64
    // smart_contracts/base_d_asa/contract.py:247
    // > Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/base_d_asa/contract.py:246-247
    // time_events[cfg.PRIMARY_DISTRIBUTION_OPENING_DATE_IDX].native
    // > Global.latest_timestamp
    >
    // smart_contracts/base_d_asa/contract.py:245-248
    // assert (
    //     time_events[cfg.PRIMARY_DISTRIBUTION_OPENING_DATE_IDX].native
    //     > Global.latest_timestamp
    // ), err.INVALID_TIME
    assert // Time events must be set in the future
    // smart_contracts/base_d_asa/contract.py:249
    // for _t in urange(time_events.length - 1):
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    intc_0 // 0

assert_time_events_sorted_for_header@1:
    // smart_contracts/base_d_asa/contract.py:249
    // for _t in urange(time_events.length - 1):
    frame_dig 4
    frame_dig 3
    <
    bz assert_time_events_sorted_after_for@6

assert_time_events_sorted_while_top@8:
    pushint 75 // 75
    global OpcodeBudget
    >
    bz assert_time_events_sorted_after_while@13
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 28 // 0x068101
    itxn_field ApprovalProgram
    bytec 28 // 0x068101
    itxn_field ClearStateProgram
    global MinTxnFee
    itxn_field Fee
    itxn_submit
    b assert_time_events_sorted_while_top@8

assert_time_events_sorted_after_while@13:
    // smart_contracts/base_d_asa/contract.py:254
    // time_i = time_events[_t].native
    frame_dig 4
    dup
    intc_2 // 8
    *
    frame_dig 2
    dup
    cover 3
    swap
    extract_uint64
    dup
    cover 3
    frame_bury 1
    // smart_contracts/base_d_asa/contract.py:255
    // time_f = time_events[_t + 1].native
    intc_1 // 1
    +
    dup
    frame_bury 4
    intc_2 // 8
    *
    extract_uint64
    dup
    frame_bury 0
    // smart_contracts/base_d_asa/contract.py:256
    // assert time_f > time_i, err.INVALID_SORTING
    <
    assert // Time events must be sorted in strictly ascending order
    // smart_contracts/base_d_asa/contract.py:257
    // if self.day_count_convention != UInt64(cst.DCC_CONT):
    intc_0 // 0
    bytec 11 // "day_count_convention"
    app_global_get_ex
    assert // check self.day_count_convention exists
    pushint 255 // 255
    !=
    bz assert_time_events_sorted_for_header@1
    // smart_contracts/base_d_asa/contract.py:258-259
    // # The reference implementation requires time periods expressed in days for regular day-count conventions
    // assert (time_f - time_i) % UInt64(
    frame_dig 0
    frame_dig 1
    -
    // smart_contracts/base_d_asa/contract.py:258-261
    // # The reference implementation requires time periods expressed in days for regular day-count conventions
    // assert (time_f - time_i) % UInt64(
    //     cst.DAY_2_SEC
    // ) == 0, err.INVALID_TIME_PERIOD
    pushint 86400 // 86400
    %
    !
    assert // Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)
    b assert_time_events_sorted_for_header@1

assert_time_events_sorted_after_for@6:
    frame_dig -1
    frame_bury 0
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.asset_create(arranger: bytes, metadata: bytes) -> void:
asset_create:
    // smart_contracts/base_d_asa/contract.py:461-462
    // @arc4.abimethod(create="require")
    // def asset_create(self, arranger: arc4.Address, metadata: typ.AssetMetadata) -> None:
    proto 2 0
    // smart_contracts/base_d_asa/contract.py:470
    // self.arranger.value = arranger.native
    bytec 8 // 0x52323023
    frame_dig -2
    app_global_put
    // smart_contracts/base_d_asa/contract.py:471
    // self.metadata = metadata.bytes
    bytec 12 // "metadata"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.asset_update(metadata: bytes) -> void:
asset_update:
    // smart_contracts/base_d_asa/contract.py:473-474
    // @arc4.abimethod(allow_actions=["UpdateApplication"])
    // def asset_update(self, metadata: typ.AssetMetadata) -> None:
    proto 1 0
    // smart_contracts/base_d_asa/contract.py:478-481
    // # The reference implementation grants the update permissions to the Arranger.
    // # Other implementations may disable D-ASA application updatability or change its authorizations.
    // # ⚠️ WARNING: Application updates must be executed VERY carefully, as they might introduce breaking changes.
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    // smart_contracts/base_d_asa/contract.py:482
    // self.metadata = metadata.bytes
    bytec 12 // "metadata"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.asset_config(denomination_asset_id: bytes, settlement_asset_id: bytes, principal: bytes, principal_discount: bytes, minimum_denomination: bytes, day_count_convention: bytes, interest_rate: bytes, coupon_rates: bytes, time_events: bytes, time_periods: bytes) -> void:
asset_config:
    // smart_contracts/base_d_asa/contract.py:484-497
    // @arc4.abimethod
    // def asset_config(
    //     self,
    //     denomination_asset_id: arc4.UInt64,
    //     settlement_asset_id: arc4.UInt64,
    //     principal: arc4.UInt64,
    //     principal_discount: arc4.UInt64,
    //     minimum_denomination: arc4.UInt64,
    //     day_count_convention: arc4.UInt8,
    //     interest_rate: arc4.UInt16,
    //     coupon_rates: typ.CouponRates,
    //     time_events: typ.TimeEvents,
    //     time_periods: typ.TimePeriods,
    // ) -> None:
    proto 10 0
    intc_0 // 0
    pushbytes ""
    dupn 2
    // smart_contracts/base_d_asa/contract.py:527
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    // smart_contracts/base_d_asa/contract.py:528
    // assert self.status == cfg.STATUS_EMPTY, err.ALREADY_CONFIGURED
    intc_0 // 0
    bytec_2 // "status"
    app_global_get_ex
    assert // check self.status exists
    !
    assert // D-ASA already configured
    // smart_contracts/base_d_asa/contract.py:530-531
    // # Set Denomination Asset
    // self.assert_denomination_asset(denomination_asset_id.native)
    frame_dig -10
    btoi
    dup
    // smart_contracts/base_d_asa/contract.py:180
    // denomination_asset_id != UInt64(0) and Asset(denomination_asset_id).creator
    bz asset_config_bool_false@4
    frame_dig 4
    asset_params_get AssetCreator
    assert // asset exists
    global ZeroAddress
    !=
    bz asset_config_bool_false@4
    intc_1 // 1

asset_config_bool_merge@5:
    // smart_contracts/base_d_asa/contract.py:178-181
    // # The reference implementation has on-chain denomination with ASA
    // assert (
    //     denomination_asset_id != UInt64(0) and Asset(denomination_asset_id).creator
    // ), err.INVALID_DENOMINATION
    assert // Denomination asset is not properly set
    // smart_contracts/base_d_asa/contract.py:185
    // self.denomination_asset_id = denomination_asset_id
    bytec 9 // "denomination_asset_id"
    frame_dig 4
    app_global_put
    // smart_contracts/base_d_asa/contract.py:534-535
    // # Set Denomination Asset
    // self.assert_settlement_asset(settlement_asset_id.native)
    frame_dig -9
    btoi
    // smart_contracts/base_d_asa/contract.py:191
    // settlement_asset_id == self.denomination_asset_id
    intc_0 // 0
    bytec 9 // "denomination_asset_id"
    app_global_get_ex
    assert // check self.denomination_asset_id exists
    dig 1
    ==
    // smart_contracts/base_d_asa/contract.py:189-192
    // # The reference implementation settlement asset is the denomination asset
    // assert (
    //     settlement_asset_id == self.denomination_asset_id
    // ), err.INVALID_SETTLEMENT_ASSET
    assert // Different settlement asset not supported, must be equal to denomination asset
    // smart_contracts/base_d_asa/contract.py:196
    // self.settlement_asset_id = settlement_asset_id
    bytec 10 // "settlement_asset_id"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:197-203
    // # The reference implementation has on-chain settlement with ASA
    // itxn.AssetTransfer(
    //     xfer_asset=self.settlement_asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    //     fee=Global.min_txn_fee,
    // ).submit()
    itxn_begin
    // smart_contracts/base_d_asa/contract.py:202
    // fee=Global.min_txn_fee,
    global MinTxnFee
    // smart_contracts/base_d_asa/contract.py:199
    // xfer_asset=self.settlement_asset_id,
    intc_0 // 0
    bytec 10 // "settlement_asset_id"
    app_global_get_ex
    assert // check self.settlement_asset_id exists
    // smart_contracts/base_d_asa/contract.py:200
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/base_d_asa/contract.py:201
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/base_d_asa/contract.py:197-198
    // # The reference implementation has on-chain settlement with ASA
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    itxn_field Fee
    // smart_contracts/base_d_asa/contract.py:197-203
    // # The reference implementation has on-chain settlement with ASA
    // itxn.AssetTransfer(
    //     xfer_asset=self.settlement_asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    //     fee=Global.min_txn_fee,
    // ).submit()
    itxn_submit
    // smart_contracts/base_d_asa/contract.py:540
    // principal.native % minimum_denomination.native == 0
    frame_dig -8
    btoi
    frame_dig -6
    btoi
    dup2
    %
    !
    // smart_contracts/base_d_asa/contract.py:538-541
    // # Set Principal and Minimum Denomination
    // assert (
    //     principal.native % minimum_denomination.native == 0
    // ), err.INVALID_MINIMUM_DENOMINATION
    assert // Minimum denomination is not a divisor of principal
    // smart_contracts/base_d_asa/contract.py:542
    // self.unit_value = minimum_denomination.native
    bytec 4 // "unit_value"
    dig 1
    app_global_put
    // smart_contracts/base_d_asa/contract.py:543
    // self.total_units = principal.native // minimum_denomination.native
    /
    bytec 5 // "total_units"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:544
    // self.principal_discount = principal_discount.native
    frame_dig -7
    btoi
    bytec 13 // "principal_discount"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:546-547
    // # Set Day-Count Convention
    // self.assert_day_count_convention(day_count_convention.native)
    frame_dig -5
    btoi
    dup
    frame_bury 1
    // smart_contracts/base_d_asa/contract.py:207-211
    // # The reference implementation supports only the Actual/Actual and Continuous day-count conventions
    // assert day_count_convention in (
    //     UInt64(cst.DCC_A_A),
    //     UInt64(cst.DCC_CONT),
    // ), err.INVALID_DAY_COUNT_CONVENTION
    bz asset_config_bool_true@15
    frame_dig 1
    // smart_contracts/base_d_asa/contract.py:210
    // UInt64(cst.DCC_CONT),
    pushint 255 // 255
    // smart_contracts/base_d_asa/contract.py:207-211
    // # The reference implementation supports only the Actual/Actual and Continuous day-count conventions
    // assert day_count_convention in (
    //     UInt64(cst.DCC_A_A),
    //     UInt64(cst.DCC_CONT),
    // ), err.INVALID_DAY_COUNT_CONVENTION
    ==
    bz asset_config_bool_false@16

asset_config_bool_true@15:
    intc_1 // 1

asset_config_bool_merge@17:
    // smart_contracts/base_d_asa/contract.py:207-211
    // # The reference implementation supports only the Actual/Actual and Continuous day-count conventions
    // assert day_count_convention in (
    //     UInt64(cst.DCC_A_A),
    //     UInt64(cst.DCC_CONT),
    // ), err.INVALID_DAY_COUNT_CONVENTION
    assert // Invalid day-count convention ID
    // smart_contracts/base_d_asa/contract.py:215
    // self.day_count_convention = day_count_convention
    bytec 11 // "day_count_convention"
    frame_dig 1
    app_global_put
    // smart_contracts/base_d_asa/contract.py:550-551
    // # Set Interest Rate
    // self.assert_interest_rate(interest_rate.native)
    frame_dig -4
    btoi
    frame_bury 2
    // smart_contracts/base_d_asa/contract.py:219-220
    // # This subroutine must be used after the principal discount has been set
    // if not self.principal_discount:
    intc_0 // 0
    bytec 13 // "principal_discount"
    app_global_get_ex
    assert // check self.principal_discount exists
    bnz asset_config_after_if_else@23
    // smart_contracts/base_d_asa/contract.py:221
    // assert interest_rate > UInt64(0), err.INVALID_INTEREST_RATE
    frame_dig 2
    assert // Interest rate is not properly defined

asset_config_after_if_else@23:
    // smart_contracts/base_d_asa/contract.py:225
    // self.interest_rate = interest_rate
    bytec 21 // "interest_rate"
    frame_dig 2
    app_global_put
    // smart_contracts/base_d_asa/contract.py:229
    // assert not coupon_rates.length, err.INVALID_COUPON_RATES
    frame_dig -3
    intc_0 // 0
    extract_uint16
    dup
    !
    assert // Coupon rates are not properly defined
    // smart_contracts/base_d_asa/contract.py:233
    // self.total_coupons = coupon_rates.length
    bytec 6 // "total_coupons"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:234
    // if self.total_coupons:
    intc_0 // 0
    bytec 6 // "total_coupons"
    app_global_get_ex
    assert // check self.total_coupons exists
    bz asset_config_after_if_else@31
    // smart_contracts/base_d_asa/contract.py:235
    // self.coupon_rates.value = coupon_rates.copy()
    bytec 29 // 0x636f75706f6e5261746573
    box_del
    pop
    bytec 29 // 0x636f75706f6e5261746573
    frame_dig -3
    box_put

asset_config_after_if_else@31:
    // smart_contracts/base_d_asa/contract.py:240
    // time_events.length == self.total_coupons + cfg.TIME_SCHEDULE_LIMITS
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    bytec 6 // "total_coupons"
    app_global_get_ex
    assert // check self.total_coupons exists
    intc_3 // 4
    +
    ==
    // smart_contracts/base_d_asa/contract.py:239-241
    // assert (
    //     time_events.length == self.total_coupons + cfg.TIME_SCHEDULE_LIMITS
    // ), err.INVALID_TIME_EVENTS_LENGTH
    assert // Time events length is invalid
    // smart_contracts/base_d_asa/contract.py:560
    // self.assert_time_events_sorted(time_events)
    frame_dig -2
    callsub assert_time_events_sorted
    frame_bury -2
    // smart_contracts/base_d_asa/contract.py:265
    // self.time_events.value = time_events.copy()
    bytec 24 // 0x74696d654576656e7473
    box_del
    pop
    bytec 24 // 0x74696d654576656e7473
    frame_dig -2
    box_put
    // smart_contracts/base_d_asa/contract.py:266-268
    // self.primary_distribution_opening_date = time_events[
    //     cfg.PRIMARY_DISTRIBUTION_OPENING_DATE_IDX
    // ].native
    frame_dig -2
    extract 2 0
    frame_bury 0
    frame_dig -2
    pushint 2 // 2
    extract_uint64
    // smart_contracts/base_d_asa/contract.py:266
    // self.primary_distribution_opening_date = time_events[
    bytec 14 // "primary_distribution_opening_date"
    // smart_contracts/base_d_asa/contract.py:266-268
    // self.primary_distribution_opening_date = time_events[
    //     cfg.PRIMARY_DISTRIBUTION_OPENING_DATE_IDX
    // ].native
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:269-271
    // self.primary_distribution_closure_date = time_events[
    //     cfg.PRIMARY_DISTRIBUTION_CLOSURE_DATE_IDX
    // ].native
    frame_dig -2
    pushint 10 // 10
    extract_uint64
    // smart_contracts/base_d_asa/contract.py:269
    // self.primary_distribution_closure_date = time_events[
    bytec 15 // "primary_distribution_closure_date"
    // smart_contracts/base_d_asa/contract.py:269-271
    // self.primary_distribution_closure_date = time_events[
    //     cfg.PRIMARY_DISTRIBUTION_CLOSURE_DATE_IDX
    // ].native
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:272
    // self.issuance_date = time_events[cfg.ISSUANCE_DATE_IDX].native
    frame_dig -2
    pushint 18 // 18
    extract_uint64
    bytec 16 // "issuance_date"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:274-275
    // # Some D-ASA may not have a maturity date (e.g., perpetuals)
    // if time_events.length == self.total_coupons + cfg.TIME_SCHEDULE_LIMITS:
    frame_dig -2
    intc_0 // 0
    extract_uint16
    dup
    frame_bury 3
    intc_0 // 0
    bytec 6 // "total_coupons"
    app_global_get_ex
    assert // check self.total_coupons exists
    intc_3 // 4
    +
    ==
    bz asset_config_after_if_else@37
    // smart_contracts/base_d_asa/contract.py:276
    // self.maturity_date = time_events[cfg.MATURITY_DATE_IDX].native
    frame_dig 3
    intc_1 // 1
    -
    intc_2 // 8
    *
    frame_dig 0
    swap
    extract_uint64
    bytec_3 // "maturity_date"
    swap
    app_global_put

asset_config_after_if_else@37:
    // smart_contracts/base_d_asa/contract.py:280
    // assert not time_periods.length, err.INVALID_TIME_PERIODS
    frame_dig -1
    intc_0 // 0
    extract_uint16
    !
    assert // Time periods are not properly defined
    // smart_contracts/base_d_asa/contract.py:567
    // self.status = UInt64(cfg.STATUS_ACTIVE)
    bytec_2 // "status"
    pushint 100 // 100
    app_global_put
    retsub

asset_config_bool_false@16:
    intc_0 // 0
    b asset_config_bool_merge@17

asset_config_bool_false@4:
    intc_0 // 0
    b asset_config_bool_merge@5


// smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events(secondary_market_time_events: bytes) -> bytes:
set_secondary_time_events:
    // smart_contracts/base_d_asa/contract.py:569-572
    // @arc4.abimethod
    // def set_secondary_time_events(
    //     self, secondary_market_time_events: typ.TimeEvents
    // ) -> typ.SecondaryMarketSchedule:
    proto 1 1
    intc_0 // 0
    // smart_contracts/base_d_asa/contract.py:590
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    // smart_contracts/base_d_asa/contract.py:108
    // return self.status == cfg.STATUS_ENDED
    intc_0 // 0
    bytec_2 // "status"
    app_global_get_ex
    assert // check self.status exists
    intc 4 // 200
    ==
    // smart_contracts/base_d_asa/contract.py:591
    // assert not self.status_is_ended(), err.UNAUTHORIZED
    !
    assert // Not authorized
    // smart_contracts/base_d_asa/contract.py:592
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:594
    // assert secondary_market_time_events.length >= 1, err.INVALID_TIME_EVENTS_LENGTH
    frame_dig -1
    intc_0 // 0
    extract_uint16
    dup
    assert // Time events length is invalid
    // smart_contracts/base_d_asa/contract.py:595
    // if secondary_market_time_events.length > 1:
    intc_1 // 1
    >
    frame_dig -1
    swap
    bz set_secondary_time_events_after_if_else@2
    // smart_contracts/base_d_asa/contract.py:596
    // self.assert_time_events_sorted(secondary_market_time_events)
    frame_dig -1
    callsub assert_time_events_sorted
    dup
    frame_bury -1
    frame_bury 1

set_secondary_time_events_after_if_else@2:
    frame_dig 1
    frame_bury -1
    // smart_contracts/base_d_asa/contract.py:598
    // self.issuance_date
    intc_0 // 0
    bytec 16 // "issuance_date"
    app_global_get_ex
    assert // check self.issuance_date exists
    // smart_contracts/base_d_asa/contract.py:599-601
    // <= secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_OPENING_DATE_IDX
    // ].native
    frame_dig -1
    extract 2 0
    frame_bury 0
    frame_dig -1
    pushint 2 // 2
    extract_uint64
    // smart_contracts/base_d_asa/contract.py:598-601
    // self.issuance_date
    // <= secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_OPENING_DATE_IDX
    // ].native
    swap
    dig 1
    <=
    // smart_contracts/base_d_asa/contract.py:597-602
    // assert (
    //     self.issuance_date
    //     <= secondary_market_time_events[
    //         cfg.SECONDARY_MARKET_OPENING_DATE_IDX
    //     ].native
    // ), err.INVALID_SECONDARY_OPENING_DATE
    assert // Invalid secondary market opening date
    // smart_contracts/base_d_asa/contract.py:603
    // self.secondary_market_opening_date = secondary_market_time_events[
    bytec 17 // "secondary_market_opening_date"
    // smart_contracts/base_d_asa/contract.py:603-605
    // self.secondary_market_opening_date = secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_OPENING_DATE_IDX
    // ].native
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:606
    // if self.maturity_date:
    intc_0 // 0
    bytec_3 // "maturity_date"
    app_global_get_ex
    assert // check self.maturity_date exists
    bz set_secondary_time_events_after_if_else@4
    // smart_contracts/base_d_asa/contract.py:608
    // self.maturity_date
    intc_0 // 0
    bytec_3 // "maturity_date"
    app_global_get_ex
    assert // check self.maturity_date exists
    // smart_contracts/base_d_asa/contract.py:610
    // cfg.SECONDARY_MARKET_CLOSURE_DATE_IDX
    frame_dig -1
    intc_0 // 0
    extract_uint16
    // smart_contracts/base_d_asa/contract.py:609-611
    // >= secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_CLOSURE_DATE_IDX
    // ].native
    intc_1 // 1
    -
    intc_2 // 8
    *
    frame_dig 0
    swap
    extract_uint64
    // smart_contracts/base_d_asa/contract.py:608-611
    // self.maturity_date
    // >= secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_CLOSURE_DATE_IDX
    // ].native
    swap
    dig 1
    >=
    // smart_contracts/base_d_asa/contract.py:607-612
    // assert (
    //     self.maturity_date
    //     >= secondary_market_time_events[
    //         cfg.SECONDARY_MARKET_CLOSURE_DATE_IDX
    //     ].native
    // ), err.INVALID_SECONDARY_CLOSURE_DATE
    assert // Invalid secondary market closure date
    // smart_contracts/base_d_asa/contract.py:613
    // self.secondary_market_closure_date = secondary_market_time_events[
    bytec 18 // "secondary_market_closure_date"
    // smart_contracts/base_d_asa/contract.py:613-615
    // self.secondary_market_closure_date = secondary_market_time_events[
    //     cfg.SECONDARY_MARKET_CLOSURE_DATE_IDX
    // ].native
    swap
    app_global_put

set_secondary_time_events_after_if_else@4:
    // smart_contracts/base_d_asa/contract.py:618
    // self.secondary_market_opening_date
    intc_0 // 0
    bytec 17 // "secondary_market_opening_date"
    app_global_get_ex
    assert // check self.secondary_market_opening_date exists
    // smart_contracts/base_d_asa/contract.py:617-619
    // secondary_market_opening_date=arc4.UInt64(
    //     self.secondary_market_opening_date
    // ),
    itob
    // smart_contracts/base_d_asa/contract.py:621
    // self.secondary_market_closure_date
    intc_0 // 0
    bytec 18 // "secondary_market_closure_date"
    app_global_get_ex
    assert // check self.secondary_market_closure_date exists
    // smart_contracts/base_d_asa/contract.py:620-622
    // secondary_market_closure_date=arc4.UInt64(
    //     self.secondary_market_closure_date
    // ),
    itob
    // smart_contracts/base_d_asa/contract.py:616-623
    // return typ.SecondaryMarketSchedule(
    //     secondary_market_opening_date=arc4.UInt64(
    //         self.secondary_market_opening_date
    //     ),
    //     secondary_market_closure_date=arc4.UInt64(
    //         self.secondary_market_closure_date
    //     ),
    // )
    concat
    frame_bury 0
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.assign_role(role_address: bytes, role: bytes, config: bytes) -> bytes:
assign_role:
    // smart_contracts/base_d_asa/contract.py:625-628
    // @arc4.abimethod
    // def assign_role(
    //     self, role_address: arc4.Address, role: arc4.UInt8, config: arc4.DynamicBytes
    // ) -> arc4.UInt64:
    proto 3 1
    // smart_contracts/base_d_asa/contract.py:646
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    // smart_contracts/base_d_asa/contract.py:647
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:648
    // assert role.native in (
    frame_dig -2
    btoi
    dup
    // smart_contracts/base_d_asa/contract.py:649
    // UInt64(cst.ROLE_ARRANGER),
    pushint 20 // 20
    // smart_contracts/base_d_asa/contract.py:648-655
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@6
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:650
    // UInt64(cst.ROLE_ACCOUNT_MANAGER),
    pushint 40 // 40
    // smart_contracts/base_d_asa/contract.py:648-655
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@6
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:651
    // UInt64(cst.ROLE_PRIMARY_DEALER),
    pushint 50 // 50
    // smart_contracts/base_d_asa/contract.py:648-655
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@6
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:652
    // UInt64(cst.ROLE_TRUSTEE),
    pushint 60 // 60
    // smart_contracts/base_d_asa/contract.py:648-655
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@6
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:653
    // UInt64(cst.ROLE_AUTHORITY),
    pushint 70 // 70
    // smart_contracts/base_d_asa/contract.py:648-655
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz assign_role_bool_true@6
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:654
    // UInt64(cst.ROLE_INTEREST_ORACLE),
    pushint 80 // 80
    // smart_contracts/base_d_asa/contract.py:648-655
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bz assign_role_bool_false@7

assign_role_bool_true@6:
    intc_1 // 1

assign_role_bool_merge@8:
    // smart_contracts/base_d_asa/contract.py:648-655
    // assert role.native in (
    //     UInt64(cst.ROLE_ARRANGER),
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    assert // Invalid role identifier
    // smart_contracts/base_d_asa/contract.py:657
    // case UInt64(cst.ROLE_ARRANGER):
    pushints 20 40 50 60 70 80 // 20, 40, 50, 60, 70, 80
    // smart_contracts/base_d_asa/contract.py:656-685
    // match role.native:
    //     case UInt64(cst.ROLE_ARRANGER):
    //         self.arranger.value = role_address.native
    //     case UInt64(cst.ROLE_ACCOUNT_MANAGER):
    //         assert (
    //             role_address not in self.account_manager
    //         ), err.INVALID_ROLE_ADDRESS
    //         self.account_manager[role_address] = typ.RoleConfig.from_bytes(
    //             config.native
    //         )
    //     case UInt64(cst.ROLE_PRIMARY_DEALER):
    //         assert role_address not in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    //         self.primary_dealer[role_address] = typ.RoleConfig.from_bytes(
    //             config.native
    //         )
    //     case UInt64(cst.ROLE_TRUSTEE):
    //         assert role_address not in self.trustee, err.INVALID_ROLE_ADDRESS
    //         self.trustee[role_address] = typ.RoleConfig.from_bytes(config.native)
    //     case UInt64(cst.ROLE_AUTHORITY):
    //         assert role_address not in self.authority, err.INVALID_ROLE_ADDRESS
    //         self.authority[role_address] = typ.RoleConfig.from_bytes(config.native)
    //     case UInt64(cst.ROLE_INTEREST_ORACLE):
    //         assert (
    //             role_address not in self.interest_oracle
    //         ), err.INVALID_ROLE_ADDRESS
    //         self.interest_oracle[role_address] = typ.RoleConfig.from_bytes(
    //             config.native
    //         )
    //     case _:
    //         op.err()
    frame_dig 0
    match assign_role_switch_case_0@9 assign_role_switch_case_1@10 assign_role_switch_case_2@11 assign_role_switch_case_3@12 assign_role_switch_case_4@13 assign_role_switch_case_5@14
    // smart_contracts/base_d_asa/contract.py:685
    // op.err()
    err

assign_role_switch_case_5@14:
    // smart_contracts/base_d_asa/contract.py:679
    // role_address not in self.interest_oracle
    bytec 30 // 0x52383023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    // smart_contracts/base_d_asa/contract.py:678-680
    // assert (
    //     role_address not in self.interest_oracle
    // ), err.INVALID_ROLE_ADDRESS
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:681-683
    // self.interest_oracle[role_address] = typ.RoleConfig.from_bytes(
    //     config.native
    // )
    frame_dig -1
    // smart_contracts/base_d_asa/contract.py:682
    // config.native
    extract 2 0
    // smart_contracts/base_d_asa/contract.py:681-683
    // self.interest_oracle[role_address] = typ.RoleConfig.from_bytes(
    //     config.native
    // )
    box_put

assign_role_switch_case_next@16:
    // smart_contracts/base_d_asa/contract.py:686
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    swap
    retsub

assign_role_switch_case_4@13:
    // smart_contracts/base_d_asa/contract.py:675
    // assert role_address not in self.authority, err.INVALID_ROLE_ADDRESS
    bytec 23 // 0x52373023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:676
    // self.authority[role_address] = typ.RoleConfig.from_bytes(config.native)
    frame_dig -1
    extract 2 0
    box_put
    b assign_role_switch_case_next@16

assign_role_switch_case_3@12:
    // smart_contracts/base_d_asa/contract.py:672
    // assert role_address not in self.trustee, err.INVALID_ROLE_ADDRESS
    bytec 25 // 0x52363023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:673
    // self.trustee[role_address] = typ.RoleConfig.from_bytes(config.native)
    frame_dig -1
    extract 2 0
    box_put
    b assign_role_switch_case_next@16

assign_role_switch_case_2@11:
    // smart_contracts/base_d_asa/contract.py:667
    // assert role_address not in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    bytec 26 // 0x52353023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:668-670
    // self.primary_dealer[role_address] = typ.RoleConfig.from_bytes(
    //     config.native
    // )
    frame_dig -1
    // smart_contracts/base_d_asa/contract.py:669
    // config.native
    extract 2 0
    // smart_contracts/base_d_asa/contract.py:668-670
    // self.primary_dealer[role_address] = typ.RoleConfig.from_bytes(
    //     config.native
    // )
    box_put
    b assign_role_switch_case_next@16

assign_role_switch_case_1@10:
    // smart_contracts/base_d_asa/contract.py:661
    // role_address not in self.account_manager
    bytec 22 // 0x52343023
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    !
    // smart_contracts/base_d_asa/contract.py:660-662
    // assert (
    //     role_address not in self.account_manager
    // ), err.INVALID_ROLE_ADDRESS
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:663-665
    // self.account_manager[role_address] = typ.RoleConfig.from_bytes(
    //     config.native
    // )
    frame_dig -1
    // smart_contracts/base_d_asa/contract.py:664
    // config.native
    extract 2 0
    // smart_contracts/base_d_asa/contract.py:663-665
    // self.account_manager[role_address] = typ.RoleConfig.from_bytes(
    //     config.native
    // )
    box_put
    b assign_role_switch_case_next@16

assign_role_switch_case_0@9:
    // smart_contracts/base_d_asa/contract.py:658
    // self.arranger.value = role_address.native
    bytec 8 // 0x52323023
    frame_dig -3
    app_global_put
    b assign_role_switch_case_next@16

assign_role_bool_false@7:
    intc_0 // 0
    b assign_role_bool_merge@8


// smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role(role_address: bytes, role: bytes) -> bytes:
revoke_role:
    // smart_contracts/base_d_asa/contract.py:688-689
    // @arc4.abimethod
    // def revoke_role(self, role_address: arc4.Address, role: arc4.UInt8) -> arc4.UInt64:
    proto 2 1
    // smart_contracts/base_d_asa/contract.py:706
    // self.assert_caller_is_arranger()
    callsub assert_caller_is_arranger
    // smart_contracts/base_d_asa/contract.py:707
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:708
    // assert role.native in (
    frame_dig -1
    btoi
    dup
    // smart_contracts/base_d_asa/contract.py:709
    // UInt64(cst.ROLE_ACCOUNT_MANAGER),
    pushint 40 // 40
    // smart_contracts/base_d_asa/contract.py:708-714
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz revoke_role_bool_true@5
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:710
    // UInt64(cst.ROLE_PRIMARY_DEALER),
    pushint 50 // 50
    // smart_contracts/base_d_asa/contract.py:708-714
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz revoke_role_bool_true@5
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:711
    // UInt64(cst.ROLE_TRUSTEE),
    pushint 60 // 60
    // smart_contracts/base_d_asa/contract.py:708-714
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz revoke_role_bool_true@5
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:712
    // UInt64(cst.ROLE_AUTHORITY),
    pushint 70 // 70
    // smart_contracts/base_d_asa/contract.py:708-714
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bnz revoke_role_bool_true@5
    frame_dig 0
    // smart_contracts/base_d_asa/contract.py:713
    // UInt64(cst.ROLE_INTEREST_ORACLE),
    pushint 80 // 80
    // smart_contracts/base_d_asa/contract.py:708-714
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    ==
    bz revoke_role_bool_false@6

revoke_role_bool_true@5:
    intc_1 // 1

revoke_role_bool_merge@7:
    // smart_contracts/base_d_asa/contract.py:708-714
    // assert role.native in (
    //     UInt64(cst.ROLE_ACCOUNT_MANAGER),
    //     UInt64(cst.ROLE_PRIMARY_DEALER),
    //     UInt64(cst.ROLE_TRUSTEE),
    //     UInt64(cst.ROLE_AUTHORITY),
    //     UInt64(cst.ROLE_INTEREST_ORACLE),
    // ), err.INVALID_ROLE
    assert // Invalid role identifier
    // smart_contracts/base_d_asa/contract.py:716-717
    // # Arranger role can not be revoked (just rotated)
    // case UInt64(cst.ROLE_ACCOUNT_MANAGER):
    pushints 40 50 60 70 80 // 40, 50, 60, 70, 80
    // smart_contracts/base_d_asa/contract.py:715-733
    // match role.native:
    //     # Arranger role can not be revoked (just rotated)
    //     case UInt64(cst.ROLE_ACCOUNT_MANAGER):
    //         assert role_address in self.account_manager, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_ID_ACCOUNT_MANAGER + role_address.bytes)
    //     case UInt64(cst.ROLE_PRIMARY_DEALER):
    //         assert role_address in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_ID_PRIMARY_DEALER + role_address.bytes)
    //     case UInt64(cst.ROLE_TRUSTEE):
    //         assert role_address in self.trustee, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_ID_TRUSTEE + role_address.bytes)
    //     case UInt64(cst.ROLE_AUTHORITY):
    //         assert role_address in self.authority, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_ID_AUTHORITY + role_address.bytes)
    //     case UInt64(cst.ROLE_INTEREST_ORACLE):
    //         assert role_address in self.interest_oracle, err.INVALID_ROLE_ADDRESS
    //         op.Box.delete(cst.PREFIX_ID_INTEREST_ORACLE + role_address.bytes)
    //     case _:
    //         op.err()
    frame_dig 0
    match revoke_role_switch_case_0@8 revoke_role_switch_case_1@9 revoke_role_switch_case_2@10 revoke_role_switch_case_3@11 revoke_role_switch_case_4@12
    // smart_contracts/base_d_asa/contract.py:733
    // op.err()
    err

revoke_role_switch_case_4@12:
    // smart_contracts/base_d_asa/contract.py:730
    // assert role_address in self.interest_oracle, err.INVALID_ROLE_ADDRESS
    bytec 30 // 0x52383023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:731
    // op.Box.delete(cst.PREFIX_ID_INTEREST_ORACLE + role_address.bytes)
    box_del
    pop

revoke_role_switch_case_next@14:
    // smart_contracts/base_d_asa/contract.py:734
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    swap
    retsub

revoke_role_switch_case_3@11:
    // smart_contracts/base_d_asa/contract.py:727
    // assert role_address in self.authority, err.INVALID_ROLE_ADDRESS
    bytec 23 // 0x52373023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:728
    // op.Box.delete(cst.PREFIX_ID_AUTHORITY + role_address.bytes)
    box_del
    pop
    b revoke_role_switch_case_next@14

revoke_role_switch_case_2@10:
    // smart_contracts/base_d_asa/contract.py:724
    // assert role_address in self.trustee, err.INVALID_ROLE_ADDRESS
    bytec 25 // 0x52363023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:725
    // op.Box.delete(cst.PREFIX_ID_TRUSTEE + role_address.bytes)
    box_del
    pop
    b revoke_role_switch_case_next@14

revoke_role_switch_case_1@9:
    // smart_contracts/base_d_asa/contract.py:721
    // assert role_address in self.primary_dealer, err.INVALID_ROLE_ADDRESS
    bytec 26 // 0x52353023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:722
    // op.Box.delete(cst.PREFIX_ID_PRIMARY_DEALER + role_address.bytes)
    box_del
    pop
    b revoke_role_switch_case_next@14

revoke_role_switch_case_0@8:
    // smart_contracts/base_d_asa/contract.py:718
    // assert role_address in self.account_manager, err.INVALID_ROLE_ADDRESS
    bytec 22 // 0x52343023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account role address
    // smart_contracts/base_d_asa/contract.py:719
    // op.Box.delete(cst.PREFIX_ID_ACCOUNT_MANAGER + role_address.bytes)
    box_del
    pop
    b revoke_role_switch_case_next@14

revoke_role_bool_false@6:
    intc_0 // 0
    b revoke_role_bool_merge@7


// smart_contracts.base_d_asa.contract.BaseDAsa.open_account(holding_address: bytes, payment_address: bytes) -> bytes:
open_account:
    // smart_contracts/base_d_asa/contract.py:736-739
    // @arc4.abimethod
    // def open_account(
    //     self, holding_address: arc4.Address, payment_address: arc4.Address
    // ) -> arc4.UInt64:
    proto 2 1
    // smart_contracts/base_d_asa/contract.py:756
    // self.assert_caller_is_account_manager()
    callsub assert_caller_is_account_manager
    // smart_contracts/base_d_asa/contract.py:108
    // return self.status == cfg.STATUS_ENDED
    intc_0 // 0
    bytec_2 // "status"
    app_global_get_ex
    assert // check self.status exists
    intc 4 // 200
    ==
    // smart_contracts/base_d_asa/contract.py:757
    // assert not self.status_is_ended(), err.UNAUTHORIZED
    !
    assert // Not authorized
    // smart_contracts/base_d_asa/contract.py:758
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:759
    // self.assert_is_not_suspended()
    callsub assert_is_not_suspended
    // smart_contracts/base_d_asa/contract.py:760
    // assert holding_address not in self.account, err.INVALID_HOLDING_ADDRESS
    bytec 7 // 0x52333023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    !
    assert // Invalid account holding address
    // smart_contracts/base_d_asa/contract.py:762-768
    // self.account[holding_address] = typ.AccountInfo(
    //     payment_address=payment_address,
    //     units=arc4.UInt64(),
    //     unit_value=arc4.UInt64(),
    //     paid_coupons=arc4.UInt64(),
    //     suspended=arc4.Bool(),
    // )
    frame_dig -1
    // smart_contracts/base_d_asa/contract.py:764
    // units=arc4.UInt64(),
    bytec 27 // 0x0000000000000000
    // smart_contracts/base_d_asa/contract.py:762-768
    // self.account[holding_address] = typ.AccountInfo(
    //     payment_address=payment_address,
    //     units=arc4.UInt64(),
    //     unit_value=arc4.UInt64(),
    //     paid_coupons=arc4.UInt64(),
    //     suspended=arc4.Bool(),
    // )
    concat
    // smart_contracts/base_d_asa/contract.py:765
    // unit_value=arc4.UInt64(),
    bytec 27 // 0x0000000000000000
    // smart_contracts/base_d_asa/contract.py:762-768
    // self.account[holding_address] = typ.AccountInfo(
    //     payment_address=payment_address,
    //     units=arc4.UInt64(),
    //     unit_value=arc4.UInt64(),
    //     paid_coupons=arc4.UInt64(),
    //     suspended=arc4.Bool(),
    // )
    concat
    // smart_contracts/base_d_asa/contract.py:766
    // paid_coupons=arc4.UInt64(),
    bytec 27 // 0x0000000000000000
    // smart_contracts/base_d_asa/contract.py:762-768
    // self.account[holding_address] = typ.AccountInfo(
    //     payment_address=payment_address,
    //     units=arc4.UInt64(),
    //     unit_value=arc4.UInt64(),
    //     paid_coupons=arc4.UInt64(),
    //     suspended=arc4.Bool(),
    // )
    concat
    // smart_contracts/base_d_asa/contract.py:767
    // suspended=arc4.Bool(),
    pushbytes 0x00
    // smart_contracts/base_d_asa/contract.py:762-768
    // self.account[holding_address] = typ.AccountInfo(
    //     payment_address=payment_address,
    //     units=arc4.UInt64(),
    //     unit_value=arc4.UInt64(),
    //     paid_coupons=arc4.UInt64(),
    //     suspended=arc4.Bool(),
    // )
    concat
    box_put
    // smart_contracts/base_d_asa/contract.py:769
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.close_account(holding_address: bytes) -> bytes:
close_account:
    // smart_contracts/base_d_asa/contract.py:771-774
    // @arc4.abimethod
    // def close_account(
    //     self, holding_address: arc4.Address
    // ) -> arc4.Tuple[arc4.UInt64, arc4.UInt64]:
    proto 1 1
    // smart_contracts/base_d_asa/contract.py:789
    // self.assert_caller_is_account_manager()
    callsub assert_caller_is_account_manager
    // smart_contracts/base_d_asa/contract.py:790
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:174
    // assert holding_address in self.account, err.INVALID_HOLDING_ADDRESS
    bytec 7 // 0x52333023
    frame_dig -1
    concat
    dup
    box_len
    bury 1
    assert // Invalid account holding address
    // smart_contracts/base_d_asa/contract.py:793
    // closed_units = self.account[holding_address].units.native
    dup
    box_get
    assert // check self.account entry exists
    pushint 32 // 32
    extract_uint64
    dup
    uncover 2
    // smart_contracts/base_d_asa/contract.py:794
    // op.Box.delete(cst.PREFIX_ID_ACCOUNT + holding_address.bytes)
    box_del
    pop
    // smart_contracts/base_d_asa/contract.py:795
    // self.circulating_units -= closed_units
    intc_0 // 0
    bytec_1 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    swap
    -
    bytec_1 // "circulating_units"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:366
    // if self.circulating_units == 0:
    intc_0 // 0
    bytec_1 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    bnz close_account_after_if_else@3
    // smart_contracts/base_d_asa/contract.py:367
    // self.status = UInt64(cfg.STATUS_ENDED)
    bytec_2 // "status"
    intc 4 // 200
    app_global_put

close_account_after_if_else@3:
    // smart_contracts/base_d_asa/contract.py:798
    // (arc4.UInt64(closed_units), arc4.UInt64(Global.latest_timestamp))
    frame_dig 0
    itob
    global LatestTimestamp
    itob
    // smart_contracts/base_d_asa/contract.py:797-799
    // return arc4.Tuple(
    //     (arc4.UInt64(closed_units), arc4.UInt64(Global.latest_timestamp))
    // )
    concat
    swap
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution(holding_address: bytes, units: bytes) -> bytes:
primary_distribution:
    // smart_contracts/base_d_asa/contract.py:801-804
    // @arc4.abimethod
    // def primary_distribution(
    //     self, holding_address: arc4.Address, units: arc4.UInt64
    // ) -> arc4.UInt64:
    proto 2 1
    intc_0 // 0
    dup
    pushbytes ""
    // smart_contracts/base_d_asa/contract.py:104
    // return self.status == cfg.STATUS_ACTIVE
    intc_0 // 0
    bytec_2 // "status"
    app_global_get_ex
    assert // check self.status exists
    pushint 100 // 100
    ==
    // smart_contracts/base_d_asa/contract.py:289-292
    // self.status_is_active()
    // and self.primary_distribution_opening_date
    // <= Global.latest_timestamp
    // < self.primary_distribution_closure_date
    bz primary_distribution_bool_false@5
    // smart_contracts/base_d_asa/contract.py:290
    // and self.primary_distribution_opening_date
    intc_0 // 0
    bytec 14 // "primary_distribution_opening_date"
    app_global_get_ex
    assert // check self.primary_distribution_opening_date exists
    // smart_contracts/base_d_asa/contract.py:291
    // <= Global.latest_timestamp
    global LatestTimestamp
    dup
    frame_bury 2
    // smart_contracts/base_d_asa/contract.py:290-291
    // and self.primary_distribution_opening_date
    // <= Global.latest_timestamp
    <=
    // smart_contracts/base_d_asa/contract.py:290-292
    // and self.primary_distribution_opening_date
    // <= Global.latest_timestamp
    // < self.primary_distribution_closure_date
    bz primary_distribution_bool_false@5
    // smart_contracts/base_d_asa/contract.py:292
    // < self.primary_distribution_closure_date
    intc_0 // 0
    bytec 15 // "primary_distribution_closure_date"
    app_global_get_ex
    assert // check self.primary_distribution_closure_date exists
    // smart_contracts/base_d_asa/contract.py:291-292
    // <= Global.latest_timestamp
    // < self.primary_distribution_closure_date
    frame_dig 2
    >
    // smart_contracts/base_d_asa/contract.py:290-292
    // and self.primary_distribution_opening_date
    // <= Global.latest_timestamp
    // < self.primary_distribution_closure_date
    bz primary_distribution_bool_false@5
    intc_1 // 1

primary_distribution_bool_merge@6:
    // smart_contracts/base_d_asa/contract.py:288-293
    // assert (
    //     self.status_is_active()
    //     and self.primary_distribution_opening_date
    //     <= Global.latest_timestamp
    //     < self.primary_distribution_closure_date
    // ), err.PRIMARY_DISTRIBUTION_CLOSED
    assert // Primary distribution is closed
    // smart_contracts/base_d_asa/contract.py:136
    // caller in self.primary_dealer
    bytec 26 // 0x52353023
    // smart_contracts/base_d_asa/contract.py:134
    // caller = arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/base_d_asa/contract.py:136
    // caller in self.primary_dealer
    concat
    dup
    frame_bury 0
    box_len
    bury 1
    // smart_contracts/base_d_asa/contract.py:136-139
    // caller in self.primary_dealer
    // and self.primary_dealer[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.primary_dealer[caller].role_validity_end
    bz primary_distribution_bool_false@12
    // smart_contracts/base_d_asa/contract.py:137
    // and self.primary_dealer[caller].role_validity_start
    frame_dig 0
    box_get
    assert // check self.primary_dealer entry exists
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:138
    // <= Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/base_d_asa/contract.py:137-138
    // and self.primary_dealer[caller].role_validity_start
    // <= Global.latest_timestamp
    itob
    dup
    frame_bury 1
    b<=
    // smart_contracts/base_d_asa/contract.py:137-139
    // and self.primary_dealer[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.primary_dealer[caller].role_validity_end
    bz primary_distribution_bool_false@12
    // smart_contracts/base_d_asa/contract.py:139
    // <= self.primary_dealer[caller].role_validity_end
    frame_dig 0
    box_get
    assert // check self.primary_dealer entry exists
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:138-139
    // <= Global.latest_timestamp
    // <= self.primary_dealer[caller].role_validity_end
    frame_dig 1
    b>=
    // smart_contracts/base_d_asa/contract.py:137-139
    // and self.primary_dealer[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.primary_dealer[caller].role_validity_end
    bz primary_distribution_bool_false@12
    intc_1 // 1

primary_distribution_bool_merge@13:
    // smart_contracts/base_d_asa/contract.py:135-140
    // assert (
    //     caller in self.primary_dealer
    //     and self.primary_dealer[caller].role_validity_start
    //     <= Global.latest_timestamp
    //     <= self.primary_dealer[caller].role_validity_end
    // ), err.UNAUTHORIZED
    assert // Not authorized
    // smart_contracts/base_d_asa/contract.py:174
    // assert holding_address in self.account, err.INVALID_HOLDING_ADDRESS
    bytec 7 // 0x52333023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account holding address
    // smart_contracts/base_d_asa/contract.py:829
    // self.assert_is_not_defaulted()
    callsub assert_is_not_defaulted
    // smart_contracts/base_d_asa/contract.py:830
    // self.assert_is_not_suspended()
    callsub assert_is_not_suspended
    // smart_contracts/base_d_asa/contract.py:831
    // assert units.native > 0, err.ZERO_UNITS
    frame_dig -1
    btoi
    dup
    assert // Can not distribute zero units
    // smart_contracts/base_d_asa/contract.py:833
    // self.circulating_units + units.native <= self.total_units
    intc_0 // 0
    bytec_1 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    dig 1
    +
    intc_0 // 0
    bytec 5 // "total_units"
    app_global_get_ex
    assert // check self.total_units exists
    <=
    // smart_contracts/base_d_asa/contract.py:832-834
    // assert (
    //     self.circulating_units + units.native <= self.total_units
    // ), err.OVER_DISTRIBUTION
    assert // Insufficient remaining D-ASA units
    // smart_contracts/base_d_asa/contract.py:836
    // self.circulating_units += units.native
    intc_0 // 0
    bytec_1 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    dig 1
    +
    bytec_1 // "circulating_units"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:838
    // self.account[holding_address].units.native + units.native
    dig 1
    box_get
    assert // check self.account entry exists
    pushint 32 // 32
    extract_uint64
    +
    // smart_contracts/base_d_asa/contract.py:837-839
    // self.account[holding_address].units = arc4.UInt64(
    //     self.account[holding_address].units.native + units.native
    // )
    itob
    // smart_contracts/base_d_asa/contract.py:837
    // self.account[holding_address].units = arc4.UInt64(
    dig 1
    box_get
    assert // check self.account entry exists
    // smart_contracts/base_d_asa/contract.py:837-839
    // self.account[holding_address].units = arc4.UInt64(
    //     self.account[holding_address].units.native + units.native
    // )
    swap
    replace2 32
    dig 1
    swap
    box_put
    // smart_contracts/base_d_asa/contract.py:840
    // self.account[holding_address].unit_value = arc4.UInt64(self.unit_value)
    intc_0 // 0
    bytec 4 // "unit_value"
    app_global_get_ex
    assert // check self.unit_value exists
    itob
    dig 1
    box_get
    assert // check self.account entry exists
    swap
    replace2 40
    box_put
    // smart_contracts/base_d_asa/contract.py:841
    // return arc4.UInt64(self.total_units - self.circulating_units)
    intc_0 // 0
    bytec 5 // "total_units"
    app_global_get_ex
    assert // check self.total_units exists
    intc_0 // 0
    bytec_1 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    -
    itob
    frame_bury 0
    retsub

primary_distribution_bool_false@12:
    intc_0 // 0
    b primary_distribution_bool_merge@13

primary_distribution_bool_false@5:
    intc_0 // 0
    b primary_distribution_bool_merge@6


// smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension(suspended: bytes) -> bytes:
set_asset_suspension:
    // smart_contracts/base_d_asa/contract.py:843-844
    // @arc4.abimethod
    // def set_asset_suspension(self, suspended: arc4.Bool) -> arc4.UInt64:
    proto 1 1
    // smart_contracts/base_d_asa/contract.py:857
    // self.assert_caller_is_authority()
    callsub assert_caller_is_authority
    // smart_contracts/base_d_asa/contract.py:858
    // self.suspended = UInt64(suspended.native)
    frame_dig -1
    intc_0 // 0
    getbit
    bytec 19 // "suspended"
    swap
    app_global_put
    // smart_contracts/base_d_asa/contract.py:859
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension(holding_address: bytes, suspended: bytes) -> bytes:
set_account_suspension:
    // smart_contracts/base_d_asa/contract.py:861-864
    // @arc4.abimethod
    // def set_account_suspension(
    //     self, holding_address: arc4.Address, suspended: arc4.Bool
    // ) -> arc4.UInt64:
    proto 2 1
    // smart_contracts/base_d_asa/contract.py:879
    // self.assert_caller_is_authority()
    callsub assert_caller_is_authority
    // smart_contracts/base_d_asa/contract.py:174
    // assert holding_address in self.account, err.INVALID_HOLDING_ADDRESS
    bytec 7 // 0x52333023
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid account holding address
    // smart_contracts/base_d_asa/contract.py:881
    // self.account[holding_address].suspended = suspended
    dup
    box_get
    assert // check self.account entry exists
    frame_dig -1
    intc_0 // 0
    getbit
    pushint 448 // 448
    swap
    setbit
    box_put
    // smart_contracts/base_d_asa/contract.py:882
    // return arc4.UInt64(Global.latest_timestamp)
    global LatestTimestamp
    itob
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status(defaulted: bytes) -> void:
set_default_status:
    // smart_contracts/base_d_asa/contract.py:884-885
    // @arc4.abimethod
    // def set_default_status(self, defaulted: arc4.Bool) -> None:
    proto 1 0
    intc_0 // 0
    // smart_contracts/base_d_asa/contract.py:146
    // caller in self.trustee
    bytec 25 // 0x52363023
    // smart_contracts/base_d_asa/contract.py:144
    // caller = arc4.Address(Txn.sender)
    txn Sender
    // smart_contracts/base_d_asa/contract.py:146
    // caller in self.trustee
    concat
    dup
    box_len
    bury 1
    // smart_contracts/base_d_asa/contract.py:146-149
    // caller in self.trustee
    // and self.trustee[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.trustee[caller].role_validity_end
    bz set_default_status_bool_false@5
    // smart_contracts/base_d_asa/contract.py:147
    // and self.trustee[caller].role_validity_start
    frame_dig 1
    box_get
    assert // check self.trustee entry exists
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:148
    // <= Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/base_d_asa/contract.py:147-148
    // and self.trustee[caller].role_validity_start
    // <= Global.latest_timestamp
    itob
    dup
    frame_bury 0
    b<=
    // smart_contracts/base_d_asa/contract.py:147-149
    // and self.trustee[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.trustee[caller].role_validity_end
    bz set_default_status_bool_false@5
    // smart_contracts/base_d_asa/contract.py:149
    // <= self.trustee[caller].role_validity_end
    frame_dig 1
    box_get
    assert // check self.trustee entry exists
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/base_d_asa/contract.py:148-149
    // <= Global.latest_timestamp
    // <= self.trustee[caller].role_validity_end
    frame_dig 0
    b>=
    // smart_contracts/base_d_asa/contract.py:147-149
    // and self.trustee[caller].role_validity_start
    // <= Global.latest_timestamp
    // <= self.trustee[caller].role_validity_end
    bz set_default_status_bool_false@5
    intc_1 // 1

set_default_status_bool_merge@6:
    // smart_contracts/base_d_asa/contract.py:145-150
    // assert (
    //     caller in self.trustee
    //     and self.trustee[caller].role_validity_start
    //     <= Global.latest_timestamp
    //     <= self.trustee[caller].role_validity_end
    // ), err.UNAUTHORIZED
    assert // Not authorized
    // smart_contracts/base_d_asa/contract.py:896
    // self.defaulted = UInt64(defaulted.native)
    frame_dig -1
    intc_0 // 0
    getbit
    bytec 20 // "defaulted"
    swap
    app_global_put
    retsub

set_default_status_bool_false@5:
    intc_0 // 0
    b set_default_status_bool_merge@6


// smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info() -> bytes:
get_asset_info:
    // smart_contracts/base_d_asa/contract.py:898-899
    // @arc4.abimethod(readonly=True)
    // def get_asset_info(self) -> typ.AssetInfo:
    proto 0 1
    // smart_contracts/base_d_asa/contract.py:908
    // performance = UInt64(cst.PRF_PERFORMANT)
    intc_0 // 0
    dup
    // smart_contracts/base_d_asa/contract.py:909
    // if Global.latest_timestamp > self.maturity_date > 0:
    global LatestTimestamp
    intc_0 // 0
    bytec_3 // "maturity_date"
    app_global_get_ex
    swap
    dup
    cover 2
    cover 4
    assert // check self.maturity_date exists
    >
    bz get_asset_info_after_if_else@3
    frame_dig 0
    frame_bury 2
    frame_dig 1
    bz get_asset_info_after_if_else@3
    // smart_contracts/base_d_asa/contract.py:910
    // performance = UInt64(cst.PRF_MATURED)
    intc_3 // 4
    frame_bury 2

get_asset_info_after_if_else@3:
    frame_dig 2
    frame_bury 0
    // smart_contracts/base_d_asa/contract.py:911-912
    // # The reference implementation has no grace or delinquency periods
    // if self.defaulted:
    intc_0 // 0
    bytec 20 // "defaulted"
    app_global_get_ex
    assert // check self.defaulted exists
    bz get_asset_info_after_if_else@5
    // smart_contracts/base_d_asa/contract.py:913
    // performance = UInt64(cst.PRF_DEFAULTED)
    pushint 3 // 3
    frame_bury 0

get_asset_info_after_if_else@5:
    // smart_contracts/base_d_asa/contract.py:916
    // denomination_asset_id=arc4.UInt64(self.denomination_asset_id),
    intc_0 // 0
    bytec 9 // "denomination_asset_id"
    app_global_get_ex
    assert // check self.denomination_asset_id exists
    itob
    // smart_contracts/base_d_asa/contract.py:917
    // settlement_asset_id=arc4.UInt64(self.settlement_asset_id),
    intc_0 // 0
    bytec 10 // "settlement_asset_id"
    app_global_get_ex
    assert // check self.settlement_asset_id exists
    itob
    // smart_contracts/base_d_asa/contract.py:340
    // return self.circulating_units * self.unit_value
    intc_0 // 0
    bytec_1 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    intc_0 // 0
    bytec 4 // "unit_value"
    app_global_get_ex
    assert // check self.unit_value exists
    *
    // smart_contracts/base_d_asa/contract.py:918
    // outstanding_principal=arc4.UInt64(self.outstanding_principal()),
    itob
    // smart_contracts/base_d_asa/contract.py:919
    // unit_value=arc4.UInt64(self.unit_value),
    intc_0 // 0
    bytec 4 // "unit_value"
    app_global_get_ex
    assert // check self.unit_value exists
    itob
    // smart_contracts/base_d_asa/contract.py:920
    // day_count_convention=arc4.UInt8(self.day_count_convention),
    intc_0 // 0
    bytec 11 // "day_count_convention"
    app_global_get_ex
    assert // check self.day_count_convention exists
    itob
    dup
    bitlen
    intc_2 // 8
    <=
    assert // overflow
    extract 7 1
    // smart_contracts/base_d_asa/contract.py:921
    // principal_discount=arc4.UInt16(self.principal_discount),
    intc_0 // 0
    bytec 13 // "principal_discount"
    app_global_get_ex
    assert // check self.principal_discount exists
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    // smart_contracts/base_d_asa/contract.py:922
    // interest_rate=arc4.UInt16(self.interest_rate),
    intc_0 // 0
    bytec 21 // "interest_rate"
    app_global_get_ex
    assert // check self.interest_rate exists
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    // smart_contracts/base_d_asa/contract.py:923
    // total_supply=arc4.UInt64(self.total_units),
    intc_0 // 0
    bytec 5 // "total_units"
    app_global_get_ex
    assert // check self.total_units exists
    itob
    // smart_contracts/base_d_asa/contract.py:924
    // circulating_supply=arc4.UInt64(self.circulating_units),
    intc_0 // 0
    bytec_1 // "circulating_units"
    app_global_get_ex
    assert // check self.circulating_units exists
    itob
    // smart_contracts/base_d_asa/contract.py:926
    // self.primary_distribution_opening_date
    intc_0 // 0
    bytec 14 // "primary_distribution_opening_date"
    app_global_get_ex
    assert // check self.primary_distribution_opening_date exists
    // smart_contracts/base_d_asa/contract.py:925-927
    // primary_distribution_opening_date=arc4.UInt64(
    //     self.primary_distribution_opening_date
    // ),
    itob
    // smart_contracts/base_d_asa/contract.py:929
    // self.primary_distribution_closure_date
    intc_0 // 0
    bytec 15 // "primary_distribution_closure_date"
    app_global_get_ex
    assert // check self.primary_distribution_closure_date exists
    // smart_contracts/base_d_asa/contract.py:928-930
    // primary_distribution_closure_date=arc4.UInt64(
    //     self.primary_distribution_closure_date
    // ),
    itob
    // smart_contracts/base_d_asa/contract.py:931
    // issuance_date=arc4.UInt64(self.issuance_date),
    intc_0 // 0
    bytec 16 // "issuance_date"
    app_global_get_ex
    assert // check self.issuance_date exists
    itob
    // smart_contracts/base_d_asa/contract.py:932
    // maturity_date=arc4.UInt64(self.maturity_date),
    intc_0 // 0
    bytec_3 // "maturity_date"
    app_global_get_ex
    assert // check self.maturity_date exists
    itob
    // smart_contracts/base_d_asa/contract.py:933
    // suspended=arc4.Bool(bool(self.suspended)),
    intc_0 // 0
    bytec 19 // "suspended"
    app_global_get_ex
    assert // check self.suspended exists
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    // smart_contracts/base_d_asa/contract.py:934
    // performance=arc4.UInt8(performance),
    frame_dig 0
    itob
    dup
    bitlen
    intc_2 // 8
    <=
    assert // overflow
    extract 7 1
    // smart_contracts/base_d_asa/contract.py:915-935
    // return typ.AssetInfo(
    //     denomination_asset_id=arc4.UInt64(self.denomination_asset_id),
    //     settlement_asset_id=arc4.UInt64(self.settlement_asset_id),
    //     outstanding_principal=arc4.UInt64(self.outstanding_principal()),
    //     unit_value=arc4.UInt64(self.unit_value),
    //     day_count_convention=arc4.UInt8(self.day_count_convention),
    //     principal_discount=arc4.UInt16(self.principal_discount),
    //     interest_rate=arc4.UInt16(self.interest_rate),
    //     total_supply=arc4.UInt64(self.total_units),
    //     circulating_supply=arc4.UInt64(self.circulating_units),
    //     primary_distribution_opening_date=arc4.UInt64(
    //         self.primary_distribution_opening_date
    //     ),
    //     primary_distribution_closure_date=arc4.UInt64(
    //         self.primary_distribution_closure_date
    //     ),
    //     issuance_date=arc4.UInt64(self.issuance_date),
    //     maturity_date=arc4.UInt64(self.maturity_date),
    //     suspended=arc4.Bool(bool(self.suspended)),
    //     performance=arc4.UInt8(performance),
    // )
    uncover 14
    uncover 14
    concat
    uncover 13
    concat
    uncover 12
    concat
    uncover 11
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    frame_bury 0
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info(holding_address: bytes) -> bytes:
get_account_info:
    // smart_contracts/base_d_asa/contract.py:937-938
    // @arc4.abimethod(readonly=True)
    // def get_account_info(self, holding_address: arc4.Address) -> typ.AccountInfo:
    proto 1 1
    // smart_contracts/base_d_asa/contract.py:174
    // assert holding_address in self.account, err.INVALID_HOLDING_ADDRESS
    bytec 7 // 0x52333023
    frame_dig -1
    concat
    dup
    box_len
    bury 1
    assert // Invalid account holding address
    // smart_contracts/base_d_asa/contract.py:952
    // return self.account[holding_address]
    box_get
    assert // check self.account entry exists
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events() -> bytes:
get_time_events:
    // smart_contracts/base_d_asa/contract.py:954-955
    // @arc4.abimethod(readonly=True)
    // def get_time_events(self) -> typ.TimeEvents:
    proto 0 1
    // smart_contracts/base_d_asa/contract.py:962
    // time_events = typ.TimeEvents()
    pushbytes 0x0000
    // smart_contracts/base_d_asa/contract.py:104
    // return self.status == cfg.STATUS_ACTIVE
    intc_0 // 0
    bytec_2 // "status"
    app_global_get_ex
    assert // check self.status exists
    pushint 100 // 100
    ==
    // smart_contracts/base_d_asa/contract.py:963
    // if self.status_is_active():
    bz get_time_events_after_if_else@2
    // smart_contracts/base_d_asa/contract.py:964
    // time_events = self.time_events.value.copy()
    bytec 24 // 0x74696d654576656e7473
    box_get
    swap
    frame_bury 0
    assert // check self.time_events exists

get_time_events_after_if_else@2:
    // smart_contracts/base_d_asa/contract.py:965
    // return time_events
    frame_dig 0
    swap
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule() -> bytes:
get_secondary_market_schedule:
    // smart_contracts/base_d_asa/contract.py:976
    // arc4.UInt64(self.secondary_market_opening_date),
    intc_0 // 0
    bytec 17 // "secondary_market_opening_date"
    app_global_get_ex
    assert // check self.secondary_market_opening_date exists
    itob
    // smart_contracts/base_d_asa/contract.py:977
    // arc4.UInt64(self.secondary_market_closure_date),
    intc_0 // 0
    bytec 18 // "secondary_market_closure_date"
    app_global_get_ex
    assert // check self.secondary_market_closure_date exists
    itob
    // smart_contracts/base_d_asa/contract.py:975-978
    // return typ.TimeEvents(
    //     arc4.UInt64(self.secondary_market_opening_date),
    //     arc4.UInt64(self.secondary_market_closure_date),
    // )
    concat
    pushbytes 0x0002
    swap
    concat
    retsub


// smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata() -> bytes:
get_asset_metadata:
    // smart_contracts/base_d_asa/contract.py:989
    // return typ.AssetMetadata.from_bytes(self.metadata)
    intc_0 // 0
    bytec 12 // "metadata"
    app_global_get_ex
    assert // check self.metadata exists
    retsub
