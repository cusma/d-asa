{
  "version": 3,
  "sources": [
    "../../base_d_asa/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;AAEQ;;AAAgB;;AAAhB;AAeA;;AAA6B;AAA7B;AACA;;AAAkB;AAAlB;AACA;;AAA4B;AAA5B;AAGA;;AAAgB;;AAAhB;AAGA;;AAAmB;AAAnB;AACA;AAAyB;AAAzB;AAGA;;AAAqB;AAArB;AAIA;;AAAqB;AAArB;AAIA;;AAAyC;AAAzC;AACA;;AAAyC;AAAzC;AACA;;AAAqB;AAArB;AACA;;AAAqC;AAArC;AACA;;AAAqC;AAArC;AACA;;AAAqB;AAArB;AAGA;AAAc;AAAd;AACA;;AAAiB;AAAjB;AACA;;AAAiB;AAAjB;;AA1DR;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAsUK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAtUL;;;AAAA;;;AAsUK;;;AAAA;AAAA;AAYA;;AAAA;AAAA;AAAA;;AAAA;AAlVL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAkVK;;;AAAA;AAAA;AA8EA;;AAAA;AAAA;AAAA;;AAAA;AAhaL;;;AAgaK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyDA;;AAAA;AAAA;AAAA;;AAAA;AAzdL;;;AAAA;;;AAAA;;;AAydK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuDA;;AAAA;AAAA;AAAA;;AAAA;AAhhBL;;;AAAA;;;AAghBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CA;;AAAA;AAAA;AAAA;;AAAA;AA5jBL;;;AAAA;;;AA4jBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCA;;AAAA;AAAA;AAAA;;AAAA;AA/lBL;;;AA+lBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA;;AAAA;AAAA;AAAA;;AAAA;AA7nBL;;;AAAA;;;AA6nBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CA;;AAAA;AAAA;AAAA;;AAAA;AAvqBL;;;AAuqBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;;AAAA;AAAA;AAAA;;AAAA;AAzrBL;;;AAAA;;;AAyrBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;;AAAA;AAAA;AAAA;;AAAA;AAhtBL;;;AAgtBK;;;AAAA;AAAA;AAcA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA;;AAAA;AAAA;AAAA;;AAAA;AA5vBL;;;AA4vBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjyBL;AAAA;AAsUA;;;AASQ;;AAAA;;AAAA;AACgB;;AAAA;;;AAAhB;;AAAA;AAAA;;AAER;;;AAkCQ;;;AACO;AAAA;AAAA;AAAA;AAAA;AAAP;AAE6B;;AAAA;AAA7B;;AAAA;AAAA;AAEA;;;AAGI;;AAAA;AAAmB;;AAAA;AAAnB;AAAA;AAAA;AADJ;AAGA;;AAAA;;AAAA;AACmB;AAAnB;;AAAA;AAAA;AAGO;;AAAA;AAAA;AACH;;AADG;AAAA;;;AAAA;;AAEH;;;AAFG;AAAA;;;;;;;;AAAP;AAIA;;AAAA;;AAAA;AAGqB;;AAAA;AAArB;;AAAA;AAAA;AAGqB;;AAAA;AAAA;AAArB;;AAAA;AAAA;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AAII;;AAAA;AAAA;AAAsB;AAAA;;AAAA;AAAA;AAAqB;;AAArB;AAAtB;AADJ;AAII;;AAAA;;;AAAA;;;AAAA;AACE;;AADF;AADJ;AAIA;;AAAA;;;;AAAA;;AACA;;;AAAA;;AAIW;;AAAA;AAAA;AAAJ;AAAP;AAEA;AAAc;;AAAd;;AAjVR;;;AAEe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;;AAyFR;;;AAEQ;AAIQ;;AAHO;AAAA;;AAAA;AAAA;AACI;;AACF;;;;;;;AAHjB;;;;;;AAAA;;AA7CR;;;;;;AAEyB;;AAAA;AAAA;AAAqB;AAArB;AAAP;AAAA;;AAAA;;AAAA;AAAlB;;;AAEgC;;AACL;AAFf;;;AAIS;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;;AAAA;;AACqB;AAAK;AAAL;AAAA;AAAA;;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAT;AAAA;;AACO;AAAP;AACG;AAAA;;AAAA;AAAA;AAA6B;;;AAA7B;AAAf;;;AAEwB;;AAAA;;AAAA;AAAmB;;;;AAApB;AAAA;AAAP;;;;;;;;;AAsEhB;;;AAEQ;;AAAA;;AAAA;;AAAA;;AAAA;AACyC;;AAAA;;;AAAA;AAAA;;;AAAA;AAAzC;;AAAA;AAAA;AAGyC;AAAA;;;AAAA;AAAzC;;AAAA;AAAA;AAGqB;AAAA;;;AAAA;AAArB;;AAAA;AAAA;AACiC;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAArB;;AAAA;AAAA;;;;AAuMR;;;AAqBQ;;;AACW;;;AAAJ;AAAP;AACA;;;AAEO;;AAAA;AAAA;AAAuC;;AAAvC;AAAP;AAGA;;AAAA;;;AAAA;;AAEI;AAAA;;AAAA;AAAA;AACG;;AAAA;;;AAAA;AAAA;;;AAAA;AADH;;AAAA;;AAAA;AADJ;AAOI;AAAA;;AAAA;AAAA;AAEI;;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;;AAAA;AADJ;AAOA;;AAAA;;AAAA;AAGA;;AAAA;AAAA;AAKQ;AAAA;;AAAA;AAAA;AAD0B;AAI1B;AAAA;;AAAA;AAAA;AAD0B;AAJ3B;AAAP;AA3YR;;;AAEe;AAAA;AAAA;AAAA;AAAe;;;AAAf;AAAP;AAER;;;AAEmB;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AA8YR;;;AAqBQ;;;AACA;;;AACO;;AAAA;AAAA;AACH;;AADG;AAAA;;;AAAA;;AAEH;AAFG;AAAA;;;AAAA;;AAGH;;AAHG;AAAA;;;AAAA;;AAIH;;AAJG;AAAA;;;AAAA;;AAKH;;AALG;AAAA;;;;;;;;AAAP;AAQS;;AAEA;AAOA;;;;;AAVT;;AAAA;;;;;;;;;;;;AAsBQ;AApBA;;AAAA;;AAAA;;;;AAGwB;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAII;;AAAA;;;AADJ;;;;AAI2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEI;;AAAA;;;AADJ;;;;AAI2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACuD;;AAAA;;;AAAvD;;;;AAE2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACyD;;AAAA;;;AAAzD;AAGW;;AAAZ;AAAP;AAAA;AAER;;;AAkBQ;;;AACA;;;AACO;;AAAA;AAAA;AACH;AADG;AAAA;;;AAAA;;AAEH;;AAFG;AAAA;;;AAAA;;AAGH;;AAHG;AAAA;;;AAAA;;AAIH;;AAJG;AAAA;;;;;;;;AAAP;AAQS;AAGA;;;;;AALT;;AAAA;;;;;;;;;;AAeQ;AAZuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAEuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAEuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAEuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;AAGW;;AAAZ;AAAP;AAAA;AAER;;;AAoBQ;;;AACW;;;AAAJ;AAAP;AACA;;;AACW;AAAA;;AAAA;AAAA;AAAJ;AAAP;AAC8B;AAAvB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEgC;;AAEtB;;AAFsB;AAGjB;;AAHiB;AAIf;;AAJe;AAKlB;;AALkB;AAAhC;AAOmB;;AAAZ;AAAP;AA5gBR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;;;;;AAFR;;AA2gBR;;;AAkBQ;;;AACA;;;AACA;;AAAA;;;AAEe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AACf;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEK;AAAuC;;AAAZ;AADzB;AAAP;AAhgBR;;;AAEkC;AAAnB;;AAAA;AAAA;AAAA;;AAAP;;AA0GR;;;AAEW;AAAA;AAAA;AAAA;AAAX;;;AACY;AAAc;;;AAAd;;AAqZZ;;;AAuBQ;;;AAGA;;;AACA;;AAAA;;;AACA;;;AACW;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACO;;AAAA;AAAP;AAAA;AAEI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAyC;AAAA;;AAAA;AAAA;AAAzC;AADJ;AAIA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEI;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AADkC;AAAtC;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAGuD;AAAA;;AAAA;AAAA;AAAZ;AAA3C;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACmB;AAAA;;AAAA;AAAA;AAAmB;AAAA;AAAA;AAAA;AAAnB;AAAZ;AAAP;AAxhBR;;;;;AAGY;;;AAAA;;;AACI;AAAA;;AAAA;AAAA;AACD;;AAAA;AAAA;;AADC;AAAA;;;AAEF;AAAA;;AAAA;AAAA;AADC;;AAAA;AADC;;;;;;;;AAFR;;AA9ER;;;AAEe;AAAA;AAAA;AAAA;AAAe;;AAAf;AAAP;AA4CR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;;;;;AAFR;;AAqjBR;;;AAcQ;;;AACiB;;;AAAO;AAAxB;;AAAA;AAAA;AACmB;;AAAZ;AAAP;AAllBR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;;;;;AAFR;;AAilBR;;;AAkBQ;;;AACA;;AAAA;;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACmB;;AAAZ;AAAP;AAER;;;AAWQ;;;AACiB;;;AAAO;AAAxB;;AAAA;AAAA;;AAjoBR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;;;;;AAFR;;AAgoBR;;;AAW8C;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;AAAA;AAAA;AAAyB;AAAA;;AAAA;AAAA;AAAzB;AAAZ;AACC;AAAA;;AAAA;AAAA;AAAZ;AACqB;AAAA;;AAAA;AAAA;AAAX;AAAA;;;AACK;AAAA;;AAAA;AAAA;AAAZ;AAAA;;;AACW;AAAA;;AAAA;AAAA;AAAZ;AACkB;AAAA;AAAA;AAAA;AAAZ;AAEf;AAAA;;AAAA;AAAA;AAD8B;AAI9B;AAAA;;AAAA;AAAA;AAD8B;AAGR;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AACW;AAAA;;AAAA;AAAA;AAAf;;AAAA;AAAA;;AAAA;AACe;AAAA;;AAAA;AAAA;AAAf;;AAAA;AAAA;;AAAA;AAjBP;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAoBR;;;AAcQ;;AAAA;;;AACO;AAAA;;AAAA;AAAA;AAAA;AAAP;AAER;;;AAQsB;;;;AACX;;;AAAX;;;AAC0B;;AAAA;AAAA;AAAA;;AAAA;AAClB;;AAAA;AAAA;AAER;;;AAGwB;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AAFG;AAAA;;;;AAAA;AAAA;AAAP;AAKR;;;AAEiC;AAAA;;AAAA;AAAA;AAAlB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.approval_program",
      "params": {},
      "block": "smart_contracts.base_d_asa.contract.BaseDAsa.approval_program",
      "stack_in": [],
      "op": "intcblock 0 1 8 40"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"circulating_units\" \"status\" 0x52333023 \"unit_value\" \"total_units\" \"suspended\" \"arranger\" \"denomination_asset_id\" \"day_count_convention\" \"primary_distribution_opening_date\" \"primary_distribution_closure_date\" \"issuance_date\" \"secondary_market_opening_date\" \"secondary_market_closure_date\" \"maturity_date\" \"defaulted\" \"metadata\" \"interest_rate\" \"total_coupons\" 0x74696d654576656e7473 0x52343023 0x52353023 0x52363023 0x52373023 0x0000000000000000 0x00 0x636f75706f6e5261746573 0x068101"
    },
    "390": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "392": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "395": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.__init__",
      "op": "callsub __init__"
    },
    "398": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "401": {
      "op": "return",
      "stack_out": []
    },
    "402": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "405": {
      "op": "bytec 7 // \"arranger\""
    },
    "407": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"arranger\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"arranger\"",
        "new_state_value%0#0"
      ]
    },
    "409": {
      "op": "app_global_put",
      "stack_out": []
    },
    "410": {
      "op": "bytec 8 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\""
      ],
      "stack_out": [
        "\"denomination_asset_id\""
      ]
    },
    "412": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0"
      ],
      "stack_out": [
        "\"denomination_asset_id\"",
        "0"
      ]
    },
    "413": {
      "op": "app_global_put",
      "stack_out": []
    },
    "414": {
      "op": "bytec 4 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\""
      ],
      "stack_out": [
        "\"unit_value\""
      ]
    },
    "416": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"unit_value\"",
        "0"
      ]
    },
    "417": {
      "op": "app_global_put",
      "stack_out": []
    },
    "418": {
      "op": "bytec 9 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\""
      ],
      "stack_out": [
        "\"day_count_convention\""
      ]
    },
    "420": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"day_count_convention\"",
        "0"
      ]
    },
    "421": {
      "op": "app_global_put",
      "stack_out": []
    },
    "422": {
      "op": "bytec 17 // \"metadata\"",
      "defined_out": [
        "\"metadata\""
      ],
      "stack_out": [
        "\"metadata\""
      ]
    },
    "424": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"metadata\"",
        "0x"
      ],
      "stack_out": [
        "\"metadata\"",
        "0x"
      ]
    },
    "426": {
      "op": "app_global_put",
      "stack_out": []
    },
    "427": {
      "op": "bytec 5 // \"total_units\"",
      "defined_out": [
        "\"total_units\""
      ],
      "stack_out": [
        "\"total_units\""
      ]
    },
    "429": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_units\"",
        "0"
      ]
    },
    "430": {
      "op": "app_global_put",
      "stack_out": []
    },
    "431": {
      "op": "bytec_1 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\""
      ],
      "stack_out": [
        "\"circulating_units\""
      ]
    },
    "432": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_units\"",
        "0"
      ]
    },
    "433": {
      "op": "app_global_put",
      "stack_out": []
    },
    "434": {
      "op": "bytec 18 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\""
      ],
      "stack_out": [
        "\"interest_rate\""
      ]
    },
    "436": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"interest_rate\"",
        "0"
      ]
    },
    "437": {
      "op": "app_global_put",
      "stack_out": []
    },
    "438": {
      "op": "bytec 19 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\""
      ],
      "stack_out": [
        "\"total_coupons\""
      ]
    },
    "440": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_coupons\"",
        "0"
      ]
    },
    "441": {
      "op": "app_global_put",
      "stack_out": []
    },
    "442": {
      "op": "bytec 10 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\""
      ],
      "stack_out": [
        "\"primary_distribution_opening_date\""
      ]
    },
    "444": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"primary_distribution_opening_date\"",
        "0"
      ]
    },
    "445": {
      "op": "app_global_put",
      "stack_out": []
    },
    "446": {
      "op": "bytec 11 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\""
      ],
      "stack_out": [
        "\"primary_distribution_closure_date\""
      ]
    },
    "448": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"primary_distribution_closure_date\"",
        "0"
      ]
    },
    "449": {
      "op": "app_global_put",
      "stack_out": []
    },
    "450": {
      "op": "bytec 12 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\""
      ],
      "stack_out": [
        "\"issuance_date\""
      ]
    },
    "452": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"issuance_date\"",
        "0"
      ]
    },
    "453": {
      "op": "app_global_put",
      "stack_out": []
    },
    "454": {
      "op": "bytec 13 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\""
      ],
      "stack_out": [
        "\"secondary_market_opening_date\""
      ]
    },
    "456": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ]
    },
    "457": {
      "op": "app_global_put",
      "stack_out": []
    },
    "458": {
      "op": "bytec 14 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\""
      ],
      "stack_out": [
        "\"secondary_market_closure_date\""
      ]
    },
    "460": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"secondary_market_closure_date\"",
        "0"
      ]
    },
    "461": {
      "op": "app_global_put",
      "stack_out": []
    },
    "462": {
      "op": "bytec 15 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\""
      ],
      "stack_out": [
        "\"maturity_date\""
      ]
    },
    "464": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"maturity_date\"",
        "0"
      ]
    },
    "465": {
      "op": "app_global_put",
      "stack_out": []
    },
    "466": {
      "op": "bytec_2 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "\"status\""
      ]
    },
    "467": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"status\"",
        "0"
      ]
    },
    "468": {
      "op": "app_global_put",
      "stack_out": []
    },
    "469": {
      "op": "bytec 6 // \"suspended\"",
      "defined_out": [
        "\"suspended\""
      ],
      "stack_out": [
        "\"suspended\""
      ]
    },
    "471": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"suspended\"",
        "0"
      ]
    },
    "472": {
      "op": "app_global_put",
      "stack_out": []
    },
    "473": {
      "op": "bytec 16 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\""
      ],
      "stack_out": [
        "\"defaulted\""
      ]
    },
    "475": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"defaulted\"",
        "0"
      ]
    },
    "476": {
      "op": "app_global_put",
      "stack_out": []
    },
    "477": {
      "retsub": true,
      "op": "retsub"
    },
    "478": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "481": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "483": {
      "op": "bz __puya_arc4_router___after_if_else@21",
      "stack_out": []
    },
    "486": {
      "op": "pushbytess 0x63f99589 0xeae05031 0x1d6fc255 0xfef74567 0xb8fc1390 0x3d43d1f0 0xebd96b2f 0x6c85e3ee 0xf63ace8d 0xbbcca18a 0x1a7babb4 0x301dd919 0xed02759f 0xfad2173e 0x08efea35 0xddcec07b // method \"asset_create(address,byte[])void\", method \"asset_config(uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void\", method \"set_secondary_time_events(uint64[])(uint64,uint64)\", method \"assign_role(address,uint8,byte[])uint64\", method \"revoke_role(address,uint8)uint64\", method \"open_account(address,address)uint64\", method \"close_account(address)(uint64,uint64)\", method \"primary_distribution(address,uint64)uint64\", method \"set_asset_suspension(bool)uint64\", method \"set_account_suspension(address,bool)uint64\", method \"set_default_status(bool)void\", method \"get_asset_info()(uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"get_account_info(address)(address,uint64,uint64,uint64,bool)\", method \"get_time_events()uint64[]\", method \"get_secondary_market_schedule()uint64[]\", method \"get_asset_metadata()byte[]\""
    },
    "568": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(asset_config(uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void)",
        "Method(asset_create(address,byte[])void)",
        "Method(assign_role(address,uint8,byte[])uint64)",
        "Method(close_account(address)(uint64,uint64))",
        "Method(get_account_info(address)(address,uint64,uint64,uint64,bool))",
        "Method(get_asset_info()(uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(get_asset_metadata()byte[])",
        "Method(get_secondary_market_schedule()uint64[])",
        "Method(get_time_events()uint64[])",
        "Method(open_account(address,address)uint64)",
        "Method(primary_distribution(address,uint64)uint64)",
        "Method(revoke_role(address,uint8)uint64)",
        "Method(set_account_suspension(address,bool)uint64)",
        "Method(set_asset_suspension(bool)uint64)",
        "Method(set_default_status(bool)void)",
        "Method(set_secondary_time_events(uint64[])(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(asset_create(address,byte[])void)",
        "Method(asset_config(uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void)",
        "Method(set_secondary_time_events(uint64[])(uint64,uint64))",
        "Method(assign_role(address,uint8,byte[])uint64)",
        "Method(revoke_role(address,uint8)uint64)",
        "Method(open_account(address,address)uint64)",
        "Method(close_account(address)(uint64,uint64))",
        "Method(primary_distribution(address,uint64)uint64)",
        "Method(set_asset_suspension(bool)uint64)",
        "Method(set_account_suspension(address,bool)uint64)",
        "Method(set_default_status(bool)void)",
        "Method(get_asset_info()(uint64,uint64,uint64,uint8,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(get_account_info(address)(address,uint64,uint64,uint64,bool))",
        "Method(get_time_events()uint64[])",
        "Method(get_secondary_market_schedule()uint64[])",
        "Method(get_asset_metadata()byte[])",
        "tmp%2#0"
      ]
    },
    "571": {
      "op": "match __puya_arc4_router___asset_create_route@2 __puya_arc4_router___asset_config_route@3 __puya_arc4_router___set_secondary_time_events_route@4 __puya_arc4_router___assign_role_route@5 __puya_arc4_router___revoke_role_route@6 __puya_arc4_router___open_account_route@7 __puya_arc4_router___close_account_route@8 __puya_arc4_router___primary_distribution_route@9 __puya_arc4_router___set_asset_suspension_route@10 __puya_arc4_router___set_account_suspension_route@11 __puya_arc4_router___set_default_status_route@12 __puya_arc4_router___get_asset_info_route@13 __puya_arc4_router___get_account_info_route@14 __puya_arc4_router___get_time_events_route@15 __puya_arc4_router___get_secondary_market_schedule_route@16 __puya_arc4_router___get_asset_metadata_route@17",
      "stack_out": []
    },
    "605": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "606": {
      "retsub": true,
      "op": "retsub"
    },
    "607": {
      "block": "__puya_arc4_router___asset_create_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "609": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "610": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "611": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "613": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "614": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "615": {
      "op": "txna ApplicationArgs 1"
    },
    "618": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "621": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_create",
      "op": "callsub asset_create",
      "stack_out": []
    },
    "624": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "625": {
      "retsub": true,
      "op": "retsub"
    },
    "626": {
      "block": "__puya_arc4_router___asset_config_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "628": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "629": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "630": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "632": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "633": {
      "op": "txna ApplicationArgs 1"
    },
    "636": {
      "op": "txna ApplicationArgs 2"
    },
    "639": {
      "op": "txna ApplicationArgs 3"
    },
    "642": {
      "op": "txna ApplicationArgs 4"
    },
    "645": {
      "op": "txna ApplicationArgs 5"
    },
    "648": {
      "op": "txna ApplicationArgs 6"
    },
    "651": {
      "op": "txna ApplicationArgs 7"
    },
    "654": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "657": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_config",
      "op": "callsub asset_config",
      "stack_out": []
    },
    "660": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "661": {
      "retsub": true,
      "op": "retsub"
    },
    "662": {
      "block": "__puya_arc4_router___set_secondary_time_events_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "664": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "665": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "666": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "668": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "669": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "672": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events",
      "op": "callsub set_secondary_time_events",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "675": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0x151f7c75"
      ]
    },
    "676": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%26#0"
      ]
    },
    "677": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "678": {
      "op": "log",
      "stack_out": []
    },
    "679": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "680": {
      "retsub": true,
      "op": "retsub"
    },
    "681": {
      "block": "__puya_arc4_router___assign_role_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "683": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "684": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "685": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "687": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "688": {
      "op": "txna ApplicationArgs 1"
    },
    "691": {
      "op": "txna ApplicationArgs 2"
    },
    "694": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "697": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assign_role",
      "op": "callsub assign_role",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "700": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "0x151f7c75"
      ]
    },
    "701": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%35#0"
      ]
    },
    "702": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "703": {
      "op": "log",
      "stack_out": []
    },
    "704": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "705": {
      "retsub": true,
      "op": "retsub"
    },
    "706": {
      "block": "__puya_arc4_router___revoke_role_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "708": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "709": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "710": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "712": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "713": {
      "op": "txna ApplicationArgs 1"
    },
    "716": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "719": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role",
      "op": "callsub revoke_role",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "722": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "0x151f7c75"
      ]
    },
    "723": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%43#0"
      ]
    },
    "724": {
      "op": "concat",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "725": {
      "op": "log",
      "stack_out": []
    },
    "726": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "727": {
      "retsub": true,
      "op": "retsub"
    },
    "728": {
      "block": "__puya_arc4_router___open_account_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "730": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "731": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "732": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "734": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "735": {
      "op": "txna ApplicationArgs 1"
    },
    "738": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "741": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.open_account",
      "op": "callsub open_account",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "744": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "0x151f7c75"
      ]
    },
    "745": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%51#0"
      ]
    },
    "746": {
      "op": "concat",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "747": {
      "op": "log",
      "stack_out": []
    },
    "748": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "749": {
      "retsub": true,
      "op": "retsub"
    },
    "750": {
      "block": "__puya_arc4_router___close_account_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "752": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "753": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "754": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "756": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "757": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "760": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.close_account",
      "op": "callsub close_account",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "763": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0",
        "0x151f7c75"
      ]
    },
    "764": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%58#0"
      ]
    },
    "765": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "766": {
      "op": "log",
      "stack_out": []
    },
    "767": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "768": {
      "retsub": true,
      "op": "retsub"
    },
    "769": {
      "block": "__puya_arc4_router___primary_distribution_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "771": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "772": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "773": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "775": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "776": {
      "op": "txna ApplicationArgs 1"
    },
    "779": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%64#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%64#0",
        "tmp%65#0"
      ]
    },
    "782": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution",
      "op": "callsub primary_distribution",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "785": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "0x151f7c75"
      ]
    },
    "786": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%66#0"
      ]
    },
    "787": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "788": {
      "op": "log",
      "stack_out": []
    },
    "789": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "790": {
      "retsub": true,
      "op": "retsub"
    },
    "791": {
      "block": "__puya_arc4_router___set_asset_suspension_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "793": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "794": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "795": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "797": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "798": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "801": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension",
      "op": "callsub set_asset_suspension",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "804": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "0x151f7c75"
      ]
    },
    "805": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%73#0"
      ]
    },
    "806": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "807": {
      "op": "log",
      "stack_out": []
    },
    "808": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "809": {
      "retsub": true,
      "op": "retsub"
    },
    "810": {
      "block": "__puya_arc4_router___set_account_suspension_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "812": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "813": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "814": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "816": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "817": {
      "op": "txna ApplicationArgs 1"
    },
    "820": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%79#0",
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%79#0",
        "tmp%80#0"
      ]
    },
    "823": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension",
      "op": "callsub set_account_suspension",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "826": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "0x151f7c75"
      ]
    },
    "827": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%81#0"
      ]
    },
    "828": {
      "op": "concat",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "829": {
      "op": "log",
      "stack_out": []
    },
    "830": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "831": {
      "retsub": true,
      "op": "retsub"
    },
    "832": {
      "block": "__puya_arc4_router___set_default_status_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "834": {
      "op": "!",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "835": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "836": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "838": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "839": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "842": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status",
      "op": "callsub set_default_status",
      "stack_out": []
    },
    "845": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "846": {
      "retsub": true,
      "op": "retsub"
    },
    "847": {
      "block": "__puya_arc4_router___get_asset_info_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "849": {
      "op": "!",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "850": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "851": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "853": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "854": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info",
      "op": "callsub get_asset_info",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "857": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "0x151f7c75"
      ]
    },
    "858": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%92#0"
      ]
    },
    "859": {
      "op": "concat",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "860": {
      "op": "log",
      "stack_out": []
    },
    "861": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "862": {
      "retsub": true,
      "op": "retsub"
    },
    "863": {
      "block": "__puya_arc4_router___get_account_info_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "865": {
      "op": "!",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "866": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "867": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "869": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "870": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "873": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info",
      "op": "callsub get_account_info",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "876": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "0x151f7c75"
      ]
    },
    "877": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%99#0"
      ]
    },
    "878": {
      "op": "concat",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "879": {
      "op": "log",
      "stack_out": []
    },
    "880": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "881": {
      "retsub": true,
      "op": "retsub"
    },
    "882": {
      "block": "__puya_arc4_router___get_time_events_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "884": {
      "op": "!",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "885": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "886": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "888": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "889": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events",
      "op": "callsub get_time_events",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "892": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "0x151f7c75"
      ]
    },
    "893": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%105#0"
      ]
    },
    "894": {
      "op": "concat",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "895": {
      "op": "log",
      "stack_out": []
    },
    "896": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "897": {
      "retsub": true,
      "op": "retsub"
    },
    "898": {
      "block": "__puya_arc4_router___get_secondary_market_schedule_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "900": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "901": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "902": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "904": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "905": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule",
      "op": "callsub get_secondary_market_schedule",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "908": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "0x151f7c75"
      ]
    },
    "909": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%111#0"
      ]
    },
    "910": {
      "op": "concat",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "911": {
      "op": "log",
      "stack_out": []
    },
    "912": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "913": {
      "retsub": true,
      "op": "retsub"
    },
    "914": {
      "block": "__puya_arc4_router___get_asset_metadata_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "916": {
      "op": "!",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "917": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "918": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "920": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "921": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata",
      "op": "callsub get_asset_metadata",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "924": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "0x151f7c75"
      ]
    },
    "925": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%117#0"
      ]
    },
    "926": {
      "op": "concat",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "927": {
      "op": "log",
      "stack_out": []
    },
    "928": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "929": {
      "retsub": true,
      "op": "retsub"
    },
    "930": {
      "block": "__puya_arc4_router___after_if_else@21",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "931": {
      "retsub": true,
      "op": "retsub"
    },
    "932": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_create",
      "params": {
        "arranger#0": "bytes",
        "metadata#0": "bytes"
      },
      "block": "asset_create",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "935": {
      "op": "bytec 7 // \"arranger\"",
      "defined_out": [
        "\"arranger\""
      ],
      "stack_out": [
        "\"arranger\""
      ]
    },
    "937": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"arranger\"",
        "arranger#0 (copy)"
      ],
      "stack_out": [
        "\"arranger\"",
        "arranger#0 (copy)"
      ]
    },
    "939": {
      "op": "app_global_put",
      "stack_out": []
    },
    "940": {
      "op": "frame_dig -1",
      "defined_out": [
        "metadata#0 (copy)"
      ],
      "stack_out": [
        "metadata#0 (copy)"
      ]
    },
    "942": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "945": {
      "op": "bytec 17 // \"metadata\"",
      "defined_out": [
        "\"metadata\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"metadata\""
      ]
    },
    "947": {
      "op": "swap",
      "stack_out": [
        "\"metadata\"",
        "new_state_value%0#0"
      ]
    },
    "948": {
      "op": "app_global_put",
      "stack_out": []
    },
    "949": {
      "retsub": true,
      "op": "retsub"
    },
    "950": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_config",
      "params": {
        "denomination_asset_id#0": "bytes",
        "principal#0": "bytes",
        "minimum_denomination#0": "bytes",
        "day_count_convention#0": "bytes",
        "interest_rate#0": "bytes",
        "coupon_rates#0": "bytes",
        "time_events#0": "bytes",
        "time_periods#0": "bytes"
      },
      "block": "asset_config",
      "stack_in": [],
      "op": "proto 8 0"
    },
    "953": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "956": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "957": {
      "op": "bytec_2 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "958": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "959": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "960": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "961": {
      "error": "D-ASA already configured",
      "op": "assert // D-ASA already configured",
      "stack_out": []
    },
    "962": {
      "op": "frame_dig -8",
      "defined_out": [
        "denomination_asset_id#0 (copy)"
      ],
      "stack_out": [
        "denomination_asset_id#0 (copy)"
      ]
    },
    "964": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "965": {
      "op": "bytec 8 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"denomination_asset_id\""
      ]
    },
    "967": {
      "op": "swap",
      "stack_out": [
        "\"denomination_asset_id\"",
        "new_state_value%0#0"
      ]
    },
    "968": {
      "op": "app_global_put",
      "stack_out": []
    },
    "969": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.opt_in_denomination_asset",
      "op": "callsub opt_in_denomination_asset"
    },
    "972": {
      "op": "frame_dig -7",
      "defined_out": [
        "principal#0 (copy)"
      ],
      "stack_out": [
        "principal#0 (copy)"
      ]
    },
    "974": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "975": {
      "op": "frame_dig -6",
      "defined_out": [
        "minimum_denomination#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "minimum_denomination#0 (copy)"
      ]
    },
    "977": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "978": {
      "op": "dup2",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%1#0 (copy)",
        "tmp%2#0 (copy)"
      ]
    },
    "979": {
      "op": "%",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "980": {
      "op": "!",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "981": {
      "error": "Minimum denomination is not a divisor of principal",
      "op": "assert // Minimum denomination is not a divisor of principal",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "982": {
      "op": "bytec 4 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "\"unit_value\""
      ]
    },
    "984": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "\"unit_value\"",
        "tmp%2#0 (copy)"
      ]
    },
    "986": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "987": {
      "op": "/",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "988": {
      "op": "bytec 5 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"total_units\""
      ]
    },
    "990": {
      "op": "swap",
      "stack_out": [
        "\"total_units\"",
        "new_state_value%2#0"
      ]
    },
    "991": {
      "op": "app_global_put",
      "stack_out": []
    },
    "992": {
      "op": "frame_dig -5",
      "defined_out": [
        "day_count_convention#0 (copy)"
      ],
      "stack_out": [
        "day_count_convention#0 (copy)"
      ]
    },
    "994": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "995": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "996": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "100"
      ]
    },
    "998": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "999": {
      "op": "bnz asset_config_bool_true@2",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1002": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1004": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "255"
      ]
    },
    "1007": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%8#0"
      ]
    },
    "1008": {
      "op": "bz asset_config_bool_false@3",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1011": {
      "block": "asset_config_bool_true@2",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "1012": {
      "op": "b asset_config_bool_merge@4"
    },
    "1015": {
      "block": "asset_config_bool_false@3",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "1016": {
      "block": "asset_config_bool_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid day-count convention ID",
      "op": "assert // Invalid day-count convention ID",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1017": {
      "op": "bytec 9 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\""
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"day_count_convention\""
      ]
    },
    "1019": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"day_count_convention\"",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"day_count_convention\"",
        "awst_tmp%0#0"
      ]
    },
    "1021": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1022": {
      "op": "frame_dig -4",
      "defined_out": [
        "awst_tmp%0#0",
        "interest_rate#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "interest_rate#0 (copy)"
      ]
    },
    "1024": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "new_state_value%4#0"
      ]
    },
    "1025": {
      "op": "bytec 18 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "awst_tmp%0#0",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "new_state_value%4#0",
        "\"interest_rate\""
      ]
    },
    "1027": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "\"interest_rate\"",
        "new_state_value%4#0"
      ]
    },
    "1028": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1029": {
      "op": "frame_dig -3",
      "defined_out": [
        "awst_tmp%0#0",
        "coupon_rates#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "coupon_rates#0 (copy)"
      ]
    },
    "1031": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "coupon_rates#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "coupon_rates#0 (copy)",
        "0"
      ]
    },
    "1032": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "new_state_value%5#0"
      ]
    },
    "1033": {
      "op": "bytec 19 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\"",
        "awst_tmp%0#0",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "new_state_value%5#0",
        "\"total_coupons\""
      ]
    },
    "1035": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "\"total_coupons\"",
        "new_state_value%5#0"
      ]
    },
    "1036": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1037": {
      "op": "bytec 27 // 0x636f75706f6e5261746573",
      "defined_out": [
        "0x636f75706f6e5261746573",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x636f75706f6e5261746573"
      ]
    },
    "1039": {
      "op": "box_del",
      "defined_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "1040": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1041": {
      "op": "bytec 27 // 0x636f75706f6e5261746573",
      "stack_out": [
        "awst_tmp%0#0",
        "0x636f75706f6e5261746573"
      ]
    },
    "1043": {
      "op": "frame_dig -3",
      "stack_out": [
        "awst_tmp%0#0",
        "0x636f75706f6e5261746573",
        "coupon_rates#0 (copy)"
      ]
    },
    "1045": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1046": {
      "op": "frame_dig -2",
      "defined_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)"
      ]
    },
    "1048": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "1049": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "1050": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "0"
      ]
    },
    "1051": {
      "op": "bytec 19 // \"total_coupons\"",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "0",
        "\"total_coupons\""
      ]
    },
    "1053": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1054": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_value%1#0"
      ]
    },
    "1055": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "4"
      ]
    },
    "1057": {
      "op": "+",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1058": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0"
      ]
    },
    "1059": {
      "error": "Time events length is invalid",
      "op": "assert // Time events length is invalid",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1060": {
      "op": "frame_dig -2",
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)"
      ]
    },
    "1062": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1065": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ]
    },
    "1068": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ]
    },
    "1069": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1071": {
      "op": ">",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0"
      ]
    },
    "1072": {
      "error": "Time events must be set in the future",
      "op": "assert // Time events must be set in the future",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1073": {
      "op": "frame_dig -2",
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)"
      ]
    },
    "1075": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "op": "callsub assert_time_events_sorted",
      "defined_out": [
        "awst_tmp%0#0",
        "time_events#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0"
      ]
    },
    "1078": {
      "op": "dup"
    },
    "1079": {
      "op": "frame_bury -2",
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0 (copy)"
      ]
    },
    "1081": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_time_events",
      "op": "callsub set_time_events",
      "stack_out": [
        "awst_tmp%0#0",
        "time_events#0"
      ]
    },
    "1084": {
      "op": "frame_bury -2",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1086": {
      "op": "frame_dig -1",
      "defined_out": [
        "awst_tmp%0#0",
        "time_periods#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "time_periods#0 (copy)"
      ]
    },
    "1088": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "time_periods#0 (copy)",
        "0"
      ]
    },
    "1089": {
      "op": "extract_uint16",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%16#0"
      ]
    },
    "1090": {
      "op": "!",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%17#0"
      ]
    },
    "1091": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1092": {
      "op": "bytec_2 // \"status\"",
      "defined_out": [
        "\"status\"",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"status\""
      ]
    },
    "1093": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "\"status\"",
        "100",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"status\"",
        "100"
      ]
    },
    "1095": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1096": {
      "retsub": true,
      "op": "retsub"
    },
    "1097": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "params": {},
      "block": "assert_caller_is_arranger",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1100": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1102": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1103": {
      "op": "bytec 7 // \"arranger\"",
      "defined_out": [
        "\"arranger\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arranger\""
      ]
    },
    "1105": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1106": {
      "error": "check self.arranger exists",
      "op": "assert // check self.arranger exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1107": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1108": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "1109": {
      "retsub": true,
      "op": "retsub"
    },
    "1110": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.opt_in_denomination_asset",
      "params": {},
      "block": "opt_in_denomination_asset",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1113": {
      "op": "itxn_begin"
    },
    "1114": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1116": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0"
      ]
    },
    "1117": {
      "op": "bytec 8 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "0",
        "\"denomination_asset_id\""
      ]
    },
    "1119": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1120": {
      "error": "check self.denomination_asset_id exists",
      "op": "assert // check self.denomination_asset_id exists",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "1121": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1124": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1126": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "maybe_value%0#0"
      ]
    },
    "1128": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1130": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "axfer"
      ]
    },
    "1132": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1134": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1136": {
      "op": "itxn_submit"
    },
    "1137": {
      "retsub": true,
      "op": "retsub"
    },
    "1138": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "params": {
        "time_events#0": "bytes"
      },
      "block": "assert_time_events_sorted",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1141": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "time_f#0"
      ]
    },
    "1143": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0"
      ]
    },
    "1144": {
      "op": "frame_dig -1",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "time_events#0 (copy)"
      ]
    },
    "1146": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "1147": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%0#0"
      ]
    },
    "1148": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%0#0",
        "1"
      ]
    },
    "1149": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ]
    },
    "1150": {
      "op": "intc_0 // 0",
      "defined_out": [
        "_t#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "1151": {
      "block": "assert_time_events_sorted_for_header@1",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "_t#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0"
      ]
    },
    "1153": {
      "op": "frame_dig 2",
      "defined_out": [
        "_t#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "tmp%1#0"
      ]
    },
    "1155": {
      "op": "<",
      "defined_out": [
        "_t#0",
        "continue_looping%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "continue_looping%0#0"
      ]
    },
    "1156": {
      "op": "bz assert_time_events_sorted_after_for@6",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "1159": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "_t#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "65"
      ]
    },
    "1161": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "65",
        "_t#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "65",
        "1"
      ]
    },
    "1162": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "1165": {
      "op": "frame_dig -1",
      "defined_out": [
        "_t#0",
        "time_events#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_events#0 (copy)"
      ]
    },
    "1167": {
      "op": "extract 2 0",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1170": {
      "op": "frame_dig 3",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "1172": {
      "op": "dup",
      "defined_out": [
        "_t#0",
        "_t#0 (copy)",
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0 (copy)",
        "_t#0 (copy)"
      ]
    },
    "1173": {
      "op": "cover 2",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0 (copy)"
      ]
    },
    "1175": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "_t#0",
        "_t#0 (copy)",
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0 (copy)",
        "8"
      ]
    },
    "1176": {
      "op": "*",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1177": {
      "op": "dig 1",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1179": {
      "op": "swap",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%0#0"
      ]
    },
    "1180": {
      "op": "intc_2 // 8",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%0#0",
        "8"
      ]
    },
    "1181": {
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ]
    },
    "1182": {
      "op": "btoi",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0"
      ]
    },
    "1183": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0",
        "time_i#0 (copy)"
      ]
    },
    "1184": {
      "op": "cover 3",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0"
      ]
    },
    "1186": {
      "op": "frame_bury 1",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "_t#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1188": {
      "op": "swap",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "1189": {
      "op": "intc_1 // 1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "1"
      ]
    },
    "1190": {
      "op": "+",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "1191": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "_t#0"
      ]
    },
    "1192": {
      "op": "frame_bury 3",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "1194": {
      "op": "intc_2 // 8",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "8"
      ]
    },
    "1195": {
      "op": "*",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0"
      ]
    },
    "1196": {
      "op": "intc_2 // 8",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0",
        "8"
      ]
    },
    "1197": {
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "_t#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "tmp%4#0"
      ]
    },
    "1198": {
      "op": "btoi",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "time_f#0"
      ]
    },
    "1199": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "time_f#0",
        "time_f#0"
      ]
    },
    "1200": {
      "op": "frame_bury 0",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_i#0",
        "time_f#0"
      ]
    },
    "1202": {
      "op": "<",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%5#0"
      ]
    },
    "1203": {
      "error": "Time events must be sorted in strictly ascending order",
      "op": "assert // Time events must be sorted in strictly ascending order",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "1204": {
      "op": "intc_0 // 0",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "0"
      ]
    },
    "1205": {
      "op": "bytec 9 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "1207": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_t#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1208": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "maybe_value%0#0"
      ]
    },
    "1209": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "_t#0",
        "maybe_value%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "maybe_value%0#0",
        "255"
      ]
    },
    "1212": {
      "op": "!=",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%6#0"
      ]
    },
    "1213": {
      "op": "bz assert_time_events_sorted_for_header@1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "1216": {
      "op": "frame_dig 0",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_f#0"
      ]
    },
    "1218": {
      "op": "frame_dig 1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_f#0",
        "time_i#0"
      ]
    },
    "1220": {
      "op": "-",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%7#0"
      ]
    },
    "1221": {
      "op": "pushint 86400 // 86400",
      "defined_out": [
        "86400",
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%7#0",
        "86400"
      ]
    },
    "1225": {
      "op": "%",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%8#0"
      ]
    },
    "1226": {
      "op": "!",
      "defined_out": [
        "_t#0",
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "tmp%9#0"
      ]
    },
    "1227": {
      "error": "Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)",
      "op": "assert // Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ]
    },
    "1228": {
      "op": "b assert_time_events_sorted_for_header@1"
    },
    "1231": {
      "block": "assert_time_events_sorted_after_for@6",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "tmp%1#0",
        "_t#0",
        "time_events#0 (copy)"
      ]
    },
    "1233": {
      "op": "frame_bury 0"
    },
    "1235": {
      "retsub": true,
      "op": "retsub"
    },
    "1236": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_time_events",
      "params": {
        "time_events#0": "bytes"
      },
      "block": "set_time_events",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1239": {
      "op": "bytec 20 // 0x74696d654576656e7473",
      "defined_out": [
        "0x74696d654576656e7473"
      ],
      "stack_out": [
        "0x74696d654576656e7473"
      ]
    },
    "1241": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1242": {
      "op": "pop",
      "stack_out": []
    },
    "1243": {
      "op": "bytec 20 // 0x74696d654576656e7473",
      "stack_out": [
        "0x74696d654576656e7473"
      ]
    },
    "1245": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x74696d654576656e7473",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "0x74696d654576656e7473",
        "time_events#0 (copy)"
      ]
    },
    "1247": {
      "op": "box_put",
      "stack_out": []
    },
    "1248": {
      "op": "frame_dig -1",
      "stack_out": [
        "time_events#0 (copy)"
      ]
    },
    "1250": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "1253": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1254": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%0#0"
      ]
    },
    "1257": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%0#0"
      ]
    },
    "1258": {
      "op": "bytec 10 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%0#0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "1260": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "\"primary_distribution_opening_date\"",
        "new_state_value%0#0"
      ]
    },
    "1261": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "1262": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1263": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ]
    },
    "1266": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%1#0"
      ]
    },
    "1267": {
      "op": "bytec 11 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%1#0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "1269": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "\"primary_distribution_closure_date\"",
        "new_state_value%1#0"
      ]
    },
    "1270": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "1271": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1272": {
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ]
    },
    "1275": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%2#0"
      ]
    },
    "1276": {
      "op": "bytec 12 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "array_head_and_tail%0#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "new_state_value%2#0",
        "\"issuance_date\""
      ]
    },
    "1278": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "\"issuance_date\"",
        "new_state_value%2#0"
      ]
    },
    "1279": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "1280": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ]
    },
    "1282": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "1283": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ]
    },
    "1284": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%3#0",
        "1"
      ]
    },
    "1285": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ]
    },
    "1286": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%4#0",
        "8"
      ]
    },
    "1287": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%3#0"
      ]
    },
    "1288": {
      "op": "intc_2 // 8",
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%3#0",
        "8"
      ]
    },
    "1289": {
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1290": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "1291": {
      "op": "bytec 15 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "\"maturity_date\""
      ]
    },
    "1293": {
      "op": "swap",
      "stack_out": [
        "\"maturity_date\"",
        "new_state_value%3#0"
      ]
    },
    "1294": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1295": {
      "op": "frame_dig -1",
      "stack_out": [
        "time_events#0 (copy)"
      ]
    },
    "1297": {
      "retsub": true,
      "op": "retsub"
    },
    "1298": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events",
      "params": {
        "secondary_market_time_events#0": "bytes"
      },
      "block": "set_secondary_time_events",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1301": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "1304": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_ended",
      "op": "callsub status_is_ended",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1307": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1308": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "1309": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1312": {
      "op": "frame_dig -1",
      "defined_out": [
        "secondary_market_time_events#0 (copy)"
      ],
      "stack_out": [
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "1314": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "secondary_market_time_events#0 (copy)"
      ],
      "stack_out": [
        "secondary_market_time_events#0 (copy)",
        "0"
      ]
    },
    "1315": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1316": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "2"
      ]
    },
    "1318": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1319": {
      "error": "Time events length is invalid",
      "op": "assert // Time events length is invalid",
      "stack_out": []
    },
    "1320": {
      "op": "frame_dig -1",
      "stack_out": [
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "1322": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "op": "callsub assert_time_events_sorted",
      "defined_out": [
        "secondary_market_time_events#0"
      ],
      "stack_out": [
        "secondary_market_time_events#0"
      ]
    },
    "1325": {
      "op": "frame_bury -1",
      "stack_out": []
    },
    "1327": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1328": {
      "op": "bytec 12 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"issuance_date\""
      ]
    },
    "1330": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1331": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1332": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "1334": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1337": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1338": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ]
    },
    "1341": {
      "op": "btoi",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ]
    },
    "1342": {
      "op": "uncover 2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%0#0"
      ]
    },
    "1344": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1346": {
      "op": "<=",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1347": {
      "error": "Invalid secondary market opening date",
      "op": "assert // Invalid secondary market opening date",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ]
    },
    "1348": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "0"
      ]
    },
    "1349": {
      "op": "bytec 15 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "1351": {
      "op": "app_global_get_ex",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1352": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "1353": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "1355": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "secondary_market_time_events#0 (copy)",
        "0"
      ]
    },
    "1356": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%1#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ]
    },
    "1357": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail%0#0",
        "maybe_value%1#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%7#0",
        "1"
      ]
    },
    "1358": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%1#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%8#0"
      ]
    },
    "1359": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "maybe_value%1#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%8#0",
        "8"
      ]
    },
    "1360": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "item_offset%1#0"
      ]
    },
    "1361": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "item_offset%1#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1363": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0"
      ]
    },
    "1364": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0",
        "8"
      ]
    },
    "1365": {
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%9#0"
      ]
    },
    "1366": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "tmp%10#0"
      ]
    },
    "1367": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "tmp%10#0",
        "maybe_value%1#0"
      ]
    },
    "1368": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%10#0",
        "maybe_value%1#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1370": {
      "op": ">=",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1371": {
      "error": "Invalid secondary market closure date",
      "op": "assert // Invalid secondary market closure date",
      "stack_out": [
        "tmp%5#0",
        "tmp%10#0"
      ]
    },
    "1372": {
      "op": "bytec 13 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%10#0",
        "\"secondary_market_opening_date\""
      ]
    },
    "1374": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%10#0",
        "\"secondary_market_opening_date\"",
        "tmp%5#0"
      ]
    },
    "1376": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1377": {
      "op": "bytec 14 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "\"secondary_market_closure_date\""
      ]
    },
    "1379": {
      "op": "swap",
      "stack_out": [
        "\"secondary_market_closure_date\"",
        "tmp%10#0"
      ]
    },
    "1380": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1381": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1382": {
      "op": "bytec 13 // \"secondary_market_opening_date\"",
      "stack_out": [
        "0",
        "\"secondary_market_opening_date\""
      ]
    },
    "1384": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1385": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1386": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1387": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1388": {
      "op": "bytec 14 // \"secondary_market_closure_date\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"secondary_market_closure_date\""
      ]
    },
    "1390": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1391": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%3#0"
      ]
    },
    "1392": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1393": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1394": {
      "retsub": true,
      "op": "retsub"
    },
    "1395": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_ended",
      "params": {},
      "block": "status_is_ended",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1398": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1399": {
      "op": "bytec_2 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "1400": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1401": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1402": {
      "op": "pushint 200 // 200",
      "defined_out": [
        "200",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "200"
      ]
    },
    "1405": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1406": {
      "retsub": true,
      "op": "retsub"
    },
    "1407": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "params": {},
      "block": "assert_is_not_defaulted",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1410": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1411": {
      "op": "bytec 16 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"defaulted\""
      ]
    },
    "1413": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1414": {
      "error": "check self.defaulted exists",
      "op": "assert // check self.defaulted exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1415": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1416": {
      "error": "Defaulted",
      "op": "assert // Defaulted",
      "stack_out": []
    },
    "1417": {
      "retsub": true,
      "op": "retsub"
    },
    "1418": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assign_role",
      "params": {
        "role_address#0": "bytes",
        "role#0": "bytes",
        "config#0": "bytes"
      },
      "block": "assign_role",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1421": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "1424": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1427": {
      "op": "frame_dig -2",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "1429": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1430": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1431": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "20"
      ]
    },
    "1433": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1434": {
      "op": "bnz assign_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1437": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1439": {
      "op": "intc_3 // 40",
      "defined_out": [
        "40",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "40"
      ]
    },
    "1440": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1441": {
      "op": "bnz assign_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1444": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1446": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "50"
      ]
    },
    "1448": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1449": {
      "op": "bnz assign_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1452": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1454": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "60"
      ]
    },
    "1456": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1457": {
      "op": "bnz assign_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1460": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1462": {
      "op": "pushint 70 // 70",
      "defined_out": [
        "70",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "70"
      ]
    },
    "1464": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1465": {
      "op": "bz assign_role_bool_false@6",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1468": {
      "block": "assign_role_bool_true@5",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "1469": {
      "op": "b assign_role_bool_merge@7"
    },
    "1472": {
      "block": "assign_role_bool_false@6",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "1473": {
      "block": "assign_role_bool_merge@7",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid role identifier",
      "op": "assert // Invalid role identifier",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1474": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20"
      ]
    },
    "1476": {
      "op": "intc_3 // 40",
      "defined_out": [
        "20",
        "40"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20",
        "40"
      ]
    },
    "1477": {
      "op": "pushints 50 60 70 // 50, 60, 70",
      "defined_out": [
        "20",
        "40",
        "50",
        "60",
        "70"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20",
        "40",
        "50",
        "60",
        "70"
      ]
    },
    "1482": {
      "op": "frame_dig 0",
      "defined_out": [
        "20",
        "40",
        "50",
        "60",
        "70",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20",
        "40",
        "50",
        "60",
        "70",
        "awst_tmp%0#0"
      ]
    },
    "1484": {
      "op": "match assign_role_switch_case_0@8 assign_role_switch_case_1@9 assign_role_switch_case_2@10 assign_role_switch_case_3@11 assign_role_switch_case_4@12",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1496": {
      "op": "err"
    },
    "1497": {
      "block": "assign_role_switch_case_0@8",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 7 // \"arranger\"",
      "defined_out": [
        "\"arranger\""
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"arranger\""
      ]
    },
    "1499": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"arranger\"",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "\"arranger\"",
        "role_address#0 (copy)"
      ]
    },
    "1501": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1502": {
      "op": "b assign_role_switch_case_next@14"
    },
    "1505": {
      "block": "assign_role_switch_case_1@9",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 21 // 0x52343023",
      "defined_out": [
        "0x52343023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023"
      ]
    },
    "1507": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52343023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023",
        "role_address#0 (copy)"
      ]
    },
    "1509": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1510": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1511": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1512": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "maybe_exists%0#0"
      ]
    },
    "1514": {
      "op": "!",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1515": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1516": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "config#0 (copy)"
      ]
    },
    "1518": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0",
        "new_box_value%0#0"
      ]
    },
    "1521": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1522": {
      "op": "b assign_role_switch_case_next@14"
    },
    "1525": {
      "block": "assign_role_switch_case_2@10",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 22 // 0x52353023",
      "defined_out": [
        "0x52353023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023"
      ]
    },
    "1527": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52353023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023",
        "role_address#0 (copy)"
      ]
    },
    "1529": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "1530": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1531": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1532": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_exists%1#0"
      ]
    },
    "1534": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1535": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "1536": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "config#0 (copy)"
      ]
    },
    "1538": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "new_box_value%1#0"
      ]
    },
    "1541": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1542": {
      "op": "b assign_role_switch_case_next@14"
    },
    "1545": {
      "block": "assign_role_switch_case_3@11",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 23 // 0x52363023",
      "defined_out": [
        "0x52363023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023"
      ]
    },
    "1547": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52363023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023",
        "role_address#0 (copy)"
      ]
    },
    "1549": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ]
    },
    "1550": {
      "op": "dup",
      "defined_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1551": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1552": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "maybe_exists%2#0"
      ]
    },
    "1554": {
      "op": "!",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1555": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ]
    },
    "1556": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "config#0 (copy)"
      ]
    },
    "1558": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%12#0",
        "new_box_value%2#0"
      ]
    },
    "1561": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1562": {
      "op": "b assign_role_switch_case_next@14"
    },
    "1565": {
      "block": "assign_role_switch_case_4@12",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 24 // 0x52373023",
      "defined_out": [
        "0x52373023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023"
      ]
    },
    "1567": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52373023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023",
        "role_address#0 (copy)"
      ]
    },
    "1569": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0"
      ]
    },
    "1570": {
      "op": "dup",
      "defined_out": [
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ]
    },
    "1571": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1572": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "maybe_exists%3#0"
      ]
    },
    "1574": {
      "op": "!",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1575": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0"
      ]
    },
    "1576": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "config#0 (copy)"
      ]
    },
    "1578": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%15#0",
        "new_box_value%3#0"
      ]
    },
    "1581": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1582": {
      "block": "assign_role_switch_case_next@14",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "1584": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1585": {
      "op": "swap"
    },
    "1586": {
      "retsub": true,
      "op": "retsub"
    },
    "1587": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role",
      "params": {
        "role_address#0": "bytes",
        "role#0": "bytes"
      },
      "block": "revoke_role",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1590": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "1593": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1596": {
      "op": "frame_dig -1",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "1598": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1599": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1600": {
      "op": "intc_3 // 40",
      "defined_out": [
        "40",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "40"
      ]
    },
    "1601": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1602": {
      "op": "bnz revoke_role_bool_true@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1605": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1607": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "50"
      ]
    },
    "1609": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1610": {
      "op": "bnz revoke_role_bool_true@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1613": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1615": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "60"
      ]
    },
    "1617": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1618": {
      "op": "bnz revoke_role_bool_true@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1621": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1623": {
      "op": "pushint 70 // 70",
      "defined_out": [
        "70",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "70"
      ]
    },
    "1625": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1626": {
      "op": "bz revoke_role_bool_false@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1629": {
      "block": "revoke_role_bool_true@4",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "1630": {
      "op": "b revoke_role_bool_merge@6"
    },
    "1633": {
      "block": "revoke_role_bool_false@5",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "1634": {
      "block": "revoke_role_bool_merge@6",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid role identifier",
      "op": "assert // Invalid role identifier",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1635": {
      "op": "intc_3 // 40",
      "defined_out": [
        "40"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "40"
      ]
    },
    "1636": {
      "op": "pushints 50 60 70 // 50, 60, 70",
      "defined_out": [
        "40",
        "50",
        "60",
        "70"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "40",
        "50",
        "60",
        "70"
      ]
    },
    "1641": {
      "op": "frame_dig 0",
      "defined_out": [
        "40",
        "50",
        "60",
        "70",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "40",
        "50",
        "60",
        "70",
        "awst_tmp%0#0"
      ]
    },
    "1643": {
      "op": "match revoke_role_switch_case_0@7 revoke_role_switch_case_1@8 revoke_role_switch_case_2@9 revoke_role_switch_case_3@10",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1653": {
      "op": "err"
    },
    "1654": {
      "block": "revoke_role_switch_case_0@7",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 21 // 0x52343023",
      "defined_out": [
        "0x52343023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023"
      ]
    },
    "1656": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52343023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023",
        "role_address#0 (copy)"
      ]
    },
    "1658": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "1659": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1660": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1661": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0",
        "maybe_exists%0#0"
      ]
    },
    "1663": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "1664": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "1665": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1666": {
      "op": "b revoke_role_switch_case_next@12"
    },
    "1669": {
      "block": "revoke_role_switch_case_1@8",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 22 // 0x52353023",
      "defined_out": [
        "0x52353023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023"
      ]
    },
    "1671": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52353023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023",
        "role_address#0 (copy)"
      ]
    },
    "1673": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "1674": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1675": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1676": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0",
        "maybe_exists%1#0"
      ]
    },
    "1678": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "1679": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "1680": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1681": {
      "op": "b revoke_role_switch_case_next@12"
    },
    "1684": {
      "block": "revoke_role_switch_case_2@9",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 23 // 0x52363023",
      "defined_out": [
        "0x52363023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023"
      ]
    },
    "1686": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52363023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023",
        "role_address#0 (copy)"
      ]
    },
    "1688": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "1689": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1690": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1691": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0",
        "maybe_exists%2#0"
      ]
    },
    "1693": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "1694": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "1695": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1696": {
      "op": "b revoke_role_switch_case_next@12"
    },
    "1699": {
      "block": "revoke_role_switch_case_3@10",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 24 // 0x52373023",
      "defined_out": [
        "0x52373023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023"
      ]
    },
    "1701": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52373023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023",
        "role_address#0 (copy)"
      ]
    },
    "1703": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0"
      ]
    },
    "1704": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "1705": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1706": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0",
        "maybe_exists%3#0"
      ]
    },
    "1708": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%11#0"
      ]
    },
    "1709": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "1710": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1711": {
      "block": "revoke_role_switch_case_next@12",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "1713": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1714": {
      "op": "swap"
    },
    "1715": {
      "retsub": true,
      "op": "retsub"
    },
    "1716": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.open_account",
      "params": {
        "holding_address#0": "bytes",
        "payment_address#0": "bytes"
      },
      "block": "open_account",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1719": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "op": "callsub assert_caller_is_account_manager"
    },
    "1722": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_ended",
      "op": "callsub status_is_ended",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1725": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1726": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "1727": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1730": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1731": {
      "op": "bytec 6 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"suspended\""
      ]
    },
    "1733": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1734": {
      "error": "check self.suspended exists",
      "op": "assert // check self.suspended exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1735": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1736": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": []
    },
    "1737": {
      "op": "bytec_3 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1738": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1740": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1741": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1742": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1743": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "maybe_exists%1#0"
      ]
    },
    "1745": {
      "op": "!",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1746": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1747": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment_address#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "payment_address#0 (copy)"
      ]
    },
    "1749": {
      "op": "bytec 25 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "payment_address#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "payment_address#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "1751": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1752": {
      "op": "bytec 25 // 0x0000000000000000",
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "1754": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1755": {
      "op": "bytec 25 // 0x0000000000000000",
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "1757": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1758": {
      "op": "bytec 26 // 0x00",
      "defined_out": [
        "0x00",
        "encoded_tuple_buffer%4#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%4#0",
        "0x00"
      ]
    },
    "1760": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1761": {
      "op": "box_put",
      "stack_out": []
    },
    "1762": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1764": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1765": {
      "retsub": true,
      "op": "retsub"
    },
    "1766": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "params": {},
      "block": "assert_caller_is_account_manager",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1769": {
      "op": "intc_0 // 0"
    },
    "1770": {
      "op": "bytec 21 // 0x52343023"
    },
    "1772": {
      "op": "txn Sender",
      "defined_out": [
        "0x52343023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52343023",
        "caller#0"
      ]
    },
    "1774": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "1775": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1776": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1777": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1779": {
      "op": "bz assert_caller_is_account_manager_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "1782": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1784": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1785": {
      "error": "check self.account_manager entry exists",
      "op": "assert // check self.account_manager entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1786": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "1789": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1791": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "1792": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "1793": {
      "op": "frame_bury 0",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "1795": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1796": {
      "op": "bz assert_caller_is_account_manager_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "1799": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1801": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1802": {
      "error": "check self.account_manager entry exists",
      "op": "assert // check self.account_manager entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "1803": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "1806": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0",
        "tmp%2#0"
      ]
    },
    "1808": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1809": {
      "op": "bz assert_caller_is_account_manager_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "1812": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "1813": {
      "op": "b assert_caller_is_account_manager_bool_merge@5"
    },
    "1816": {
      "block": "assert_caller_is_account_manager_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "1817": {
      "block": "assert_caller_is_account_manager_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "1818": {
      "retsub": true,
      "op": "retsub"
    },
    "1819": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.close_account",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "close_account",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1822": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "op": "callsub assert_caller_is_account_manager"
    },
    "1825": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1828": {
      "op": "frame_dig -1",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "1830": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "1833": {
      "op": "bytec_3 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1834": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1836": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1837": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1838": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1839": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1840": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1843": {
      "op": "btoi",
      "defined_out": [
        "closed_units#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "closed_units#0"
      ]
    },
    "1844": {
      "op": "swap",
      "stack_out": [
        "closed_units#0",
        "tmp%0#0"
      ]
    },
    "1845": {
      "op": "box_del",
      "defined_out": [
        "closed_units#0",
        "{box_del}"
      ],
      "stack_out": [
        "closed_units#0",
        "{box_del}"
      ]
    },
    "1846": {
      "op": "pop",
      "stack_out": [
        "closed_units#0"
      ]
    },
    "1847": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "0"
      ]
    },
    "1848": {
      "op": "bytec_1 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "1849": {
      "op": "app_global_get_ex",
      "defined_out": [
        "closed_units#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1850": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0"
      ]
    },
    "1851": {
      "op": "dig 1",
      "defined_out": [
        "closed_units#0",
        "closed_units#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0",
        "closed_units#0 (copy)"
      ]
    },
    "1853": {
      "op": "-",
      "defined_out": [
        "closed_units#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "closed_units#0",
        "new_state_value%0#0"
      ]
    },
    "1854": {
      "op": "bytec_1 // \"circulating_units\"",
      "stack_out": [
        "closed_units#0",
        "new_state_value%0#0",
        "\"circulating_units\""
      ]
    },
    "1855": {
      "op": "swap",
      "stack_out": [
        "closed_units#0",
        "\"circulating_units\"",
        "new_state_value%0#0"
      ]
    },
    "1856": {
      "op": "app_global_put",
      "stack_out": [
        "closed_units#0"
      ]
    },
    "1857": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units",
      "op": "callsub end_if_no_circulating_units"
    },
    "1860": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1861": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "1863": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1864": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1865": {
      "retsub": true,
      "op": "retsub"
    },
    "1866": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "assert_valid_holding_address",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1869": {
      "op": "bytec_3 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "1870": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1872": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1873": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1874": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1876": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": []
    },
    "1877": {
      "retsub": true,
      "op": "retsub"
    },
    "1878": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.end_if_no_circulating_units",
      "params": {},
      "block": "end_if_no_circulating_units",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1881": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1882": {
      "op": "bytec_1 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_units\""
      ]
    },
    "1883": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1884": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1885": {
      "op": "bnz end_if_no_circulating_units_after_if_else@2",
      "stack_out": []
    },
    "1888": {
      "op": "bytec_2 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "\"status\""
      ]
    },
    "1889": {
      "op": "pushint 200 // 200",
      "defined_out": [
        "\"status\"",
        "200"
      ],
      "stack_out": [
        "\"status\"",
        "200"
      ]
    },
    "1892": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1893": {
      "block": "end_if_no_circulating_units_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "1894": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "bytes"
      },
      "block": "primary_distribution",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1897": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_primary_distribution_open",
      "op": "callsub assert_is_primary_distribution_open"
    },
    "1900": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_primary_dealer",
      "op": "callsub assert_caller_is_primary_dealer"
    },
    "1903": {
      "op": "frame_dig -2",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "1905": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "1908": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1911": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1912": {
      "op": "bytec 6 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"suspended\""
      ]
    },
    "1914": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1915": {
      "error": "check self.suspended exists",
      "op": "assert // check self.suspended exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1916": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1917": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": []
    },
    "1918": {
      "op": "frame_dig -1",
      "defined_out": [
        "units#0 (copy)"
      ],
      "stack_out": [
        "units#0 (copy)"
      ]
    },
    "1920": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1921": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1922": {
      "error": "Can not distribute zero units",
      "op": "assert // Can not distribute zero units",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1923": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1924": {
      "op": "bytec_1 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "1925": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1926": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1927": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1929": {
      "op": "+",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "1930": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "0"
      ]
    },
    "1931": {
      "op": "bytec 5 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "0",
        "\"total_units\""
      ]
    },
    "1933": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1934": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "maybe_value%2#0"
      ]
    },
    "1935": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1936": {
      "error": "Insufficient remaining D-ASA units",
      "op": "assert // Insufficient remaining D-ASA units",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1937": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1938": {
      "op": "bytec_1 // \"circulating_units\"",
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "1939": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1940": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%3#0"
      ]
    },
    "1941": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%3#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1943": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "new_state_value%0#0"
      ]
    },
    "1944": {
      "op": "bytec_1 // \"circulating_units\"",
      "stack_out": [
        "tmp%1#0",
        "new_state_value%0#0",
        "\"circulating_units\""
      ]
    },
    "1945": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "\"circulating_units\"",
        "new_state_value%0#0"
      ]
    },
    "1946": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1947": {
      "op": "bytec_3 // 0x52333023",
      "defined_out": [
        "0x52333023",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x52333023"
      ]
    },
    "1948": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "1950": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%7#0"
      ]
    },
    "1951": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1952": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%7#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1953": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%7#0",
        "maybe_value%4#0"
      ]
    },
    "1954": {
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1957": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1958": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%1#0"
      ]
    },
    "1960": {
      "op": "+",
      "defined_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "1961": {
      "op": "itob",
      "defined_out": [
        "tmp%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%0#0"
      ]
    },
    "1962": {
      "op": "dig 1",
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1964": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1965": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%0#0",
        "maybe_value%5#0"
      ]
    },
    "1966": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "1967": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%7#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "updated_data%0#0"
      ]
    },
    "1969": {
      "op": "dig 1",
      "stack_out": [
        "tmp%7#0",
        "updated_data%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1971": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "updated_data%0#0"
      ]
    },
    "1972": {
      "op": "box_put",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1973": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "1974": {
      "op": "bytec 4 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"unit_value\""
      ]
    },
    "1976": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1977": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%6#0"
      ]
    },
    "1978": {
      "op": "itob",
      "defined_out": [
        "tmp%7#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%1#0"
      ]
    },
    "1979": {
      "op": "dig 1",
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%1#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1981": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%7#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%1#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1982": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%1#0",
        "maybe_value%7#0"
      ]
    },
    "1983": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%7#0",
        "val_as_bytes%1#0"
      ]
    },
    "1984": {
      "op": "replace2 40",
      "defined_out": [
        "tmp%7#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "updated_data%1#0"
      ]
    },
    "1986": {
      "op": "box_put",
      "stack_out": []
    },
    "1987": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1988": {
      "op": "bytec 5 // \"total_units\"",
      "stack_out": [
        "0",
        "\"total_units\""
      ]
    },
    "1990": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1991": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "maybe_value%8#0"
      ]
    },
    "1992": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%8#0",
        "0"
      ]
    },
    "1993": {
      "op": "bytec_1 // \"circulating_units\"",
      "stack_out": [
        "maybe_value%8#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "1994": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "1995": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "maybe_value%8#0",
        "maybe_value%9#0"
      ]
    },
    "1996": {
      "op": "-",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1997": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1998": {
      "retsub": true,
      "op": "retsub"
    },
    "1999": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_primary_distribution_open",
      "params": {},
      "block": "assert_is_primary_distribution_open",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2002": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2004": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_active",
      "op": "callsub status_is_active",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2007": {
      "op": "bz assert_is_primary_distribution_open_bool_false@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2010": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0"
      ]
    },
    "2011": {
      "op": "bytec 10 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "2013": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2014": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2015": {
      "op": "global LatestTimestamp"
    },
    "2017": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2018": {
      "op": "frame_bury 0",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2020": {
      "op": "<=",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2021": {
      "op": "bz assert_is_primary_distribution_open_bool_false@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2024": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "0"
      ]
    },
    "2025": {
      "op": "bytec 11 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "2027": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2028": {
      "error": "check self.primary_distribution_closure_date exists",
      "op": "assert // check self.primary_distribution_closure_date exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2029": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0"
      ]
    },
    "2031": {
      "op": ">",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2032": {
      "op": "bz assert_is_primary_distribution_open_bool_false@4",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2035": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2036": {
      "op": "b assert_is_primary_distribution_open_bool_merge@5"
    },
    "2039": {
      "block": "assert_is_primary_distribution_open_bool_false@4",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2040": {
      "block": "assert_is_primary_distribution_open_bool_merge@5",
      "stack_in": [
        "awst_tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Primary distribution is closed",
      "op": "assert // Primary distribution is closed",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2041": {
      "retsub": true,
      "op": "retsub"
    },
    "2042": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_active",
      "params": {},
      "block": "status_is_active",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2045": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2046": {
      "op": "bytec_2 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "2047": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2048": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2049": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "100"
      ]
    },
    "2051": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2052": {
      "retsub": true,
      "op": "retsub"
    },
    "2053": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_primary_dealer",
      "params": {},
      "block": "assert_caller_is_primary_dealer",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2056": {
      "op": "intc_0 // 0"
    },
    "2057": {
      "op": "bytec 22 // 0x52353023"
    },
    "2059": {
      "op": "txn Sender",
      "defined_out": [
        "0x52353023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52353023",
        "caller#0"
      ]
    },
    "2061": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2062": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2063": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2064": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2066": {
      "op": "bz assert_caller_is_primary_dealer_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2069": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2071": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2072": {
      "error": "check self.primary_dealer entry exists",
      "op": "assert // check self.primary_dealer entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2073": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "2076": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2078": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "2079": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2080": {
      "op": "frame_bury 0",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "2082": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2083": {
      "op": "bz assert_caller_is_primary_dealer_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2086": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2088": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2089": {
      "error": "check self.primary_dealer entry exists",
      "op": "assert // check self.primary_dealer entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "2090": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "2093": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0",
        "tmp%2#0"
      ]
    },
    "2095": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "2096": {
      "op": "bz assert_caller_is_primary_dealer_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2099": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2100": {
      "op": "b assert_caller_is_primary_dealer_bool_merge@5"
    },
    "2103": {
      "block": "assert_caller_is_primary_dealer_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2104": {
      "block": "assert_caller_is_primary_dealer_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2105": {
      "retsub": true,
      "op": "retsub"
    },
    "2106": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension",
      "params": {
        "suspended#0": "bytes"
      },
      "block": "set_asset_suspension",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2109": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "op": "callsub assert_caller_is_authority"
    },
    "2112": {
      "op": "frame_dig -1",
      "defined_out": [
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "suspended#0 (copy)"
      ]
    },
    "2114": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "suspended#0 (copy)",
        "0"
      ]
    },
    "2115": {
      "op": "getbit",
      "defined_out": [
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0"
      ]
    },
    "2116": {
      "op": "bytec 6 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0",
        "\"suspended\""
      ]
    },
    "2118": {
      "op": "swap",
      "stack_out": [
        "\"suspended\"",
        "reinterpret_uint64%0#0"
      ]
    },
    "2119": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2120": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2122": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2123": {
      "retsub": true,
      "op": "retsub"
    },
    "2124": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "params": {},
      "block": "assert_caller_is_authority",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2127": {
      "op": "intc_0 // 0"
    },
    "2128": {
      "op": "bytec 24 // 0x52373023"
    },
    "2130": {
      "op": "txn Sender",
      "defined_out": [
        "0x52373023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52373023",
        "caller#0"
      ]
    },
    "2132": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2133": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2134": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2135": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2137": {
      "op": "bz assert_caller_is_authority_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2140": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2142": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2143": {
      "error": "check self.authority entry exists",
      "op": "assert // check self.authority entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2144": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "2147": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2149": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "2150": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2151": {
      "op": "frame_bury 0",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "2153": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2154": {
      "op": "bz assert_caller_is_authority_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2157": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2159": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2160": {
      "error": "check self.authority entry exists",
      "op": "assert // check self.authority entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "2161": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "2164": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0",
        "tmp%2#0"
      ]
    },
    "2166": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "2167": {
      "op": "bz assert_caller_is_authority_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2170": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2171": {
      "op": "b assert_caller_is_authority_bool_merge@5"
    },
    "2174": {
      "block": "assert_caller_is_authority_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2175": {
      "block": "assert_caller_is_authority_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2176": {
      "retsub": true,
      "op": "retsub"
    },
    "2177": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension",
      "params": {
        "holding_address#0": "bytes",
        "suspended#0": "bytes"
      },
      "block": "set_account_suspension",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2180": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "op": "callsub assert_caller_is_authority"
    },
    "2183": {
      "op": "frame_dig -2",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "2185": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "2188": {
      "op": "bytec_3 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2189": {
      "op": "frame_dig -2",
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2191": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2192": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2193": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2194": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2195": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "suspended#0 (copy)"
      ]
    },
    "2197": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "0"
      ]
    },
    "2198": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "is_true%0#0"
      ]
    },
    "2199": {
      "op": "pushint 448 // 448"
    },
    "2202": {
      "op": "swap",
      "defined_out": [
        "448",
        "is_true%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "448",
        "is_true%0#0"
      ]
    },
    "2203": {
      "op": "setbit",
      "defined_out": [
        "tmp%0#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%0#0"
      ]
    },
    "2204": {
      "op": "box_put",
      "stack_out": []
    },
    "2205": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2207": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2208": {
      "retsub": true,
      "op": "retsub"
    },
    "2209": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status",
      "params": {
        "defaulted#0": "bytes"
      },
      "block": "set_default_status",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2212": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_trustee",
      "op": "callsub assert_caller_is_trustee"
    },
    "2215": {
      "op": "frame_dig -1",
      "defined_out": [
        "defaulted#0 (copy)"
      ],
      "stack_out": [
        "defaulted#0 (copy)"
      ]
    },
    "2217": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "defaulted#0 (copy)"
      ],
      "stack_out": [
        "defaulted#0 (copy)",
        "0"
      ]
    },
    "2218": {
      "op": "getbit",
      "defined_out": [
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0"
      ]
    },
    "2219": {
      "op": "bytec 16 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "reinterpret_uint64%0#0"
      ],
      "stack_out": [
        "reinterpret_uint64%0#0",
        "\"defaulted\""
      ]
    },
    "2221": {
      "op": "swap",
      "stack_out": [
        "\"defaulted\"",
        "reinterpret_uint64%0#0"
      ]
    },
    "2222": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2223": {
      "retsub": true,
      "op": "retsub"
    },
    "2224": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_trustee",
      "params": {},
      "block": "assert_caller_is_trustee",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2227": {
      "op": "intc_0 // 0"
    },
    "2228": {
      "op": "bytec 23 // 0x52363023"
    },
    "2230": {
      "op": "txn Sender",
      "defined_out": [
        "0x52363023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x52363023",
        "caller#0"
      ]
    },
    "2232": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2233": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2234": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2235": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2237": {
      "op": "bz assert_caller_is_trustee_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2240": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2242": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2243": {
      "error": "check self.trustee entry exists",
      "op": "assert // check self.trustee entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2244": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "2247": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2249": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "2250": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2251": {
      "op": "frame_bury 0",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "2253": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2254": {
      "op": "bz assert_caller_is_trustee_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2257": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2259": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2260": {
      "error": "check self.trustee entry exists",
      "op": "assert // check self.trustee entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "2261": {
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "2264": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "reinterpret_biguint%1#0",
        "tmp%2#0"
      ]
    },
    "2266": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "2267": {
      "op": "bz assert_caller_is_trustee_bool_false@4",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2270": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2271": {
      "op": "b assert_caller_is_trustee_bool_merge@5"
    },
    "2274": {
      "block": "assert_caller_is_trustee_bool_false@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2275": {
      "block": "assert_caller_is_trustee_bool_merge@5",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "2276": {
      "retsub": true,
      "op": "retsub"
    },
    "2277": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info",
      "params": {},
      "block": "get_asset_info",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2280": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2281": {
      "op": "bytec 8 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"denomination_asset_id\""
      ]
    },
    "2283": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2284": {
      "error": "check self.denomination_asset_id exists",
      "op": "assert // check self.denomination_asset_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2285": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2286": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "2287": {
      "op": "bytec_1 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "2288": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2289": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "2290": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "2291": {
      "op": "bytec 4 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "0",
        "\"unit_value\""
      ]
    },
    "2293": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2294": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "2295": {
      "op": "*",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "2296": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2297": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "2298": {
      "op": "bytec 4 // \"unit_value\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"unit_value\""
      ]
    },
    "2300": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2301": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%3#0"
      ]
    },
    "2302": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "2303": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "2304": {
      "op": "bytec 9 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "2306": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2307": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0"
      ]
    },
    "2308": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "2309": {
      "op": "extract 7 1",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0"
      ]
    },
    "2312": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2313": {
      "op": "bytec 18 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "0",
        "\"interest_rate\""
      ]
    },
    "2315": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2316": {
      "error": "check self.interest_rate exists",
      "op": "assert // check self.interest_rate exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "maybe_value%5#0"
      ]
    },
    "2317": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "val_as_bytes%4#0"
      ]
    },
    "2318": {
      "op": "extract 6 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2321": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "2322": {
      "op": "bytec 5 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "0",
        "\"total_units\""
      ]
    },
    "2324": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2325": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%6#0"
      ]
    },
    "2326": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0"
      ]
    },
    "2327": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "0"
      ]
    },
    "2328": {
      "op": "bytec_1 // \"circulating_units\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "2329": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "2330": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "maybe_value%7#0"
      ]
    },
    "2331": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "2332": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0"
      ]
    },
    "2333": {
      "op": "bytec 10 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "2335": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "2336": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%8#0"
      ]
    },
    "2337": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "2338": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0"
      ]
    },
    "2339": {
      "op": "bytec 11 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "2341": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "2342": {
      "error": "check self.primary_distribution_closure_date exists",
      "op": "assert // check self.primary_distribution_closure_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%9#0"
      ]
    },
    "2343": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "2344": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0"
      ]
    },
    "2345": {
      "op": "bytec 12 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "2347": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "2348": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%10#0"
      ]
    },
    "2349": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "2350": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "2351": {
      "op": "bytec 15 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "2353": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "2354": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%11#0"
      ]
    },
    "2355": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "2356": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "2357": {
      "op": "bytec 6 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "\"suspended\""
      ]
    },
    "2359": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "2360": {
      "error": "check self.suspended exists",
      "op": "assert // check self.suspended exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0"
      ]
    },
    "2361": {
      "op": "bytec 26 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%12#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0",
        "0x00"
      ]
    },
    "2363": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0",
        "0x00",
        "0"
      ]
    },
    "2364": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0",
        "maybe_value%12#0"
      ]
    },
    "2366": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0"
      ]
    },
    "2367": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "2368": {
      "op": "bytec 16 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0",
        "\"defaulted\""
      ]
    },
    "2370": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_exists%13#0",
        "maybe_value%13#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "2371": {
      "error": "check self.defaulted exists",
      "op": "assert // check self.defaulted exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "maybe_value%13#0"
      ]
    },
    "2372": {
      "op": "bytec 26 // 0x00",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "maybe_value%13#0",
        "0x00"
      ]
    },
    "2374": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "maybe_value%13#0",
        "0x00",
        "0"
      ]
    },
    "2375": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "maybe_value%13#0"
      ]
    },
    "2377": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "2378": {
      "op": "uncover 12"
    },
    "2380": {
      "op": "uncover 12",
      "stack_out": [
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2382": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2383": {
      "op": "uncover 11",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "2385": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2386": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%0#0"
      ]
    },
    "2388": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2389": {
      "op": "uncover 9",
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0"
      ]
    },
    "2391": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%10#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2392": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%5#0"
      ]
    },
    "2394": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2395": {
      "op": "uncover 7",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%6#0"
      ]
    },
    "2397": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%10#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2398": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%7#0"
      ]
    },
    "2400": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%10#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2401": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%8#0"
      ]
    },
    "2403": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2404": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%9#0"
      ]
    },
    "2406": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2407": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%10#0"
      ]
    },
    "2409": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "2410": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%11#0",
        "encoded_bool%0#0"
      ]
    },
    "2412": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2413": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_bool%1#0"
      ]
    },
    "2414": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "2415": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "is_true%0#0"
      ]
    },
    "2416": {
      "op": "pushint 601 // 601"
    },
    "2419": {
      "op": "swap",
      "defined_out": [
        "601",
        "encoded_tuple_buffer%12#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "601",
        "is_true%0#0"
      ]
    },
    "2420": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%13#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%13#0"
      ]
    },
    "2421": {
      "retsub": true,
      "op": "retsub"
    },
    "2422": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "get_account_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2425": {
      "op": "frame_dig -1",
      "defined_out": [
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "holding_address#0 (copy)"
      ]
    },
    "2427": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_valid_holding_address",
      "op": "callsub assert_valid_holding_address",
      "stack_out": []
    },
    "2430": {
      "op": "bytec_3 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2431": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2433": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2434": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2435": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2436": {
      "retsub": true,
      "op": "retsub"
    },
    "2437": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events",
      "params": {},
      "block": "get_time_events",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2440": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0"
      ]
    },
    "2444": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.status_is_active",
      "op": "callsub status_is_active",
      "defined_out": [
        "time_events#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "time_events#0",
        "tmp%0#0"
      ]
    },
    "2447": {
      "op": "bz get_time_events_after_if_else@2",
      "stack_out": [
        "time_events#0"
      ]
    },
    "2450": {
      "op": "bytec 20 // 0x74696d654576656e7473",
      "defined_out": [
        "0x74696d654576656e7473",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "0x74696d654576656e7473"
      ]
    },
    "2452": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "time_events#0",
        "maybe_exists%0#0"
      ]
    },
    "2453": {
      "op": "swap",
      "stack_out": [
        "time_events#0",
        "maybe_exists%0#0",
        "time_events#0"
      ]
    },
    "2454": {
      "op": "frame_bury 0",
      "stack_out": [
        "time_events#0",
        "maybe_exists%0#0"
      ]
    },
    "2456": {
      "error": "check self.time_events exists",
      "op": "assert // check self.time_events exists",
      "stack_out": [
        "time_events#0"
      ]
    },
    "2457": {
      "block": "get_time_events_after_if_else@2",
      "stack_in": [
        "time_events#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "time_events#0"
      ]
    },
    "2459": {
      "op": "swap"
    },
    "2460": {
      "retsub": true,
      "op": "retsub"
    },
    "2461": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule",
      "params": {},
      "block": "get_secondary_market_schedule",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2464": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2465": {
      "op": "bytec 13 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"secondary_market_opening_date\""
      ]
    },
    "2467": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2468": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2469": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2470": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "2471": {
      "op": "bytec 14 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"secondary_market_closure_date\""
      ]
    },
    "2473": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2474": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "2475": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2476": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "2477": {
      "op": "pushbytes 0x0002",
      "defined_out": [
        "0x0002",
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0",
        "0x0002"
      ]
    },
    "2481": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "result%1#0"
      ]
    },
    "2482": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "2483": {
      "retsub": true,
      "op": "retsub"
    },
    "2484": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata",
      "params": {},
      "block": "get_asset_metadata",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2487": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2488": {
      "op": "bytec 17 // \"metadata\"",
      "defined_out": [
        "\"metadata\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"metadata\""
      ]
    },
    "2490": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2491": {
      "error": "check self.metadata exists",
      "op": "assert // check self.metadata exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2492": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "2493": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length%0#0"
      ]
    },
    "2494": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "as_bytes%0#0"
      ]
    },
    "2495": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "length_uint16%0#0"
      ]
    },
    "2498": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "2499": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2500": {
      "retsub": true,
      "op": "retsub"
    },
    "2501": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2504": {
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "2506": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "2508": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "2509": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "frame_dig 0"
    },
    "2511": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "2513": {
      "op": ">",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "2514": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "2517": {
      "op": "itxn_begin"
    },
    "2518": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "2520": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "2522": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "2524": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "2526": {
      "op": "bytec 28 // 0x068101",
      "defined_out": [
        "0x068101",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "2528": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "2530": {
      "op": "bytec 28 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "2532": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "2534": {
      "op": "frame_dig -1",
      "defined_out": [
        "fee_source#0 (copy)",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "fee_source#0 (copy)"
      ]
    },
    "2536": {
      "op": "switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "2542": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "2545": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "2546": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "2548": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "2551": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "2553": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "2555": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "2556": {
      "op": "b ensure_budget_while_top@1"
    },
    "2559": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    }
  }
}