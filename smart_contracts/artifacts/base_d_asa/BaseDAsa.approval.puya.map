{
  "version": 3,
  "sources": [
    "../../base_d_asa/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCmD;;AAAf;;AAA5B;AAkBA;;AAA6B;AAA7B;AACA;;AAA2B;AAA3B;AACA;;AAAkB;AAAlB;AACA;;AAA4B;AAA5B;AAGA;;AAAgB;;AAAhB;AAGA;;AAAmB;AAAnB;AACA;AAAyB;AAAzB;AAGA;;AAA0B;AAA1B;AAGA;;AAAqB;AAArB;AAIA;;AAAqB;AAArB;AAKA;;AAAyC;AAAzC;AACA;;AAAyC;AAAzC;AACA;;AAAqB;AAArB;AACA;;AAAqC;AAArC;AACA;;AAAqC;AAArC;AACA;AAAqB;AAArB;AAGA;AAAc;AAAd;AACA;;AAAiB;AAAjB;AACA;;AAAiB;AAAjB;AAnER;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAw7BK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AA74BL;;;AA64BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAx1BL;;;AAw1BK;;;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAj0BL;;;AAAA;;;AAi0BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AA/yBL;;;AA+yBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AArwBL;;;AAAA;;;AAqwBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAvuBL;;;AAuuBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;AApsBL;;;AAAA;;;AAosBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AAppBL;;;AAAA;;;AAopBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/DA;;AAAA;AAAA;AAAA;;AAAA;AArlBL;;;AAAA;;;AAAA;;;AAqlBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxDA;;AAAA;AAAA;AAAA;;AAAA;AA7hBL;;;AA6hBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AArFA;;AAAA;AAAA;AAAA;;AAAA;AAxcL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAwcK;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AA7bL;;;AA6bK;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAjbL;;;AAAA;;;AAibK;;;AAAA;;AA7Vc;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AAIW;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AAIO;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;;AAER;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;;;;;;AA2BR;;;;AAIsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;;;;;;AAwFR;;;;;;AAGY;;AAAA;;;AAAA;;;;AAAA;AACE;;AADF;AADJ;AAIiB;;AAAA;AAAA;AAAqB;AAArB;AAAP;AAAA;;AAAA;;AAAA;AAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKqB;;AAAA;AAAA;AAAA;AAAT;;AAAA;AAAA;;AAAA;AAAS;AAAT;AAAA;;AAAA;;AAC0B;AAAL;AAAA;AAAA;;AAAZ;AAAA;AAAA;AAAT;AAAA;;AACO;AAAP;AACG;AAAA;;AAAA;AAAA;AAA6B;;;AAA7B;AAAf;;;AAEwB;;AAAA;;AAAA;AAAmB;;;;AAApB;AAAA;AAAP;;;;;;;;;AA0MhB;;;AASQ;;AAAA;;AAAA;AACA;;AAAA;;AAAA;;AAER;;;AAQQ;;;AACA;;AAAA;;AAAA;;AAER;;;;;;;;AA2CQ;;;AACO;AAAA;AAAA;AAAA;AAAA;AAAP;AAG+B;;AAAA;AAAA;AA/V3B;;;AAAuC;;AAAA;;AAAA;AAAA;;AAAA;AAAvC;;;;AADJ;AAMA;;AAAA;;AAAA;AAAA;;AAAA;AA8V6B;;AAAA;AAxVzB;AAAA;;AAAA;AADJ;AAMA;;AAAA;;AAAA;AAEA;AAIQ;;AAFW;;AACF;;;;;;;;AAHjB;;;;;AAAA;AAsVI;;AAAA;AAAmB;;AAAA;AAAnB;AAAA;AAAA;AADJ;AAGA;;AAAA;;AAAA;AACmB;AAAnB;;AAAA;AAAA;AAC0B;;AAAA;AAA1B;;AAAA;AAAA;AAGiC;;AAAA;AAAA;AAAA;;AAnV1B;;;AAAA;;AAEH;;;AAFG;AAAA;;;;AAAP;AAOA;;AAAA;;AAAA;AAgV0B;;AAAA;AAAA;;AA3UnB;AAAA;;AAAA;AAAA;AAAf;;;AACY;;AAAA;AAIJ;;AAAA;;AAAA;AAIW;;AAAA;AAAA;AAAJ;AAAA;AAAP;AAIA;;AAAA;;AAAA;AACR;;;AACY;;AAAA;;AAAA;;AAAA;;AAAA;AAKA;;AAAA;AAAA;AAAsB;AAAA;;AAAA;AAAA;AAAqB;AAArB;AAAtB;AADJ;AAiUA;;AAAA;;;AAAA;;AAvSA;;AAAA;;AAAA;;AAAA;;AAAA;AACyC;;AAAA;;;AAAA;;AAAA;;;;AAAA;AAAzC;;AAAA;AAAA;AAGyC;;;;AAAA;AAAzC;;AAAA;AAAA;AAGqB;;;;AAAA;AAArB;;AAAA;AAAA;AAGG;;AAAA;AAAA;AAAA;AAAA;;AAAsB;AAAA;;AAAA;AAAA;AAAqB;AAArB;AAAtB;AAAX;;;AACiC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAArB;AAAA;AAAA;AAIO;;AAAA;AAAA;AAAJ;AAAP;AA+RA;AAAc;;AAAd;;;;;;;;;;AAER;;;;AAqBQ;;;AAleO;AAAA;AAAA;AAAA;AAAe;;AAAf;AAmeA;AAAP;AACA;;;AAEO;;AAAA;AAAA;AAAP;AAAA;AACyC;AAAtC;;;;AAAX;;;AACY;;AAAA;;;;AAAA;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AACG;;AAAA;;;AAAA;;AAAA;;;;AAAA;AADH;AAAA;;AAAA;AADJ;AAMA;;AAAA;AAAA;AAGG;AAAA;AAAA;AAAA;AAAX;;;AAEgB;AAAA;AAAA;AAAA;AAEI;;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AADH;AAAA;;AAAA;AADJ;AAMA;;AAAA;AAAA;AAKI;AAAA;;AAAA;AAAA;AAD0B;AAI1B;AAAA;;AAAA;AAAA;AAD0B;AAJ3B;AAAP;;AAAA;AASR;;;AAqBQ;;;AACA;;;AACO;;AAAA;AAAA;AACH;;AADG;AAAA;;;AAAA;;AAEH;;AAFG;AAAA;;;AAAA;;AAGH;;AAHG;AAAA;;;AAAA;;AAIH;;AAJG;AAAA;;;AAAA;;AAKH;;AALG;AAAA;;;AAAA;;AAMH;;AANG;AAAA;;;;AAAP;AASS;;;;;;;;AADT;;AAAA;;;;;;;;;;;;;;AA6BQ;AANwB;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAGqC;;AACjC;;;AADJ;AAKW;;AAAZ;AAAP;AAAA;AAXmC;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAC+B;;AAA0B;;;AAAzD;;;;AAJ2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAC6B;;AAA0B;;;AAAvD;;;;AAN2B;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACoC;;AAChC;;;AADJ;;;;AAPwB;;AAApB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAGqC;;AACjC;;;AADJ;;;;AALA;;AAAA;;AAAA;;;;;;;;AA8BhB;;;AAkBQ;;;AACA;;;AACO;;AAAA;AAAA;AACH;;AADG;AAAA;;;AAAA;;AAEH;;AAFG;AAAA;;;AAAA;;AAGH;;AAHG;AAAA;;;AAAA;;AAIH;;AAJG;AAAA;;;AAAA;;AAKH;;AALG;AAAA;;;;AAAP;AASS;;;;;;;AAFT;;AAAA;;;;;;;;;;;;AAkBQ;AAHuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;AAGW;;AAAZ;AAAP;AAAA;AAP+B;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAJuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAJuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;AAJuB;;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACA;;;;;;;;;AAiBhB;;;AAoBQ;;;AAxoBO;AAAA;AAAA;AAAA;AAAe;;AAAf;AAyoBA;AAAP;AACA;;;AACA;;;AAC8B;;AAAvB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEgC;;AAEtB;;AAFsB;AAGjB;;AAHiB;AAIf;;AAJe;AAKlB;;;AALkB;AAAhC;AAOmB;;AAAZ;AAAP;AAER;;;AAkBQ;;;AACA;;;AAxmB0B;;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AA2mBe;AAAA;AAAA;AAAA;;AAAA;AAAf;AAAA;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA7aR;;;AACY;AAAc;;AAAd;AA+aC;;AAAA;AAAuC;;AAAZ;AADzB;AAAP;AAAA;AAIR;;;;;;;AAzrBe;AAAA;AAAA;AAAA;AAAe;;AAAf;AAyLH;;;AACI;AAAA;;AAAA;AAAA;AACD;;AAAA;AAAA;;AADC;AAAA;;;AAEF;AAAA;;AAAA;AAAA;AADC;;AAAA;AADC;;;;AAFR;AAxJc;;AAFQ;;AAElB;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;AAuC0B;;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AA+oBA;;;AACA;;;AACO;;AAAA;AAAP;AAAA;AAEI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAyC;AAAA;;AAAA;AAAA;AAAzC;;AAAA;AADJ;AAIA;AAAA;;AAAA;AAEI;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AADkC;AAAtC;;AAGuD;AAAA;;AAAA;AAAA;AAAZ;AAA3C;;AAAA;;AAAA;AAAA;AACmB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAP;;AAAA;;;;;;;;;AAER;;;AAcQ;;;AACwB;;;AAAA;AAAxB;;AAAA;AAAA;AACmB;;AAAZ;AAAP;AAER;;;AAkBQ;;;AAjsB0B;;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAmsBA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACmB;;AAAZ;AAAP;AAER;;;;AAluBsB;;AAFQ;;AAElB;AAAA;AAAA;AAAA;;AAAA;;;AACI;;AAAA;AAAA;AAAA;;;AACD;;AADC;AAAA;AAAA;;AAAA;AAAA;;;AAED;;AAAA;AAAA;AAAA;;;AADA;;AAAA;AADC;;;;AAFR;AA+uBwB;;;AAAA;AAAxB;;AAAA;AAAA;;;;;;AAER;;;AAUsB;AAAd;AACG;;AAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA1B;AAAA;;;;;;;AAAA;;AAAA;;;AACe;;;;;;;AAEf;AAAA;;AAAA;AAAA;AAAX;;;AAC0B;;AAAd;;AAGkC;AAAA;;AAAA;AAAA;AAAZ;AACU;AAAA;;AAAA;AAAA;AAAZ;AAjkBjB;AAAA;AAAA;AAAA;AAAyB;AAAA;;AAAA;AAAA;AAAzB;AAAA;AAkkBmB;AACX;AAAA;AACqB;AAAA;;AAAA;AAAA;AAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACU;AAAA;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AACO;AAAA;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AACW;AAAA;;AAAA;AAAA;AAAZ;AACM;;AAAA;AAEf;AAAA;;AAAA;AAAA;AAD8B;AAI9B;AAAA;;AAAA;AAAA;AAD8B;AAGR;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;AAAA;AAAA;AAAZ;AACW;AAAA;;AAAA;AAAA;AAAf;;;AAAA;AAAA;;AAAA;AACE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAnBT;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;;AAAA;AAsBR;;;AA3vBkC;;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AA0wBO;AAAA;AAAP;AAER;;;AAQsB;;;;AA11BP;AAAA;AAAA;AAAA;AAAe;;AAAf;AA21Bf;;;AAC0B;;AAAA;AAAA;AAAA;;AAAA;AAClB;;AAAA;AAAA;AAWgB;AAAA;;AAAA;AAAA;AAAZ;AACY;AAAA;;AAAA;AAAA;AAAZ;AAFG;AAAA;;;;AAAA;AAAA;AAAP;AAcoC;AAAA;;AAAA;AAAA;AAApC",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 4 200"
    },
    "9": {
      "op": "bytecblock 0x151f7c75 \"status\" \"circulating_units\" \"maturity_date\" \"total_units\" 0x52333023 0x52323023 \"unit_value\" \"day_count_convention\" \"metadata\" \"principal_discount\" \"total_coupons\" \"primary_distribution_opening_date\" \"primary_distribution_closure_date\" \"issuance_date\" \"secondary_market_opening_date\" \"secondary_market_closure_date\" \"suspended\" \"defaulted\" \"denomination_asset_id\" \"settlement_asset_id\" \"interest_rate\" 0x52343023 0x52373023 0x74696d654576656e7473 0x52363023 0x52353023 0x0000000000000000 0x068101 0x636f75706f6e5261746573 0x52383023"
    },
    "430": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "432": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "435": {
      "op": "bytec 6 // 0x52323023",
      "defined_out": [
        "0x52323023"
      ],
      "stack_out": [
        "0x52323023"
      ]
    },
    "437": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x52323023",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "0x52323023",
        "materialized_values%0#0"
      ]
    },
    "439": {
      "op": "app_global_put",
      "stack_out": []
    },
    "440": {
      "op": "bytec 19 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\""
      ],
      "stack_out": [
        "\"denomination_asset_id\""
      ]
    },
    "442": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0"
      ],
      "stack_out": [
        "\"denomination_asset_id\"",
        "0"
      ]
    },
    "443": {
      "op": "app_global_put",
      "stack_out": []
    },
    "444": {
      "op": "bytec 20 // \"settlement_asset_id\"",
      "defined_out": [
        "\"settlement_asset_id\""
      ],
      "stack_out": [
        "\"settlement_asset_id\""
      ]
    },
    "446": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"settlement_asset_id\"",
        "0"
      ]
    },
    "447": {
      "op": "app_global_put",
      "stack_out": []
    },
    "448": {
      "op": "bytec 7 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\""
      ],
      "stack_out": [
        "\"unit_value\""
      ]
    },
    "450": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"unit_value\"",
        "0"
      ]
    },
    "451": {
      "op": "app_global_put",
      "stack_out": []
    },
    "452": {
      "op": "bytec 8 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\""
      ],
      "stack_out": [
        "\"day_count_convention\""
      ]
    },
    "454": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"day_count_convention\"",
        "0"
      ]
    },
    "455": {
      "op": "app_global_put",
      "stack_out": []
    },
    "456": {
      "op": "bytec 9 // \"metadata\"",
      "defined_out": [
        "\"metadata\""
      ],
      "stack_out": [
        "\"metadata\""
      ]
    },
    "458": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"metadata\"",
        "0x"
      ],
      "stack_out": [
        "\"metadata\"",
        "0x"
      ]
    },
    "460": {
      "op": "app_global_put",
      "stack_out": []
    },
    "461": {
      "op": "bytec 4 // \"total_units\"",
      "defined_out": [
        "\"total_units\""
      ],
      "stack_out": [
        "\"total_units\""
      ]
    },
    "463": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_units\"",
        "0"
      ]
    },
    "464": {
      "op": "app_global_put",
      "stack_out": []
    },
    "465": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\""
      ],
      "stack_out": [
        "\"circulating_units\""
      ]
    },
    "466": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_units\"",
        "0"
      ]
    },
    "467": {
      "op": "app_global_put",
      "stack_out": []
    },
    "468": {
      "op": "bytec 10 // \"principal_discount\"",
      "defined_out": [
        "\"principal_discount\""
      ],
      "stack_out": [
        "\"principal_discount\""
      ]
    },
    "470": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"principal_discount\"",
        "0"
      ]
    },
    "471": {
      "op": "app_global_put",
      "stack_out": []
    },
    "472": {
      "op": "bytec 21 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\""
      ],
      "stack_out": [
        "\"interest_rate\""
      ]
    },
    "474": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"interest_rate\"",
        "0"
      ]
    },
    "475": {
      "op": "app_global_put",
      "stack_out": []
    },
    "476": {
      "op": "bytec 11 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\""
      ],
      "stack_out": [
        "\"total_coupons\""
      ]
    },
    "478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_coupons\"",
        "0"
      ]
    },
    "479": {
      "op": "app_global_put",
      "stack_out": []
    },
    "480": {
      "op": "bytec 12 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\""
      ],
      "stack_out": [
        "\"primary_distribution_opening_date\""
      ]
    },
    "482": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"primary_distribution_opening_date\"",
        "0"
      ]
    },
    "483": {
      "op": "app_global_put",
      "stack_out": []
    },
    "484": {
      "op": "bytec 13 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\""
      ],
      "stack_out": [
        "\"primary_distribution_closure_date\""
      ]
    },
    "486": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"primary_distribution_closure_date\"",
        "0"
      ]
    },
    "487": {
      "op": "app_global_put",
      "stack_out": []
    },
    "488": {
      "op": "bytec 14 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\""
      ],
      "stack_out": [
        "\"issuance_date\""
      ]
    },
    "490": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"issuance_date\"",
        "0"
      ]
    },
    "491": {
      "op": "app_global_put",
      "stack_out": []
    },
    "492": {
      "op": "bytec 15 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\""
      ],
      "stack_out": [
        "\"secondary_market_opening_date\""
      ]
    },
    "494": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ]
    },
    "495": {
      "op": "app_global_put",
      "stack_out": []
    },
    "496": {
      "op": "bytec 16 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\""
      ],
      "stack_out": [
        "\"secondary_market_closure_date\""
      ]
    },
    "498": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"secondary_market_closure_date\"",
        "0"
      ]
    },
    "499": {
      "op": "app_global_put",
      "stack_out": []
    },
    "500": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\""
      ],
      "stack_out": [
        "\"maturity_date\""
      ]
    },
    "501": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"maturity_date\"",
        "0"
      ]
    },
    "502": {
      "op": "app_global_put",
      "stack_out": []
    },
    "503": {
      "op": "bytec_1 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "\"status\""
      ]
    },
    "504": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"status\"",
        "0"
      ]
    },
    "505": {
      "op": "app_global_put",
      "stack_out": []
    },
    "506": {
      "op": "bytec 17 // \"suspended\"",
      "defined_out": [
        "\"suspended\""
      ],
      "stack_out": [
        "\"suspended\""
      ]
    },
    "508": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"suspended\"",
        "0"
      ]
    },
    "509": {
      "op": "app_global_put",
      "stack_out": []
    },
    "510": {
      "op": "bytec 18 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\""
      ],
      "stack_out": [
        "\"defaulted\""
      ]
    },
    "512": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"defaulted\"",
        "0"
      ]
    },
    "513": {
      "op": "app_global_put",
      "stack_out": []
    },
    "514": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "516": {
      "op": "bz main_after_if_else@22",
      "stack_out": []
    },
    "519": {
      "op": "pushbytess 0x3f0efc6c 0x25dba95b 0x89474134 0x1d6fc255 0xfef74567 0xb8fc1390 0x3d43d1f0 0xebd96b2f 0x6c85e3ee 0xf63ace8d 0xbbcca18a 0x1a7babb4 0x402dba47 0xed02759f 0xfad2173e 0x08efea35 0xe4a5ab54 // method \"asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void\", method \"asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void\", method \"asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void\", method \"set_secondary_time_events(uint64[])(uint64,uint64)\", method \"assign_role(address,uint8,byte[])uint64\", method \"revoke_role(address,uint8)uint64\", method \"open_account(address,address)uint64\", method \"close_account(address)(uint64,uint64)\", method \"primary_distribution(address,uint64)uint64\", method \"set_asset_suspension(bool)uint64\", method \"set_account_suspension(address,bool)uint64\", method \"set_default_status(bool)void\", method \"get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8)\", method \"get_account_info(address)(address,uint64,uint64,uint64,bool)\", method \"get_time_events()uint64[]\", method \"get_secondary_market_schedule()uint64[]\", method \"get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string)\"",
      "defined_out": [
        "Method(asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void)",
        "Method(asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void)",
        "Method(asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void)",
        "Method(assign_role(address,uint8,byte[])uint64)",
        "Method(close_account(address)(uint64,uint64))",
        "Method(get_account_info(address)(address,uint64,uint64,uint64,bool))",
        "Method(get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8))",
        "Method(get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))",
        "Method(get_secondary_market_schedule()uint64[])",
        "Method(get_time_events()uint64[])",
        "Method(open_account(address,address)uint64)",
        "Method(primary_distribution(address,uint64)uint64)",
        "Method(revoke_role(address,uint8)uint64)",
        "Method(set_account_suspension(address,bool)uint64)",
        "Method(set_asset_suspension(bool)uint64)",
        "Method(set_default_status(bool)void)",
        "Method(set_secondary_time_events(uint64[])(uint64,uint64))"
      ],
      "stack_out": [
        "Method(asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void)",
        "Method(asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void)",
        "Method(asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void)",
        "Method(set_secondary_time_events(uint64[])(uint64,uint64))",
        "Method(assign_role(address,uint8,byte[])uint64)",
        "Method(revoke_role(address,uint8)uint64)",
        "Method(open_account(address,address)uint64)",
        "Method(close_account(address)(uint64,uint64))",
        "Method(primary_distribution(address,uint64)uint64)",
        "Method(set_asset_suspension(bool)uint64)",
        "Method(set_account_suspension(address,bool)uint64)",
        "Method(set_default_status(bool)void)",
        "Method(get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8))",
        "Method(get_account_info(address)(address,uint64,uint64,uint64,bool))",
        "Method(get_time_events()uint64[])",
        "Method(get_secondary_market_schedule()uint64[])",
        "Method(get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))"
      ]
    },
    "606": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void)",
        "Method(asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void)",
        "Method(asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void)",
        "Method(assign_role(address,uint8,byte[])uint64)",
        "Method(close_account(address)(uint64,uint64))",
        "Method(get_account_info(address)(address,uint64,uint64,uint64,bool))",
        "Method(get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8))",
        "Method(get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))",
        "Method(get_secondary_market_schedule()uint64[])",
        "Method(get_time_events()uint64[])",
        "Method(open_account(address,address)uint64)",
        "Method(primary_distribution(address,uint64)uint64)",
        "Method(revoke_role(address,uint8)uint64)",
        "Method(set_account_suspension(address,bool)uint64)",
        "Method(set_asset_suspension(bool)uint64)",
        "Method(set_default_status(bool)void)",
        "Method(set_secondary_time_events(uint64[])(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(asset_create(address,(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void)",
        "Method(asset_update((uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))void)",
        "Method(asset_config(uint64,uint64,uint64,uint64,uint64,uint8,uint16,uint16[],uint64[],(uint64,uint64)[])void)",
        "Method(set_secondary_time_events(uint64[])(uint64,uint64))",
        "Method(assign_role(address,uint8,byte[])uint64)",
        "Method(revoke_role(address,uint8)uint64)",
        "Method(open_account(address,address)uint64)",
        "Method(close_account(address)(uint64,uint64))",
        "Method(primary_distribution(address,uint64)uint64)",
        "Method(set_asset_suspension(bool)uint64)",
        "Method(set_account_suspension(address,bool)uint64)",
        "Method(set_default_status(bool)void)",
        "Method(get_asset_info()(uint64,uint64,uint64,uint64,uint8,uint16,uint16,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint8))",
        "Method(get_account_info(address)(address,uint64,uint64,uint64,bool))",
        "Method(get_time_events()uint64[])",
        "Method(get_secondary_market_schedule()uint64[])",
        "Method(get_asset_metadata()(uint8,uint8,uint8,uint8,uint8,uint8,byte[32],string))",
        "tmp%2#0"
      ]
    },
    "609": {
      "op": "match main_asset_create_route@5 main_asset_update_route@6 main_asset_config_route@7 main_set_secondary_time_events_route@8 main_assign_role_route@9 main_revoke_role_route@10 main_open_account_route@11 main_close_account_route@12 main_primary_distribution_route@13 main_set_asset_suspension_route@14 main_set_account_suspension_route@15 main_set_default_status_route@16 main_get_asset_info_route@17 main_get_account_info_route@18 main_get_time_events_route@19 main_get_secondary_market_schedule_route@20 main_get_asset_metadata_route@21",
      "stack_out": []
    },
    "645": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "646": {
      "op": "return",
      "stack_out": []
    },
    "647": {
      "block": "main_get_asset_metadata_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "649": {
      "op": "!",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "650": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "651": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "653": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "654": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata",
      "op": "callsub get_asset_metadata",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "657": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0",
        "0x151f7c75"
      ]
    },
    "658": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%102#0"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "660": {
      "op": "log",
      "stack_out": []
    },
    "661": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "662": {
      "op": "return",
      "stack_out": []
    },
    "663": {
      "block": "main_get_secondary_market_schedule_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "665": {
      "op": "!",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "666": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "667": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "669": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "670": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule",
      "op": "callsub get_secondary_market_schedule",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "673": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0",
        "0x151f7c75"
      ]
    },
    "674": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%96#0"
      ]
    },
    "675": {
      "op": "concat",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "676": {
      "op": "log",
      "stack_out": []
    },
    "677": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "678": {
      "op": "return",
      "stack_out": []
    },
    "679": {
      "block": "main_get_time_events_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "681": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "682": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "683": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "685": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "686": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events",
      "op": "callsub get_time_events",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "689": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0",
        "0x151f7c75"
      ]
    },
    "690": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%90#0"
      ]
    },
    "691": {
      "op": "concat",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "692": {
      "op": "log",
      "stack_out": []
    },
    "693": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "694": {
      "op": "return",
      "stack_out": []
    },
    "695": {
      "block": "main_get_account_info_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "697": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "698": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "699": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "701": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "702": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0"
      ]
    },
    "705": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info",
      "op": "callsub get_account_info",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "708": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "0x151f7c75"
      ]
    },
    "709": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%84#0"
      ]
    },
    "710": {
      "op": "concat",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "711": {
      "op": "log",
      "stack_out": []
    },
    "712": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "713": {
      "op": "return",
      "stack_out": []
    },
    "714": {
      "block": "main_get_asset_info_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "716": {
      "op": "!",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "717": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "718": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "720": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "721": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info",
      "op": "callsub get_asset_info",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "724": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0",
        "0x151f7c75"
      ]
    },
    "725": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%78#0"
      ]
    },
    "726": {
      "op": "concat",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "727": {
      "op": "log",
      "stack_out": []
    },
    "728": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "729": {
      "op": "return",
      "stack_out": []
    },
    "730": {
      "block": "main_set_default_status_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "732": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "733": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "734": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "736": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "737": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "740": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status",
      "op": "callsub set_default_status",
      "stack_out": []
    },
    "743": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "744": {
      "op": "return",
      "stack_out": []
    },
    "745": {
      "block": "main_set_account_suspension_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "747": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "748": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "749": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "751": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "752": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "755": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%4#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "758": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension",
      "op": "callsub set_account_suspension",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "761": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "0x151f7c75"
      ]
    },
    "762": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%68#0"
      ]
    },
    "763": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "764": {
      "op": "log",
      "stack_out": []
    },
    "765": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "766": {
      "op": "return",
      "stack_out": []
    },
    "767": {
      "block": "main_set_asset_suspension_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "769": {
      "op": "!",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "770": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "771": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "773": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "774": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "777": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension",
      "op": "callsub set_asset_suspension",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "780": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "0x151f7c75"
      ]
    },
    "781": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%62#0"
      ]
    },
    "782": {
      "op": "concat",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "783": {
      "op": "log",
      "stack_out": []
    },
    "784": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "785": {
      "op": "return",
      "stack_out": []
    },
    "786": {
      "block": "main_primary_distribution_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "788": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "789": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "790": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "792": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "793": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "796": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "799": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution",
      "op": "callsub primary_distribution",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "802": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "0x151f7c75"
      ]
    },
    "803": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%56#0"
      ]
    },
    "804": {
      "op": "concat",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "805": {
      "op": "log",
      "stack_out": []
    },
    "806": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "807": {
      "op": "return",
      "stack_out": []
    },
    "808": {
      "block": "main_close_account_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "810": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "811": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "812": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "814": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "815": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "818": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.close_account",
      "op": "callsub close_account",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "821": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "0x151f7c75"
      ]
    },
    "822": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%50#0"
      ]
    },
    "823": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "824": {
      "op": "log",
      "stack_out": []
    },
    "825": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "826": {
      "op": "return",
      "stack_out": []
    },
    "827": {
      "block": "main_open_account_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "829": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "830": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "831": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "833": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "834": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "837": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "840": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.open_account",
      "op": "callsub open_account",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "843": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "0x151f7c75"
      ]
    },
    "844": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%44#0"
      ]
    },
    "845": {
      "op": "concat",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "846": {
      "op": "log",
      "stack_out": []
    },
    "847": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "848": {
      "op": "return",
      "stack_out": []
    },
    "849": {
      "block": "main_revoke_role_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "851": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "852": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "853": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "855": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "856": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "859": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "862": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role",
      "op": "callsub revoke_role",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "865": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "0x151f7c75"
      ]
    },
    "866": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%38#0"
      ]
    },
    "867": {
      "op": "concat",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "868": {
      "op": "log",
      "stack_out": []
    },
    "869": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "870": {
      "op": "return",
      "stack_out": []
    },
    "871": {
      "block": "main_assign_role_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "873": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "874": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "875": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "877": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "878": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "881": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "884": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%31#0"
      ]
    },
    "887": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assign_role",
      "op": "callsub assign_role",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "890": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "0x151f7c75"
      ]
    },
    "891": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%32#0"
      ]
    },
    "892": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "893": {
      "op": "log",
      "stack_out": []
    },
    "894": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "895": {
      "op": "return",
      "stack_out": []
    },
    "896": {
      "block": "main_set_secondary_time_events_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "898": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "899": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "900": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "902": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "903": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "906": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events",
      "op": "callsub set_secondary_time_events",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "909": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "910": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "911": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "912": {
      "op": "log",
      "stack_out": []
    },
    "913": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "914": {
      "op": "return",
      "stack_out": []
    },
    "915": {
      "block": "main_asset_config_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "917": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "918": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "919": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "921": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "922": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "925": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "928": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "931": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "934": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "937": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "940": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0"
      ]
    },
    "943": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0",
        "tmp%17#0"
      ]
    },
    "946": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "949": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[2]%0#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "952": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_config",
      "op": "callsub asset_config",
      "stack_out": []
    },
    "955": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "956": {
      "op": "return",
      "stack_out": []
    },
    "957": {
      "block": "main_asset_update_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "959": {
      "op": "intc_3 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "UpdateApplication"
      ]
    },
    "960": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "961": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "962": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "964": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "965": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "968": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_update",
      "op": "callsub asset_update",
      "stack_out": []
    },
    "971": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "972": {
      "op": "return",
      "stack_out": []
    },
    "973": {
      "block": "main_asset_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "975": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "976": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "977": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "979": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "980": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "981": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "984": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%7#0"
      ]
    },
    "987": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_create",
      "op": "callsub asset_create",
      "stack_out": []
    },
    "990": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "991": {
      "op": "return",
      "stack_out": []
    },
    "992": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "params": {},
      "block": "assert_is_not_defaulted",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "993": {
      "op": "bytec 18 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"defaulted\""
      ]
    },
    "995": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "996": {
      "error": "check self.defaulted exists",
      "op": "assert // check self.defaulted exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "997": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "998": {
      "error": "Defaulted",
      "op": "assert // Defaulted",
      "stack_out": []
    },
    "999": {
      "retsub": true,
      "op": "retsub"
    },
    "1000": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "params": {},
      "block": "assert_is_not_suspended",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1001": {
      "op": "bytec 17 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"suspended\""
      ]
    },
    "1003": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1004": {
      "error": "check self.suspended exists",
      "op": "assert // check self.suspended exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1005": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1006": {
      "error": "Suspended operations",
      "op": "assert // Suspended operations",
      "stack_out": []
    },
    "1007": {
      "retsub": true,
      "op": "retsub"
    },
    "1008": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "params": {},
      "block": "assert_caller_is_arranger",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1010": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1011": {
      "op": "bytec 6 // 0x52323023",
      "defined_out": [
        "0",
        "0x52323023",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x52323023"
      ]
    },
    "1013": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1014": {
      "error": "check self.arranger exists",
      "op": "assert // check self.arranger exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1015": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1016": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "1017": {
      "retsub": true,
      "op": "retsub"
    },
    "1018": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "params": {},
      "block": "assert_caller_is_account_manager",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1021": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1022": {
      "op": "bytec 22 // 0x52343023",
      "defined_out": [
        "0x52343023"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x52343023"
      ]
    },
    "1024": {
      "op": "txn Sender",
      "defined_out": [
        "0x52343023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x52343023",
        "caller#0"
      ]
    },
    "1026": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1027": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1028": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1029": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1031": {
      "op": "bz assert_caller_is_account_manager_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1034": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1036": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1037": {
      "error": "check self.account_manager entry exists",
      "op": "assert // check self.account_manager entry exists",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%0#0"
      ]
    },
    "1038": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "1041": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1043": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "1044": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1045": {
      "op": "frame_bury 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "1047": {
      "op": "b<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ]
    },
    "1048": {
      "op": "bz assert_caller_is_account_manager_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1051": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1053": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1054": {
      "error": "check self.account_manager entry exists",
      "op": "assert // check self.account_manager entry exists",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%1#0"
      ]
    },
    "1055": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "1058": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%1#0",
        "tmp%0#0"
      ]
    },
    "1060": {
      "op": "b>=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ]
    },
    "1061": {
      "op": "bz assert_caller_is_account_manager_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1064": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ]
    },
    "1065": {
      "block": "assert_caller_is_account_manager_bool_merge@5",
      "stack_in": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1066": {
      "retsub": true,
      "op": "retsub"
    },
    "1067": {
      "block": "assert_caller_is_account_manager_bool_false@4",
      "stack_in": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ]
    },
    "1068": {
      "op": "b assert_caller_is_account_manager_bool_merge@5"
    },
    "1071": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "params": {},
      "block": "assert_caller_is_authority",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1074": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1075": {
      "op": "bytec 23 // 0x52373023",
      "defined_out": [
        "0x52373023"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x52373023"
      ]
    },
    "1077": {
      "op": "txn Sender",
      "defined_out": [
        "0x52373023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x52373023",
        "caller#0"
      ]
    },
    "1079": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1080": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1081": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1082": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1084": {
      "op": "bz assert_caller_is_authority_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1087": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1089": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1090": {
      "error": "check self.authority entry exists",
      "op": "assert // check self.authority entry exists",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%0#0"
      ]
    },
    "1091": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "1094": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1096": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "1097": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1098": {
      "op": "frame_bury 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "1100": {
      "op": "b<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ]
    },
    "1101": {
      "op": "bz assert_caller_is_authority_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1104": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1106": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1107": {
      "error": "check self.authority entry exists",
      "op": "assert // check self.authority entry exists",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%1#0"
      ]
    },
    "1108": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "1111": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%1#0",
        "tmp%0#0"
      ]
    },
    "1113": {
      "op": "b>=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ]
    },
    "1114": {
      "op": "bz assert_caller_is_authority_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1117": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ]
    },
    "1118": {
      "block": "assert_caller_is_authority_bool_merge@5",
      "stack_in": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1119": {
      "retsub": true,
      "op": "retsub"
    },
    "1120": {
      "block": "assert_caller_is_authority_bool_false@4",
      "stack_in": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ]
    },
    "1121": {
      "op": "b assert_caller_is_authority_bool_merge@5"
    },
    "1124": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "params": {
        "time_events#0": "bytes"
      },
      "block": "assert_time_events_sorted",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1127": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "time_f#0"
      ]
    },
    "1129": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0"
      ]
    },
    "1130": {
      "op": "frame_dig -1",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "time_events#0 (copy)"
      ]
    },
    "1132": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1135": {
      "op": "frame_dig -1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ]
    },
    "1137": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)",
        "2"
      ]
    },
    "1139": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ]
    },
    "1140": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1142": {
      "op": ">",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%3#0"
      ]
    },
    "1143": {
      "error": "Time events must be set in the future",
      "op": "assert // Time events must be set in the future",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1144": {
      "op": "frame_dig -1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ]
    },
    "1146": {
      "op": "intc_0 // 0",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "1147": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ]
    },
    "1148": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%4#0",
        "1"
      ]
    },
    "1149": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ]
    },
    "1150": {
      "op": "intc_0 // 0",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "1151": {
      "block": "assert_time_events_sorted_for_header@1",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "_t#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0"
      ]
    },
    "1153": {
      "op": "frame_dig 3",
      "defined_out": [
        "_t#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "tmp%5#0"
      ]
    },
    "1155": {
      "op": "<",
      "defined_out": [
        "_t#0",
        "continue_looping%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "continue_looping%0#0"
      ]
    },
    "1156": {
      "op": "bz assert_time_events_sorted_after_for@6",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "1159": {
      "block": "assert_time_events_sorted_while_top@8",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ],
      "op": "pushint 75 // 75",
      "defined_out": [
        "75"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "75"
      ]
    },
    "1161": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "75",
        "tmp%0#1"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "75",
        "tmp%0#1"
      ]
    },
    "1163": {
      "op": ">",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "tmp%1#1"
      ]
    },
    "1164": {
      "op": "bz assert_time_events_sorted_after_while@13",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "1167": {
      "op": "itxn_begin"
    },
    "1168": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "appl"
      ]
    },
    "1170": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "1172": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "DeleteApplication"
      ]
    },
    "1174": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "1176": {
      "op": "bytec 28 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "0x068101"
      ]
    },
    "1178": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "1180": {
      "op": "bytec 28 // 0x068101",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "0x068101"
      ]
    },
    "1182": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "1184": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "tmp%2#0"
      ]
    },
    "1186": {
      "op": "itxn_field Fee",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "1188": {
      "op": "itxn_submit"
    },
    "1189": {
      "op": "b assert_time_events_sorted_while_top@8"
    },
    "1192": {
      "block": "assert_time_events_sorted_after_while@13",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "_t#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0"
      ]
    },
    "1194": {
      "op": "dup",
      "defined_out": [
        "_t#0",
        "_t#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "_t#0 (copy)"
      ]
    },
    "1195": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "_t#0",
        "_t#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "_t#0 (copy)",
        "8"
      ]
    },
    "1196": {
      "op": "*",
      "defined_out": [
        "_t#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "item_offset%1#0"
      ]
    },
    "1197": {
      "op": "frame_dig 2",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "item_offset%1#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1199": {
      "op": "dup",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%1#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "_t#0",
        "item_offset%1#0",
        "array_head_and_tail%0#0 (copy)",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1200": {
      "op": "cover 3",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "item_offset%1#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1202": {
      "op": "swap",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%1#0"
      ]
    },
    "1203": {
      "op": "extract_uint64",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "time_i#0"
      ]
    },
    "1204": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "time_i#0",
        "time_i#0 (copy)"
      ]
    },
    "1205": {
      "op": "cover 3",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "time_i#0"
      ]
    },
    "1207": {
      "op": "frame_bury 1",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "1209": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "_t#0",
        "array_head_and_tail%0#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "1"
      ]
    },
    "1210": {
      "op": "+",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "1211": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "_t#0"
      ]
    },
    "1212": {
      "op": "frame_bury 4",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0"
      ]
    },
    "1214": {
      "op": "intc_2 // 8",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "_t#0",
        "8"
      ]
    },
    "1215": {
      "op": "*",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "item_offset%2#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "item_offset%2#0"
      ]
    },
    "1216": {
      "op": "extract_uint64",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "time_f#0"
      ]
    },
    "1217": {
      "op": "dup",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "time_f#0",
        "time_f#0"
      ]
    },
    "1218": {
      "op": "frame_bury 0",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_i#0",
        "time_f#0"
      ]
    },
    "1220": {
      "op": "<",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "tmp%9#0"
      ]
    },
    "1221": {
      "error": "Time events must be sorted in strictly ascending order",
      "op": "assert // Time events must be sorted in strictly ascending order",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "1222": {
      "op": "intc_0 // 0",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "0"
      ]
    },
    "1223": {
      "op": "bytec 8 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "1225": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "time_f#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1226": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "maybe_value%0#0"
      ]
    },
    "1227": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "_t#0",
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "time_f#0",
        "time_i#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "maybe_value%0#0",
        "255"
      ]
    },
    "1230": {
      "op": "!=",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "tmp%10#0"
      ]
    },
    "1231": {
      "op": "bz assert_time_events_sorted_for_header@1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "1234": {
      "op": "frame_dig 0",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_f#0"
      ]
    },
    "1236": {
      "op": "frame_dig 1",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_f#0",
        "time_i#0"
      ]
    },
    "1238": {
      "op": "-",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "tmp%11#0"
      ]
    },
    "1239": {
      "op": "pushint 86400 // 86400",
      "defined_out": [
        "86400",
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "tmp%11#0",
        "86400"
      ]
    },
    "1243": {
      "op": "%",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "tmp%12#0"
      ]
    },
    "1244": {
      "op": "!",
      "defined_out": [
        "_t#0",
        "array_head_and_tail%0#0",
        "time_f#0",
        "time_i#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "tmp%13#0"
      ]
    },
    "1245": {
      "error": "Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)",
      "op": "assert // Time periods in Actual/Actual day count convention must be multiples of a day (in seconds)",
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ]
    },
    "1246": {
      "op": "b assert_time_events_sorted_for_header@1"
    },
    "1249": {
      "block": "assert_time_events_sorted_after_for@6",
      "stack_in": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "time_f#0",
        "time_i#0",
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "_t#0",
        "time_events#0 (copy)"
      ]
    },
    "1251": {
      "op": "frame_bury 0"
    },
    "1253": {
      "retsub": true,
      "op": "retsub"
    },
    "1254": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_create",
      "params": {
        "arranger#0": "bytes",
        "metadata#0": "bytes"
      },
      "block": "asset_create",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1257": {
      "op": "bytec 6 // 0x52323023",
      "defined_out": [
        "0x52323023"
      ],
      "stack_out": [
        "0x52323023"
      ]
    },
    "1259": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52323023",
        "arranger#0 (copy)"
      ],
      "stack_out": [
        "0x52323023",
        "arranger#0 (copy)"
      ]
    },
    "1261": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1262": {
      "op": "bytec 9 // \"metadata\"",
      "defined_out": [
        "\"metadata\""
      ],
      "stack_out": [
        "\"metadata\""
      ]
    },
    "1264": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"metadata\"",
        "metadata#0 (copy)"
      ],
      "stack_out": [
        "\"metadata\"",
        "metadata#0 (copy)"
      ]
    },
    "1266": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1267": {
      "retsub": true,
      "op": "retsub"
    },
    "1268": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_update",
      "params": {
        "metadata#0": "bytes"
      },
      "block": "asset_update",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1271": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "1274": {
      "op": "bytec 9 // \"metadata\"",
      "defined_out": [
        "\"metadata\""
      ],
      "stack_out": [
        "\"metadata\""
      ]
    },
    "1276": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"metadata\"",
        "metadata#0 (copy)"
      ],
      "stack_out": [
        "\"metadata\"",
        "metadata#0 (copy)"
      ]
    },
    "1278": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1279": {
      "retsub": true,
      "op": "retsub"
    },
    "1280": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.asset_config",
      "params": {
        "denomination_asset_id#0": "bytes",
        "settlement_asset_id#0": "bytes",
        "principal#0": "bytes",
        "principal_discount#0": "bytes",
        "minimum_denomination#0": "bytes",
        "day_count_convention#0": "bytes",
        "interest_rate#0": "bytes",
        "coupon_rates#0": "bytes",
        "time_events#0": "bytes",
        "time_periods#0": "bytes"
      },
      "block": "asset_config",
      "stack_in": [],
      "op": "proto 10 0"
    },
    "1283": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "1284": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1"
      ]
    },
    "1286": {
      "op": "dupn 2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1"
      ]
    },
    "1288": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "1291": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "0"
      ]
    },
    "1292": {
      "op": "bytec_1 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "0",
        "\"status\""
      ]
    },
    "1293": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1294": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "maybe_value%0#0"
      ]
    },
    "1295": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "tmp%0#0"
      ]
    },
    "1296": {
      "error": "D-ASA already configured",
      "op": "assert // D-ASA already configured",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1"
      ]
    },
    "1297": {
      "op": "frame_dig -10",
      "defined_out": [
        "denomination_asset_id#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#0 (copy)"
      ]
    },
    "1299": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1300": {
      "op": "dup",
      "defined_out": [
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "denomination_asset_id#1"
      ]
    },
    "1301": {
      "op": "bz asset_config_bool_false@4",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1304": {
      "op": "frame_dig 4",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "denomination_asset_id#1"
      ]
    },
    "1306": {
      "op": "asset_params_get AssetCreator",
      "defined_out": [
        "check%0#0",
        "denomination_asset_id#1",
        "value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1308": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "value%0#0"
      ]
    },
    "1309": {
      "op": "global ZeroAddress",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%1#1",
        "value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "value%0#0",
        "tmp%1#1"
      ]
    },
    "1311": {
      "op": "!=",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%2#1"
      ]
    },
    "1312": {
      "op": "bz asset_config_bool_false@4",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1315": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "and_result%0#0"
      ]
    },
    "1316": {
      "block": "asset_config_bool_merge@5",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "and_result%0#0"
      ],
      "error": "Denomination asset is not properly set",
      "op": "assert // Denomination asset is not properly set",
      "defined_out": [],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1317": {
      "op": "bytec 19 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\""
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"denomination_asset_id\""
      ]
    },
    "1319": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"denomination_asset_id\"",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"denomination_asset_id\"",
        "denomination_asset_id#1"
      ]
    },
    "1321": {
      "op": "dup",
      "defined_out": [
        "\"denomination_asset_id\"",
        "denomination_asset_id#1",
        "denomination_asset_id#1 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"denomination_asset_id\"",
        "denomination_asset_id#1 (copy)",
        "denomination_asset_id#1 (copy)"
      ]
    },
    "1322": {
      "op": "cover 2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "denomination_asset_id#1",
        "\"denomination_asset_id\"",
        "denomination_asset_id#1 (copy)"
      ]
    },
    "1324": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "denomination_asset_id#1"
      ]
    },
    "1325": {
      "op": "frame_dig -9",
      "defined_out": [
        "denomination_asset_id#1",
        "settlement_asset_id#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "denomination_asset_id#1",
        "settlement_asset_id#0 (copy)"
      ]
    },
    "1327": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ]
    },
    "1328": {
      "op": "dup",
      "defined_out": [
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "settlement_asset_id#1 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "settlement_asset_id#1 (copy)"
      ]
    },
    "1329": {
      "op": "uncover 2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "settlement_asset_id#1 (copy)",
        "denomination_asset_id#1"
      ]
    },
    "1331": {
      "op": "==",
      "defined_out": [
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "tmp%0#0"
      ]
    },
    "1332": {
      "error": "Different settlement asset not supported, must be equal to denomination asset",
      "op": "assert // Different settlement asset not supported, must be equal to denomination asset",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ]
    },
    "1333": {
      "op": "bytec 20 // \"settlement_asset_id\"",
      "defined_out": [
        "\"settlement_asset_id\"",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "\"settlement_asset_id\""
      ]
    },
    "1335": {
      "op": "dig 1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "\"settlement_asset_id\"",
        "settlement_asset_id#1 (copy)"
      ]
    },
    "1337": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1"
      ]
    },
    "1338": {
      "op": "itxn_begin"
    },
    "1339": {
      "op": "global MinTxnFee",
      "defined_out": [
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1341": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1343": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "settlement_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1344": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1346": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "settlement_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1348": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "settlement_asset_id#1"
      ]
    },
    "1349": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1351": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "axfer"
      ]
    },
    "1352": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "1354": {
      "op": "itxn_field Fee",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1356": {
      "op": "itxn_submit"
    },
    "1357": {
      "op": "frame_dig -8",
      "defined_out": [
        "denomination_asset_id#1",
        "principal#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "principal#0 (copy)"
      ]
    },
    "1359": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0"
      ]
    },
    "1360": {
      "op": "frame_dig -6",
      "defined_out": [
        "denomination_asset_id#1",
        "minimum_denomination#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "minimum_denomination#0 (copy)"
      ]
    },
    "1362": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1363": {
      "op": "dup2",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%5#0 (copy)",
        "tmp%6#0 (copy)"
      ]
    },
    "1364": {
      "op": "%",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1365": {
      "op": "!",
      "defined_out": [
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "1366": {
      "error": "Minimum denomination is not a divisor of principal",
      "op": "assert // Minimum denomination is not a divisor of principal",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1367": {
      "op": "bytec 7 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "\"unit_value\""
      ]
    },
    "1369": {
      "op": "dig 1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0",
        "\"unit_value\"",
        "tmp%6#0 (copy)"
      ]
    },
    "1371": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1372": {
      "op": "/",
      "defined_out": [
        "denomination_asset_id#1",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%1#0"
      ]
    },
    "1373": {
      "op": "bytec 4 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "denomination_asset_id#1",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%1#0",
        "\"total_units\""
      ]
    },
    "1375": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"total_units\"",
        "materialized_values%1#0"
      ]
    },
    "1376": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1377": {
      "op": "frame_dig -7",
      "defined_out": [
        "denomination_asset_id#1",
        "principal_discount#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "principal_discount#0 (copy)"
      ]
    },
    "1379": {
      "op": "btoi",
      "defined_out": [
        "denomination_asset_id#1",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%2#0"
      ]
    },
    "1380": {
      "op": "bytec 10 // \"principal_discount\"",
      "defined_out": [
        "\"principal_discount\"",
        "denomination_asset_id#1",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%2#0",
        "\"principal_discount\""
      ]
    },
    "1382": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"principal_discount\"",
        "materialized_values%2#0"
      ]
    },
    "1383": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1384": {
      "op": "frame_dig -5",
      "defined_out": [
        "day_count_convention#0 (copy)",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#0 (copy)"
      ]
    },
    "1386": {
      "op": "btoi",
      "defined_out": [
        "day_count_convention#1",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#1"
      ]
    },
    "1387": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#1",
        "day_count_convention#1"
      ]
    },
    "1388": {
      "op": "frame_bury 1",
      "defined_out": [
        "day_count_convention#1",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#1"
      ]
    },
    "1390": {
      "op": "bz asset_config_bool_true@15",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1393": {
      "op": "frame_dig 1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#1"
      ]
    },
    "1395": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "day_count_convention#1",
        "denomination_asset_id#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "day_count_convention#1",
        "255"
      ]
    },
    "1398": {
      "op": "==",
      "defined_out": [
        "day_count_convention#1",
        "denomination_asset_id#1",
        "tmp%1#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%1#2"
      ]
    },
    "1399": {
      "op": "bz asset_config_bool_false@16",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1402": {
      "block": "asset_config_bool_true@15",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "or_result%0#0"
      ]
    },
    "1403": {
      "block": "asset_config_bool_merge@17",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "or_result%0#0"
      ],
      "error": "Invalid day-count convention ID",
      "op": "assert // Invalid day-count convention ID",
      "defined_out": [],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1404": {
      "op": "bytec 8 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\""
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"day_count_convention\""
      ]
    },
    "1406": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"day_count_convention\"",
        "day_count_convention#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"day_count_convention\"",
        "day_count_convention#1"
      ]
    },
    "1408": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1409": {
      "op": "frame_dig -4",
      "defined_out": [
        "day_count_convention#1",
        "interest_rate#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#0 (copy)"
      ]
    },
    "1411": {
      "op": "btoi",
      "defined_out": [
        "day_count_convention#1",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#1"
      ]
    },
    "1412": {
      "op": "frame_bury 2",
      "defined_out": [
        "day_count_convention#1",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1414": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "day_count_convention#1",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0"
      ]
    },
    "1415": {
      "op": "bytec 10 // \"principal_discount\"",
      "defined_out": [
        "\"principal_discount\"",
        "0",
        "day_count_convention#1",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0",
        "\"principal_discount\""
      ]
    },
    "1417": {
      "op": "app_global_get_ex",
      "defined_out": [
        "day_count_convention#1",
        "interest_rate#1",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1418": {
      "error": "check self.principal_discount exists",
      "op": "assert // check self.principal_discount exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "maybe_value%0#0"
      ]
    },
    "1419": {
      "op": "bnz asset_config_after_if_else@23",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1422": {
      "op": "frame_dig 2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "interest_rate#1"
      ]
    },
    "1424": {
      "error": "Interest rate is not properly defined",
      "op": "assert // Interest rate is not properly defined",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1425": {
      "block": "asset_config_after_if_else@23",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "bytec 21 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\""
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"interest_rate\""
      ]
    },
    "1427": {
      "op": "frame_dig 2",
      "defined_out": [
        "\"interest_rate\"",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"interest_rate\"",
        "interest_rate#1"
      ]
    },
    "1429": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1430": {
      "op": "frame_dig -3",
      "defined_out": [
        "coupon_rates#0 (copy)",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "coupon_rates#0 (copy)"
      ]
    },
    "1432": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "coupon_rates#0 (copy)",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "coupon_rates#0 (copy)",
        "0"
      ]
    },
    "1433": {
      "op": "extract_uint16",
      "defined_out": [
        "interest_rate#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "1434": {
      "op": "dup",
      "defined_out": [
        "interest_rate#1",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "tmp%0#5 (copy)"
      ]
    },
    "1435": {
      "op": "!",
      "defined_out": [
        "interest_rate#1",
        "tmp%0#5",
        "tmp%1#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "tmp%1#2"
      ]
    },
    "1436": {
      "error": "Coupon rates are not properly defined",
      "op": "assert // Coupon rates are not properly defined",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "1437": {
      "op": "bytec 11 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\"",
        "interest_rate#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "\"total_coupons\""
      ]
    },
    "1439": {
      "op": "dig 1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "\"total_coupons\"",
        "tmp%0#5 (copy)"
      ]
    },
    "1441": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "1442": {
      "op": "bz asset_config_after_if_else@31",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1445": {
      "op": "bytec 29 // 0x636f75706f6e5261746573",
      "defined_out": [
        "0x636f75706f6e5261746573",
        "interest_rate#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x636f75706f6e5261746573"
      ]
    },
    "1447": {
      "op": "box_del",
      "defined_out": [
        "interest_rate#1",
        "{box_del}"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "{box_del}"
      ]
    },
    "1448": {
      "op": "pop",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1449": {
      "op": "bytec 29 // 0x636f75706f6e5261746573",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x636f75706f6e5261746573"
      ]
    },
    "1451": {
      "op": "frame_dig -3",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x636f75706f6e5261746573",
        "coupon_rates#0 (copy)"
      ]
    },
    "1453": {
      "op": "box_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1454": {
      "block": "asset_config_after_if_else@31",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "1456": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "1457": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "1458": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "0"
      ]
    },
    "1459": {
      "op": "bytec 11 // \"total_coupons\"",
      "defined_out": [
        "\"total_coupons\"",
        "0",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "0",
        "\"total_coupons\""
      ]
    },
    "1461": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1462": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "maybe_value%0#0"
      ]
    },
    "1463": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "maybe_value%0#0",
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "maybe_value%0#0",
        "4"
      ]
    },
    "1464": {
      "op": "+",
      "defined_out": [
        "tmp%0#5",
        "tmp%1#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5",
        "tmp%1#5"
      ]
    },
    "1465": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%2#1"
      ]
    },
    "1466": {
      "error": "Time events length is invalid",
      "op": "assert // Time events length is invalid",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1467": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "1469": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "op": "callsub assert_time_events_sorted",
      "defined_out": [
        "time_events#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0"
      ]
    },
    "1472": {
      "op": "frame_bury -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1474": {
      "op": "bytec 24 // 0x74696d654576656e7473",
      "defined_out": [
        "0x74696d654576656e7473"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x74696d654576656e7473"
      ]
    },
    "1476": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "{box_del}"
      ]
    },
    "1477": {
      "op": "pop",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1478": {
      "op": "bytec 24 // 0x74696d654576656e7473",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x74696d654576656e7473"
      ]
    },
    "1480": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "0x74696d654576656e7473",
        "time_events#0 (copy)"
      ]
    },
    "1482": {
      "op": "box_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1483": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "1485": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0"
      ]
    },
    "1488": {
      "op": "frame_bury 0",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1490": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "1492": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "2"
      ]
    },
    "1494": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "materialized_values%0#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%0#2"
      ]
    },
    "1495": {
      "op": "bytec 12 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "array_head_and_tail%0#0",
        "materialized_values%0#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%0#2",
        "\"primary_distribution_opening_date\""
      ]
    },
    "1497": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"primary_distribution_opening_date\"",
        "materialized_values%0#2"
      ]
    },
    "1498": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1499": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "1501": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "10"
      ]
    },
    "1503": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%1#0"
      ]
    },
    "1504": {
      "op": "bytec 13 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "array_head_and_tail%0#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%1#0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "1506": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"primary_distribution_closure_date\"",
        "materialized_values%1#0"
      ]
    },
    "1507": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1508": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "1510": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "array_head_and_tail%0#0",
        "time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "18"
      ]
    },
    "1512": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%2#0"
      ]
    },
    "1513": {
      "op": "bytec 14 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "array_head_and_tail%0#0",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%2#0",
        "\"issuance_date\""
      ]
    },
    "1515": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"issuance_date\"",
        "materialized_values%2#0"
      ]
    },
    "1516": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1517": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)"
      ]
    },
    "1519": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_events#0 (copy)",
        "0"
      ]
    },
    "1520": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1"
      ]
    },
    "1521": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "tmp%3#1"
      ]
    },
    "1522": {
      "op": "frame_bury 3",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1"
      ]
    },
    "1524": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "0"
      ]
    },
    "1525": {
      "op": "bytec 11 // \"total_coupons\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "0",
        "\"total_coupons\""
      ]
    },
    "1527": {
      "op": "app_global_get_ex",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1528": {
      "error": "check self.total_coupons exists",
      "op": "assert // check self.total_coupons exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "maybe_value%0#0"
      ]
    },
    "1529": {
      "op": "intc_3 // 4",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "maybe_value%0#0",
        "4"
      ]
    },
    "1530": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "1531": {
      "op": "==",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%5#1"
      ]
    },
    "1532": {
      "op": "bz asset_config_after_if_else@37",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1535": {
      "op": "frame_dig 3",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1"
      ]
    },
    "1537": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%3#1",
        "1"
      ]
    },
    "1538": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%3#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%7#0"
      ]
    },
    "1539": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "tmp%3#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%7#0",
        "8"
      ]
    },
    "1540": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%3#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "item_offset%3#0"
      ]
    },
    "1541": {
      "op": "frame_dig 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "item_offset%3#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1543": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "array_head_and_tail%0#0",
        "item_offset%3#0"
      ]
    },
    "1544": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "materialized_values%3#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%3#0"
      ]
    },
    "1545": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "array_head_and_tail%0#0",
        "materialized_values%3#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "materialized_values%3#0",
        "\"maturity_date\""
      ]
    },
    "1546": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"maturity_date\"",
        "materialized_values%3#0"
      ]
    },
    "1547": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1548": {
      "block": "asset_config_after_if_else@37",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "time_periods#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_periods#0 (copy)"
      ]
    },
    "1550": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "time_periods#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "time_periods#0 (copy)",
        "0"
      ]
    },
    "1551": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%0#5"
      ]
    },
    "1552": {
      "op": "!",
      "defined_out": [
        "tmp%1#2"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "tmp%1#2"
      ]
    },
    "1553": {
      "error": "Time periods are not properly defined",
      "op": "assert // Time periods are not properly defined",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1554": {
      "op": "bytec_1 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"status\""
      ]
    },
    "1555": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "\"status\"",
        "100"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "\"status\"",
        "100"
      ]
    },
    "1557": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ]
    },
    "1558": {
      "retsub": true,
      "op": "retsub"
    },
    "1559": {
      "block": "asset_config_bool_false@16",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "or_result%0#0"
      ]
    },
    "1560": {
      "op": "b asset_config_bool_merge@17"
    },
    "1563": {
      "block": "asset_config_bool_false@4",
      "stack_in": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "day_count_convention#1",
        "interest_rate#1",
        "tmp%3#1",
        "denomination_asset_id#1",
        "and_result%0#0"
      ]
    },
    "1564": {
      "op": "b asset_config_bool_merge@5"
    },
    "1567": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_secondary_time_events",
      "params": {
        "secondary_market_time_events#0": "bytes"
      },
      "block": "set_secondary_time_events",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1570": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "1571": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "1574": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "1575": {
      "op": "bytec_1 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0",
        "\"status\""
      ]
    },
    "1576": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1577": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0"
      ]
    },
    "1578": {
      "op": "intc 4 // 200",
      "defined_out": [
        "200",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "200"
      ]
    },
    "1580": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%0#1"
      ]
    },
    "1581": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%1#0"
      ]
    },
    "1582": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "1583": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1586": {
      "op": "frame_dig -1",
      "defined_out": [
        "secondary_market_time_events#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "1588": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#0 (copy)",
        "0"
      ]
    },
    "1589": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ]
    },
    "1590": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1591": {
      "error": "Time events length is invalid",
      "op": "assert // Time events length is invalid",
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0"
      ]
    },
    "1592": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%2#0",
        "1"
      ]
    },
    "1593": {
      "op": ">",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0"
      ]
    },
    "1594": {
      "op": "frame_dig -1",
      "defined_out": [
        "secondary_market_time_events#5",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "tmp%5#0",
        "secondary_market_time_events#5"
      ]
    },
    "1596": {
      "op": "swap",
      "defined_out": [
        "secondary_market_time_events#5",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%5#0"
      ]
    },
    "1597": {
      "op": "bz set_secondary_time_events_after_if_else@2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "1600": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "1602": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_time_events_sorted",
      "op": "callsub assert_time_events_sorted",
      "defined_out": [
        "secondary_market_time_events#0",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "secondary_market_time_events#0"
      ]
    },
    "1605": {
      "op": "dup"
    },
    "1606": {
      "op": "frame_bury -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "secondary_market_time_events#5"
      ]
    },
    "1608": {
      "op": "frame_bury 1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "1610": {
      "block": "set_secondary_time_events_after_if_else@2",
      "stack_in": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "secondary_market_time_events#5"
      ]
    },
    "1612": {
      "op": "frame_bury -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "1614": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0"
      ]
    },
    "1615": {
      "op": "bytec 14 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0",
        "\"issuance_date\""
      ]
    },
    "1617": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1618": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0"
      ]
    },
    "1619": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "1621": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1624": {
      "op": "frame_bury 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0"
      ]
    },
    "1626": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "1628": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "secondary_market_time_events#0 (copy)",
        "2"
      ]
    },
    "1630": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%0#0",
        "tmp%7#0"
      ]
    },
    "1631": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "maybe_value%0#0"
      ]
    },
    "1632": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "maybe_value%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1634": {
      "op": "<=",
      "defined_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1635": {
      "error": "Invalid secondary market opening date",
      "op": "assert // Invalid secondary market opening date",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0"
      ]
    },
    "1636": {
      "op": "bytec 15 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%7#0",
        "\"secondary_market_opening_date\""
      ]
    },
    "1638": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "\"secondary_market_opening_date\"",
        "tmp%7#0"
      ]
    },
    "1639": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "1640": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0"
      ]
    },
    "1641": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0",
        "\"maturity_date\""
      ]
    },
    "1642": {
      "op": "app_global_get_ex",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1643": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%1#0"
      ]
    },
    "1644": {
      "op": "bz set_secondary_time_events_after_if_else@4",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "1647": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0"
      ]
    },
    "1648": {
      "op": "bytec_3 // \"maturity_date\"",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0",
        "\"maturity_date\""
      ]
    },
    "1649": {
      "op": "app_global_get_ex",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1650": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0"
      ]
    },
    "1651": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0",
        "secondary_market_time_events#0 (copy)"
      ]
    },
    "1653": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0",
        "secondary_market_time_events#0 (copy)",
        "0"
      ]
    },
    "1654": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%2#0",
        "secondary_market_time_events#5",
        "tmp%11#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0",
        "tmp%11#0"
      ]
    },
    "1655": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail%0#0",
        "maybe_value%2#0",
        "secondary_market_time_events#5",
        "tmp%11#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0",
        "tmp%11#0",
        "1"
      ]
    },
    "1656": {
      "op": "-",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%2#0",
        "secondary_market_time_events#5",
        "tmp%12#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0",
        "tmp%12#0"
      ]
    },
    "1657": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "maybe_value%2#0",
        "secondary_market_time_events#5",
        "tmp%12#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0",
        "tmp%12#0",
        "8"
      ]
    },
    "1658": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%2#0",
        "maybe_value%2#0",
        "secondary_market_time_events#5"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0",
        "item_offset%2#0"
      ]
    },
    "1659": {
      "op": "frame_dig 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0",
        "item_offset%2#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1661": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0",
        "array_head_and_tail%0#0",
        "item_offset%2#0"
      ]
    },
    "1662": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%2#0",
        "secondary_market_time_events#5",
        "tmp%14#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%2#0",
        "tmp%14#0"
      ]
    },
    "1663": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%14#0",
        "maybe_value%2#0"
      ]
    },
    "1664": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "maybe_value%2#0",
        "secondary_market_time_events#5",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%14#0",
        "maybe_value%2#0",
        "tmp%14#0 (copy)"
      ]
    },
    "1666": {
      "op": ">=",
      "defined_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1667": {
      "error": "Invalid secondary market closure date",
      "op": "assert // Invalid secondary market closure date",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%14#0"
      ]
    },
    "1668": {
      "op": "bytec 16 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%14#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "tmp%14#0",
        "\"secondary_market_closure_date\""
      ]
    },
    "1670": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "\"secondary_market_closure_date\"",
        "tmp%14#0"
      ]
    },
    "1671": {
      "op": "app_global_put",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ]
    },
    "1672": {
      "block": "set_secondary_time_events_after_if_else@4",
      "stack_in": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0"
      ]
    },
    "1673": {
      "op": "bytec 15 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "0",
        "\"secondary_market_opening_date\""
      ]
    },
    "1675": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1676": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "maybe_value%3#0"
      ]
    },
    "1677": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0"
      ]
    },
    "1678": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1679": {
      "op": "bytec 16 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "0",
        "\"secondary_market_closure_date\""
      ]
    },
    "1681": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1682": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists",
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "maybe_value%4#0"
      ]
    },
    "1683": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1684": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "secondary_market_time_events#5",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1685": {
      "op": "frame_bury 0"
    },
    "1687": {
      "retsub": true,
      "op": "retsub"
    },
    "1688": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.assign_role",
      "params": {
        "role_address#0": "bytes",
        "role#0": "bytes",
        "config#0": "bytes"
      },
      "block": "assign_role",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1691": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "1694": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1697": {
      "op": "frame_dig -2",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "1699": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1700": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1701": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "20"
      ]
    },
    "1703": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1704": {
      "op": "bnz assign_role_bool_true@6",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1707": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1709": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "40"
      ]
    },
    "1711": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1712": {
      "op": "bnz assign_role_bool_true@6",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1715": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1717": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "50"
      ]
    },
    "1719": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1720": {
      "op": "bnz assign_role_bool_true@6",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1723": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1725": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "60"
      ]
    },
    "1727": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1728": {
      "op": "bnz assign_role_bool_true@6",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1731": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1733": {
      "op": "pushint 70 // 70",
      "defined_out": [
        "70",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "70"
      ]
    },
    "1735": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1736": {
      "op": "bnz assign_role_bool_true@6",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1739": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1741": {
      "op": "pushint 80 // 80",
      "defined_out": [
        "80",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "80"
      ]
    },
    "1743": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "1744": {
      "op": "bz assign_role_bool_false@7",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1747": {
      "block": "assign_role_bool_true@6",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "1748": {
      "block": "assign_role_bool_merge@8",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid role identifier",
      "op": "assert // Invalid role identifier",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1749": {
      "op": "pushints 20 40 50 60 70 80 // 20, 40, 50, 60, 70, 80",
      "defined_out": [
        "20",
        "40",
        "50",
        "60",
        "70",
        "80"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20",
        "40",
        "50",
        "60",
        "70",
        "80"
      ]
    },
    "1757": {
      "op": "frame_dig 0",
      "defined_out": [
        "20",
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "20",
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ]
    },
    "1759": {
      "op": "match assign_role_switch_case_0@9 assign_role_switch_case_1@10 assign_role_switch_case_2@11 assign_role_switch_case_3@12 assign_role_switch_case_4@13 assign_role_switch_case_5@14",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1773": {
      "op": "err"
    },
    "1774": {
      "block": "assign_role_switch_case_5@14",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 30 // 0x52383023",
      "defined_out": [
        "0x52383023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023"
      ]
    },
    "1776": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52383023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023",
        "role_address#0 (copy)"
      ]
    },
    "1778": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%8#0"
      ]
    },
    "1779": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%8#0",
        "box_prefixed_key%8#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%8#0",
        "box_prefixed_key%8#0 (copy)"
      ]
    },
    "1780": {
      "op": "box_len",
      "defined_out": [
        "_%4#0",
        "box_prefixed_key%8#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%8#0",
        "_%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1781": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%8#0",
        "maybe_exists%4#0"
      ]
    },
    "1783": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%8#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%8#0",
        "tmp%11#0"
      ]
    },
    "1784": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%8#0"
      ]
    },
    "1785": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%8#0",
        "config#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%8#0",
        "config#0 (copy)"
      ]
    },
    "1787": {
      "op": "extract 2 0",
      "defined_out": [
        "box_prefixed_key%8#0",
        "reinterpret_bytes[16]%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%8#0",
        "reinterpret_bytes[16]%4#0"
      ]
    },
    "1790": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1791": {
      "block": "assign_role_switch_case_next@16",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "1793": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1794": {
      "op": "swap"
    },
    "1795": {
      "retsub": true,
      "op": "retsub"
    },
    "1796": {
      "block": "assign_role_switch_case_4@13",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 23 // 0x52373023",
      "defined_out": [
        "0x52373023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023"
      ]
    },
    "1798": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52373023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023",
        "role_address#0 (copy)"
      ]
    },
    "1800": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%6#0"
      ]
    },
    "1801": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%6#0",
        "box_prefixed_key%6#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%6#0",
        "box_prefixed_key%6#0 (copy)"
      ]
    },
    "1802": {
      "op": "box_len",
      "defined_out": [
        "_%3#0",
        "box_prefixed_key%6#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%6#0",
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1803": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%6#0",
        "maybe_exists%3#0"
      ]
    },
    "1805": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%6#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%6#0",
        "tmp%10#0"
      ]
    },
    "1806": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%6#0"
      ]
    },
    "1807": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%6#0",
        "config#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%6#0",
        "config#0 (copy)"
      ]
    },
    "1809": {
      "op": "extract 2 0",
      "defined_out": [
        "box_prefixed_key%6#0",
        "reinterpret_bytes[16]%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%6#0",
        "reinterpret_bytes[16]%3#0"
      ]
    },
    "1812": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1813": {
      "op": "b assign_role_switch_case_next@16"
    },
    "1816": {
      "block": "assign_role_switch_case_3@12",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 25 // 0x52363023",
      "defined_out": [
        "0x52363023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023"
      ]
    },
    "1818": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52363023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023",
        "role_address#0 (copy)"
      ]
    },
    "1820": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0"
      ]
    },
    "1821": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%4#0",
        "box_prefixed_key%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0",
        "box_prefixed_key%4#0 (copy)"
      ]
    },
    "1822": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "box_prefixed_key%4#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0",
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1823": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0",
        "maybe_exists%2#0"
      ]
    },
    "1825": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0",
        "tmp%9#0"
      ]
    },
    "1826": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0"
      ]
    },
    "1827": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%4#0",
        "config#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0",
        "config#0 (copy)"
      ]
    },
    "1829": {
      "op": "extract 2 0",
      "defined_out": [
        "box_prefixed_key%4#0",
        "reinterpret_bytes[16]%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0",
        "reinterpret_bytes[16]%2#0"
      ]
    },
    "1832": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1833": {
      "op": "b assign_role_switch_case_next@16"
    },
    "1836": {
      "block": "assign_role_switch_case_2@11",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 26 // 0x52353023",
      "defined_out": [
        "0x52353023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023"
      ]
    },
    "1838": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52353023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023",
        "role_address#0 (copy)"
      ]
    },
    "1840": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1841": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0 (copy)"
      ]
    },
    "1842": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%2#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1843": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0",
        "maybe_exists%1#0"
      ]
    },
    "1845": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0",
        "tmp%8#0"
      ]
    },
    "1846": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1847": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%2#0",
        "config#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0",
        "config#0 (copy)"
      ]
    },
    "1849": {
      "op": "extract 2 0",
      "defined_out": [
        "box_prefixed_key%2#0",
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0",
        "reinterpret_bytes[16]%1#0"
      ]
    },
    "1852": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1853": {
      "op": "b assign_role_switch_case_next@16"
    },
    "1856": {
      "block": "assign_role_switch_case_1@10",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 22 // 0x52343023",
      "defined_out": [
        "0x52343023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023"
      ]
    },
    "1858": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52343023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023",
        "role_address#0 (copy)"
      ]
    },
    "1860": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1861": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1862": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1863": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1865": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "tmp%7#0"
      ]
    },
    "1866": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1867": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "config#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "config#0 (copy)"
      ]
    },
    "1869": {
      "op": "extract 2 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "1872": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1873": {
      "op": "b assign_role_switch_case_next@16"
    },
    "1876": {
      "block": "assign_role_switch_case_0@9",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 6 // 0x52323023",
      "defined_out": [
        "0x52323023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52323023"
      ]
    },
    "1878": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x52323023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52323023",
        "role_address#0 (copy)"
      ]
    },
    "1880": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1881": {
      "op": "b assign_role_switch_case_next@16"
    },
    "1884": {
      "block": "assign_role_bool_false@7",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "1885": {
      "op": "b assign_role_bool_merge@8"
    },
    "1888": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.revoke_role",
      "params": {
        "role_address#0": "bytes",
        "role#0": "bytes"
      },
      "block": "revoke_role",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1891": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_arranger",
      "op": "callsub assert_caller_is_arranger"
    },
    "1894": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "1897": {
      "op": "frame_dig -1",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "1899": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1900": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1901": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "40"
      ]
    },
    "1903": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1904": {
      "op": "bnz revoke_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1907": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1909": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "50"
      ]
    },
    "1911": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1912": {
      "op": "bnz revoke_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1915": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1917": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "60"
      ]
    },
    "1919": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1920": {
      "op": "bnz revoke_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1923": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1925": {
      "op": "pushint 70 // 70",
      "defined_out": [
        "70",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "70"
      ]
    },
    "1927": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1928": {
      "op": "bnz revoke_role_bool_true@5",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1931": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1933": {
      "op": "pushint 80 // 80",
      "defined_out": [
        "80",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "80"
      ]
    },
    "1935": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1936": {
      "op": "bz revoke_role_bool_false@6",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1939": {
      "block": "revoke_role_bool_true@5",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "1940": {
      "block": "revoke_role_bool_merge@7",
      "stack_in": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ],
      "error": "Invalid role identifier",
      "op": "assert // Invalid role identifier",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1941": {
      "op": "pushints 40 50 60 70 80 // 40, 50, 60, 70, 80",
      "defined_out": [
        "40",
        "50",
        "60",
        "70",
        "80"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "40",
        "50",
        "60",
        "70",
        "80"
      ]
    },
    "1948": {
      "op": "frame_dig 0",
      "defined_out": [
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "40",
        "50",
        "60",
        "70",
        "80",
        "awst_tmp%0#0"
      ]
    },
    "1950": {
      "op": "match revoke_role_switch_case_0@8 revoke_role_switch_case_1@9 revoke_role_switch_case_2@10 revoke_role_switch_case_3@11 revoke_role_switch_case_4@12",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1962": {
      "op": "err"
    },
    "1963": {
      "block": "revoke_role_switch_case_4@12",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 30 // 0x52383023",
      "defined_out": [
        "0x52383023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023"
      ]
    },
    "1965": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52383023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52383023",
        "role_address#0 (copy)"
      ]
    },
    "1967": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0"
      ]
    },
    "1968": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%4#0",
        "box_prefixed_key%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0",
        "box_prefixed_key%4#0 (copy)"
      ]
    },
    "1969": {
      "op": "box_len",
      "defined_out": [
        "_%4#0",
        "box_prefixed_key%4#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0",
        "_%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1970": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1972": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%4#0"
      ]
    },
    "1973": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "1974": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1975": {
      "block": "revoke_role_switch_case_next@14",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "1977": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1978": {
      "op": "swap"
    },
    "1979": {
      "retsub": true,
      "op": "retsub"
    },
    "1980": {
      "block": "revoke_role_switch_case_3@11",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 23 // 0x52373023",
      "defined_out": [
        "0x52373023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023"
      ]
    },
    "1982": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52373023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52373023",
        "role_address#0 (copy)"
      ]
    },
    "1984": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%3#0"
      ]
    },
    "1985": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%3#0",
        "box_prefixed_key%3#0 (copy)"
      ]
    },
    "1986": {
      "op": "box_len",
      "defined_out": [
        "_%3#0",
        "box_prefixed_key%3#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%3#0",
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1987": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1989": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%3#0"
      ]
    },
    "1990": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "1991": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1992": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "1995": {
      "block": "revoke_role_switch_case_2@10",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 25 // 0x52363023",
      "defined_out": [
        "0x52363023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023"
      ]
    },
    "1997": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52363023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52363023",
        "role_address#0 (copy)"
      ]
    },
    "1999": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0"
      ]
    },
    "2000": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0",
        "box_prefixed_key%2#0 (copy)"
      ]
    },
    "2001": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "box_prefixed_key%2#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0",
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2002": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2004": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%2#0"
      ]
    },
    "2005": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "2006": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2007": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "2010": {
      "block": "revoke_role_switch_case_1@9",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 26 // 0x52353023",
      "defined_out": [
        "0x52353023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023"
      ]
    },
    "2012": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52353023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52353023",
        "role_address#0 (copy)"
      ]
    },
    "2014": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "2015": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)"
      ]
    },
    "2016": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "box_prefixed_key%1#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%1#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2017": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2019": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%1#0"
      ]
    },
    "2020": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "2021": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2022": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "2025": {
      "block": "revoke_role_switch_case_0@8",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "bytec 22 // 0x52343023",
      "defined_out": [
        "0x52343023"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023"
      ]
    },
    "2027": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52343023",
        "role_address#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0x52343023",
        "role_address#0 (copy)"
      ]
    },
    "2029": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2030": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2031": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2032": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2034": {
      "error": "Invalid account role address",
      "op": "assert // Invalid account role address",
      "stack_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2035": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "{box_del}"
      ]
    },
    "2036": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2037": {
      "op": "b revoke_role_switch_case_next@14"
    },
    "2040": {
      "block": "revoke_role_bool_false@6",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "or_result%0#0"
      ]
    },
    "2041": {
      "op": "b revoke_role_bool_merge@7"
    },
    "2044": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.open_account",
      "params": {
        "holding_address#0": "bytes",
        "payment_address#0": "bytes"
      },
      "block": "open_account",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2047": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "op": "callsub assert_caller_is_account_manager"
    },
    "2050": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2051": {
      "op": "bytec_1 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "2052": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2053": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2054": {
      "op": "intc 4 // 200",
      "defined_out": [
        "200",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "200"
      ]
    },
    "2056": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "2057": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2058": {
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "stack_out": []
    },
    "2059": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "2062": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "2065": {
      "op": "bytec 5 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2067": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2069": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2070": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2071": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2072": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2074": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "2075": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2076": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "payment_address#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "payment_address#0 (copy)"
      ]
    },
    "2078": {
      "op": "bytec 27 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "box_prefixed_key%0#0",
        "payment_address#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "payment_address#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "2080": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2081": {
      "op": "bytec 27 // 0x0000000000000000",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "2083": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2084": {
      "op": "bytec 27 // 0x0000000000000000",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "2086": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2087": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%4#0",
        "0x00"
      ]
    },
    "2090": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2091": {
      "op": "box_put",
      "stack_out": []
    },
    "2092": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2094": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2095": {
      "retsub": true,
      "op": "retsub"
    },
    "2096": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.close_account",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "close_account",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2099": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_account_manager",
      "op": "callsub assert_caller_is_account_manager"
    },
    "2102": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "2105": {
      "op": "bytec 5 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2107": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2109": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#1"
      ]
    },
    "2110": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#1",
        "box_prefixed_key%0#1 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "box_prefixed_key%0#1 (copy)"
      ]
    },
    "2111": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#1",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2112": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2114": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "box_prefixed_key%0#1"
      ]
    },
    "2115": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#1",
        "box_prefixed_key%0#1 (copy)"
      ]
    },
    "2116": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2117": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_value%0#0"
      ]
    },
    "2118": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "box_prefixed_key%0#1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_value%0#0",
        "32"
      ]
    },
    "2120": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#1",
        "closed_units#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "closed_units#0"
      ]
    },
    "2121": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#1",
        "closed_units#0",
        "closed_units#0 (copy)"
      ]
    },
    "2122": {
      "op": "uncover 2",
      "defined_out": [
        "box_prefixed_key%0#1",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "closed_units#0",
        "box_prefixed_key%0#1"
      ]
    },
    "2124": {
      "op": "box_del",
      "defined_out": [
        "closed_units#0",
        "{box_del}"
      ],
      "stack_out": [
        "closed_units#0",
        "closed_units#0",
        "{box_del}"
      ]
    },
    "2125": {
      "op": "pop",
      "stack_out": [
        "closed_units#0",
        "closed_units#0"
      ]
    },
    "2126": {
      "op": "intc_0 // 0",
      "stack_out": [
        "closed_units#0",
        "closed_units#0",
        "0"
      ]
    },
    "2127": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "closed_units#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "2128": {
      "op": "app_global_get_ex",
      "defined_out": [
        "closed_units#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "closed_units#0",
        "closed_units#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2129": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "closed_units#0",
        "closed_units#0",
        "maybe_value%1#0"
      ]
    },
    "2130": {
      "op": "swap",
      "stack_out": [
        "closed_units#0",
        "maybe_value%1#0",
        "closed_units#0"
      ]
    },
    "2131": {
      "op": "-",
      "defined_out": [
        "closed_units#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "closed_units#0",
        "materialized_values%0#0"
      ]
    },
    "2132": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "closed_units#0",
        "materialized_values%0#0",
        "\"circulating_units\""
      ]
    },
    "2133": {
      "op": "dig 1",
      "defined_out": [
        "\"circulating_units\"",
        "closed_units#0",
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)"
      ],
      "stack_out": [
        "closed_units#0",
        "materialized_values%0#0",
        "\"circulating_units\"",
        "materialized_values%0#0 (copy)"
      ]
    },
    "2135": {
      "op": "app_global_put",
      "stack_out": [
        "closed_units#0",
        "materialized_values%0#0"
      ]
    },
    "2136": {
      "op": "bnz close_account_after_if_else@3",
      "stack_out": [
        "closed_units#0"
      ]
    },
    "2139": {
      "op": "bytec_1 // \"status\"",
      "defined_out": [
        "\"status\"",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "\"status\""
      ]
    },
    "2140": {
      "op": "intc 4 // 200",
      "defined_out": [
        "\"status\"",
        "200",
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "\"status\"",
        "200"
      ]
    },
    "2142": {
      "op": "app_global_put",
      "stack_out": [
        "closed_units#0"
      ]
    },
    "2143": {
      "block": "close_account_after_if_else@3",
      "stack_in": [
        "closed_units#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "closed_units#0"
      ],
      "stack_out": [
        "closed_units#0",
        "closed_units#0"
      ]
    },
    "2145": {
      "op": "itob",
      "defined_out": [
        "closed_units#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "closed_units#0",
        "val_as_bytes%0#0"
      ]
    },
    "2146": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "closed_units#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "closed_units#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "2148": {
      "op": "itob",
      "defined_out": [
        "closed_units#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "closed_units#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2149": {
      "op": "concat",
      "defined_out": [
        "closed_units#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "closed_units#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2150": {
      "op": "swap"
    },
    "2151": {
      "retsub": true,
      "op": "retsub"
    },
    "2152": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.primary_distribution",
      "params": {
        "holding_address#0": "bytes",
        "units#0": "bytes"
      },
      "block": "primary_distribution",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2155": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#1"
      ]
    },
    "2156": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2"
      ]
    },
    "2157": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0"
      ]
    },
    "2159": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "2160": {
      "op": "bytec_1 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "0",
        "\"status\""
      ]
    },
    "2161": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2162": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2163": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "100"
      ]
    },
    "2165": {
      "op": "==",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%0#3"
      ]
    },
    "2166": {
      "op": "bz primary_distribution_bool_false@5",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0"
      ]
    },
    "2169": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "2170": {
      "op": "bytec 12 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "2172": {
      "op": "app_global_get_ex",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2173": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2174": {
      "op": "global LatestTimestamp"
    },
    "2176": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2177": {
      "op": "frame_bury 2",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2179": {
      "op": "<=",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%1#1"
      ]
    },
    "2180": {
      "op": "bz primary_distribution_bool_false@5",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0"
      ]
    },
    "2183": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "2184": {
      "op": "bytec 13 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "2186": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2187": {
      "error": "check self.primary_distribution_closure_date exists",
      "op": "assert // check self.primary_distribution_closure_date exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2188": {
      "op": "frame_dig 2",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0"
      ]
    },
    "2190": {
      "op": ">",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%2#1"
      ]
    },
    "2191": {
      "op": "bz primary_distribution_bool_false@5",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0"
      ]
    },
    "2194": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2195": {
      "block": "primary_distribution_bool_merge@6",
      "stack_in": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Primary distribution is closed",
      "op": "assert // Primary distribution is closed",
      "defined_out": [],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0"
      ]
    },
    "2196": {
      "op": "bytec 26 // 0x52353023",
      "defined_out": [
        "0x52353023"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "0x52353023"
      ]
    },
    "2198": {
      "op": "txn Sender",
      "defined_out": [
        "0x52353023",
        "caller#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "0x52353023",
        "caller#0"
      ]
    },
    "2200": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1"
      ]
    },
    "2201": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "box_prefixed_key%0#1"
      ]
    },
    "2202": {
      "op": "frame_bury 0",
      "defined_out": [
        "box_prefixed_key%0#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1"
      ]
    },
    "2204": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#1",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2205": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2207": {
      "op": "bz primary_distribution_bool_false@12",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0"
      ]
    },
    "2210": {
      "op": "frame_dig 0",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1"
      ]
    },
    "2212": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_exists%1#0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%0#2",
        "maybe_exists%1#0"
      ]
    },
    "2213": {
      "error": "check self.primary_dealer entry exists",
      "op": "assert // check self.primary_dealer entry exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%0#2"
      ]
    },
    "2214": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#1",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "2217": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2219": {
      "op": "itob",
      "defined_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "reinterpret_biguint%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#2"
      ]
    },
    "2220": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2221": {
      "op": "frame_bury 1",
      "defined_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "reinterpret_biguint%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#2"
      ]
    },
    "2223": {
      "op": "b<=",
      "defined_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%1#1"
      ]
    },
    "2224": {
      "op": "bz primary_distribution_bool_false@12",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0"
      ]
    },
    "2227": {
      "op": "frame_dig 0",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1"
      ]
    },
    "2229": {
      "op": "box_get",
      "defined_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "maybe_exists%2#1",
        "maybe_value%1#2",
        "tmp%0#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%1#2",
        "maybe_exists%2#1"
      ]
    },
    "2230": {
      "error": "check self.primary_dealer entry exists",
      "op": "assert // check self.primary_dealer entry exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%1#2"
      ]
    },
    "2231": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "reinterpret_biguint%1#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "2234": {
      "op": "frame_dig 1",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "reinterpret_biguint%1#0",
        "tmp%0#2"
      ]
    },
    "2236": {
      "op": "b>=",
      "defined_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "tmp%3#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%3#1"
      ]
    },
    "2237": {
      "op": "bz primary_distribution_bool_false@12",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0"
      ]
    },
    "2240": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2241": {
      "block": "primary_distribution_bool_merge@13",
      "stack_in": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0"
      ]
    },
    "2242": {
      "op": "bytec 5 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "0x52333023"
      ]
    },
    "2244": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2246": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1"
      ]
    },
    "2247": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#1",
        "box_prefixed_key%0#1 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "box_prefixed_key%0#1 (copy)"
      ]
    },
    "2248": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#1",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2249": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2251": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1"
      ]
    },
    "2252": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_defaulted",
      "op": "callsub assert_is_not_defaulted"
    },
    "2255": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_is_not_suspended",
      "op": "callsub assert_is_not_suspended"
    },
    "2258": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#1",
        "units#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "units#0 (copy)"
      ]
    },
    "2260": {
      "op": "btoi",
      "defined_out": [
        "box_prefixed_key%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0"
      ]
    },
    "2261": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2262": {
      "error": "Can not distribute zero units",
      "op": "assert // Can not distribute zero units",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0"
      ]
    },
    "2263": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "box_prefixed_key%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "0"
      ]
    },
    "2264": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "box_prefixed_key%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "2265": {
      "op": "app_global_get_ex",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2266": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2267": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2269": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2270": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "0"
      ]
    },
    "2271": {
      "op": "bytec 4 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "0",
        "\"total_units\""
      ]
    },
    "2273": {
      "op": "app_global_get_ex",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2274": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "2275": {
      "op": "dig 1",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "tmp%3#0 (copy)"
      ]
    },
    "2277": {
      "op": ">=",
      "defined_out": [
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2278": {
      "error": "Insufficient remaining D-ASA units",
      "op": "assert // Insufficient remaining D-ASA units",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2279": {
      "op": "bytec_2 // \"circulating_units\"",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "\"circulating_units\""
      ]
    },
    "2280": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "\"circulating_units\"",
        "tmp%3#0 (copy)"
      ]
    },
    "2282": {
      "op": "app_global_put",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2283": {
      "op": "dig 2",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "box_prefixed_key%0#1 (copy)"
      ]
    },
    "2285": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2286": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%3#0"
      ]
    },
    "2287": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "2288": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "box_prefixed_key%0#1",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "32"
      ]
    },
    "2290": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%0#0",
        "tmp%3#0",
        "maybe_value%3#0",
        "tmp%7#0"
      ]
    },
    "2291": {
      "op": "uncover 3",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "maybe_value%3#0",
        "tmp%7#0",
        "tmp%0#0"
      ]
    },
    "2293": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_value%3#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "maybe_value%3#0",
        "to_encode%0#0"
      ]
    },
    "2294": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_value%3#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "2295": {
      "op": "replace2 32",
      "defined_out": [
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "updated_data%0#0"
      ]
    },
    "2297": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "updated_data%0#0",
        "0"
      ]
    },
    "2298": {
      "op": "bytec 7 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "0",
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "updated_data%0#0",
        "0",
        "\"unit_value\""
      ]
    },
    "2300": {
      "op": "app_global_get_ex",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%3#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "updated_data%0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2301": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "updated_data%0#0",
        "maybe_value%5#0"
      ]
    },
    "2302": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "updated_data%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "updated_data%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2303": {
      "op": "replace2 40",
      "defined_out": [
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "box_prefixed_key%0#1",
        "tmp%3#0",
        "updated_data%1#0"
      ]
    },
    "2305": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%3#0",
        "updated_data%1#0",
        "box_prefixed_key%0#1"
      ]
    },
    "2307": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%3#0",
        "box_prefixed_key%0#1",
        "updated_data%1#0"
      ]
    },
    "2308": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2309": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%3#0",
        "0"
      ]
    },
    "2310": {
      "op": "bytec 4 // \"total_units\"",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%3#0",
        "0",
        "\"total_units\""
      ]
    },
    "2312": {
      "op": "app_global_get_ex",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%3#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "2313": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "tmp%3#0",
        "maybe_value%7#0"
      ]
    },
    "2314": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "maybe_value%7#0",
        "tmp%3#0"
      ]
    },
    "2315": {
      "op": "-",
      "defined_out": [
        "box_prefixed_key%0#1",
        "to_encode%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "to_encode%1#0"
      ]
    },
    "2316": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#1",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "2317": {
      "op": "frame_bury 0"
    },
    "2319": {
      "retsub": true,
      "op": "retsub"
    },
    "2320": {
      "block": "primary_distribution_bool_false@12",
      "stack_in": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2321": {
      "op": "b primary_distribution_bool_merge@13"
    },
    "2324": {
      "block": "primary_distribution_bool_false@5",
      "stack_in": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "tmp%0#2",
        "awst_tmp%0#0",
        "and_result%0#0"
      ]
    },
    "2325": {
      "op": "b primary_distribution_bool_merge@6"
    },
    "2328": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_asset_suspension",
      "params": {
        "suspended#0": "bytes"
      },
      "block": "set_asset_suspension",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2331": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "op": "callsub assert_caller_is_authority"
    },
    "2334": {
      "op": "frame_dig -1",
      "defined_out": [
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "suspended#0 (copy)"
      ]
    },
    "2336": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "suspended#0 (copy)",
        "0"
      ]
    },
    "2337": {
      "op": "getbit",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "2338": {
      "op": "bytec 17 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"suspended\""
      ]
    },
    "2340": {
      "op": "swap",
      "stack_out": [
        "\"suspended\"",
        "materialized_values%0#0"
      ]
    },
    "2341": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2342": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2344": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2345": {
      "retsub": true,
      "op": "retsub"
    },
    "2346": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_account_suspension",
      "params": {
        "holding_address#0": "bytes",
        "suspended#0": "bytes"
      },
      "block": "set_account_suspension",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2349": {
      "callsub": "smart_contracts.base_d_asa.contract.BaseDAsa.assert_caller_is_authority",
      "op": "callsub assert_caller_is_authority"
    },
    "2352": {
      "op": "bytec 5 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2354": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2356": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#1"
      ]
    },
    "2357": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#1",
        "box_prefixed_key%0#1 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "box_prefixed_key%0#1 (copy)"
      ]
    },
    "2358": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#1",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2359": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2361": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "box_prefixed_key%0#1"
      ]
    },
    "2362": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#1",
        "box_prefixed_key%0#1 (copy)"
      ]
    },
    "2363": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2364": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_value%0#0"
      ]
    },
    "2365": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#1",
        "maybe_value%0#0",
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_value%0#0",
        "suspended#0 (copy)"
      ]
    },
    "2367": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "box_prefixed_key%0#1",
        "maybe_value%0#0",
        "suspended#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_value%0#0",
        "suspended#0 (copy)",
        "0"
      ]
    },
    "2368": {
      "op": "getbit",
      "defined_out": [
        "box_prefixed_key%0#1",
        "is_true%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_value%0#0",
        "is_true%0#0"
      ]
    },
    "2369": {
      "op": "pushint 448 // 448"
    },
    "2372": {
      "op": "swap",
      "defined_out": [
        "448",
        "box_prefixed_key%0#1",
        "is_true%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_value%0#0",
        "448",
        "is_true%0#0"
      ]
    },
    "2373": {
      "op": "setbit",
      "defined_out": [
        "box_prefixed_key%0#1",
        "updated_data%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "updated_data%0#0"
      ]
    },
    "2374": {
      "op": "box_put",
      "stack_out": []
    },
    "2375": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2377": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2378": {
      "retsub": true,
      "op": "retsub"
    },
    "2379": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.set_default_status",
      "params": {
        "defaulted#0": "bytes"
      },
      "block": "set_default_status",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2382": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2383": {
      "op": "bytec 25 // 0x52363023",
      "defined_out": [
        "0x52363023"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x52363023"
      ]
    },
    "2385": {
      "op": "txn Sender",
      "defined_out": [
        "0x52363023",
        "caller#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x52363023",
        "caller#0"
      ]
    },
    "2387": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2388": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2389": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2390": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2392": {
      "op": "bz set_default_status_bool_false@5",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2395": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2397": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "2398": {
      "error": "check self.trustee entry exists",
      "op": "assert // check self.trustee entry exists",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%0#0"
      ]
    },
    "2399": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "2402": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "awst_tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2404": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "2405": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2406": {
      "op": "frame_bury 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "2408": {
      "op": "b<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ]
    },
    "2409": {
      "op": "bz set_default_status_bool_false@5",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2412": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2414": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%1#0",
        "maybe_exists%2#0"
      ]
    },
    "2415": {
      "error": "check self.trustee entry exists",
      "op": "assert // check self.trustee entry exists",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "maybe_value%1#0"
      ]
    },
    "2416": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_biguint%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "2419": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_biguint%1#0",
        "tmp%0#0"
      ]
    },
    "2421": {
      "op": "b>=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ]
    },
    "2422": {
      "op": "bz set_default_status_bool_false@5",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2425": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ]
    },
    "2426": {
      "block": "set_default_status_bool_merge@6",
      "stack_in": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ],
      "error": "Not authorized",
      "op": "assert // Not authorized",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2427": {
      "op": "frame_dig -1",
      "defined_out": [
        "defaulted#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "defaulted#0 (copy)"
      ]
    },
    "2429": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "defaulted#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "defaulted#0 (copy)",
        "0"
      ]
    },
    "2430": {
      "op": "getbit",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "materialized_values%0#0"
      ]
    },
    "2431": {
      "op": "bytec 18 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "materialized_values%0#0",
        "\"defaulted\""
      ]
    },
    "2433": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "\"defaulted\"",
        "materialized_values%0#0"
      ]
    },
    "2434": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "2435": {
      "retsub": true,
      "op": "retsub"
    },
    "2436": {
      "block": "set_default_status_bool_false@5",
      "stack_in": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ]
    },
    "2437": {
      "op": "b set_default_status_bool_merge@6"
    },
    "2440": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_info",
      "params": {},
      "block": "get_asset_info",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2443": {
      "op": "intc_0 // 0"
    },
    "2444": {
      "op": "dup"
    },
    "2445": {
      "op": "global LatestTimestamp"
    },
    "2447": {
      "op": "intc_0 // 0"
    },
    "2448": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "performance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "2449": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2450": {
      "op": "swap",
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "2451": {
      "op": "dup",
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "2452": {
      "op": "cover 2",
      "stack_out": [
        "performance#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "2454": {
      "op": "cover 4",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2456": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2457": {
      "op": ">",
      "defined_out": [
        "maybe_value%0#0",
        "performance#0",
        "performance#8",
        "tmp%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "tmp%1#0"
      ]
    },
    "2458": {
      "op": "bz get_asset_info_after_if_else@3",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "2461": {
      "op": "frame_dig 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "performance#8"
      ]
    },
    "2463": {
      "op": "frame_bury 2",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "2465": {
      "op": "frame_dig 1",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%0#0"
      ]
    },
    "2467": {
      "op": "bz get_asset_info_after_if_else@3",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "2470": {
      "op": "intc_3 // 4",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "performance#8"
      ]
    },
    "2471": {
      "op": "frame_bury 2",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "2473": {
      "block": "get_asset_info_after_if_else@3",
      "stack_in": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "performance#0"
      ]
    },
    "2475": {
      "op": "frame_bury 0",
      "defined_out": [
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "2477": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0"
      ]
    },
    "2478": {
      "op": "bytec 18 // \"defaulted\"",
      "defined_out": [
        "\"defaulted\"",
        "0",
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0",
        "\"defaulted\""
      ]
    },
    "2480": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2481": {
      "error": "check self.defaulted exists",
      "op": "assert // check self.defaulted exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%1#0"
      ]
    },
    "2482": {
      "op": "bz get_asset_info_after_if_else@5",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "2485": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "performance#0"
      ]
    },
    "2487": {
      "op": "frame_bury 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ]
    },
    "2489": {
      "block": "get_asset_info_after_if_else@5",
      "stack_in": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0"
      ]
    },
    "2490": {
      "op": "bytec 19 // \"denomination_asset_id\"",
      "defined_out": [
        "\"denomination_asset_id\"",
        "0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "0",
        "\"denomination_asset_id\""
      ]
    },
    "2492": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2493": {
      "error": "check self.denomination_asset_id exists",
      "op": "assert // check self.denomination_asset_id exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "maybe_value%2#0"
      ]
    },
    "2494": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0"
      ]
    },
    "2495": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "2496": {
      "op": "bytec 20 // \"settlement_asset_id\"",
      "defined_out": [
        "\"settlement_asset_id\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "0",
        "\"settlement_asset_id\""
      ]
    },
    "2498": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2499": {
      "error": "check self.settlement_asset_id exists",
      "op": "assert // check self.settlement_asset_id exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "maybe_value%3#0"
      ]
    },
    "2500": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2501": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "2502": {
      "op": "bytec_2 // \"circulating_units\"",
      "defined_out": [
        "\"circulating_units\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"circulating_units\""
      ]
    },
    "2503": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2504": {
      "error": "check self.circulating_units exists",
      "op": "assert // check self.circulating_units exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0"
      ]
    },
    "2505": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "2506": {
      "op": "bytec 7 // \"unit_value\"",
      "defined_out": [
        "\"unit_value\"",
        "0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "0",
        "\"unit_value\""
      ]
    },
    "2508": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2509": {
      "error": "check self.unit_value exists",
      "op": "assert // check self.unit_value exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2510": {
      "op": "dup2",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%0#0 (copy)",
        "maybe_value%1#0 (copy)"
      ]
    },
    "2511": {
      "op": "*",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ]
    },
    "2512": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "2513": {
      "op": "swap",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "maybe_value%1#0"
      ]
    },
    "2514": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "2515": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "2516": {
      "op": "bytec 8 // \"day_count_convention\"",
      "defined_out": [
        "\"day_count_convention\"",
        "0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0",
        "\"day_count_convention\""
      ]
    },
    "2518": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2519": {
      "error": "check self.day_count_convention exists",
      "op": "assert // check self.day_count_convention exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%5#0"
      ]
    },
    "2520": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "2521": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%4#0 (copy)"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%4#0 (copy)"
      ]
    },
    "2522": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "bitlen%0#0"
      ]
    },
    "2523": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "2524": {
      "op": "<=",
      "defined_out": [
        "maybe_value%0#0",
        "no_overflow%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "no_overflow%0#0"
      ]
    },
    "2525": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "2526": {
      "op": "extract 7 1",
      "defined_out": [
        "maybe_value%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0"
      ]
    },
    "2529": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "0"
      ]
    },
    "2530": {
      "op": "bytec 10 // \"principal_discount\"",
      "defined_out": [
        "\"principal_discount\"",
        "0",
        "maybe_value%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "0",
        "\"principal_discount\""
      ]
    },
    "2532": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%6#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2533": {
      "error": "check self.principal_discount exists",
      "op": "assert // check self.principal_discount exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "maybe_value%6#0"
      ]
    },
    "2534": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "val_as_bytes%5#0"
      ]
    },
    "2535": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0",
        "val_as_bytes%5#0 (copy)"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%5#0 (copy)"
      ]
    },
    "2536": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%1#0",
        "maybe_value%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "val_as_bytes%5#0",
        "bitlen%1#0"
      ]
    },
    "2537": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bitlen%1#0",
        "maybe_value%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "val_as_bytes%5#0",
        "bitlen%1#0",
        "16"
      ]
    },
    "2539": {
      "op": "<=",
      "defined_out": [
        "maybe_value%0#0",
        "no_overflow%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "val_as_bytes%5#0",
        "no_overflow%1#0"
      ]
    },
    "2540": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "val_as_bytes%5#0"
      ]
    },
    "2541": {
      "op": "extract 6 2",
      "defined_out": [
        "maybe_value%0#0",
        "uint16%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0"
      ]
    },
    "2544": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "0"
      ]
    },
    "2545": {
      "op": "bytec 21 // \"interest_rate\"",
      "defined_out": [
        "\"interest_rate\"",
        "0",
        "maybe_value%0#0",
        "uint16%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "0",
        "\"interest_rate\""
      ]
    },
    "2547": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%0#0",
        "maybe_value%7#0",
        "uint16%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "2548": {
      "error": "check self.interest_rate exists",
      "op": "assert // check self.interest_rate exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "maybe_value%7#0"
      ]
    },
    "2549": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "uint16%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "val_as_bytes%6#0"
      ]
    },
    "2550": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "uint16%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0",
        "val_as_bytes%6#0 (copy)"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "val_as_bytes%6#0",
        "val_as_bytes%6#0 (copy)"
      ]
    },
    "2551": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%2#0",
        "maybe_value%0#0",
        "uint16%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "val_as_bytes%6#0",
        "bitlen%2#0"
      ]
    },
    "2552": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "val_as_bytes%6#0",
        "bitlen%2#0",
        "16"
      ]
    },
    "2554": {
      "op": "<=",
      "defined_out": [
        "maybe_value%0#0",
        "no_overflow%2#0",
        "uint16%0#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "val_as_bytes%6#0",
        "no_overflow%2#0"
      ]
    },
    "2555": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "val_as_bytes%6#0"
      ]
    },
    "2556": {
      "op": "extract 6 2",
      "defined_out": [
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0"
      ]
    },
    "2559": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "0"
      ]
    },
    "2560": {
      "op": "bytec 4 // \"total_units\"",
      "defined_out": [
        "\"total_units\"",
        "0",
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "0",
        "\"total_units\""
      ]
    },
    "2562": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%0#0",
        "maybe_value%8#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "2563": {
      "error": "check self.total_units exists",
      "op": "assert // check self.total_units exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "maybe_value%8#0"
      ]
    },
    "2564": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0"
      ]
    },
    "2565": {
      "op": "uncover 6",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "maybe_value%0#0"
      ]
    },
    "2567": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "2568": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0"
      ]
    },
    "2569": {
      "op": "bytec 12 // \"primary_distribution_opening_date\"",
      "defined_out": [
        "\"primary_distribution_opening_date\"",
        "0",
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0",
        "\"primary_distribution_opening_date\""
      ]
    },
    "2571": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%0#0",
        "maybe_value%10#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "2572": {
      "error": "check self.primary_distribution_opening_date exists",
      "op": "assert // check self.primary_distribution_opening_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%10#0"
      ]
    },
    "2573": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "2574": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "2575": {
      "op": "bytec 13 // \"primary_distribution_closure_date\"",
      "defined_out": [
        "\"primary_distribution_closure_date\"",
        "0",
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0",
        "\"primary_distribution_closure_date\""
      ]
    },
    "2577": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%0#0",
        "maybe_value%11#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "2578": {
      "error": "check self.primary_distribution_closure_date exists",
      "op": "assert // check self.primary_distribution_closure_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%11#0"
      ]
    },
    "2579": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "2580": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "2581": {
      "op": "bytec 14 // \"issuance_date\"",
      "defined_out": [
        "\"issuance_date\"",
        "0",
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "\"issuance_date\""
      ]
    },
    "2583": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%0#0",
        "maybe_value%12#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "2584": {
      "error": "check self.issuance_date exists",
      "op": "assert // check self.issuance_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%12#0"
      ]
    },
    "2585": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "2586": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0"
      ]
    },
    "2587": {
      "op": "bytec_3 // \"maturity_date\"",
      "defined_out": [
        "\"maturity_date\"",
        "0",
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0",
        "\"maturity_date\""
      ]
    },
    "2588": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "2589": {
      "error": "check self.maturity_date exists",
      "op": "assert // check self.maturity_date exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%13#0"
      ]
    },
    "2590": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "2591": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0"
      ]
    },
    "2592": {
      "op": "bytec 17 // \"suspended\"",
      "defined_out": [
        "\"suspended\"",
        "0",
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0",
        "\"suspended\""
      ]
    },
    "2594": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%14#0",
        "maybe_value%0#0",
        "maybe_value%14#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%14#0",
        "maybe_exists%14#0"
      ]
    },
    "2595": {
      "error": "check self.suspended exists",
      "op": "assert // check self.suspended exists",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%14#0"
      ]
    },
    "2596": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0",
        "maybe_value%14#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%14#0",
        "0x00"
      ]
    },
    "2599": {
      "op": "intc_0 // 0",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%14#0",
        "0x00",
        "0"
      ]
    },
    "2600": {
      "op": "uncover 2",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0x00",
        "0",
        "maybe_value%14#0"
      ]
    },
    "2602": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0"
      ]
    },
    "2603": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "performance#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "performance#0"
      ]
    },
    "2605": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "performance#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "val_as_bytes%13#0"
      ]
    },
    "2606": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "performance#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%13#0 (copy)",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "val_as_bytes%13#0",
        "val_as_bytes%13#0 (copy)"
      ]
    },
    "2607": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%3#0",
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "performance#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "val_as_bytes%13#0",
        "bitlen%3#0"
      ]
    },
    "2608": {
      "op": "intc_2 // 8",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "val_as_bytes%13#0",
        "bitlen%3#0",
        "8"
      ]
    },
    "2609": {
      "op": "<=",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "no_overflow%3#0",
        "performance#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "val_as_bytes%13#0",
        "no_overflow%3#0"
      ]
    },
    "2610": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "val_as_bytes%13#0"
      ]
    },
    "2611": {
      "op": "extract 7 1",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%0#0",
        "performance#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "uint8%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0"
      ]
    },
    "2614": {
      "op": "uncover 14",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "2616": {
      "op": "uncover 14",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2618": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#0",
        "performance#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "uint8%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2619": {
      "op": "uncover 13",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "2621": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "performance#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "uint8%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%3#0",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2622": {
      "op": "uncover 12",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "2624": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%0#0",
        "performance#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%0#0",
        "uint8%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "uint8%0#0",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2625": {
      "op": "uncover 11",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%4#0",
        "uint8%0#0"
      ]
    },
    "2627": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%5#0",
        "maybe_value%0#0",
        "performance#0",
        "uint16%0#0",
        "uint16%1#0",
        "uint8%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "uint16%0#0",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2628": {
      "op": "uncover 10",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%5#0",
        "uint16%0#0"
      ]
    },
    "2630": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#0",
        "performance#0",
        "uint16%1#0",
        "uint8%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "uint16%1#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2631": {
      "op": "uncover 9",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%6#0",
        "uint16%1#0"
      ]
    },
    "2633": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#0",
        "performance#0",
        "uint8%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2634": {
      "op": "uncover 8",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%7#0"
      ]
    },
    "2636": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0",
        "performance#0",
        "uint8%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2637": {
      "op": "uncover 7",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%8#0"
      ]
    },
    "2639": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#0",
        "performance#0",
        "uint8%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2640": {
      "op": "uncover 6",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%9#0"
      ]
    },
    "2642": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%10#0",
        "maybe_value%0#0",
        "performance#0",
        "uint8%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2643": {
      "op": "uncover 5",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%10#0"
      ]
    },
    "2645": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%11#0",
        "maybe_value%0#0",
        "performance#0",
        "uint8%1#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "2646": {
      "op": "uncover 4",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%11#0"
      ]
    },
    "2648": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%12#0",
        "maybe_value%0#0",
        "performance#0",
        "uint8%1#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "val_as_bytes%12#0",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2649": {
      "op": "uncover 3",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%12#0"
      ]
    },
    "2651": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%13#0",
        "maybe_value%0#0",
        "performance#0",
        "uint8%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_bool%0#0",
        "uint8%1#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "2652": {
      "op": "uncover 2",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "uint8%1#0",
        "encoded_tuple_buffer%13#0",
        "encoded_bool%0#0"
      ]
    },
    "2654": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "maybe_value%0#0",
        "performance#0",
        "uint8%1#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "uint8%1#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "2655": {
      "op": "swap",
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_tuple_buffer%14#0",
        "uint8%1#0"
      ]
    },
    "2656": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0",
        "maybe_value%0#0",
        "performance#0"
      ],
      "stack_out": [
        "performance#0",
        "maybe_value%0#0",
        "performance#8",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "2657": {
      "op": "frame_bury 0"
    },
    "2659": {
      "retsub": true,
      "op": "retsub"
    },
    "2660": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_account_info",
      "params": {
        "holding_address#0": "bytes"
      },
      "block": "get_account_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2663": {
      "op": "bytec 5 // 0x52333023",
      "defined_out": [
        "0x52333023"
      ],
      "stack_out": [
        "0x52333023"
      ]
    },
    "2665": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ],
      "stack_out": [
        "0x52333023",
        "holding_address#0 (copy)"
      ]
    },
    "2667": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#1"
      ]
    },
    "2668": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#1",
        "box_prefixed_key%0#1 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "box_prefixed_key%0#1 (copy)"
      ]
    },
    "2669": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#1",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#1",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2670": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2672": {
      "error": "Invalid account holding address",
      "op": "assert // Invalid account holding address",
      "stack_out": [
        "box_prefixed_key%0#1"
      ]
    },
    "2673": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2674": {
      "error": "check self.account entry exists",
      "op": "assert // check self.account entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2675": {
      "retsub": true,
      "op": "retsub"
    },
    "2676": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_time_events",
      "params": {},
      "block": "get_time_events",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2679": {
      "op": "pushbytes 0x0000"
    },
    "2683": {
      "op": "intc_0 // 0"
    },
    "2684": {
      "op": "bytec_1 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "0",
        "\"status\""
      ]
    },
    "2685": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2686": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "time_events#0",
        "maybe_value%0#0"
      ]
    },
    "2687": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "maybe_value%0#0",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "maybe_value%0#0",
        "100"
      ]
    },
    "2689": {
      "op": "==",
      "defined_out": [
        "time_events#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "time_events#0",
        "tmp%0#1"
      ]
    },
    "2690": {
      "op": "bz get_time_events_after_if_else@2",
      "stack_out": [
        "time_events#0"
      ]
    },
    "2693": {
      "op": "bytec 24 // 0x74696d654576656e7473",
      "defined_out": [
        "0x74696d654576656e7473",
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "0x74696d654576656e7473"
      ]
    },
    "2695": {
      "op": "box_get",
      "stack_out": [
        "time_events#0",
        "time_events#0",
        "maybe_exists%0#0"
      ]
    },
    "2696": {
      "op": "swap",
      "stack_out": [
        "time_events#0",
        "maybe_exists%0#0",
        "time_events#0"
      ]
    },
    "2697": {
      "op": "frame_bury 0",
      "stack_out": [
        "time_events#0",
        "maybe_exists%0#0"
      ]
    },
    "2699": {
      "error": "check self.time_events exists",
      "op": "assert // check self.time_events exists",
      "stack_out": [
        "time_events#0"
      ]
    },
    "2700": {
      "block": "get_time_events_after_if_else@2",
      "stack_in": [
        "time_events#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "time_events#0"
      ],
      "stack_out": [
        "time_events#0",
        "time_events#0"
      ]
    },
    "2702": {
      "op": "swap"
    },
    "2703": {
      "retsub": true,
      "op": "retsub"
    },
    "2704": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_secondary_market_schedule",
      "params": {},
      "block": "get_secondary_market_schedule",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2705": {
      "op": "bytec 15 // \"secondary_market_opening_date\"",
      "defined_out": [
        "\"secondary_market_opening_date\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"secondary_market_opening_date\""
      ]
    },
    "2707": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2708": {
      "error": "check self.secondary_market_opening_date exists",
      "op": "assert // check self.secondary_market_opening_date exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2709": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2710": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "2711": {
      "op": "bytec 16 // \"secondary_market_closure_date\"",
      "defined_out": [
        "\"secondary_market_closure_date\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"secondary_market_closure_date\""
      ]
    },
    "2713": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2714": {
      "error": "check self.secondary_market_closure_date exists",
      "op": "assert // check self.secondary_market_closure_date exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "2715": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2716": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "2717": {
      "op": "pushbytes 0x0002",
      "defined_out": [
        "0x0002",
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0",
        "0x0002"
      ]
    },
    "2721": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "result%1#0"
      ]
    },
    "2722": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "2723": {
      "retsub": true,
      "op": "retsub"
    },
    "2724": {
      "subroutine": "smart_contracts.base_d_asa.contract.BaseDAsa.get_asset_metadata",
      "params": {},
      "block": "get_asset_metadata",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2725": {
      "op": "bytec 9 // \"metadata\"",
      "defined_out": [
        "\"metadata\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"metadata\""
      ]
    },
    "2727": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2728": {
      "error": "check self.metadata exists",
      "op": "assert // check self.metadata exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2729": {
      "retsub": true,
      "op": "retsub"
    }
  }
}